/* Generated by Cython 0.29.33 */

/* BEGIN: Cython Metadata
{
    "distutils": {
        "depends": [
            "fmsne/lbfgs.h",
            "fmsne/vptree.h"
        ],
        "include_dirs": [
            "fmsne"
        ],
        "language": "c++",
        "name": "fmsne_implem",
        "sources": [
            "fmsne/fmsne_implem.pyx",
            "fmsne/lbfgs.c"
        ]
    },
    "module_name": "fmsne_implem"
}
END: Cython Metadata */

#ifndef PY_SSIZE_T_CLEAN
#define PY_SSIZE_T_CLEAN
#endif /* PY_SSIZE_T_CLEAN */
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03030000)
    #error Cython requires Python 2.6+ or Python 3.3+.
#else
#define CYTHON_ABI "0_29_33"
#define CYTHON_HEX_VERSION 0x001D21F0
#define CYTHON_FUTURE_DIVISION 1
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#define __PYX_COMMA ,
#ifndef HAVE_LONG_LONG
  #if PY_VERSION_HEX >= 0x02070000
    #define HAVE_LONG_LONG
  #endif
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_NOGIL 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 0
  #endif
#elif defined(PYSTON_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_NOGIL 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 0
  #endif
#elif defined(PY_NOGIL)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_NOGIL 1
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #ifndef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT 1
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE 1
  #endif
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #define CYTHON_COMPILING_IN_NOGIL 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYTYPE_LOOKUP
    #define CYTHON_USE_PYTYPE_LOOKUP 0
  #elif !defined(CYTHON_USE_PYTYPE_LOOKUP)
    #define CYTHON_USE_PYTYPE_LOOKUP 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 0
  #elif !defined(CYTHON_USE_PYLONG_INTERNALS)
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0 || PY_VERSION_HEX >= 0x030B00A2
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #if PY_VERSION_HEX >= 0x030B00A4
    #undef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 0
  #elif !defined(CYTHON_FAST_THREAD_STATE)
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL (PY_VERSION_HEX < 0x030A0000)
  #endif
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT (PY_VERSION_HEX >= 0x03050000)
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE (PY_VERSION_HEX >= 0x030400a1)
  #endif
  #ifndef CYTHON_USE_DICT_VERSIONS
    #define CYTHON_USE_DICT_VERSIONS (PY_VERSION_HEX >= 0x030600B1)
  #endif
  #if PY_VERSION_HEX >= 0x030B00A4
    #undef CYTHON_USE_EXC_INFO_STACK
    #define CYTHON_USE_EXC_INFO_STACK 0
  #elif !defined(CYTHON_USE_EXC_INFO_STACK)
    #define CYTHON_USE_EXC_INFO_STACK (PY_VERSION_HEX >= 0x030700A3)
  #endif
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 1
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #if PY_MAJOR_VERSION < 3
    #include "longintrepr.h"
  #endif
  #undef SHIFT
  #undef BASE
  #undef MASK
  #ifdef SIZEOF_VOID_P
    enum { __pyx_check_sizeof_voidp = 1 / (int)(SIZEOF_VOID_P == sizeof(void*)) };
  #endif
#endif
#ifndef __has_attribute
  #define __has_attribute(x) 0
#endif
#ifndef __has_cpp_attribute
  #define __has_cpp_attribute(x) 0
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_MAYBE_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_MAYBE_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
           typedef unsigned char     uint8_t;
           typedef unsigned int      uint32_t;
        #else
           typedef unsigned __int8   uint8_t;
           typedef unsigned __int32  uint32_t;
        #endif
    #endif
#else
   #include <stdint.h>
#endif
#ifndef CYTHON_FALLTHROUGH
  #if defined(__cplusplus) && __cplusplus >= 201103L
    #if __has_cpp_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH [[fallthrough]]
    #elif __has_cpp_attribute(clang::fallthrough)
      #define CYTHON_FALLTHROUGH [[clang::fallthrough]]
    #elif __has_cpp_attribute(gnu::fallthrough)
      #define CYTHON_FALLTHROUGH [[gnu::fallthrough]]
    #endif
  #endif
  #ifndef CYTHON_FALLTHROUGH
    #if __has_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH __attribute__((fallthrough))
    #else
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
  #if defined(__clang__ ) && defined(__apple_build_version__)
    #if __apple_build_version__ < 7000000
      #undef  CYTHON_FALLTHROUGH
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
#endif

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(U other) { return *ptr == other; }
    template<typename U> bool operator !=(U other) { return *ptr != other; }
  private:
    T *ptr;
};

#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
  #define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_DefaultClassType PyType_Type
#if PY_VERSION_HEX >= 0x030B00A1
    static CYTHON_INLINE PyCodeObject* __Pyx_PyCode_New(int a, int k, int l, int s, int f,
                                                    PyObject *code, PyObject *c, PyObject* n, PyObject *v,
                                                    PyObject *fv, PyObject *cell, PyObject* fn,
                                                    PyObject *name, int fline, PyObject *lnos) {
        PyObject *kwds=NULL, *argcount=NULL, *posonlyargcount=NULL, *kwonlyargcount=NULL;
        PyObject *nlocals=NULL, *stacksize=NULL, *flags=NULL, *replace=NULL, *call_result=NULL, *empty=NULL;
        const char *fn_cstr=NULL;
        const char *name_cstr=NULL;
        PyCodeObject* co=NULL;
        PyObject *type, *value, *traceback;
        PyErr_Fetch(&type, &value, &traceback);
        if (!(kwds=PyDict_New())) goto end;
        if (!(argcount=PyLong_FromLong(a))) goto end;
        if (PyDict_SetItemString(kwds, "co_argcount", argcount) != 0) goto end;
        if (!(posonlyargcount=PyLong_FromLong(0))) goto end;
        if (PyDict_SetItemString(kwds, "co_posonlyargcount", posonlyargcount) != 0) goto end;
        if (!(kwonlyargcount=PyLong_FromLong(k))) goto end;
        if (PyDict_SetItemString(kwds, "co_kwonlyargcount", kwonlyargcount) != 0) goto end;
        if (!(nlocals=PyLong_FromLong(l))) goto end;
        if (PyDict_SetItemString(kwds, "co_nlocals", nlocals) != 0) goto end;
        if (!(stacksize=PyLong_FromLong(s))) goto end;
        if (PyDict_SetItemString(kwds, "co_stacksize", stacksize) != 0) goto end;
        if (!(flags=PyLong_FromLong(f))) goto end;
        if (PyDict_SetItemString(kwds, "co_flags", flags) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_code", code) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_consts", c) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_names", n) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_varnames", v) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_freevars", fv) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_cellvars", cell) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_linetable", lnos) != 0) goto end;
        if (!(fn_cstr=PyUnicode_AsUTF8AndSize(fn, NULL))) goto end;
        if (!(name_cstr=PyUnicode_AsUTF8AndSize(name, NULL))) goto end;
        if (!(co = PyCode_NewEmpty(fn_cstr, name_cstr, fline))) goto end;
        if (!(replace = PyObject_GetAttrString((PyObject*)co, "replace"))) goto cleanup_code_too;
        if (!(empty = PyTuple_New(0))) goto cleanup_code_too; // unfortunately __pyx_empty_tuple isn't available here
        if (!(call_result = PyObject_Call(replace, empty, kwds))) goto cleanup_code_too;
        Py_XDECREF((PyObject*)co);
        co = (PyCodeObject*)call_result;
        call_result = NULL;
        if (0) {
            cleanup_code_too:
            Py_XDECREF((PyObject*)co);
            co = NULL;
        }
        end:
        Py_XDECREF(kwds);
        Py_XDECREF(argcount);
        Py_XDECREF(posonlyargcount);
        Py_XDECREF(kwonlyargcount);
        Py_XDECREF(nlocals);
        Py_XDECREF(stacksize);
        Py_XDECREF(replace);
        Py_XDECREF(call_result);
        Py_XDECREF(empty);
        if (type) {
            PyErr_Restore(type, value, traceback);
        }
        return co;
    }
#else
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#endif
  #define __Pyx_DefaultClassType PyType_Type
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#ifndef METH_STACKLESS
  #define METH_STACKLESS 0
#endif
#if PY_VERSION_HEX <= 0x030700A3 || !defined(METH_FASTCALL)
  #ifndef METH_FASTCALL
     #define METH_FASTCALL 0x80
  #endif
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject *const *args, Py_ssize_t nargs);
  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject *const *args,
                                                          Py_ssize_t nargs, PyObject *kwnames);
#else
  #define __Pyx_PyCFunctionFast _PyCFunctionFast
  #define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords
#endif
#if CYTHON_FAST_PYCCALL
#define __Pyx_PyFastCFunction_Check(func)\
    ((PyCFunction_Check(func) && (METH_FASTCALL == (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)))))
#else
#define __Pyx_PyFastCFunction_Check(func) 0
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030400A1
  #define PyMem_RawMalloc(n)           PyMem_Malloc(n)
  #define PyMem_RawRealloc(p, n)       PyMem_Realloc(p, n)
  #define PyMem_RawFree(p)             PyMem_Free(p)
#endif
#if CYTHON_COMPILING_IN_PYSTON
  #define __Pyx_PyCode_HasFreeVars(co)  PyCode_HasFreeVars(co)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno) PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#if !CYTHON_FAST_THREAD_STATE || PY_VERSION_HEX < 0x02070000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#elif PY_VERSION_HEX >= 0x03060000
  #define __Pyx_PyThreadState_Current _PyThreadState_UncheckedGet()
#elif PY_VERSION_HEX >= 0x03000000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#else
  #define __Pyx_PyThreadState_Current _PyThreadState_Current
#endif
#if PY_VERSION_HEX < 0x030700A2 && !defined(PyThread_tss_create) && !defined(Py_tss_NEEDS_INIT)
#include "pythread.h"
#define Py_tss_NEEDS_INIT 0
typedef int Py_tss_t;
static CYTHON_INLINE int PyThread_tss_create(Py_tss_t *key) {
  *key = PyThread_create_key();
  return 0;
}
static CYTHON_INLINE Py_tss_t * PyThread_tss_alloc(void) {
  Py_tss_t *key = (Py_tss_t *)PyObject_Malloc(sizeof(Py_tss_t));
  *key = Py_tss_NEEDS_INIT;
  return key;
}
static CYTHON_INLINE void PyThread_tss_free(Py_tss_t *key) {
  PyObject_Free(key);
}
static CYTHON_INLINE int PyThread_tss_is_created(Py_tss_t *key) {
  return *key != Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE void PyThread_tss_delete(Py_tss_t *key) {
  PyThread_delete_key(*key);
  *key = Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE int PyThread_tss_set(Py_tss_t *key, void *value) {
  return PyThread_set_key_value(*key, value);
}
static CYTHON_INLINE void * PyThread_tss_get(Py_tss_t *key) {
  return PyThread_get_key_value(*key);
}
#endif
#if CYTHON_COMPILING_IN_CPYTHON || defined(_PyDict_NewPresized)
#define __Pyx_PyDict_NewPresized(n)  ((n <= 8) ? PyDict_New() : _PyDict_NewPresized(n))
#else
#define __Pyx_PyDict_NewPresized(n)  PyDict_New()
#endif
#if PY_MAJOR_VERSION >= 3 || CYTHON_FUTURE_DIVISION
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1 && CYTHON_USE_UNICODE_INTERNALS
#define __Pyx_PyDict_GetItemStr(dict, name)  _PyDict_GetItem_KnownHash(dict, name, ((PyASCIIObject *) name)->hash)
#else
#define __Pyx_PyDict_GetItemStr(dict, name)  PyDict_GetItem(dict, name)
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #if PY_VERSION_HEX >= 0x030C0000
    #define __Pyx_PyUnicode_READY(op)       (0)
  #else
    #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                                0 : _PyUnicode_Ready((PyObject *)(op)))
  #endif
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, ch)
  #if PY_VERSION_HEX >= 0x030C0000
    #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_LENGTH(u))
  #else
    #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03090000
    #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : ((PyCompactUnicodeObject *)(u))->wstr_length))
    #else
    #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
    #endif
  #endif
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535 : 1114111)
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyByteArray_Check)
  #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Format)
  #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None || (PyString_Check(b) && !PyString_CheckExact(b)))) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None || (PyUnicode_Check(b) && !PyUnicode_CheckExact(b)))) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#ifndef PyObject_Unicode
  #define PyObject_Unicode             PyObject_Str
#endif
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#if PY_VERSION_HEX >= 0x030900A4
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_SET_REFCNT(obj, refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SET_SIZE(obj, size)
#else
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_REFCNT(obj) = (refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SIZE(obj) = (size)
#endif
#if CYTHON_ASSUME_SAFE_MACROS
  #define __Pyx_PySequence_SIZE(seq)  Py_SIZE(seq)
#else
  #define __Pyx_PySequence_SIZE(seq)  PySequence_Size(seq)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   __Pyx_PyIndex_AsHash_t
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   __Pyx_PyIndex_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? ((void)(klass), PyMethod_New(func, self)) : __Pyx_NewRef(func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef __Pyx_PyAsyncMethodsStruct
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
#endif

#if defined(_WIN32) || defined(WIN32) || defined(MS_WINDOWS)
  #if !defined(_USE_MATH_DEFINES)
    #define _USE_MATH_DEFINES
  #endif
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif

#define __PYX_MARK_ERR_POS(f_index, lineno) \
    { __pyx_filename = __pyx_f[f_index]; (void)__pyx_filename; __pyx_lineno = lineno; (void)__pyx_lineno; __pyx_clineno = __LINE__; (void)__pyx_clineno; }
#define __PYX_ERR(f_index, lineno, Ln_error) \
    { __PYX_MARK_ERR_POS(f_index, lineno) goto Ln_error; }

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__fmsne_implem
#define __PYX_HAVE_API__fmsne_implem
/* Early includes */
#include <string.h>
#include <stdio.h>
#include "numpy/arrayobject.h"
#include "numpy/ndarrayobject.h"
#include "numpy/ndarraytypes.h"
#include "numpy/arrayscalars.h"
#include "numpy/ufuncobject.h"

    /* NumPy API declarations from "numpy/__init__.pxd" */
    
#include <math.h>
#include <algorithm>
#include <stdlib.h>
#include <float.h>
#include "lbfgs.h"
#include "vptree.h"
#include "pythread.h"
#include "pystate.h"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#if defined(PYREX_WITHOUT_ASSERTIONS) && !defined(CYTHON_WITHOUT_ASSERTIONS)
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_UTF8 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT (PY_MAJOR_VERSION >= 3 && __PYX_DEFAULT_STRING_ENCODING_IS_UTF8)
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
static CYTHON_INLINE int __Pyx_is_valid_index(Py_ssize_t i, Py_ssize_t limit) {
    return (size_t) i < (size_t) limit;
}
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER)
    #define __Pyx_sst_abs(value) ((Py_ssize_t)_abs64(value))
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyObject_AsWritableString(s)    ((char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u) {
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b);
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
#define __Pyx_PySequence_Tuple(obj)\
    (likely(PyTuple_CheckExact(obj)) ? __Pyx_NewRef(obj) : PySequence_Tuple(obj))
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
static CYTHON_INLINE Py_hash_t __Pyx_PyIndex_AsHash_t(PyObject*);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#define __Pyx_PyNumber_Float(x) (PyFloat_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Float(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c) + 1);
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }

static PyObject *__pyx_m = NULL;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_cython_runtime = NULL;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static PyObject *__pyx_empty_unicode;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;

/* Header.proto */
#if !defined(CYTHON_CCOMPLEX)
  #if defined(__cplusplus)
    #define CYTHON_CCOMPLEX 1
  #elif defined(_Complex_I)
    #define CYTHON_CCOMPLEX 1
  #else
    #define CYTHON_CCOMPLEX 0
  #endif
#endif
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    #include <complex>
  #else
    #include <complex.h>
  #endif
#endif
#if CYTHON_CCOMPLEX && !defined(__cplusplus) && defined(__sun__) && defined(__GNUC__)
  #undef _Complex_I
  #define _Complex_I 1.0fj
#endif


static const char *__pyx_f[] = {
  "fmsne/fmsne_implem.pyx",
  "__init__.pxd",
  "stringsource",
  "type.pxd",
};
/* MemviewSliceStruct.proto */
struct __pyx_memoryview_obj;
typedef struct {
  struct __pyx_memoryview_obj *memview;
  char *data;
  Py_ssize_t shape[8];
  Py_ssize_t strides[8];
  Py_ssize_t suboffsets[8];
} __Pyx_memviewslice;
#define __Pyx_MemoryView_Len(m)  (m.shape[0])

/* Atomics.proto */
#include <pythread.h>
#ifndef CYTHON_ATOMICS
    #define CYTHON_ATOMICS 1
#endif
#define __PYX_CYTHON_ATOMICS_ENABLED() CYTHON_ATOMICS
#define __pyx_atomic_int_type int
#if CYTHON_ATOMICS && (__GNUC__ >= 5 || (__GNUC__ == 4 &&\
                    (__GNUC_MINOR__ > 1 ||\
                    (__GNUC_MINOR__ == 1 && __GNUC_PATCHLEVEL__ >= 2))))
    #define __pyx_atomic_incr_aligned(value) __sync_fetch_and_add(value, 1)
    #define __pyx_atomic_decr_aligned(value) __sync_fetch_and_sub(value, 1)
    #ifdef __PYX_DEBUG_ATOMICS
        #warning "Using GNU atomics"
    #endif
#elif CYTHON_ATOMICS && defined(_MSC_VER) && CYTHON_COMPILING_IN_NOGIL
    #include <intrin.h>
    #undef __pyx_atomic_int_type
    #define __pyx_atomic_int_type long
    #pragma intrinsic (_InterlockedExchangeAdd)
    #define __pyx_atomic_incr_aligned(value) _InterlockedExchangeAdd(value, 1)
    #define __pyx_atomic_decr_aligned(value) _InterlockedExchangeAdd(value, -1)
    #ifdef __PYX_DEBUG_ATOMICS
        #pragma message ("Using MSVC atomics")
    #endif
#else
    #undef CYTHON_ATOMICS
    #define CYTHON_ATOMICS 0
    #ifdef __PYX_DEBUG_ATOMICS
        #warning "Not using atomics"
    #endif
#endif
typedef volatile __pyx_atomic_int_type __pyx_atomic_int;
#if CYTHON_ATOMICS
    #define __pyx_add_acquisition_count(memview)\
             __pyx_atomic_incr_aligned(__pyx_get_slice_count_pointer(memview))
    #define __pyx_sub_acquisition_count(memview)\
            __pyx_atomic_decr_aligned(__pyx_get_slice_count_pointer(memview))
#else
    #define __pyx_add_acquisition_count(memview)\
            __pyx_add_acquisition_count_locked(__pyx_get_slice_count_pointer(memview), memview->lock)
    #define __pyx_sub_acquisition_count(memview)\
            __pyx_sub_acquisition_count_locked(__pyx_get_slice_count_pointer(memview), memview->lock)
#endif

/* ForceInitThreads.proto */
#ifndef __PYX_FORCE_INIT_THREADS
  #define __PYX_FORCE_INIT_THREADS 0
#endif

/* NoFastGil.proto */
#define __Pyx_PyGILState_Ensure PyGILState_Ensure
#define __Pyx_PyGILState_Release PyGILState_Release
#define __Pyx_FastGIL_Remember()
#define __Pyx_FastGIL_Forget()
#define __Pyx_FastGilFuncInit()

/* BufferFormatStructs.proto */
#define IS_UNSIGNED(type) (((type) -1) > 0)
struct __Pyx_StructField_;
#define __PYX_BUF_FLAGS_PACKED_STRUCT (1 << 0)
typedef struct {
  const char* name;
  struct __Pyx_StructField_* fields;
  size_t size;
  size_t arraysize[8];
  int ndim;
  char typegroup;
  char is_unsigned;
  int flags;
} __Pyx_TypeInfo;
typedef struct __Pyx_StructField_ {
  __Pyx_TypeInfo* type;
  const char* name;
  size_t offset;
} __Pyx_StructField;
typedef struct {
  __Pyx_StructField* field;
  size_t parent_offset;
} __Pyx_BufFmt_StackElem;
typedef struct {
  __Pyx_StructField root;
  __Pyx_BufFmt_StackElem* head;
  size_t fmt_offset;
  size_t new_count, enc_count;
  size_t struct_alignment;
  int is_complex;
  char enc_type;
  char new_packmode;
  char enc_packmode;
  char is_valid_array;
} __Pyx_BufFmt_Context;


/* "../../anaconda3/lib/python3.10/site-packages/numpy/__init__.pxd":689
 * # in Cython to enable them only on the right systems.
 * 
 * ctypedef npy_int8       int8_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t
 */
typedef npy_int8 __pyx_t_5numpy_int8_t;

/* "../../anaconda3/lib/python3.10/site-packages/numpy/__init__.pxd":690
 * 
 * ctypedef npy_int8       int8_t
 * ctypedef npy_int16      int16_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int32      int32_t
 * ctypedef npy_int64      int64_t
 */
typedef npy_int16 __pyx_t_5numpy_int16_t;

/* "../../anaconda3/lib/python3.10/site-packages/numpy/__init__.pxd":691
 * ctypedef npy_int8       int8_t
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int64      int64_t
 * #ctypedef npy_int96      int96_t
 */
typedef npy_int32 __pyx_t_5numpy_int32_t;

/* "../../anaconda3/lib/python3.10/site-packages/numpy/__init__.pxd":692
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t
 * ctypedef npy_int64      int64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_int96      int96_t
 * #ctypedef npy_int128     int128_t
 */
typedef npy_int64 __pyx_t_5numpy_int64_t;

/* "../../anaconda3/lib/python3.10/site-packages/numpy/__init__.pxd":696
 * #ctypedef npy_int128     int128_t
 * 
 * ctypedef npy_uint8      uint8_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t
 */
typedef npy_uint8 __pyx_t_5numpy_uint8_t;

/* "../../anaconda3/lib/python3.10/site-packages/numpy/__init__.pxd":697
 * 
 * ctypedef npy_uint8      uint8_t
 * ctypedef npy_uint16     uint16_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint32     uint32_t
 * ctypedef npy_uint64     uint64_t
 */
typedef npy_uint16 __pyx_t_5numpy_uint16_t;

/* "../../anaconda3/lib/python3.10/site-packages/numpy/__init__.pxd":698
 * ctypedef npy_uint8      uint8_t
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint64     uint64_t
 * #ctypedef npy_uint96     uint96_t
 */
typedef npy_uint32 __pyx_t_5numpy_uint32_t;

/* "../../anaconda3/lib/python3.10/site-packages/numpy/__init__.pxd":699
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t
 * ctypedef npy_uint64     uint64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_uint96     uint96_t
 * #ctypedef npy_uint128    uint128_t
 */
typedef npy_uint64 __pyx_t_5numpy_uint64_t;

/* "../../anaconda3/lib/python3.10/site-packages/numpy/__init__.pxd":703
 * #ctypedef npy_uint128    uint128_t
 * 
 * ctypedef npy_float32    float32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_float64    float64_t
 * #ctypedef npy_float80    float80_t
 */
typedef npy_float32 __pyx_t_5numpy_float32_t;

/* "../../anaconda3/lib/python3.10/site-packages/numpy/__init__.pxd":704
 * 
 * ctypedef npy_float32    float32_t
 * ctypedef npy_float64    float64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_float80    float80_t
 * #ctypedef npy_float128   float128_t
 */
typedef npy_float64 __pyx_t_5numpy_float64_t;

/* "../../anaconda3/lib/python3.10/site-packages/numpy/__init__.pxd":713
 * # The int types are mapped a bit surprising --
 * # numpy.int corresponds to 'l' and numpy.long to 'q'
 * ctypedef npy_long       int_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longlong   long_t
 * ctypedef npy_longlong   longlong_t
 */
typedef npy_long __pyx_t_5numpy_int_t;

/* "../../anaconda3/lib/python3.10/site-packages/numpy/__init__.pxd":714
 * # numpy.int corresponds to 'l' and numpy.long to 'q'
 * ctypedef npy_long       int_t
 * ctypedef npy_longlong   long_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longlong   longlong_t
 * 
 */
typedef npy_longlong __pyx_t_5numpy_long_t;

/* "../../anaconda3/lib/python3.10/site-packages/numpy/__init__.pxd":715
 * ctypedef npy_long       int_t
 * ctypedef npy_longlong   long_t
 * ctypedef npy_longlong   longlong_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_ulong      uint_t
 */
typedef npy_longlong __pyx_t_5numpy_longlong_t;

/* "../../anaconda3/lib/python3.10/site-packages/numpy/__init__.pxd":717
 * ctypedef npy_longlong   longlong_t
 * 
 * ctypedef npy_ulong      uint_t             # <<<<<<<<<<<<<<
 * ctypedef npy_ulonglong  ulong_t
 * ctypedef npy_ulonglong  ulonglong_t
 */
typedef npy_ulong __pyx_t_5numpy_uint_t;

/* "../../anaconda3/lib/python3.10/site-packages/numpy/__init__.pxd":718
 * 
 * ctypedef npy_ulong      uint_t
 * ctypedef npy_ulonglong  ulong_t             # <<<<<<<<<<<<<<
 * ctypedef npy_ulonglong  ulonglong_t
 * 
 */
typedef npy_ulonglong __pyx_t_5numpy_ulong_t;

/* "../../anaconda3/lib/python3.10/site-packages/numpy/__init__.pxd":719
 * ctypedef npy_ulong      uint_t
 * ctypedef npy_ulonglong  ulong_t
 * ctypedef npy_ulonglong  ulonglong_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_intp       intp_t
 */
typedef npy_ulonglong __pyx_t_5numpy_ulonglong_t;

/* "../../anaconda3/lib/python3.10/site-packages/numpy/__init__.pxd":721
 * ctypedef npy_ulonglong  ulonglong_t
 * 
 * ctypedef npy_intp       intp_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uintp      uintp_t
 * 
 */
typedef npy_intp __pyx_t_5numpy_intp_t;

/* "../../anaconda3/lib/python3.10/site-packages/numpy/__init__.pxd":722
 * 
 * ctypedef npy_intp       intp_t
 * ctypedef npy_uintp      uintp_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_double     float_t
 */
typedef npy_uintp __pyx_t_5numpy_uintp_t;

/* "../../anaconda3/lib/python3.10/site-packages/numpy/__init__.pxd":724
 * ctypedef npy_uintp      uintp_t
 * 
 * ctypedef npy_double     float_t             # <<<<<<<<<<<<<<
 * ctypedef npy_double     double_t
 * ctypedef npy_longdouble longdouble_t
 */
typedef npy_double __pyx_t_5numpy_float_t;

/* "../../anaconda3/lib/python3.10/site-packages/numpy/__init__.pxd":725
 * 
 * ctypedef npy_double     float_t
 * ctypedef npy_double     double_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longdouble longdouble_t
 * 
 */
typedef npy_double __pyx_t_5numpy_double_t;

/* "../../anaconda3/lib/python3.10/site-packages/numpy/__init__.pxd":726
 * ctypedef npy_double     float_t
 * ctypedef npy_double     double_t
 * ctypedef npy_longdouble longdouble_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_cfloat      cfloat_t
 */
typedef npy_longdouble __pyx_t_5numpy_longdouble_t;
/* Declarations.proto */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    typedef ::std::complex< float > __pyx_t_float_complex;
  #else
    typedef float _Complex __pyx_t_float_complex;
  #endif
#else
    typedef struct { float real, imag; } __pyx_t_float_complex;
#endif
static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float, float);

/* Declarations.proto */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    typedef ::std::complex< double > __pyx_t_double_complex;
  #else
    typedef double _Complex __pyx_t_double_complex;
  #endif
#else
    typedef struct { double real, imag; } __pyx_t_double_complex;
#endif
static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double, double);


/*--- Type declarations ---*/
struct __pyx_array_obj;
struct __pyx_MemviewEnum_obj;
struct __pyx_memoryview_obj;
struct __pyx_memoryviewslice_obj;

/* "../../anaconda3/lib/python3.10/site-packages/numpy/__init__.pxd":728
 * ctypedef npy_longdouble longdouble_t
 * 
 * ctypedef npy_cfloat      cfloat_t             # <<<<<<<<<<<<<<
 * ctypedef npy_cdouble     cdouble_t
 * ctypedef npy_clongdouble clongdouble_t
 */
typedef npy_cfloat __pyx_t_5numpy_cfloat_t;

/* "../../anaconda3/lib/python3.10/site-packages/numpy/__init__.pxd":729
 * 
 * ctypedef npy_cfloat      cfloat_t
 * ctypedef npy_cdouble     cdouble_t             # <<<<<<<<<<<<<<
 * ctypedef npy_clongdouble clongdouble_t
 * 
 */
typedef npy_cdouble __pyx_t_5numpy_cdouble_t;

/* "../../anaconda3/lib/python3.10/site-packages/numpy/__init__.pxd":730
 * ctypedef npy_cfloat      cfloat_t
 * ctypedef npy_cdouble     cdouble_t
 * ctypedef npy_clongdouble clongdouble_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_cdouble     complex_t
 */
typedef npy_clongdouble __pyx_t_5numpy_clongdouble_t;

/* "../../anaconda3/lib/python3.10/site-packages/numpy/__init__.pxd":732
 * ctypedef npy_clongdouble clongdouble_t
 * 
 * ctypedef npy_cdouble     complex_t             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew1(a):
 */
typedef npy_cdouble __pyx_t_5numpy_complex_t;
struct __pyx_t_12fmsne_implem_OpMssne;
struct __pyx_t_12fmsne_implem_OpMstsne;
struct __pyx_t_12fmsne_implem_SpNode;
struct __pyx_t_12fmsne_implem_SpTree;
struct __pyx_t_12fmsne_implem_Opfmssne;
struct __pyx_t_12fmsne_implem_Opfmstsne;
struct __pyx_t_12fmsne_implem_nnRank;

/* "fmsne_implem.pyx":858
 *         return ikd
 * 
 * cdef struct OpMssne:             # <<<<<<<<<<<<<<
 *     Py_ssize_t ns           # Number of scales which are considered in the current multi-scale optimization step
 *     Py_ssize_t N            # Number of data points
 */
struct __pyx_t_12fmsne_implem_OpMssne {
  Py_ssize_t ns;
  Py_ssize_t N;
  Py_ssize_t N_1;
  Py_ssize_t n_components;
  size_t sstx;
  double inv_ns;
  double **simhd_ms;
  double *p_h;
  double *t_h;
  double *simld_ms;
  double **simld_h;
};

/* "fmsne_implem.pyx":1182
 *             a_sym[i][j] *= tot
 * 
 * cdef struct OpMstsne:             # <<<<<<<<<<<<<<
 *     Py_ssize_t N_1          # Number of data points-1
 *     Py_ssize_t n_components # Dimension of the LDS
 */
struct __pyx_t_12fmsne_implem_OpMstsne {
  Py_ssize_t N_1;
  Py_ssize_t n_components;
  size_t sstx;
  double **simhd_ms;
  double **simld;
};

/* "fmsne_implem.pyx":1418
 * #######################################################
 * 
 * cdef struct SpNode:             # <<<<<<<<<<<<<<
 *     # Number of points inside the cell
 *     int npt
 */
struct __pyx_t_12fmsne_implem_SpNode {
  int npt;
  Py_ssize_t dim;
  Py_ssize_t n_sa;
  Py_ssize_t n_childs;
  double *cm;
  double const *min_ax;
  double *mid_ax;
  double const *max_ax;
  double *suppl_attr;
  int has_sa;
  int copy_up_sa;
  int is_leaf;
  double radius;
  struct __pyx_t_12fmsne_implem_SpNode **childs;
  int *has_child;
};

/* "fmsne_implem.pyx":1866
 *     PyMem_Free(node)
 * 
 * cdef struct SpTree:             # <<<<<<<<<<<<<<
 *     # Root of the tree
 *     SpNode* root
 */
struct __pyx_t_12fmsne_implem_SpTree {
  struct __pyx_t_12fmsne_implem_SpNode *root;
  int inter_fct;
  Py_ssize_t N;
};

/* "fmsne_implem.pyx":2516
 *         return ikd
 * 
 * cdef struct Opfmssne:             # <<<<<<<<<<<<<<
 *     Py_ssize_t ns                   # Number of scales which are considered in the current multi-scale optimization step
 *     Py_ssize_t N                    # Number of data points
 */
struct __pyx_t_12fmsne_implem_Opfmssne {
  Py_ssize_t ns;
  Py_ssize_t N;
  Py_ssize_t N_1;
  Py_ssize_t n_components;
  size_t sstx;
  int fit_U;
  Py_ssize_t n_rs;
  double inv_ns;
  double inv_n_rs_f;
  double inv_nsrs;
  double theta_s;
  double ***sim_hd_ms;
  int ***arr_nn;
  int **nnn;
  double *p_h;
  double *t_h;
  double **p_h_rs;
  double **t_h_rs;
  double **sa;
  double *Z;
  double **sX;
  double **Z_rs;
  double ***sX_rs;
  int inter_fct_1;
  int inter_fct_2;
  double *qdiff;
  size_t sbqd;
  size_t sbsa;
  double *sah;
  double **dij_ld;
  Py_ssize_t **ij_dld;
  Py_ssize_t *ni_dld;
  Py_ssize_t ***nn_i_rs_id_dld;
};

/* "fmsne_implem.pyx":3471
 *                 sim_hd_sym[rs][i][m_nn[rs][i][inn]] *= tot
 * 
 * cdef struct Opfmstsne:             # <<<<<<<<<<<<<<
 *     Py_ssize_t N                # Number of data points
 *     Py_ssize_t N_1              # N-1
 */
struct __pyx_t_12fmsne_implem_Opfmstsne {
  Py_ssize_t N;
  Py_ssize_t N_1;
  Py_ssize_t n_components;
  size_t sstx;
  Py_ssize_t n_rs;
  int n_rs_geq1;
  double n_rs_f;
  double inv_n_rs_2f;
  double inv_n_rs_4f;
  double theta_s;
  double ***sim_hd_ms;
  Py_ssize_t ***m_nn;
  Py_ssize_t *nnn_all_rs;
  Py_ssize_t **inn_all_rs;
  double *dsld_all_rs;
  Py_ssize_t ***idnn_in_ars;
  int inter_fct;
  double *qdiff;
};

/* "fmsne_implem.pyx":3982
 * #######################################################
 * 
 * cdef struct nnRank:             # <<<<<<<<<<<<<<
 *     int nn                # Index of a sample
 *     int rank              # Rank of the sample
 */
struct __pyx_t_12fmsne_implem_nnRank {
  int nn;
  int rank;
};

/* "View.MemoryView":106
 * 
 * @cname("__pyx_array")
 * cdef class array:             # <<<<<<<<<<<<<<
 * 
 *     cdef:
 */
struct __pyx_array_obj {
  PyObject_HEAD
  struct __pyx_vtabstruct_array *__pyx_vtab;
  char *data;
  Py_ssize_t len;
  char *format;
  int ndim;
  Py_ssize_t *_shape;
  Py_ssize_t *_strides;
  Py_ssize_t itemsize;
  PyObject *mode;
  PyObject *_format;
  void (*callback_free_data)(void *);
  int free_data;
  int dtype_is_object;
};


/* "View.MemoryView":280
 * 
 * @cname('__pyx_MemviewEnum')
 * cdef class Enum(object):             # <<<<<<<<<<<<<<
 *     cdef object name
 *     def __init__(self, name):
 */
struct __pyx_MemviewEnum_obj {
  PyObject_HEAD
  PyObject *name;
};


/* "View.MemoryView":331
 * 
 * @cname('__pyx_memoryview')
 * cdef class memoryview(object):             # <<<<<<<<<<<<<<
 * 
 *     cdef object obj
 */
struct __pyx_memoryview_obj {
  PyObject_HEAD
  struct __pyx_vtabstruct_memoryview *__pyx_vtab;
  PyObject *obj;
  PyObject *_size;
  PyObject *_array_interface;
  PyThread_type_lock lock;
  __pyx_atomic_int acquisition_count[2];
  __pyx_atomic_int *acquisition_count_aligned_p;
  Py_buffer view;
  int flags;
  int dtype_is_object;
  __Pyx_TypeInfo *typeinfo;
};


/* "View.MemoryView":967
 * 
 * @cname('__pyx_memoryviewslice')
 * cdef class _memoryviewslice(memoryview):             # <<<<<<<<<<<<<<
 *     "Internal class for passing memoryview slices to Python"
 * 
 */
struct __pyx_memoryviewslice_obj {
  struct __pyx_memoryview_obj __pyx_base;
  __Pyx_memviewslice from_slice;
  PyObject *from_object;
  PyObject *(*to_object_func)(char *);
  int (*to_dtype_func)(char *, PyObject *);
};



/* "View.MemoryView":106
 * 
 * @cname("__pyx_array")
 * cdef class array:             # <<<<<<<<<<<<<<
 * 
 *     cdef:
 */

struct __pyx_vtabstruct_array {
  PyObject *(*get_memview)(struct __pyx_array_obj *);
};
static struct __pyx_vtabstruct_array *__pyx_vtabptr_array;


/* "View.MemoryView":331
 * 
 * @cname('__pyx_memoryview')
 * cdef class memoryview(object):             # <<<<<<<<<<<<<<
 * 
 *     cdef object obj
 */

struct __pyx_vtabstruct_memoryview {
  char *(*get_item_pointer)(struct __pyx_memoryview_obj *, PyObject *);
  PyObject *(*is_slice)(struct __pyx_memoryview_obj *, PyObject *);
  PyObject *(*setitem_slice_assignment)(struct __pyx_memoryview_obj *, PyObject *, PyObject *);
  PyObject *(*setitem_slice_assign_scalar)(struct __pyx_memoryview_obj *, struct __pyx_memoryview_obj *, PyObject *);
  PyObject *(*setitem_indexed)(struct __pyx_memoryview_obj *, PyObject *, PyObject *);
  PyObject *(*convert_item_to_object)(struct __pyx_memoryview_obj *, char *);
  PyObject *(*assign_item_from_object)(struct __pyx_memoryview_obj *, char *, PyObject *);
};
static struct __pyx_vtabstruct_memoryview *__pyx_vtabptr_memoryview;


/* "View.MemoryView":967
 * 
 * @cname('__pyx_memoryviewslice')
 * cdef class _memoryviewslice(memoryview):             # <<<<<<<<<<<<<<
 *     "Internal class for passing memoryview slices to Python"
 * 
 */

struct __pyx_vtabstruct__memoryviewslice {
  struct __pyx_vtabstruct_memoryview __pyx_base;
};
static struct __pyx_vtabstruct__memoryviewslice *__pyx_vtabptr__memoryviewslice;

/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],\
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,\
    const char* function_name);

/* MemviewSliceInit.proto */
#define __Pyx_BUF_MAX_NDIMS %(BUF_MAX_NDIMS)d
#define __Pyx_MEMVIEW_DIRECT   1
#define __Pyx_MEMVIEW_PTR      2
#define __Pyx_MEMVIEW_FULL     4
#define __Pyx_MEMVIEW_CONTIG   8
#define __Pyx_MEMVIEW_STRIDED  16
#define __Pyx_MEMVIEW_FOLLOW   32
#define __Pyx_IS_C_CONTIG 1
#define __Pyx_IS_F_CONTIG 2
static int __Pyx_init_memviewslice(
                struct __pyx_memoryview_obj *memview,
                int ndim,
                __Pyx_memviewslice *memviewslice,
                int memview_is_new_reference);
static CYTHON_INLINE int __pyx_add_acquisition_count_locked(
    __pyx_atomic_int *acquisition_count, PyThread_type_lock lock);
static CYTHON_INLINE int __pyx_sub_acquisition_count_locked(
    __pyx_atomic_int *acquisition_count, PyThread_type_lock lock);
#define __pyx_get_slice_count_pointer(memview) (memview->acquisition_count_aligned_p)
#define __pyx_get_slice_count(memview) (*__pyx_get_slice_count_pointer(memview))
#define __PYX_INC_MEMVIEW(slice, have_gil) __Pyx_INC_MEMVIEW(slice, have_gil, __LINE__)
#define __PYX_XDEC_MEMVIEW(slice, have_gil) __Pyx_XDEC_MEMVIEW(slice, have_gil, __LINE__)
static CYTHON_INLINE void __Pyx_INC_MEMVIEW(__Pyx_memviewslice *, int, int);
static CYTHON_INLINE void __Pyx_XDEC_MEMVIEW(__Pyx_memviewslice *, int, int);

/* GetTopmostException.proto */
#if CYTHON_USE_EXC_INFO_STACK
static _PyErr_StackItem * __Pyx_PyErr_GetTopmostException(PyThreadState *tstate);
#endif

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = __Pyx_PyThreadState_Current;
#define __Pyx_PyErr_Occurred()  __pyx_tstate->curexc_type
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#define __Pyx_PyErr_Occurred()  PyErr_Occurred()
#endif

/* SaveResetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSave(type, value, tb)  __Pyx__ExceptionSave(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#define __Pyx_ExceptionReset(type, value, tb)  __Pyx__ExceptionReset(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
#else
#define __Pyx_ExceptionSave(type, value, tb)   PyErr_GetExcInfo(type, value, tb)
#define __Pyx_ExceptionReset(type, value, tb)  PyErr_SetExcInfo(type, value, tb)
#endif

/* PyErrExceptionMatches.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_ExceptionMatches(err) __Pyx_PyErr_ExceptionMatchesInState(__pyx_tstate, err)
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err);
#else
#define __Pyx_PyErr_ExceptionMatches(err)  PyErr_ExceptionMatches(err)
#endif

/* GetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_GetException(type, value, tb)  __Pyx__GetException(__pyx_tstate, type, value, tb)
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_Clear() __Pyx_ErrRestore(NULL, NULL, NULL)
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_PyErr_SetNone(exc) (Py_INCREF(exc), __Pyx_ErrRestore((exc), NULL, NULL))
#else
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#endif
#else
#define __Pyx_PyErr_Clear() PyErr_Clear()
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestoreInState(tstate, type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchInState(tstate, type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* RaiseException.proto */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

/* ArgTypeTest.proto */
#define __Pyx_ArgTypeTest(obj, type, none_allowed, name, exact)\
    ((likely((Py_TYPE(obj) == type) | (none_allowed && (obj == Py_None)))) ? 1 :\
        __Pyx__ArgTypeTest(obj, type, name, exact))
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact);

/* PyCFunctionFastCall.proto */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject *__Pyx_PyCFunction_FastCall(PyObject *func, PyObject **args, Py_ssize_t nargs);
#else
#define __Pyx_PyCFunction_FastCall(func, args, nargs)  (assert(0), NULL)
#endif

/* PyFunctionFastCall.proto */
#if CYTHON_FAST_PYCALL
#define __Pyx_PyFunction_FastCall(func, args, nargs)\
    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs);
#else
#define __Pyx_PyFunction_FastCallDict(func, args, nargs, kwargs) _PyFunction_FastCallDict(func, args, nargs, kwargs)
#endif
#define __Pyx_BUILD_ASSERT_EXPR(cond)\
    (sizeof(char [1 - 2*!(cond)]) - 1)
#ifndef Py_MEMBER_SIZE
#define Py_MEMBER_SIZE(type, member) sizeof(((type *)0)->member)
#endif
#if CYTHON_FAST_PYCALL
  static size_t __pyx_pyframe_localsplus_offset = 0;
  #include "frameobject.h"
#if PY_VERSION_HEX >= 0x030b00a6
  #ifndef Py_BUILD_CORE
    #define Py_BUILD_CORE 1
  #endif
  #include "internal/pycore_frame.h"
#endif
  #define __Pxy_PyFrame_Initialize_Offsets()\
    ((void)__Pyx_BUILD_ASSERT_EXPR(sizeof(PyFrameObject) == offsetof(PyFrameObject, f_localsplus) + Py_MEMBER_SIZE(PyFrameObject, f_localsplus)),\
     (void)(__pyx_pyframe_localsplus_offset = ((size_t)PyFrame_Type.tp_basicsize) - Py_MEMBER_SIZE(PyFrameObject, f_localsplus)))
  #define __Pyx_PyFrame_GetLocalsplus(frame)\
    (assert(__pyx_pyframe_localsplus_offset), (PyObject **)(((char *)(frame)) + __pyx_pyframe_localsplus_offset))
#endif // CYTHON_FAST_PYCALL
#endif

/* PyObjectCall2Args.proto */
static CYTHON_UNUSED PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2);

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

/* IncludeStringH.proto */
#include <string.h>

/* BytesEquals.proto */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals);

/* UnicodeEquals.proto */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals);

/* StrEquals.proto */
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyString_Equals __Pyx_PyUnicode_Equals
#else
#define __Pyx_PyString_Equals __Pyx_PyBytes_Equals
#endif

/* UnaryNegOverflows.proto */
#define UNARY_NEG_WOULD_OVERFLOW(x)\
        (((x) < 0) & ((unsigned long)(x) == 0-(unsigned long)(x)))

static CYTHON_UNUSED int __pyx_array_getbuffer(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /*proto*/
static PyObject *__pyx_array_get_memview(struct __pyx_array_obj *); /*proto*/
/* GetAttr.proto */
static CYTHON_INLINE PyObject *__Pyx_GetAttr(PyObject *, PyObject *);

/* GetItemInt.proto */
#define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL) :\
               __Pyx_GetItemInt_Generic(o, to_py_func(i))))
#define __Pyx_GetItemInt_List(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_List_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
#define __Pyx_GetItemInt_Tuple(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Tuple_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "tuple index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck);

/* ObjectGetItem.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject *__Pyx_PyObject_GetItem(PyObject *obj, PyObject* key);
#else
#define __Pyx_PyObject_GetItem(obj, key)  PyObject_GetItem(obj, key)
#endif

/* decode_c_string_utf16.proto */
static CYTHON_INLINE PyObject *__Pyx_PyUnicode_DecodeUTF16(const char *s, Py_ssize_t size, const char *errors) {
    int byteorder = 0;
    return PyUnicode_DecodeUTF16(s, size, errors, &byteorder);
}
static CYTHON_INLINE PyObject *__Pyx_PyUnicode_DecodeUTF16LE(const char *s, Py_ssize_t size, const char *errors) {
    int byteorder = -1;
    return PyUnicode_DecodeUTF16(s, size, errors, &byteorder);
}
static CYTHON_INLINE PyObject *__Pyx_PyUnicode_DecodeUTF16BE(const char *s, Py_ssize_t size, const char *errors) {
    int byteorder = 1;
    return PyUnicode_DecodeUTF16(s, size, errors, &byteorder);
}

/* decode_c_string.proto */
static CYTHON_INLINE PyObject* __Pyx_decode_c_string(
         const char* cstring, Py_ssize_t start, Py_ssize_t stop,
         const char* encoding, const char* errors,
         PyObject* (*decode_func)(const char *s, Py_ssize_t size, const char *errors));

/* GetAttr3.proto */
static CYTHON_INLINE PyObject *__Pyx_GetAttr3(PyObject *, PyObject *, PyObject *);

/* PyDictVersioning.proto */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
#define __PYX_DICT_VERSION_INIT  ((PY_UINT64_T) -1)
#define __PYX_GET_DICT_VERSION(dict)  (((PyDictObject*)(dict))->ma_version_tag)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)\
    (version_var) = __PYX_GET_DICT_VERSION(dict);\
    (cache_var) = (value);
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP) {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    if (likely(__PYX_GET_DICT_VERSION(DICT) == __pyx_dict_version)) {\
        (VAR) = __pyx_dict_cached_value;\
    } else {\
        (VAR) = __pyx_dict_cached_value = (LOOKUP);\
        __pyx_dict_version = __PYX_GET_DICT_VERSION(DICT);\
    }\
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj);
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj);
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version);
#else
#define __PYX_GET_DICT_VERSION(dict)  (0)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP)  (VAR) = (LOOKUP);
#endif

/* GetModuleGlobalName.proto */
#if CYTHON_USE_DICT_VERSIONS
#define __Pyx_GetModuleGlobalName(var, name)  do {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    (var) = (likely(__pyx_dict_version == __PYX_GET_DICT_VERSION(__pyx_d))) ?\
        (likely(__pyx_dict_cached_value) ? __Pyx_NewRef(__pyx_dict_cached_value) : __Pyx_GetBuiltinName(name)) :\
        __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
} while(0)
#define __Pyx_GetModuleGlobalNameUncached(var, name)  do {\
    PY_UINT64_T __pyx_dict_version;\
    PyObject *__pyx_dict_cached_value;\
    (var) = __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
} while(0)
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value);
#else
#define __Pyx_GetModuleGlobalName(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
#define __Pyx_GetModuleGlobalNameUncached(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name);
#endif

/* RaiseTooManyValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected);

/* RaiseNeedMoreValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index);

/* RaiseNoneIterError.proto */
static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void);

/* ExtTypeTest.proto */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type);

/* SwapException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSwap(type, value, tb)  __Pyx__ExceptionSwap(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSwap(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* Import.proto */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

/* FastTypeChecks.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_TypeCheck(obj, type) __Pyx_IsSubtype(Py_TYPE(obj), (PyTypeObject *)type)
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject *type);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2);
#else
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_PyErr_GivenExceptionMatches(err, type) PyErr_GivenExceptionMatches(err, type)
#define __Pyx_PyErr_GivenExceptionMatches2(err, type1, type2) (PyErr_GivenExceptionMatches(err, type1) || PyErr_GivenExceptionMatches(err, type2))
#endif
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)

static CYTHON_UNUSED int __pyx_memoryview_getbuffer(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /*proto*/
/* ListCompAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_ListComp_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len)) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        __Pyx_SET_SIZE(list, len + 1);
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_ListComp_Append(L,x) PyList_Append(L,x)
#endif

/* PyIntBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_AddObjC(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check);
#else
#define __Pyx_PyInt_AddObjC(op1, op2, intval, inplace, zerodivision_check)\
    (inplace ? PyNumber_InPlaceAdd(op1, op2) : PyNumber_Add(op1, op2))
#endif

/* ListExtend.proto */
static CYTHON_INLINE int __Pyx_PyList_Extend(PyObject* L, PyObject* v) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject* none = _PyList_Extend((PyListObject*)L, v);
    if (unlikely(!none))
        return -1;
    Py_DECREF(none);
    return 0;
#else
    return PyList_SetSlice(L, PY_SSIZE_T_MAX, PY_SSIZE_T_MAX, v);
#endif
}

/* ListAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_PyList_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len) & likely(len > (L->allocated >> 1))) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        __Pyx_SET_SIZE(list, len + 1);
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_PyList_Append(L,x) PyList_Append(L,x)
#endif

/* None.proto */
static CYTHON_INLINE void __Pyx_RaiseUnboundLocalError(const char *varname);

/* PySequenceContains.proto */
static CYTHON_INLINE int __Pyx_PySequence_ContainsTF(PyObject* item, PyObject* seq, int eq) {
    int result = PySequence_Contains(seq, item);
    return unlikely(result < 0) ? result : (result == (eq == Py_EQ));
}

/* ImportFrom.proto */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name);

/* HasAttr.proto */
static CYTHON_INLINE int __Pyx_HasAttr(PyObject *, PyObject *);

/* PyObject_GenericGetAttrNoDict.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttrNoDict PyObject_GenericGetAttr
#endif

/* PyObject_GenericGetAttr.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttr PyObject_GenericGetAttr
#endif

/* SetVTable.proto */
static int __Pyx_SetVtable(PyObject *dict, void *vtable);

/* PyObjectGetAttrStrNoError.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name);

/* SetupReduce.proto */
static int __Pyx_setup_reduce(PyObject* type_obj);

/* TypeImport.proto */
#ifndef __PYX_HAVE_RT_ImportType_proto
#define __PYX_HAVE_RT_ImportType_proto
enum __Pyx_ImportType_CheckSize {
   __Pyx_ImportType_CheckSize_Error = 0,
   __Pyx_ImportType_CheckSize_Warn = 1,
   __Pyx_ImportType_CheckSize_Ignore = 2
};
static PyTypeObject *__Pyx_ImportType(PyObject* module, const char *module_name, const char *class_name, size_t size, enum __Pyx_ImportType_CheckSize check_size);
#endif

/* CLineInTraceback.proto */
#ifdef CYTHON_CLINE_IN_TRACEBACK
#define __Pyx_CLineForTraceback(tstate, c_line)  (((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0)
#else
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line);
#endif

/* CodeObjectCache.proto */
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

#if PY_MAJOR_VERSION < 3
    static int __Pyx_GetBuffer(PyObject *obj, Py_buffer *view, int flags);
    static void __Pyx_ReleaseBuffer(Py_buffer *view);
#else
    #define __Pyx_GetBuffer PyObject_GetBuffer
    #define __Pyx_ReleaseBuffer PyBuffer_Release
#endif


/* BufferStructDeclare.proto */
typedef struct {
  Py_ssize_t shape, strides, suboffsets;
} __Pyx_Buf_DimInfo;
typedef struct {
  size_t refcount;
  Py_buffer pybuffer;
} __Pyx_Buffer;
typedef struct {
  __Pyx_Buffer *rcbuffer;
  char *data;
  __Pyx_Buf_DimInfo diminfo[8];
} __Pyx_LocalBuf_ND;

/* MemviewSliceIsContig.proto */
static int __pyx_memviewslice_is_contig(const __Pyx_memviewslice mvs, char order, int ndim);

/* OverlappingSlices.proto */
static int __pyx_slices_overlap(__Pyx_memviewslice *slice1,
                                __Pyx_memviewslice *slice2,
                                int ndim, size_t itemsize);

/* Capsule.proto */
static CYTHON_INLINE PyObject *__pyx_capsule_create(void *p, const char *sig);

/* IsLittleEndian.proto */
static CYTHON_INLINE int __Pyx_Is_Little_Endian(void);

/* BufferFormatCheck.proto */
static const char* __Pyx_BufFmt_CheckString(__Pyx_BufFmt_Context* ctx, const char* ts);
static void __Pyx_BufFmt_Init(__Pyx_BufFmt_Context* ctx,
                              __Pyx_BufFmt_StackElem* stack,
                              __Pyx_TypeInfo* type);

/* TypeInfoCompare.proto */
static int __pyx_typeinfo_cmp(__Pyx_TypeInfo *a, __Pyx_TypeInfo *b);

/* MemviewSliceValidateAndInit.proto */
static int __Pyx_ValidateAndInit_memviewslice(
                int *axes_specs,
                int c_or_f_flag,
                int buf_flags,
                int ndim,
                __Pyx_TypeInfo *dtype,
                __Pyx_BufFmt_StackElem stack[],
                __Pyx_memviewslice *memviewslice,
                PyObject *original_obj);

/* ObjectToMemviewSlice.proto */
static CYTHON_INLINE __Pyx_memviewslice __Pyx_PyObject_to_MemoryviewSlice_dc_double(PyObject *, int writable_flag);

/* GCCDiagnostics.proto */
#if defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 6))
#define __Pyx_HAS_GCC_DIAGNOSTIC
#endif

/* RealImag.proto */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    #define __Pyx_CREAL(z) ((z).real())
    #define __Pyx_CIMAG(z) ((z).imag())
  #else
    #define __Pyx_CREAL(z) (__real__(z))
    #define __Pyx_CIMAG(z) (__imag__(z))
  #endif
#else
    #define __Pyx_CREAL(z) ((z).real)
    #define __Pyx_CIMAG(z) ((z).imag)
#endif
#if defined(__cplusplus) && CYTHON_CCOMPLEX\
        && (defined(_WIN32) || defined(__clang__) || (defined(__GNUC__) && (__GNUC__ >= 5 || __GNUC__ == 4 && __GNUC_MINOR__ >= 4 )) || __cplusplus >= 201103)
    #define __Pyx_SET_CREAL(z,x) ((z).real(x))
    #define __Pyx_SET_CIMAG(z,y) ((z).imag(y))
#else
    #define __Pyx_SET_CREAL(z,x) __Pyx_CREAL(z) = (x)
    #define __Pyx_SET_CIMAG(z,y) __Pyx_CIMAG(z) = (y)
#endif

/* Arithmetic.proto */
#if CYTHON_CCOMPLEX
    #define __Pyx_c_eq_float(a, b)   ((a)==(b))
    #define __Pyx_c_sum_float(a, b)  ((a)+(b))
    #define __Pyx_c_diff_float(a, b) ((a)-(b))
    #define __Pyx_c_prod_float(a, b) ((a)*(b))
    #define __Pyx_c_quot_float(a, b) ((a)/(b))
    #define __Pyx_c_neg_float(a)     (-(a))
  #ifdef __cplusplus
    #define __Pyx_c_is_zero_float(z) ((z)==(float)0)
    #define __Pyx_c_conj_float(z)    (::std::conj(z))
    #if 1
        #define __Pyx_c_abs_float(z)     (::std::abs(z))
        #define __Pyx_c_pow_float(a, b)  (::std::pow(a, b))
    #endif
  #else
    #define __Pyx_c_is_zero_float(z) ((z)==0)
    #define __Pyx_c_conj_float(z)    (conjf(z))
    #if 1
        #define __Pyx_c_abs_float(z)     (cabsf(z))
        #define __Pyx_c_pow_float(a, b)  (cpowf(a, b))
    #endif
 #endif
#else
    static CYTHON_INLINE int __Pyx_c_eq_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_sum_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_diff_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_prod_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quot_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_neg_float(__pyx_t_float_complex);
    static CYTHON_INLINE int __Pyx_c_is_zero_float(__pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_conj_float(__pyx_t_float_complex);
    #if 1
        static CYTHON_INLINE float __Pyx_c_abs_float(__pyx_t_float_complex);
        static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_pow_float(__pyx_t_float_complex, __pyx_t_float_complex);
    #endif
#endif

/* Arithmetic.proto */
#if CYTHON_CCOMPLEX
    #define __Pyx_c_eq_double(a, b)   ((a)==(b))
    #define __Pyx_c_sum_double(a, b)  ((a)+(b))
    #define __Pyx_c_diff_double(a, b) ((a)-(b))
    #define __Pyx_c_prod_double(a, b) ((a)*(b))
    #define __Pyx_c_quot_double(a, b) ((a)/(b))
    #define __Pyx_c_neg_double(a)     (-(a))
  #ifdef __cplusplus
    #define __Pyx_c_is_zero_double(z) ((z)==(double)0)
    #define __Pyx_c_conj_double(z)    (::std::conj(z))
    #if 1
        #define __Pyx_c_abs_double(z)     (::std::abs(z))
        #define __Pyx_c_pow_double(a, b)  (::std::pow(a, b))
    #endif
  #else
    #define __Pyx_c_is_zero_double(z) ((z)==0)
    #define __Pyx_c_conj_double(z)    (conj(z))
    #if 1
        #define __Pyx_c_abs_double(z)     (cabs(z))
        #define __Pyx_c_pow_double(a, b)  (cpow(a, b))
    #endif
 #endif
#else
    static CYTHON_INLINE int __Pyx_c_eq_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_sum_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_diff_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_prod_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_neg_double(__pyx_t_double_complex);
    static CYTHON_INLINE int __Pyx_c_is_zero_double(__pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_conj_double(__pyx_t_double_complex);
    #if 1
        static CYTHON_INLINE double __Pyx_c_abs_double(__pyx_t_double_complex);
        static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_pow_double(__pyx_t_double_complex, __pyx_t_double_complex);
    #endif
#endif

/* MemviewSliceCopyTemplate.proto */
static __Pyx_memviewslice
__pyx_memoryview_copy_new_contig(const __Pyx_memviewslice *from_mvs,
                                 const char *mode, int ndim,
                                 size_t sizeof_dtype, int contig_flag,
                                 int dtype_is_object);

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE char __Pyx_PyInt_As_char(PyObject *);

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(void);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);

static PyObject *__pyx_array_get_memview(struct __pyx_array_obj *__pyx_v_self); /* proto*/
static char *__pyx_memoryview_get_item_pointer(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_index); /* proto*/
static PyObject *__pyx_memoryview_is_slice(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_obj); /* proto*/
static PyObject *__pyx_memoryview_setitem_slice_assignment(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_dst, PyObject *__pyx_v_src); /* proto*/
static PyObject *__pyx_memoryview_setitem_slice_assign_scalar(struct __pyx_memoryview_obj *__pyx_v_self, struct __pyx_memoryview_obj *__pyx_v_dst, PyObject *__pyx_v_value); /* proto*/
static PyObject *__pyx_memoryview_setitem_indexed(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_index, PyObject *__pyx_v_value); /* proto*/
static PyObject *__pyx_memoryview_convert_item_to_object(struct __pyx_memoryview_obj *__pyx_v_self, char *__pyx_v_itemp); /* proto*/
static PyObject *__pyx_memoryview_assign_item_from_object(struct __pyx_memoryview_obj *__pyx_v_self, char *__pyx_v_itemp, PyObject *__pyx_v_value); /* proto*/
static PyObject *__pyx_memoryviewslice_convert_item_to_object(struct __pyx_memoryviewslice_obj *__pyx_v_self, char *__pyx_v_itemp); /* proto*/
static PyObject *__pyx_memoryviewslice_assign_item_from_object(struct __pyx_memoryviewslice_obj *__pyx_v_self, char *__pyx_v_itemp, PyObject *__pyx_v_value); /* proto*/

/* Module declarations from 'cpython.buffer' */

/* Module declarations from 'libc.string' */

/* Module declarations from 'libc.stdio' */

/* Module declarations from '__builtin__' */

/* Module declarations from 'cpython.type' */
static PyTypeObject *__pyx_ptype_7cpython_4type_type = 0;

/* Module declarations from 'cpython' */

/* Module declarations from 'cpython.object' */

/* Module declarations from 'cpython.ref' */

/* Module declarations from 'cpython.mem' */

/* Module declarations from 'numpy' */

/* Module declarations from 'numpy' */
static PyTypeObject *__pyx_ptype_5numpy_dtype = 0;
static PyTypeObject *__pyx_ptype_5numpy_flatiter = 0;
static PyTypeObject *__pyx_ptype_5numpy_broadcast = 0;
static PyTypeObject *__pyx_ptype_5numpy_ndarray = 0;
static PyTypeObject *__pyx_ptype_5numpy_generic = 0;
static PyTypeObject *__pyx_ptype_5numpy_number = 0;
static PyTypeObject *__pyx_ptype_5numpy_integer = 0;
static PyTypeObject *__pyx_ptype_5numpy_signedinteger = 0;
static PyTypeObject *__pyx_ptype_5numpy_unsignedinteger = 0;
static PyTypeObject *__pyx_ptype_5numpy_inexact = 0;
static PyTypeObject *__pyx_ptype_5numpy_floating = 0;
static PyTypeObject *__pyx_ptype_5numpy_complexfloating = 0;
static PyTypeObject *__pyx_ptype_5numpy_flexible = 0;
static PyTypeObject *__pyx_ptype_5numpy_character = 0;
static PyTypeObject *__pyx_ptype_5numpy_ufunc = 0;

/* Module declarations from 'libc.math' */

/* Module declarations from 'libcpp' */

/* Module declarations from 'libcpp.algorithm' */

/* Module declarations from 'libc.stdlib' */

/* Module declarations from 'libc.float' */

/* Module declarations from 'fmsne_implem' */
static PyTypeObject *__pyx_array_type = 0;
static PyTypeObject *__pyx_MemviewEnum_type = 0;
static PyTypeObject *__pyx_memoryview_type = 0;
static PyTypeObject *__pyx_memoryviewslice_type = 0;
static double __pyx_v_12fmsne_implem_EPSILON_DBL;
static double __pyx_v_12fmsne_implem_FLOAT64_EPS;
static PyObject *generic = 0;
static PyObject *strided = 0;
static PyObject *indirect = 0;
static PyObject *contiguous = 0;
static PyObject *indirect_contiguous = 0;
static int __pyx_memoryview_thread_locks_used;
static PyThread_type_lock __pyx_memoryview_thread_locks[8];
static CYTHON_INLINE double __pyx_f_12fmsne_implem_min_arr_ptr(double const *, Py_ssize_t); /*proto*/
static CYTHON_INLINE double __pyx_f_12fmsne_implem_max_arr_ptr(double const *, Py_ssize_t); /*proto*/
static CYTHON_INLINE Py_ssize_t __pyx_f_12fmsne_implem_max_arr_ptr_Pysst(Py_ssize_t const *, Py_ssize_t); /*proto*/
static CYTHON_INLINE double __pyx_f_12fmsne_implem_max_arr2d_col(double **, Py_ssize_t, Py_ssize_t); /*proto*/
static CYTHON_INLINE double __pyx_f_12fmsne_implem_min_arr_ptr_step(double const *, Py_ssize_t, Py_ssize_t, Py_ssize_t); /*proto*/
static CYTHON_INLINE double __pyx_f_12fmsne_implem_max_arr_ptr_step(double const *, Py_ssize_t, Py_ssize_t, Py_ssize_t); /*proto*/
static CYTHON_INLINE double __pyx_f_12fmsne_implem_sqeucl_dist_ptr(double const *, double const *, Py_ssize_t); /*proto*/
static CYTHON_INLINE double __pyx_f_12fmsne_implem_inf_dist_ptr(double const *, double const *, Py_ssize_t); /*proto*/
static CYTHON_INLINE double __pyx_f_12fmsne_implem_mean_arr_ptr_step(double const *, Py_ssize_t, Py_ssize_t, Py_ssize_t, double); /*proto*/
static CYTHON_INLINE double __pyx_f_12fmsne_implem_var_arr_ptr_step(double const *, Py_ssize_t, Py_ssize_t, Py_ssize_t, double, double); /*proto*/
static CYTHON_INLINE void __pyx_f_12fmsne_implem_free_int_2dmat(int **, Py_ssize_t); /*proto*/
static CYTHON_INLINE void __pyx_f_12fmsne_implem_free_int_3dmat(int ***, Py_ssize_t, Py_ssize_t); /*proto*/
static CYTHON_INLINE void __pyx_f_12fmsne_implem_free_dble_2dmat(double **, Py_ssize_t); /*proto*/
static CYTHON_INLINE void __pyx_f_12fmsne_implem_free_dble_3dmat(double ***, Py_ssize_t, Py_ssize_t); /*proto*/
static CYTHON_INLINE void __pyx_f_12fmsne_implem_free_Pysst_2dmat(Py_ssize_t **, Py_ssize_t); /*proto*/
static CYTHON_INLINE void __pyx_f_12fmsne_implem_free_Pysst_3dmat(Py_ssize_t ***, Py_ssize_t, Py_ssize_t); /*proto*/
static CYTHON_INLINE int *__pyx_f_12fmsne_implem_seq_1step(Py_ssize_t); /*proto*/
static CYTHON_INLINE int **__pyx_f_12fmsne_implem_calloc_int_2dmat(Py_ssize_t, Py_ssize_t); /*proto*/
static CYTHON_INLINE int ***__pyx_f_12fmsne_implem_alloc_int_3dmat(Py_ssize_t, Py_ssize_t, Py_ssize_t); /*proto*/
static CYTHON_INLINE double **__pyx_f_12fmsne_implem_alloc_dble_2dmat(Py_ssize_t, Py_ssize_t); /*proto*/
static CYTHON_INLINE double **__pyx_f_12fmsne_implem_alloc_dble_2dmat_varKpysst(Py_ssize_t, Py_ssize_t *); /*proto*/
static CYTHON_INLINE double ***__pyx_f_12fmsne_implem_alloc_dble_3dmat(Py_ssize_t, Py_ssize_t, Py_ssize_t); /*proto*/
static CYTHON_INLINE double ***__pyx_f_12fmsne_implem_alloc_dble_3dmat_varK(Py_ssize_t, Py_ssize_t, int **); /*proto*/
static CYTHON_INLINE Py_ssize_t **__pyx_f_12fmsne_implem_alloc_Pysst_2dmat_varN(Py_ssize_t, Py_ssize_t *); /*proto*/
static CYTHON_INLINE Py_ssize_t ***__pyx_f_12fmsne_implem_alloc_Pysst_3dmat_varK(Py_ssize_t, Py_ssize_t, int **); /*proto*/
static CYTHON_INLINE Py_ssize_t ***__pyx_f_12fmsne_implem_alloc_Pysst_3dmat_varK_3dK(Py_ssize_t, Py_ssize_t, Py_ssize_t ***, Py_ssize_t); /*proto*/
static CYTHON_INLINE int __pyx_f_12fmsne_implem_ms_def_n_scales(double, int, int, int); /*proto*/
static CYTHON_INLINE int __pyx_f_12fmsne_implem_ms_def_shift_Lmin(int, Py_ssize_t); /*proto*/
static CYTHON_INLINE int *__pyx_f_12fmsne_implem_ms_def_Kh(int, int, int, Py_ssize_t); /*proto*/
static CYTHON_INLINE double **__pyx_f_12fmsne_implem_sne_ds_hd(double *, Py_ssize_t, Py_ssize_t, Py_ssize_t); /*proto*/
static CYTHON_INLINE void __pyx_f_12fmsne_implem_sne_hdpinn_nolog(double const *, double, Py_ssize_t, double *); /*proto*/
static CYTHON_INLINE double __pyx_f_12fmsne_implem_sne_densim(double const *, double, Py_ssize_t); /*proto*/
static CYTHON_INLINE double __pyx_f_12fmsne_implem_sne_binsearch_fct(double const *, double, Py_ssize_t, double); /*proto*/
static CYTHON_INLINE double __pyx_f_12fmsne_implem_sne_binsearch_bandwidth_fit(double const *, Py_ssize_t, double, double); /*proto*/
static CYTHON_INLINE double **__pyx_f_12fmsne_implem_ms_hdsim(double **, Py_ssize_t, Py_ssize_t, int *, Py_ssize_t); /*proto*/
static CYTHON_INLINE double __pyx_f_12fmsne_implem_msld_def_div2N(int, double, double); /*proto*/
static CYTHON_INLINE double __pyx_f_12fmsne_implem_eval_mean_var_X_lds(double, Py_ssize_t, double *, Py_ssize_t, double, double); /*proto*/
static CYTHON_INLINE void __pyx_f_12fmsne_implem_ms_ldprec_nofitU(double *, double *, int, Py_ssize_t, int *, double, double, double); /*proto*/
static CYTHON_INLINE void __pyx_f_12fmsne_implem_ms_ldprec(Py_ssize_t, double, double *, Py_ssize_t, int, Py_ssize_t, Py_ssize_t, double **, int *, double *, double *, int); /*proto*/
static CYTHON_INLINE lbfgsfloatval_t *__pyx_f_12fmsne_implem_init_lbfgs_var(size_t, int, double *); /*proto*/
static CYTHON_INLINE double __pyx_f_12fmsne_implem_ms_update_mso_step(Py_ssize_t, Py_ssize_t, Py_ssize_t, Py_ssize_t, double **, double **, double **, double **); /*proto*/
static CYTHON_INLINE lbfgsfloatval_t __pyx_f_12fmsne_implem_mssne_evaluate(void *, lbfgsfloatval_t const *, lbfgsfloatval_t *, int const , lbfgsfloatval_t const ); /*proto*/
static CYTHON_INLINE void __pyx_f_12fmsne_implem_mssne_implem(__Pyx_memviewslice, __Pyx_memviewslice, int, int, int, int, int, double, double, int, int, int, int __pyx_skip_dispatch); /*proto*/
static CYTHON_INLINE void __pyx_f_12fmsne_implem_mstsne_symmetrize(Py_ssize_t, double **, double **); /*proto*/
static CYTHON_INLINE lbfgsfloatval_t __pyx_f_12fmsne_implem_mstsne_evaluate(void *, lbfgsfloatval_t const *, lbfgsfloatval_t *, int const , lbfgsfloatval_t const ); /*proto*/
static CYTHON_INLINE void __pyx_f_12fmsne_implem_mstsne_implem(__Pyx_memviewslice, __Pyx_memviewslice, int, int, int, int, double, double, int, int, int, int __pyx_skip_dispatch); /*proto*/
static CYTHON_INLINE struct __pyx_t_12fmsne_implem_SpNode *__pyx_f_12fmsne_implem_cinit_SpNode(double const *, Py_ssize_t, double const *, double const *, int, double const *, Py_ssize_t); /*proto*/
static CYTHON_INLINE void __pyx_f_12fmsne_implem_addPnt_SpNode(struct __pyx_t_12fmsne_implem_SpNode *, double const *, double const *); /*proto*/
static CYTHON_INLINE double __pyx_f_12fmsne_implem_approxInteractions_SpNode(struct __pyx_t_12fmsne_implem_SpNode const *, double const *, double, double, double *, double **, double ***, int, double const *, double **, double *, Py_ssize_t, Py_ssize_t); /*proto*/
static CYTHON_INLINE void __pyx_f_12fmsne_implem_reset_sa_SpNode(struct __pyx_t_12fmsne_implem_SpNode *); /*proto*/
static CYTHON_INLINE void __pyx_f_12fmsne_implem_update_sa_SpNode(struct __pyx_t_12fmsne_implem_SpNode *, double const *, double const *, Py_ssize_t); /*proto*/
static CYTHON_INLINE void __pyx_f_12fmsne_implem_free_SpNode(struct __pyx_t_12fmsne_implem_SpNode *); /*proto*/
static CYTHON_INLINE struct __pyx_t_12fmsne_implem_SpTree *__pyx_f_12fmsne_implem_cinit_SpTree(double const *, Py_ssize_t, Py_ssize_t, int, double const *, Py_ssize_t, int); /*proto*/
static CYTHON_INLINE double __pyx_f_12fmsne_implem_approxInteractions_SpTree(struct __pyx_t_12fmsne_implem_SpTree const *, double const *, double, double *, double **, double ***, double const *, double **, double *, Py_ssize_t, Py_ssize_t); /*proto*/
static CYTHON_INLINE void __pyx_f_12fmsne_implem_update_sa_SpTree(struct __pyx_t_12fmsne_implem_SpTree *, double const *, double const *, Py_ssize_t); /*proto*/
static CYTHON_INLINE void __pyx_f_12fmsne_implem_free_SpTree(struct __pyx_t_12fmsne_implem_SpTree *); /*proto*/
static CYTHON_INLINE int *__pyx_f_12fmsne_implem_f_def_n_ds_h(int, int, int, double, Py_ssize_t); /*proto*/
static CYTHON_INLINE int *__pyx_f_12fmsne_implem_f_def_nnn_h(Py_ssize_t, int *, int *, int); /*proto*/
static CYTHON_INLINE int __pyx_f_12fmsne_implem_f_nnn_tot(int *, Py_ssize_t); /*proto*/
static CYTHON_INLINE int __pyx_f_12fmsne_implem_f_nn_ds_hdprec(int, int *, int, Py_ssize_t, int *, int *, int *, int, double *, Py_ssize_t, int ***, int **, double ***, double ***, int, int); /*proto*/
static CYTHON_INLINE Py_ssize_t **__pyx_f_12fmsne_implem_fms_nn_dld_match(Py_ssize_t ***, Py_ssize_t *, size_t, Py_ssize_t, Py_ssize_t, Py_ssize_t, int **, int ***, int, Py_ssize_t); /*proto*/
static CYTHON_INLINE void __pyx_f_12fmsne_implem_f_ldprec(int, double, double *, int, int, Py_ssize_t, Py_ssize_t, Py_ssize_t, double ***, int *, double **, double **, double *, double *, int); /*proto*/
static CYTHON_INLINE double __pyx_f_12fmsne_implem_f_update_mso_step(Py_ssize_t, Py_ssize_t, Py_ssize_t, Py_ssize_t, int **, double ***, double ***, double ***, double ***); /*proto*/
static CYTHON_INLINE lbfgsfloatval_t __pyx_f_12fmsne_implem_fmssne_evaluate(void *, lbfgsfloatval_t const *, lbfgsfloatval_t *, int const , lbfgsfloatval_t const ); /*proto*/
static CYTHON_INLINE void __pyx_f_12fmsne_implem_fmssne_implem(__Pyx_memviewslice, __Pyx_memviewslice, int, int, int, int, int, int, double, int, double, double, int, int, int, int, int, int __pyx_skip_dispatch); /*proto*/
static CYTHON_INLINE Py_ssize_t ***__pyx_f_12fmsne_implem_fms_sym_nn_match(Py_ssize_t, Py_ssize_t, int ***, int **, Py_ssize_t); /*proto*/
static CYTHON_INLINE Py_ssize_t **__pyx_f_12fmsne_implem_gather_nn_all_rs(Py_ssize_t *, Py_ssize_t, Py_ssize_t, Py_ssize_t ***); /*proto*/
static CYTHON_INLINE Py_ssize_t ***__pyx_f_12fmsne_implem_fms_nn_rs_match_all_rs(Py_ssize_t, Py_ssize_t, Py_ssize_t **, Py_ssize_t *, Py_ssize_t ***); /*proto*/
static CYTHON_INLINE void __pyx_f_12fmsne_implem_fmstsne_symmetrize(Py_ssize_t, Py_ssize_t, double ***, Py_ssize_t ***, double ***); /*proto*/
static CYTHON_INLINE lbfgsfloatval_t __pyx_f_12fmsne_implem_fmstsne_evaluate(void *, lbfgsfloatval_t const *, lbfgsfloatval_t *, int const , lbfgsfloatval_t const ); /*proto*/
static CYTHON_INLINE void __pyx_f_12fmsne_implem_fmstsne_implem(__Pyx_memviewslice, __Pyx_memviewslice, int, int, int, int, int, double, int, double, double, int, int, int, int, int __pyx_skip_dispatch); /*proto*/
static CYTHON_INLINE int __pyx_f_12fmsne_implem_sortByInd(struct __pyx_t_12fmsne_implem_nnRank const , struct __pyx_t_12fmsne_implem_nnRank const ); /*proto*/
static CYTHON_INLINE double __pyx_f_12fmsne_implem_drqa_qnx_rnx_auc(__Pyx_memviewslice, __Pyx_memviewslice, int, int, int, int, __Pyx_memviewslice, __Pyx_memviewslice, int, int __pyx_skip_dispatch); /*proto*/
static struct __pyx_array_obj *__pyx_array_new(PyObject *, Py_ssize_t, char *, char *, char *); /*proto*/
static void *__pyx_align_pointer(void *, size_t); /*proto*/
static PyObject *__pyx_memoryview_new(PyObject *, int, int, __Pyx_TypeInfo *); /*proto*/
static CYTHON_INLINE int __pyx_memoryview_check(PyObject *); /*proto*/
static PyObject *_unellipsify(PyObject *, int); /*proto*/
static PyObject *assert_direct_dimensions(Py_ssize_t *, int); /*proto*/
static struct __pyx_memoryview_obj *__pyx_memview_slice(struct __pyx_memoryview_obj *, PyObject *); /*proto*/
static int __pyx_memoryview_slice_memviewslice(__Pyx_memviewslice *, Py_ssize_t, Py_ssize_t, Py_ssize_t, int, int, int *, Py_ssize_t, Py_ssize_t, Py_ssize_t, int, int, int, int); /*proto*/
static char *__pyx_pybuffer_index(Py_buffer *, char *, Py_ssize_t, Py_ssize_t); /*proto*/
static int __pyx_memslice_transpose(__Pyx_memviewslice *); /*proto*/
static PyObject *__pyx_memoryview_fromslice(__Pyx_memviewslice, int, PyObject *(*)(char *), int (*)(char *, PyObject *), int); /*proto*/
static __Pyx_memviewslice *__pyx_memoryview_get_slice_from_memoryview(struct __pyx_memoryview_obj *, __Pyx_memviewslice *); /*proto*/
static void __pyx_memoryview_slice_copy(struct __pyx_memoryview_obj *, __Pyx_memviewslice *); /*proto*/
static PyObject *__pyx_memoryview_copy_object(struct __pyx_memoryview_obj *); /*proto*/
static PyObject *__pyx_memoryview_copy_object_from_slice(struct __pyx_memoryview_obj *, __Pyx_memviewslice *); /*proto*/
static Py_ssize_t abs_py_ssize_t(Py_ssize_t); /*proto*/
static char __pyx_get_best_slice_order(__Pyx_memviewslice *, int); /*proto*/
static void _copy_strided_to_strided(char *, Py_ssize_t *, char *, Py_ssize_t *, Py_ssize_t *, Py_ssize_t *, int, size_t); /*proto*/
static void copy_strided_to_strided(__Pyx_memviewslice *, __Pyx_memviewslice *, int, size_t); /*proto*/
static Py_ssize_t __pyx_memoryview_slice_get_size(__Pyx_memviewslice *, int); /*proto*/
static Py_ssize_t __pyx_fill_contig_strides_array(Py_ssize_t *, Py_ssize_t *, Py_ssize_t, int, char); /*proto*/
static void *__pyx_memoryview_copy_data_to_temp(__Pyx_memviewslice *, __Pyx_memviewslice *, char, int); /*proto*/
static int __pyx_memoryview_err_extents(int, Py_ssize_t, Py_ssize_t); /*proto*/
static int __pyx_memoryview_err_dim(PyObject *, char *, int); /*proto*/
static int __pyx_memoryview_err(PyObject *, char *); /*proto*/
static int __pyx_memoryview_copy_contents(__Pyx_memviewslice, __Pyx_memviewslice, int, int, int); /*proto*/
static void __pyx_memoryview_broadcast_leading(__Pyx_memviewslice *, int, int); /*proto*/
static void __pyx_memoryview_refcount_copying(__Pyx_memviewslice *, int, int, int); /*proto*/
static void __pyx_memoryview_refcount_objects_in_slice_with_gil(char *, Py_ssize_t *, Py_ssize_t *, int, int); /*proto*/
static void __pyx_memoryview_refcount_objects_in_slice(char *, Py_ssize_t *, Py_ssize_t *, int, int); /*proto*/
static void __pyx_memoryview_slice_assign_scalar(__Pyx_memviewslice *, int, size_t, void *, int); /*proto*/
static void __pyx_memoryview__slice_assign_scalar(char *, Py_ssize_t *, Py_ssize_t *, int, size_t, void *); /*proto*/
static PyObject *__pyx_unpickle_Enum__set_state(struct __pyx_MemviewEnum_obj *, PyObject *); /*proto*/
static __Pyx_TypeInfo __Pyx_TypeInfo_double = { "double", NULL, sizeof(double), { 0 }, 0, 'R', 0, 0 };
#define __Pyx_MODULE_NAME "fmsne_implem"
extern int __pyx_module_is_main_fmsne_implem;
int __pyx_module_is_main_fmsne_implem = 0;

/* Implementation of 'fmsne_implem' */
static PyObject *__pyx_builtin_range;
static PyObject *__pyx_builtin_ImportError;
static PyObject *__pyx_builtin_ValueError;
static PyObject *__pyx_builtin_MemoryError;
static PyObject *__pyx_builtin_enumerate;
static PyObject *__pyx_builtin_TypeError;
static PyObject *__pyx_builtin_Ellipsis;
static PyObject *__pyx_builtin_id;
static PyObject *__pyx_builtin_IndexError;
static const char __pyx_k_N[] = "N";
static const char __pyx_k_O[] = "O";
static const char __pyx_k_c[] = "c";
static const char __pyx_k_id[] = "id";
static const char __pyx_k_np[] = "np";
static const char __pyx_k_Kup[] = "Kup";
static const char __pyx_k_eps[] = "eps";
static const char __pyx_k_new[] = "__new__";
static const char __pyx_k_obj[] = "obj";
static const char __pyx_k_base[] = "base";
static const char __pyx_k_dict[] = "__dict__";
static const char __pyx_k_ftol[] = "ftol";
static const char __pyx_k_gtol[] = "gtol";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_mode[] = "mode";
static const char __pyx_k_n_rs[] = "n_rs";
static const char __pyx_k_name[] = "name";
static const char __pyx_k_ndim[] = "ndim";
static const char __pyx_k_pack[] = "pack";
static const char __pyx_k_qnxk[] = "qnxk";
static const char __pyx_k_rnxk[] = "rnxk";
static const char __pyx_k_size[] = "size";
static const char __pyx_k_step[] = "step";
static const char __pyx_k_stop[] = "stop";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_ASCII[] = "ASCII";
static const char __pyx_k_L_min[] = "L_min";
static const char __pyx_k_X_hds[] = "X_hds";
static const char __pyx_k_X_lds[] = "X_lds";
static const char __pyx_k_class[] = "__class__";
static const char __pyx_k_cperp[] = "cperp";
static const char __pyx_k_d_hds[] = "d_hds";
static const char __pyx_k_d_lds[] = "d_lds";
static const char __pyx_k_dtype[] = "dtype";
static const char __pyx_k_error[] = "error";
static const char __pyx_k_finfo[] = "finfo";
static const char __pyx_k_fit_U[] = "fit_U";
static const char __pyx_k_flags[] = "flags";
static const char __pyx_k_maxls[] = "maxls";
static const char __pyx_k_numpy[] = "numpy";
static const char __pyx_k_range[] = "range";
static const char __pyx_k_rseed[] = "rseed";
static const char __pyx_k_shape[] = "shape";
static const char __pyx_k_start[] = "start";
static const char __pyx_k_encode[] = "encode";
static const char __pyx_k_format[] = "format";
static const char __pyx_k_import[] = "__import__";
static const char __pyx_k_maxcor[] = "maxcor";
static const char __pyx_k_name_2[] = "__name__";
static const char __pyx_k_pickle[] = "pickle";
static const char __pyx_k_reduce[] = "__reduce__";
static const char __pyx_k_struct[] = "struct";
static const char __pyx_k_sym_nn[] = "sym_nn";
static const char __pyx_k_unpack[] = "unpack";
static const char __pyx_k_update[] = "update";
static const char __pyx_k_float64[] = "float64";
static const char __pyx_k_fortran[] = "fortran";
static const char __pyx_k_memview[] = "memview";
static const char __pyx_k_nit_max[] = "nit_max";
static const char __pyx_k_Ellipsis[] = "Ellipsis";
static const char __pyx_k_getstate[] = "__getstate__";
static const char __pyx_k_itemsize[] = "itemsize";
static const char __pyx_k_pyx_type[] = "__pyx_type";
static const char __pyx_k_setstate[] = "__setstate__";
static const char __pyx_k_TypeError[] = "TypeError";
static const char __pyx_k_enumerate[] = "enumerate";
static const char __pyx_k_ms_thetha[] = "ms_thetha";
static const char __pyx_k_pyx_state[] = "__pyx_state";
static const char __pyx_k_reduce_ex[] = "__reduce_ex__";
static const char __pyx_k_rnxk_size[] = "rnxk_size";
static const char __pyx_k_IndexError[] = "IndexError";
static const char __pyx_k_ValueError[] = "ValueError";
static const char __pyx_k_pyx_result[] = "__pyx_result";
static const char __pyx_k_pyx_vtable[] = "__pyx_vtable__";
static const char __pyx_k_ImportError[] = "ImportError";
static const char __pyx_k_MemoryError[] = "MemoryError";
static const char __pyx_k_PickleError[] = "PickleError";
static const char __pyx_k_n_components[] = "n_components";
static const char __pyx_k_pyx_checksum[] = "__pyx_checksum";
static const char __pyx_k_stringsource[] = "stringsource";
static const char __pyx_k_pyx_getbuffer[] = "__pyx_getbuffer";
static const char __pyx_k_reduce_cython[] = "__reduce_cython__";
static const char __pyx_k_View_MemoryView[] = "View.MemoryView";
static const char __pyx_k_allocate_buffer[] = "allocate_buffer";
static const char __pyx_k_dtype_is_object[] = "dtype_is_object";
static const char __pyx_k_pyx_PickleError[] = "__pyx_PickleError";
static const char __pyx_k_setstate_cython[] = "__setstate_cython__";
static const char __pyx_k_pyx_unpickle_Enum[] = "__pyx_unpickle_Enum";
static const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";
static const char __pyx_k_strided_and_direct[] = "<strided and direct>";
static const char __pyx_k_strided_and_indirect[] = "<strided and indirect>";
static const char __pyx_k_contiguous_and_direct[] = "<contiguous and direct>";
static const char __pyx_k_MemoryView_of_r_object[] = "<MemoryView of %r object>";
static const char __pyx_k_MemoryView_of_r_at_0x_x[] = "<MemoryView of %r at 0x%x>";
static const char __pyx_k_contiguous_and_indirect[] = "<contiguous and indirect>";
static const char __pyx_k_Cannot_index_with_type_s[] = "Cannot index with type '%s'";
static const char __pyx_k_Invalid_shape_in_axis_d_d[] = "Invalid shape in axis %d: %d.";
static const char __pyx_k_itemsize_0_for_cython_array[] = "itemsize <= 0 for cython.array";
static const char __pyx_k_unable_to_allocate_array_data[] = "unable to allocate array data.";
static const char __pyx_k_strided_and_direct_or_indirect[] = "<strided and direct or indirect>";
static const char __pyx_k_numpy_core_multiarray_failed_to[] = "numpy.core.multiarray failed to import";
static const char __pyx_k_Buffer_view_does_not_expose_stri[] = "Buffer view does not expose strides";
static const char __pyx_k_Can_only_create_a_buffer_that_is[] = "Can only create a buffer that is contiguous in memory.";
static const char __pyx_k_Cannot_assign_to_read_only_memor[] = "Cannot assign to read-only memoryview";
static const char __pyx_k_Cannot_create_writable_memory_vi[] = "Cannot create writable memory view from read-only memoryview";
static const char __pyx_k_Empty_shape_tuple_for_cython_arr[] = "Empty shape tuple for cython.array";
static const char __pyx_k_Incompatible_checksums_0x_x_vs_0[] = "Incompatible checksums (0x%x vs (0xb068931, 0x82a3537, 0x6ae9995) = (name))";
static const char __pyx_k_Indirect_dimensions_not_supporte[] = "Indirect dimensions not supported";
static const char __pyx_k_Invalid_mode_expected_c_or_fortr[] = "Invalid mode, expected 'c' or 'fortran', got %s";
static const char __pyx_k_Out_of_bounds_on_buffer_access_a[] = "Out of bounds on buffer access (axis %d)";
static const char __pyx_k_Unable_to_convert_item_to_object[] = "Unable to convert item to object";
static const char __pyx_k_got_differing_extents_in_dimensi[] = "got differing extents in dimension %d (got %d and %d)";
static const char __pyx_k_no_default___reduce___due_to_non[] = "no default __reduce__ due to non-trivial __cinit__";
static const char __pyx_k_numpy_core_umath_failed_to_impor[] = "numpy.core.umath failed to import";
static const char __pyx_k_unable_to_allocate_shape_and_str[] = "unable to allocate shape and strides.";
static PyObject *__pyx_n_s_ASCII;
static PyObject *__pyx_kp_s_Buffer_view_does_not_expose_stri;
static PyObject *__pyx_kp_s_Can_only_create_a_buffer_that_is;
static PyObject *__pyx_kp_s_Cannot_assign_to_read_only_memor;
static PyObject *__pyx_kp_s_Cannot_create_writable_memory_vi;
static PyObject *__pyx_kp_s_Cannot_index_with_type_s;
static PyObject *__pyx_n_s_Ellipsis;
static PyObject *__pyx_kp_s_Empty_shape_tuple_for_cython_arr;
static PyObject *__pyx_n_s_ImportError;
static PyObject *__pyx_kp_s_Incompatible_checksums_0x_x_vs_0;
static PyObject *__pyx_n_s_IndexError;
static PyObject *__pyx_kp_s_Indirect_dimensions_not_supporte;
static PyObject *__pyx_kp_s_Invalid_mode_expected_c_or_fortr;
static PyObject *__pyx_kp_s_Invalid_shape_in_axis_d_d;
static PyObject *__pyx_n_s_Kup;
static PyObject *__pyx_n_s_L_min;
static PyObject *__pyx_n_s_MemoryError;
static PyObject *__pyx_kp_s_MemoryView_of_r_at_0x_x;
static PyObject *__pyx_kp_s_MemoryView_of_r_object;
static PyObject *__pyx_n_s_N;
static PyObject *__pyx_n_b_O;
static PyObject *__pyx_kp_s_Out_of_bounds_on_buffer_access_a;
static PyObject *__pyx_n_s_PickleError;
static PyObject *__pyx_n_s_TypeError;
static PyObject *__pyx_kp_s_Unable_to_convert_item_to_object;
static PyObject *__pyx_n_s_ValueError;
static PyObject *__pyx_n_s_View_MemoryView;
static PyObject *__pyx_n_s_X_hds;
static PyObject *__pyx_n_s_X_lds;
static PyObject *__pyx_n_s_allocate_buffer;
static PyObject *__pyx_n_s_base;
static PyObject *__pyx_n_s_c;
static PyObject *__pyx_n_u_c;
static PyObject *__pyx_n_s_class;
static PyObject *__pyx_n_s_cline_in_traceback;
static PyObject *__pyx_kp_s_contiguous_and_direct;
static PyObject *__pyx_kp_s_contiguous_and_indirect;
static PyObject *__pyx_n_s_cperp;
static PyObject *__pyx_n_s_d_hds;
static PyObject *__pyx_n_s_d_lds;
static PyObject *__pyx_n_s_dict;
static PyObject *__pyx_n_s_dtype;
static PyObject *__pyx_n_s_dtype_is_object;
static PyObject *__pyx_n_s_encode;
static PyObject *__pyx_n_s_enumerate;
static PyObject *__pyx_n_s_eps;
static PyObject *__pyx_n_s_error;
static PyObject *__pyx_n_s_finfo;
static PyObject *__pyx_n_s_fit_U;
static PyObject *__pyx_n_s_flags;
static PyObject *__pyx_n_s_float64;
static PyObject *__pyx_n_s_format;
static PyObject *__pyx_n_s_fortran;
static PyObject *__pyx_n_u_fortran;
static PyObject *__pyx_n_s_ftol;
static PyObject *__pyx_n_s_getstate;
static PyObject *__pyx_kp_s_got_differing_extents_in_dimensi;
static PyObject *__pyx_n_s_gtol;
static PyObject *__pyx_n_s_id;
static PyObject *__pyx_n_s_import;
static PyObject *__pyx_n_s_itemsize;
static PyObject *__pyx_kp_s_itemsize_0_for_cython_array;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_maxcor;
static PyObject *__pyx_n_s_maxls;
static PyObject *__pyx_n_s_memview;
static PyObject *__pyx_n_s_mode;
static PyObject *__pyx_n_s_ms_thetha;
static PyObject *__pyx_n_s_n_components;
static PyObject *__pyx_n_s_n_rs;
static PyObject *__pyx_n_s_name;
static PyObject *__pyx_n_s_name_2;
static PyObject *__pyx_n_s_ndim;
static PyObject *__pyx_n_s_new;
static PyObject *__pyx_n_s_nit_max;
static PyObject *__pyx_kp_s_no_default___reduce___due_to_non;
static PyObject *__pyx_n_s_np;
static PyObject *__pyx_n_s_numpy;
static PyObject *__pyx_kp_u_numpy_core_multiarray_failed_to;
static PyObject *__pyx_kp_u_numpy_core_umath_failed_to_impor;
static PyObject *__pyx_n_s_obj;
static PyObject *__pyx_n_s_pack;
static PyObject *__pyx_n_s_pickle;
static PyObject *__pyx_n_s_pyx_PickleError;
static PyObject *__pyx_n_s_pyx_checksum;
static PyObject *__pyx_n_s_pyx_getbuffer;
static PyObject *__pyx_n_s_pyx_result;
static PyObject *__pyx_n_s_pyx_state;
static PyObject *__pyx_n_s_pyx_type;
static PyObject *__pyx_n_s_pyx_unpickle_Enum;
static PyObject *__pyx_n_s_pyx_vtable;
static PyObject *__pyx_n_s_qnxk;
static PyObject *__pyx_n_s_range;
static PyObject *__pyx_n_s_reduce;
static PyObject *__pyx_n_s_reduce_cython;
static PyObject *__pyx_n_s_reduce_ex;
static PyObject *__pyx_n_s_rnxk;
static PyObject *__pyx_n_s_rnxk_size;
static PyObject *__pyx_n_s_rseed;
static PyObject *__pyx_n_s_setstate;
static PyObject *__pyx_n_s_setstate_cython;
static PyObject *__pyx_n_s_shape;
static PyObject *__pyx_n_s_size;
static PyObject *__pyx_n_s_start;
static PyObject *__pyx_n_s_step;
static PyObject *__pyx_n_s_stop;
static PyObject *__pyx_kp_s_strided_and_direct;
static PyObject *__pyx_kp_s_strided_and_direct_or_indirect;
static PyObject *__pyx_kp_s_strided_and_indirect;
static PyObject *__pyx_kp_s_stringsource;
static PyObject *__pyx_n_s_struct;
static PyObject *__pyx_n_s_sym_nn;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_kp_s_unable_to_allocate_array_data;
static PyObject *__pyx_kp_s_unable_to_allocate_shape_and_str;
static PyObject *__pyx_n_s_unpack;
static PyObject *__pyx_n_s_update;
static PyObject *__pyx_pf_12fmsne_implem_mssne_implem(CYTHON_UNUSED PyObject *__pyx_self, __Pyx_memviewslice __pyx_v_X_hds, __Pyx_memviewslice __pyx_v_X_lds, int __pyx_v_N, int __pyx_v_d_hds, int __pyx_v_n_components, int __pyx_v_fit_U, int __pyx_v_nit_max, double __pyx_v_gtol, double __pyx_v_ftol, int __pyx_v_maxls, int __pyx_v_maxcor, int __pyx_v_L_min); /* proto */
static PyObject *__pyx_pf_12fmsne_implem_2mstsne_implem(CYTHON_UNUSED PyObject *__pyx_self, __Pyx_memviewslice __pyx_v_X_hds, __Pyx_memviewslice __pyx_v_X_lds, int __pyx_v_N, int __pyx_v_d_hds, int __pyx_v_n_components, int __pyx_v_nit_max, double __pyx_v_gtol, double __pyx_v_ftol, int __pyx_v_maxls, int __pyx_v_maxcor, int __pyx_v_L_min); /* proto */
static PyObject *__pyx_pf_12fmsne_implem_4fmssne_implem(CYTHON_UNUSED PyObject *__pyx_self, __Pyx_memviewslice __pyx_v_X_hds, __Pyx_memviewslice __pyx_v_X_lds, int __pyx_v_N, int __pyx_v_d_hds, int __pyx_v_n_components, int __pyx_v_cperp, int __pyx_v_n_rs, int __pyx_v_fit_U, double __pyx_v_ms_thetha, int __pyx_v_nit_max, double __pyx_v_gtol, double __pyx_v_ftol, int __pyx_v_maxls, int __pyx_v_maxcor, int __pyx_v_L_min, int __pyx_v_rseed, int __pyx_v_sym_nn); /* proto */
static PyObject *__pyx_pf_12fmsne_implem_6fmstsne_implem(CYTHON_UNUSED PyObject *__pyx_self, __Pyx_memviewslice __pyx_v_X_hds, __Pyx_memviewslice __pyx_v_X_lds, int __pyx_v_N, int __pyx_v_d_hds, int __pyx_v_n_components, int __pyx_v_cperp, int __pyx_v_n_rs, double __pyx_v_ms_thetha, int __pyx_v_nit_max, double __pyx_v_gtol, double __pyx_v_ftol, int __pyx_v_maxls, int __pyx_v_maxcor, int __pyx_v_L_min, int __pyx_v_rseed); /* proto */
static PyObject *__pyx_pf_12fmsne_implem_8drqa_qnx_rnx_auc(CYTHON_UNUSED PyObject *__pyx_self, __Pyx_memviewslice __pyx_v_X_hds, __Pyx_memviewslice __pyx_v_X_lds, int __pyx_v_N, int __pyx_v_d_hds, int __pyx_v_d_lds, int __pyx_v_Kup, __Pyx_memviewslice __pyx_v_qnxk, __Pyx_memviewslice __pyx_v_rnxk, int __pyx_v_rnxk_size); /* proto */
static int __pyx_array___pyx_pf_15View_dot_MemoryView_5array___cinit__(struct __pyx_array_obj *__pyx_v_self, PyObject *__pyx_v_shape, Py_ssize_t __pyx_v_itemsize, PyObject *__pyx_v_format, PyObject *__pyx_v_mode, int __pyx_v_allocate_buffer); /* proto */
static int __pyx_array___pyx_pf_15View_dot_MemoryView_5array_2__getbuffer__(struct __pyx_array_obj *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /* proto */
static void __pyx_array___pyx_pf_15View_dot_MemoryView_5array_4__dealloc__(struct __pyx_array_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_5array_7memview___get__(struct __pyx_array_obj *__pyx_v_self); /* proto */
static Py_ssize_t __pyx_array___pyx_pf_15View_dot_MemoryView_5array_6__len__(struct __pyx_array_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_array___pyx_pf_15View_dot_MemoryView_5array_8__getattr__(struct __pyx_array_obj *__pyx_v_self, PyObject *__pyx_v_attr); /* proto */
static PyObject *__pyx_array___pyx_pf_15View_dot_MemoryView_5array_10__getitem__(struct __pyx_array_obj *__pyx_v_self, PyObject *__pyx_v_item); /* proto */
static int __pyx_array___pyx_pf_15View_dot_MemoryView_5array_12__setitem__(struct __pyx_array_obj *__pyx_v_self, PyObject *__pyx_v_item, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf___pyx_array___reduce_cython__(CYTHON_UNUSED struct __pyx_array_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf___pyx_array_2__setstate_cython__(CYTHON_UNUSED struct __pyx_array_obj *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_MemviewEnum___pyx_pf_15View_dot_MemoryView_4Enum___init__(struct __pyx_MemviewEnum_obj *__pyx_v_self, PyObject *__pyx_v_name); /* proto */
static PyObject *__pyx_MemviewEnum___pyx_pf_15View_dot_MemoryView_4Enum_2__repr__(struct __pyx_MemviewEnum_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf___pyx_MemviewEnum___reduce_cython__(struct __pyx_MemviewEnum_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf___pyx_MemviewEnum_2__setstate_cython__(struct __pyx_MemviewEnum_obj *__pyx_v_self, PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview___cinit__(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_obj, int __pyx_v_flags, int __pyx_v_dtype_is_object); /* proto */
static void __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_2__dealloc__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_4__getitem__(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_index); /* proto */
static int __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_6__setitem__(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_index, PyObject *__pyx_v_value); /* proto */
static int __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_8__getbuffer__(struct __pyx_memoryview_obj *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_1T___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_4base___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_5shape___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_7strides___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_10suboffsets___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_4ndim___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_8itemsize___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_6nbytes___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_4size___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static Py_ssize_t __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_10__len__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_12__repr__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_14__str__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_16is_c_contig(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_18is_f_contig(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_20copy(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_22copy_fortran(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf___pyx_memoryview___reduce_cython__(CYTHON_UNUSED struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf___pyx_memoryview_2__setstate_cython__(CYTHON_UNUSED struct __pyx_memoryview_obj *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static void __pyx_memoryviewslice___pyx_pf_15View_dot_MemoryView_16_memoryviewslice___dealloc__(struct __pyx_memoryviewslice_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_16_memoryviewslice_4base___get__(struct __pyx_memoryviewslice_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf___pyx_memoryviewslice___reduce_cython__(CYTHON_UNUSED struct __pyx_memoryviewslice_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf___pyx_memoryviewslice_2__setstate_cython__(CYTHON_UNUSED struct __pyx_memoryviewslice_obj *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView___pyx_unpickle_Enum(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_tp_new_array(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_Enum(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_memoryview(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new__memoryviewslice(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_int_0;
static PyObject *__pyx_int_1;
static PyObject *__pyx_int_112105877;
static PyObject *__pyx_int_136983863;
static PyObject *__pyx_int_184977713;
static PyObject *__pyx_int_neg_1;
static PyObject *__pyx_tuple_;
static PyObject *__pyx_tuple__2;
static PyObject *__pyx_tuple__3;
static PyObject *__pyx_tuple__4;
static PyObject *__pyx_tuple__5;
static PyObject *__pyx_tuple__6;
static PyObject *__pyx_tuple__7;
static PyObject *__pyx_tuple__8;
static PyObject *__pyx_tuple__9;
static PyObject *__pyx_slice__17;
static PyObject *__pyx_tuple__10;
static PyObject *__pyx_tuple__11;
static PyObject *__pyx_tuple__12;
static PyObject *__pyx_tuple__13;
static PyObject *__pyx_tuple__14;
static PyObject *__pyx_tuple__15;
static PyObject *__pyx_tuple__16;
static PyObject *__pyx_tuple__18;
static PyObject *__pyx_tuple__19;
static PyObject *__pyx_tuple__20;
static PyObject *__pyx_tuple__21;
static PyObject *__pyx_tuple__22;
static PyObject *__pyx_tuple__23;
static PyObject *__pyx_tuple__24;
static PyObject *__pyx_tuple__25;
static PyObject *__pyx_tuple__26;
static PyObject *__pyx_tuple__27;
static PyObject *__pyx_codeobj__28;
/* Late includes */

/* "fmsne_implem.pyx":66
 * #######################################################
 * 
 * cdef inline double min_arr_ptr(const double* x, Py_ssize_t m) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     Return the minimum value in a one-dimensional array, assuming the latter has at least one element.
 */

static CYTHON_INLINE double __pyx_f_12fmsne_implem_min_arr_ptr(double const *__pyx_v_x, Py_ssize_t __pyx_v_m) {
  Py_ssize_t __pyx_v_i;
  double __pyx_v_v;
  double __pyx_r;
  Py_ssize_t __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;

  /* "fmsne_implem.pyx":72
 *     """
 *     cdef Py_ssize_t i
 *     cdef double v = x[0]             # <<<<<<<<<<<<<<
 *     for i in range(1, m, 1):
 *         if x[i] < v:
 */
  __pyx_v_v = (__pyx_v_x[0]);

  /* "fmsne_implem.pyx":73
 *     cdef Py_ssize_t i
 *     cdef double v = x[0]
 *     for i in range(1, m, 1):             # <<<<<<<<<<<<<<
 *         if x[i] < v:
 *             v = x[i]
 */
  __pyx_t_1 = __pyx_v_m;
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 1; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "fmsne_implem.pyx":74
 *     cdef double v = x[0]
 *     for i in range(1, m, 1):
 *         if x[i] < v:             # <<<<<<<<<<<<<<
 *             v = x[i]
 *     return v
 */
    __pyx_t_4 = (((__pyx_v_x[__pyx_v_i]) < __pyx_v_v) != 0);
    if (__pyx_t_4) {

      /* "fmsne_implem.pyx":75
 *     for i in range(1, m, 1):
 *         if x[i] < v:
 *             v = x[i]             # <<<<<<<<<<<<<<
 *     return v
 * 
 */
      __pyx_v_v = (__pyx_v_x[__pyx_v_i]);

      /* "fmsne_implem.pyx":74
 *     cdef double v = x[0]
 *     for i in range(1, m, 1):
 *         if x[i] < v:             # <<<<<<<<<<<<<<
 *             v = x[i]
 *     return v
 */
    }
  }

  /* "fmsne_implem.pyx":76
 *         if x[i] < v:
 *             v = x[i]
 *     return v             # <<<<<<<<<<<<<<
 * 
 * cdef inline double max_arr_ptr(const double* x, Py_ssize_t m) nogil:
 */
  __pyx_r = __pyx_v_v;
  goto __pyx_L0;

  /* "fmsne_implem.pyx":66
 * #######################################################
 * 
 * cdef inline double min_arr_ptr(const double* x, Py_ssize_t m) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     Return the minimum value in a one-dimensional array, assuming the latter has at least one element.
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "fmsne_implem.pyx":78
 *     return v
 * 
 * cdef inline double max_arr_ptr(const double* x, Py_ssize_t m) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     Return the maximum value in a one-dimensional array, assuming the latter has at least one element.
 */

static CYTHON_INLINE double __pyx_f_12fmsne_implem_max_arr_ptr(double const *__pyx_v_x, Py_ssize_t __pyx_v_m) {
  Py_ssize_t __pyx_v_i;
  double __pyx_v_v;
  double __pyx_r;
  Py_ssize_t __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;

  /* "fmsne_implem.pyx":84
 *     """
 *     cdef Py_ssize_t i
 *     cdef double v = x[0]             # <<<<<<<<<<<<<<
 *     for i in range(1, m, 1):
 *         if x[i] > v:
 */
  __pyx_v_v = (__pyx_v_x[0]);

  /* "fmsne_implem.pyx":85
 *     cdef Py_ssize_t i
 *     cdef double v = x[0]
 *     for i in range(1, m, 1):             # <<<<<<<<<<<<<<
 *         if x[i] > v:
 *             v = x[i]
 */
  __pyx_t_1 = __pyx_v_m;
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 1; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "fmsne_implem.pyx":86
 *     cdef double v = x[0]
 *     for i in range(1, m, 1):
 *         if x[i] > v:             # <<<<<<<<<<<<<<
 *             v = x[i]
 *     return v
 */
    __pyx_t_4 = (((__pyx_v_x[__pyx_v_i]) > __pyx_v_v) != 0);
    if (__pyx_t_4) {

      /* "fmsne_implem.pyx":87
 *     for i in range(1, m, 1):
 *         if x[i] > v:
 *             v = x[i]             # <<<<<<<<<<<<<<
 *     return v
 * 
 */
      __pyx_v_v = (__pyx_v_x[__pyx_v_i]);

      /* "fmsne_implem.pyx":86
 *     cdef double v = x[0]
 *     for i in range(1, m, 1):
 *         if x[i] > v:             # <<<<<<<<<<<<<<
 *             v = x[i]
 *     return v
 */
    }
  }

  /* "fmsne_implem.pyx":88
 *         if x[i] > v:
 *             v = x[i]
 *     return v             # <<<<<<<<<<<<<<
 * 
 * cdef inline Py_ssize_t max_arr_ptr_Pysst(const Py_ssize_t* x, Py_ssize_t m) nogil:
 */
  __pyx_r = __pyx_v_v;
  goto __pyx_L0;

  /* "fmsne_implem.pyx":78
 *     return v
 * 
 * cdef inline double max_arr_ptr(const double* x, Py_ssize_t m) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     Return the maximum value in a one-dimensional array, assuming the latter has at least one element.
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "fmsne_implem.pyx":90
 *     return v
 * 
 * cdef inline Py_ssize_t max_arr_ptr_Pysst(const Py_ssize_t* x, Py_ssize_t m) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     Return the maximum value in a one-dimensional array, assuming the latter has at least one element.
 */

static CYTHON_INLINE Py_ssize_t __pyx_f_12fmsne_implem_max_arr_ptr_Pysst(Py_ssize_t const *__pyx_v_x, Py_ssize_t __pyx_v_m) {
  Py_ssize_t __pyx_v_i;
  Py_ssize_t __pyx_v_v;
  Py_ssize_t __pyx_r;
  Py_ssize_t __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;

  /* "fmsne_implem.pyx":96
 *     """
 *     cdef Py_ssize_t i
 *     cdef Py_ssize_t v = x[0]             # <<<<<<<<<<<<<<
 *     for i in range(1, m, 1):
 *         if x[i] > v:
 */
  __pyx_v_v = (__pyx_v_x[0]);

  /* "fmsne_implem.pyx":97
 *     cdef Py_ssize_t i
 *     cdef Py_ssize_t v = x[0]
 *     for i in range(1, m, 1):             # <<<<<<<<<<<<<<
 *         if x[i] > v:
 *             v = x[i]
 */
  __pyx_t_1 = __pyx_v_m;
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 1; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "fmsne_implem.pyx":98
 *     cdef Py_ssize_t v = x[0]
 *     for i in range(1, m, 1):
 *         if x[i] > v:             # <<<<<<<<<<<<<<
 *             v = x[i]
 *     return v
 */
    __pyx_t_4 = (((__pyx_v_x[__pyx_v_i]) > __pyx_v_v) != 0);
    if (__pyx_t_4) {

      /* "fmsne_implem.pyx":99
 *     for i in range(1, m, 1):
 *         if x[i] > v:
 *             v = x[i]             # <<<<<<<<<<<<<<
 *     return v
 * 
 */
      __pyx_v_v = (__pyx_v_x[__pyx_v_i]);

      /* "fmsne_implem.pyx":98
 *     cdef Py_ssize_t v = x[0]
 *     for i in range(1, m, 1):
 *         if x[i] > v:             # <<<<<<<<<<<<<<
 *             v = x[i]
 *     return v
 */
    }
  }

  /* "fmsne_implem.pyx":100
 *         if x[i] > v:
 *             v = x[i]
 *     return v             # <<<<<<<<<<<<<<
 * 
 * cdef inline double max_arr2d_col(double** x, Py_ssize_t m, Py_ssize_t c) nogil:
 */
  __pyx_r = __pyx_v_v;
  goto __pyx_L0;

  /* "fmsne_implem.pyx":90
 *     return v
 * 
 * cdef inline Py_ssize_t max_arr_ptr_Pysst(const Py_ssize_t* x, Py_ssize_t m) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     Return the maximum value in a one-dimensional array, assuming the latter has at least one element.
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "fmsne_implem.pyx":102
 *     return v
 * 
 * cdef inline double max_arr2d_col(double** x, Py_ssize_t m, Py_ssize_t c) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     Search the maximum of some column in a 2d array. m is the number of rows, c is the column to search.
 */

static CYTHON_INLINE double __pyx_f_12fmsne_implem_max_arr2d_col(double **__pyx_v_x, Py_ssize_t __pyx_v_m, Py_ssize_t __pyx_v_c) {
  Py_ssize_t __pyx_v_i;
  double __pyx_v_v;
  double __pyx_r;
  Py_ssize_t __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;

  /* "fmsne_implem.pyx":107
 *     """
 *     cdef Py_ssize_t i
 *     cdef double v = x[0][c]             # <<<<<<<<<<<<<<
 *     for i in range(1, m, 1):
 *         if x[i][c] > v:
 */
  __pyx_v_v = ((__pyx_v_x[0])[__pyx_v_c]);

  /* "fmsne_implem.pyx":108
 *     cdef Py_ssize_t i
 *     cdef double v = x[0][c]
 *     for i in range(1, m, 1):             # <<<<<<<<<<<<<<
 *         if x[i][c] > v:
 *             v = x[i][c]
 */
  __pyx_t_1 = __pyx_v_m;
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 1; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "fmsne_implem.pyx":109
 *     cdef double v = x[0][c]
 *     for i in range(1, m, 1):
 *         if x[i][c] > v:             # <<<<<<<<<<<<<<
 *             v = x[i][c]
 *     return v
 */
    __pyx_t_4 = ((((__pyx_v_x[__pyx_v_i])[__pyx_v_c]) > __pyx_v_v) != 0);
    if (__pyx_t_4) {

      /* "fmsne_implem.pyx":110
 *     for i in range(1, m, 1):
 *         if x[i][c] > v:
 *             v = x[i][c]             # <<<<<<<<<<<<<<
 *     return v
 * 
 */
      __pyx_v_v = ((__pyx_v_x[__pyx_v_i])[__pyx_v_c]);

      /* "fmsne_implem.pyx":109
 *     cdef double v = x[0][c]
 *     for i in range(1, m, 1):
 *         if x[i][c] > v:             # <<<<<<<<<<<<<<
 *             v = x[i][c]
 *     return v
 */
    }
  }

  /* "fmsne_implem.pyx":111
 *         if x[i][c] > v:
 *             v = x[i][c]
 *     return v             # <<<<<<<<<<<<<<
 * 
 * cdef inline double min_arr_ptr_step(const double* x, Py_ssize_t m, Py_ssize_t start, Py_ssize_t step) nogil:
 */
  __pyx_r = __pyx_v_v;
  goto __pyx_L0;

  /* "fmsne_implem.pyx":102
 *     return v
 * 
 * cdef inline double max_arr2d_col(double** x, Py_ssize_t m, Py_ssize_t c) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     Search the maximum of some column in a 2d array. m is the number of rows, c is the column to search.
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "fmsne_implem.pyx":113
 *     return v
 * 
 * cdef inline double min_arr_ptr_step(const double* x, Py_ssize_t m, Py_ssize_t start, Py_ssize_t step) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     Similar to min_arr_ptr, but with start and step parameters.
 */

static CYTHON_INLINE double __pyx_f_12fmsne_implem_min_arr_ptr_step(double const *__pyx_v_x, Py_ssize_t __pyx_v_m, Py_ssize_t __pyx_v_start, Py_ssize_t __pyx_v_step) {
  double __pyx_v_v;
  double __pyx_r;
  int __pyx_t_1;

  /* "fmsne_implem.pyx":117
 *     Similar to min_arr_ptr, but with start and step parameters.
 *     """
 *     cdef double v = x[start]             # <<<<<<<<<<<<<<
 *     start += step
 *     while start < m:
 */
  __pyx_v_v = (__pyx_v_x[__pyx_v_start]);

  /* "fmsne_implem.pyx":118
 *     """
 *     cdef double v = x[start]
 *     start += step             # <<<<<<<<<<<<<<
 *     while start < m:
 *         if x[start] < v:
 */
  __pyx_v_start = (__pyx_v_start + __pyx_v_step);

  /* "fmsne_implem.pyx":119
 *     cdef double v = x[start]
 *     start += step
 *     while start < m:             # <<<<<<<<<<<<<<
 *         if x[start] < v:
 *             v = x[start]
 */
  while (1) {
    __pyx_t_1 = ((__pyx_v_start < __pyx_v_m) != 0);
    if (!__pyx_t_1) break;

    /* "fmsne_implem.pyx":120
 *     start += step
 *     while start < m:
 *         if x[start] < v:             # <<<<<<<<<<<<<<
 *             v = x[start]
 *         start += step
 */
    __pyx_t_1 = (((__pyx_v_x[__pyx_v_start]) < __pyx_v_v) != 0);
    if (__pyx_t_1) {

      /* "fmsne_implem.pyx":121
 *     while start < m:
 *         if x[start] < v:
 *             v = x[start]             # <<<<<<<<<<<<<<
 *         start += step
 *     return v
 */
      __pyx_v_v = (__pyx_v_x[__pyx_v_start]);

      /* "fmsne_implem.pyx":120
 *     start += step
 *     while start < m:
 *         if x[start] < v:             # <<<<<<<<<<<<<<
 *             v = x[start]
 *         start += step
 */
    }

    /* "fmsne_implem.pyx":122
 *         if x[start] < v:
 *             v = x[start]
 *         start += step             # <<<<<<<<<<<<<<
 *     return v
 * 
 */
    __pyx_v_start = (__pyx_v_start + __pyx_v_step);
  }

  /* "fmsne_implem.pyx":123
 *             v = x[start]
 *         start += step
 *     return v             # <<<<<<<<<<<<<<
 * 
 * cdef inline double max_arr_ptr_step(const double* x, Py_ssize_t m, Py_ssize_t start, Py_ssize_t step) nogil:
 */
  __pyx_r = __pyx_v_v;
  goto __pyx_L0;

  /* "fmsne_implem.pyx":113
 *     return v
 * 
 * cdef inline double min_arr_ptr_step(const double* x, Py_ssize_t m, Py_ssize_t start, Py_ssize_t step) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     Similar to min_arr_ptr, but with start and step parameters.
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "fmsne_implem.pyx":125
 *     return v
 * 
 * cdef inline double max_arr_ptr_step(const double* x, Py_ssize_t m, Py_ssize_t start, Py_ssize_t step) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     Similar to max_arr_ptr, but with start and step parameters.
 */

static CYTHON_INLINE double __pyx_f_12fmsne_implem_max_arr_ptr_step(double const *__pyx_v_x, Py_ssize_t __pyx_v_m, Py_ssize_t __pyx_v_start, Py_ssize_t __pyx_v_step) {
  double __pyx_v_v;
  double __pyx_r;
  int __pyx_t_1;

  /* "fmsne_implem.pyx":129
 *     Similar to max_arr_ptr, but with start and step parameters.
 *     """
 *     cdef double v = x[start]             # <<<<<<<<<<<<<<
 *     start += step
 *     while start < m:
 */
  __pyx_v_v = (__pyx_v_x[__pyx_v_start]);

  /* "fmsne_implem.pyx":130
 *     """
 *     cdef double v = x[start]
 *     start += step             # <<<<<<<<<<<<<<
 *     while start < m:
 *         if x[start] > v:
 */
  __pyx_v_start = (__pyx_v_start + __pyx_v_step);

  /* "fmsne_implem.pyx":131
 *     cdef double v = x[start]
 *     start += step
 *     while start < m:             # <<<<<<<<<<<<<<
 *         if x[start] > v:
 *             v = x[start]
 */
  while (1) {
    __pyx_t_1 = ((__pyx_v_start < __pyx_v_m) != 0);
    if (!__pyx_t_1) break;

    /* "fmsne_implem.pyx":132
 *     start += step
 *     while start < m:
 *         if x[start] > v:             # <<<<<<<<<<<<<<
 *             v = x[start]
 *         start += step
 */
    __pyx_t_1 = (((__pyx_v_x[__pyx_v_start]) > __pyx_v_v) != 0);
    if (__pyx_t_1) {

      /* "fmsne_implem.pyx":133
 *     while start < m:
 *         if x[start] > v:
 *             v = x[start]             # <<<<<<<<<<<<<<
 *         start += step
 *     return v
 */
      __pyx_v_v = (__pyx_v_x[__pyx_v_start]);

      /* "fmsne_implem.pyx":132
 *     start += step
 *     while start < m:
 *         if x[start] > v:             # <<<<<<<<<<<<<<
 *             v = x[start]
 *         start += step
 */
    }

    /* "fmsne_implem.pyx":134
 *         if x[start] > v:
 *             v = x[start]
 *         start += step             # <<<<<<<<<<<<<<
 *     return v
 * 
 */
    __pyx_v_start = (__pyx_v_start + __pyx_v_step);
  }

  /* "fmsne_implem.pyx":135
 *             v = x[start]
 *         start += step
 *     return v             # <<<<<<<<<<<<<<
 * 
 * #######################################################
 */
  __pyx_r = __pyx_v_v;
  goto __pyx_L0;

  /* "fmsne_implem.pyx":125
 *     return v
 * 
 * cdef inline double max_arr_ptr_step(const double* x, Py_ssize_t m, Py_ssize_t start, Py_ssize_t step) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     Similar to max_arr_ptr, but with start and step parameters.
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "fmsne_implem.pyx":141
 * #######################################################
 * 
 * cdef inline double sqeucl_dist_ptr(const double* x, const double* y, Py_ssize_t m) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     Computes the squared Euclidean distance between x and y, which are assumed to be one-dimensional and containing the same number m of elements.
 */

static CYTHON_INLINE double __pyx_f_12fmsne_implem_sqeucl_dist_ptr(double const *__pyx_v_x, double const *__pyx_v_y, Py_ssize_t __pyx_v_m) {
  Py_ssize_t __pyx_v_i;
  double __pyx_v_d;
  double __pyx_v_v;
  double __pyx_r;
  Py_ssize_t __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;

  /* "fmsne_implem.pyx":151
 *     """
 *     cdef Py_ssize_t i
 *     cdef double d = 0.0             # <<<<<<<<<<<<<<
 *     cdef double v
 *     for i in range(m):
 */
  __pyx_v_d = 0.0;

  /* "fmsne_implem.pyx":153
 *     cdef double d = 0.0
 *     cdef double v
 *     for i in range(m):             # <<<<<<<<<<<<<<
 *         v = x[i] - y[i]
 *         d += v*v
 */
  __pyx_t_1 = __pyx_v_m;
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "fmsne_implem.pyx":154
 *     cdef double v
 *     for i in range(m):
 *         v = x[i] - y[i]             # <<<<<<<<<<<<<<
 *         d += v*v
 *     return d
 */
    __pyx_v_v = ((__pyx_v_x[__pyx_v_i]) - (__pyx_v_y[__pyx_v_i]));

    /* "fmsne_implem.pyx":155
 *     for i in range(m):
 *         v = x[i] - y[i]
 *         d += v*v             # <<<<<<<<<<<<<<
 *     return d
 * 
 */
    __pyx_v_d = (__pyx_v_d + (__pyx_v_v * __pyx_v_v));
  }

  /* "fmsne_implem.pyx":156
 *         v = x[i] - y[i]
 *         d += v*v
 *     return d             # <<<<<<<<<<<<<<
 * 
 * #######################################################
 */
  __pyx_r = __pyx_v_d;
  goto __pyx_L0;

  /* "fmsne_implem.pyx":141
 * #######################################################
 * 
 * cdef inline double sqeucl_dist_ptr(const double* x, const double* y, Py_ssize_t m) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     Computes the squared Euclidean distance between x and y, which are assumed to be one-dimensional and containing the same number m of elements.
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "fmsne_implem.pyx":162
 * #######################################################
 * 
 * cdef inline double inf_dist_ptr(const double* x, const double* y, Py_ssize_t m) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     Computes the infinite distance (i.e. the distance based on the infinite norm) between x and y, which are assumed to be one-dimensional and with the same number of elements. x and y are assumed to have at least one element.
 */

static CYTHON_INLINE double __pyx_f_12fmsne_implem_inf_dist_ptr(double const *__pyx_v_x, double const *__pyx_v_y, Py_ssize_t __pyx_v_m) {
  Py_ssize_t __pyx_v_i;
  double __pyx_v_d;
  double __pyx_v_v;
  double __pyx_r;
  Py_ssize_t __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;

  /* "fmsne_implem.pyx":172
 *     """
 *     cdef Py_ssize_t i
 *     cdef double d = fabs(x[0] - y[0])             # <<<<<<<<<<<<<<
 *     cdef double v
 *     for i in range(1, m, 1):
 */
  __pyx_v_d = fabs(((__pyx_v_x[0]) - (__pyx_v_y[0])));

  /* "fmsne_implem.pyx":174
 *     cdef double d = fabs(x[0] - y[0])
 *     cdef double v
 *     for i in range(1, m, 1):             # <<<<<<<<<<<<<<
 *         v = fabs(x[i] - y[i])
 *         if v > d:
 */
  __pyx_t_1 = __pyx_v_m;
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 1; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "fmsne_implem.pyx":175
 *     cdef double v
 *     for i in range(1, m, 1):
 *         v = fabs(x[i] - y[i])             # <<<<<<<<<<<<<<
 *         if v > d:
 *             d = v
 */
    __pyx_v_v = fabs(((__pyx_v_x[__pyx_v_i]) - (__pyx_v_y[__pyx_v_i])));

    /* "fmsne_implem.pyx":176
 *     for i in range(1, m, 1):
 *         v = fabs(x[i] - y[i])
 *         if v > d:             # <<<<<<<<<<<<<<
 *             d = v
 *     return d
 */
    __pyx_t_4 = ((__pyx_v_v > __pyx_v_d) != 0);
    if (__pyx_t_4) {

      /* "fmsne_implem.pyx":177
 *         v = fabs(x[i] - y[i])
 *         if v > d:
 *             d = v             # <<<<<<<<<<<<<<
 *     return d
 * 
 */
      __pyx_v_d = __pyx_v_v;

      /* "fmsne_implem.pyx":176
 *     for i in range(1, m, 1):
 *         v = fabs(x[i] - y[i])
 *         if v > d:             # <<<<<<<<<<<<<<
 *             d = v
 *     return d
 */
    }
  }

  /* "fmsne_implem.pyx":178
 *         if v > d:
 *             d = v
 *     return d             # <<<<<<<<<<<<<<
 * 
 * #######################################################
 */
  __pyx_r = __pyx_v_d;
  goto __pyx_L0;

  /* "fmsne_implem.pyx":162
 * #######################################################
 * 
 * cdef inline double inf_dist_ptr(const double* x, const double* y, Py_ssize_t m) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     Computes the infinite distance (i.e. the distance based on the infinite norm) between x and y, which are assumed to be one-dimensional and with the same number of elements. x and y are assumed to have at least one element.
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "fmsne_implem.pyx":184
 * #######################################################
 * 
 * cdef inline double mean_arr_ptr_step(const double* x, Py_ssize_t m, Py_ssize_t start, Py_ssize_t step, double N) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     Return the mean of the elements pointed by x, at the indexes start, start+step, start+2*step, ..., until start+m-1.
 */

static CYTHON_INLINE double __pyx_f_12fmsne_implem_mean_arr_ptr_step(double const *__pyx_v_x, Py_ssize_t __pyx_v_m, Py_ssize_t __pyx_v_start, Py_ssize_t __pyx_v_step, double __pyx_v_N) {
  double __pyx_v_v;
  double __pyx_r;
  int __pyx_t_1;

  /* "fmsne_implem.pyx":190
 *     N is the number of elements over which we compute the mean.
 *     """
 *     cdef double v = x[start]             # <<<<<<<<<<<<<<
 *     start += step
 *     while start < m:
 */
  __pyx_v_v = (__pyx_v_x[__pyx_v_start]);

  /* "fmsne_implem.pyx":191
 *     """
 *     cdef double v = x[start]
 *     start += step             # <<<<<<<<<<<<<<
 *     while start < m:
 *         v += x[start]
 */
  __pyx_v_start = (__pyx_v_start + __pyx_v_step);

  /* "fmsne_implem.pyx":192
 *     cdef double v = x[start]
 *     start += step
 *     while start < m:             # <<<<<<<<<<<<<<
 *         v += x[start]
 *         start += step
 */
  while (1) {
    __pyx_t_1 = ((__pyx_v_start < __pyx_v_m) != 0);
    if (!__pyx_t_1) break;

    /* "fmsne_implem.pyx":193
 *     start += step
 *     while start < m:
 *         v += x[start]             # <<<<<<<<<<<<<<
 *         start += step
 *     return v/N
 */
    __pyx_v_v = (__pyx_v_v + (__pyx_v_x[__pyx_v_start]));

    /* "fmsne_implem.pyx":194
 *     while start < m:
 *         v += x[start]
 *         start += step             # <<<<<<<<<<<<<<
 *     return v/N
 * 
 */
    __pyx_v_start = (__pyx_v_start + __pyx_v_step);
  }

  /* "fmsne_implem.pyx":195
 *         v += x[start]
 *         start += step
 *     return v/N             # <<<<<<<<<<<<<<
 * 
 * #######################################################
 */
  __pyx_r = (__pyx_v_v / __pyx_v_N);
  goto __pyx_L0;

  /* "fmsne_implem.pyx":184
 * #######################################################
 * 
 * cdef inline double mean_arr_ptr_step(const double* x, Py_ssize_t m, Py_ssize_t start, Py_ssize_t step, double N) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     Return the mean of the elements pointed by x, at the indexes start, start+step, start+2*step, ..., until start+m-1.
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "fmsne_implem.pyx":201
 * #######################################################
 * 
 * cdef inline double var_arr_ptr_step(const double* x, Py_ssize_t m, Py_ssize_t start, Py_ssize_t step, double N, double den_var) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     Computes the variance of the elements pointed by x, at the indexes start, start + step, start + 2*step, ..., until start+m-1.
 */

static CYTHON_INLINE double __pyx_f_12fmsne_implem_var_arr_ptr_step(double const *__pyx_v_x, Py_ssize_t __pyx_v_m, Py_ssize_t __pyx_v_start, Py_ssize_t __pyx_v_step, double __pyx_v_N, double __pyx_v_den_var) {
  double __pyx_v_mu;
  double __pyx_v_diff;
  double __pyx_v_v;
  double __pyx_r;
  int __pyx_t_1;

  /* "fmsne_implem.pyx":208
 *     den_var can be set to N-1.0
 *     """
 *     cdef double mu = mean_arr_ptr_step(x, m, start, step, N)             # <<<<<<<<<<<<<<
 *     cdef double diff = x[start] - mu
 *     cdef double v = diff * diff
 */
  __pyx_v_mu = __pyx_f_12fmsne_implem_mean_arr_ptr_step(__pyx_v_x, __pyx_v_m, __pyx_v_start, __pyx_v_step, __pyx_v_N);

  /* "fmsne_implem.pyx":209
 *     """
 *     cdef double mu = mean_arr_ptr_step(x, m, start, step, N)
 *     cdef double diff = x[start] - mu             # <<<<<<<<<<<<<<
 *     cdef double v = diff * diff
 *     start += step
 */
  __pyx_v_diff = ((__pyx_v_x[__pyx_v_start]) - __pyx_v_mu);

  /* "fmsne_implem.pyx":210
 *     cdef double mu = mean_arr_ptr_step(x, m, start, step, N)
 *     cdef double diff = x[start] - mu
 *     cdef double v = diff * diff             # <<<<<<<<<<<<<<
 *     start += step
 *     while start < m:
 */
  __pyx_v_v = (__pyx_v_diff * __pyx_v_diff);

  /* "fmsne_implem.pyx":211
 *     cdef double diff = x[start] - mu
 *     cdef double v = diff * diff
 *     start += step             # <<<<<<<<<<<<<<
 *     while start < m:
 *         diff = x[start] - mu
 */
  __pyx_v_start = (__pyx_v_start + __pyx_v_step);

  /* "fmsne_implem.pyx":212
 *     cdef double v = diff * diff
 *     start += step
 *     while start < m:             # <<<<<<<<<<<<<<
 *         diff = x[start] - mu
 *         v += diff * diff
 */
  while (1) {
    __pyx_t_1 = ((__pyx_v_start < __pyx_v_m) != 0);
    if (!__pyx_t_1) break;

    /* "fmsne_implem.pyx":213
 *     start += step
 *     while start < m:
 *         diff = x[start] - mu             # <<<<<<<<<<<<<<
 *         v += diff * diff
 *         start += step
 */
    __pyx_v_diff = ((__pyx_v_x[__pyx_v_start]) - __pyx_v_mu);

    /* "fmsne_implem.pyx":214
 *     while start < m:
 *         diff = x[start] - mu
 *         v += diff * diff             # <<<<<<<<<<<<<<
 *         start += step
 *     return v/den_var
 */
    __pyx_v_v = (__pyx_v_v + (__pyx_v_diff * __pyx_v_diff));

    /* "fmsne_implem.pyx":215
 *         diff = x[start] - mu
 *         v += diff * diff
 *         start += step             # <<<<<<<<<<<<<<
 *     return v/den_var
 * 
 */
    __pyx_v_start = (__pyx_v_start + __pyx_v_step);
  }

  /* "fmsne_implem.pyx":216
 *         v += diff * diff
 *         start += step
 *     return v/den_var             # <<<<<<<<<<<<<<
 * 
 * #######################################################
 */
  __pyx_r = (__pyx_v_v / __pyx_v_den_var);
  goto __pyx_L0;

  /* "fmsne_implem.pyx":201
 * #######################################################
 * 
 * cdef inline double var_arr_ptr_step(const double* x, Py_ssize_t m, Py_ssize_t start, Py_ssize_t step, double N, double den_var) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     Computes the variance of the elements pointed by x, at the indexes start, start + step, start + 2*step, ..., until start+m-1.
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "fmsne_implem.pyx":222
 * #######################################################
 * 
 * cdef inline void free_int_2dmat(int** arr, Py_ssize_t M):             # <<<<<<<<<<<<<<
 *     """
 *     """
 */

static CYTHON_INLINE void __pyx_f_12fmsne_implem_free_int_2dmat(int **__pyx_v_arr, Py_ssize_t __pyx_v_M) {
  Py_ssize_t __pyx_v_m;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  __Pyx_RefNannySetupContext("free_int_2dmat", 0);

  /* "fmsne_implem.pyx":226
 *     """
 *     cdef Py_ssize_t m
 *     for m in range(M):             # <<<<<<<<<<<<<<
 *         PyMem_Free(arr[m])
 *     PyMem_Free(arr)
 */
  __pyx_t_1 = __pyx_v_M;
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_m = __pyx_t_3;

    /* "fmsne_implem.pyx":227
 *     cdef Py_ssize_t m
 *     for m in range(M):
 *         PyMem_Free(arr[m])             # <<<<<<<<<<<<<<
 *     PyMem_Free(arr)
 * 
 */
    PyMem_Free((__pyx_v_arr[__pyx_v_m]));
  }

  /* "fmsne_implem.pyx":228
 *     for m in range(M):
 *         PyMem_Free(arr[m])
 *     PyMem_Free(arr)             # <<<<<<<<<<<<<<
 * 
 * cdef inline void free_int_3dmat(int*** arr, Py_ssize_t M, Py_ssize_t N):
 */
  PyMem_Free(__pyx_v_arr);

  /* "fmsne_implem.pyx":222
 * #######################################################
 * 
 * cdef inline void free_int_2dmat(int** arr, Py_ssize_t M):             # <<<<<<<<<<<<<<
 *     """
 *     """
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "fmsne_implem.pyx":230
 *     PyMem_Free(arr)
 * 
 * cdef inline void free_int_3dmat(int*** arr, Py_ssize_t M, Py_ssize_t N):             # <<<<<<<<<<<<<<
 *     """
 *     """
 */

static CYTHON_INLINE void __pyx_f_12fmsne_implem_free_int_3dmat(int ***__pyx_v_arr, Py_ssize_t __pyx_v_M, Py_ssize_t __pyx_v_N) {
  Py_ssize_t __pyx_v_m;
  Py_ssize_t __pyx_v_n;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  __Pyx_RefNannySetupContext("free_int_3dmat", 0);

  /* "fmsne_implem.pyx":234
 *     """
 *     cdef Py_ssize_t m, n
 *     for m in range(M):             # <<<<<<<<<<<<<<
 *         for n in range(N):
 *             PyMem_Free(arr[m][n])
 */
  __pyx_t_1 = __pyx_v_M;
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_m = __pyx_t_3;

    /* "fmsne_implem.pyx":235
 *     cdef Py_ssize_t m, n
 *     for m in range(M):
 *         for n in range(N):             # <<<<<<<<<<<<<<
 *             PyMem_Free(arr[m][n])
 *         PyMem_Free(arr[m])
 */
    __pyx_t_4 = __pyx_v_N;
    __pyx_t_5 = __pyx_t_4;
    for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
      __pyx_v_n = __pyx_t_6;

      /* "fmsne_implem.pyx":236
 *     for m in range(M):
 *         for n in range(N):
 *             PyMem_Free(arr[m][n])             # <<<<<<<<<<<<<<
 *         PyMem_Free(arr[m])
 *     PyMem_Free(arr)
 */
      PyMem_Free(((__pyx_v_arr[__pyx_v_m])[__pyx_v_n]));
    }

    /* "fmsne_implem.pyx":237
 *         for n in range(N):
 *             PyMem_Free(arr[m][n])
 *         PyMem_Free(arr[m])             # <<<<<<<<<<<<<<
 *     PyMem_Free(arr)
 * 
 */
    PyMem_Free((__pyx_v_arr[__pyx_v_m]));
  }

  /* "fmsne_implem.pyx":238
 *             PyMem_Free(arr[m][n])
 *         PyMem_Free(arr[m])
 *     PyMem_Free(arr)             # <<<<<<<<<<<<<<
 * 
 * cdef inline void free_dble_2dmat(double** arr, Py_ssize_t M):
 */
  PyMem_Free(__pyx_v_arr);

  /* "fmsne_implem.pyx":230
 *     PyMem_Free(arr)
 * 
 * cdef inline void free_int_3dmat(int*** arr, Py_ssize_t M, Py_ssize_t N):             # <<<<<<<<<<<<<<
 *     """
 *     """
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "fmsne_implem.pyx":240
 *     PyMem_Free(arr)
 * 
 * cdef inline void free_dble_2dmat(double** arr, Py_ssize_t M):             # <<<<<<<<<<<<<<
 *     """
 *     """
 */

static CYTHON_INLINE void __pyx_f_12fmsne_implem_free_dble_2dmat(double **__pyx_v_arr, Py_ssize_t __pyx_v_M) {
  Py_ssize_t __pyx_v_m;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  __Pyx_RefNannySetupContext("free_dble_2dmat", 0);

  /* "fmsne_implem.pyx":244
 *     """
 *     cdef Py_ssize_t m
 *     for m in range(M):             # <<<<<<<<<<<<<<
 *         PyMem_Free(arr[m])
 *     PyMem_Free(arr)
 */
  __pyx_t_1 = __pyx_v_M;
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_m = __pyx_t_3;

    /* "fmsne_implem.pyx":245
 *     cdef Py_ssize_t m
 *     for m in range(M):
 *         PyMem_Free(arr[m])             # <<<<<<<<<<<<<<
 *     PyMem_Free(arr)
 * 
 */
    PyMem_Free((__pyx_v_arr[__pyx_v_m]));
  }

  /* "fmsne_implem.pyx":246
 *     for m in range(M):
 *         PyMem_Free(arr[m])
 *     PyMem_Free(arr)             # <<<<<<<<<<<<<<
 * 
 * cdef inline void free_dble_3dmat(double*** arr, Py_ssize_t M, Py_ssize_t N):
 */
  PyMem_Free(__pyx_v_arr);

  /* "fmsne_implem.pyx":240
 *     PyMem_Free(arr)
 * 
 * cdef inline void free_dble_2dmat(double** arr, Py_ssize_t M):             # <<<<<<<<<<<<<<
 *     """
 *     """
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "fmsne_implem.pyx":248
 *     PyMem_Free(arr)
 * 
 * cdef inline void free_dble_3dmat(double*** arr, Py_ssize_t M, Py_ssize_t N):             # <<<<<<<<<<<<<<
 *     """
 *     """
 */

static CYTHON_INLINE void __pyx_f_12fmsne_implem_free_dble_3dmat(double ***__pyx_v_arr, Py_ssize_t __pyx_v_M, Py_ssize_t __pyx_v_N) {
  Py_ssize_t __pyx_v_m;
  Py_ssize_t __pyx_v_n;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  __Pyx_RefNannySetupContext("free_dble_3dmat", 0);

  /* "fmsne_implem.pyx":252
 *     """
 *     cdef Py_ssize_t m, n
 *     for m in range(M):             # <<<<<<<<<<<<<<
 *         for n in range(N):
 *             PyMem_Free(arr[m][n])
 */
  __pyx_t_1 = __pyx_v_M;
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_m = __pyx_t_3;

    /* "fmsne_implem.pyx":253
 *     cdef Py_ssize_t m, n
 *     for m in range(M):
 *         for n in range(N):             # <<<<<<<<<<<<<<
 *             PyMem_Free(arr[m][n])
 *         PyMem_Free(arr[m])
 */
    __pyx_t_4 = __pyx_v_N;
    __pyx_t_5 = __pyx_t_4;
    for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
      __pyx_v_n = __pyx_t_6;

      /* "fmsne_implem.pyx":254
 *     for m in range(M):
 *         for n in range(N):
 *             PyMem_Free(arr[m][n])             # <<<<<<<<<<<<<<
 *         PyMem_Free(arr[m])
 *     PyMem_Free(arr)
 */
      PyMem_Free(((__pyx_v_arr[__pyx_v_m])[__pyx_v_n]));
    }

    /* "fmsne_implem.pyx":255
 *         for n in range(N):
 *             PyMem_Free(arr[m][n])
 *         PyMem_Free(arr[m])             # <<<<<<<<<<<<<<
 *     PyMem_Free(arr)
 * 
 */
    PyMem_Free((__pyx_v_arr[__pyx_v_m]));
  }

  /* "fmsne_implem.pyx":256
 *             PyMem_Free(arr[m][n])
 *         PyMem_Free(arr[m])
 *     PyMem_Free(arr)             # <<<<<<<<<<<<<<
 * 
 * cdef inline void free_Pysst_2dmat(Py_ssize_t** arr, Py_ssize_t M):
 */
  PyMem_Free(__pyx_v_arr);

  /* "fmsne_implem.pyx":248
 *     PyMem_Free(arr)
 * 
 * cdef inline void free_dble_3dmat(double*** arr, Py_ssize_t M, Py_ssize_t N):             # <<<<<<<<<<<<<<
 *     """
 *     """
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "fmsne_implem.pyx":258
 *     PyMem_Free(arr)
 * 
 * cdef inline void free_Pysst_2dmat(Py_ssize_t** arr, Py_ssize_t M):             # <<<<<<<<<<<<<<
 *     """
 *     """
 */

static CYTHON_INLINE void __pyx_f_12fmsne_implem_free_Pysst_2dmat(Py_ssize_t **__pyx_v_arr, Py_ssize_t __pyx_v_M) {
  Py_ssize_t __pyx_v_m;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  __Pyx_RefNannySetupContext("free_Pysst_2dmat", 0);

  /* "fmsne_implem.pyx":262
 *     """
 *     cdef Py_ssize_t m
 *     for m in range(M):             # <<<<<<<<<<<<<<
 *         PyMem_Free(arr[m])
 *     PyMem_Free(arr)
 */
  __pyx_t_1 = __pyx_v_M;
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_m = __pyx_t_3;

    /* "fmsne_implem.pyx":263
 *     cdef Py_ssize_t m
 *     for m in range(M):
 *         PyMem_Free(arr[m])             # <<<<<<<<<<<<<<
 *     PyMem_Free(arr)
 * 
 */
    PyMem_Free((__pyx_v_arr[__pyx_v_m]));
  }

  /* "fmsne_implem.pyx":264
 *     for m in range(M):
 *         PyMem_Free(arr[m])
 *     PyMem_Free(arr)             # <<<<<<<<<<<<<<
 * 
 * cdef inline void free_Pysst_3dmat(Py_ssize_t*** arr, Py_ssize_t M, Py_ssize_t N):
 */
  PyMem_Free(__pyx_v_arr);

  /* "fmsne_implem.pyx":258
 *     PyMem_Free(arr)
 * 
 * cdef inline void free_Pysst_2dmat(Py_ssize_t** arr, Py_ssize_t M):             # <<<<<<<<<<<<<<
 *     """
 *     """
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "fmsne_implem.pyx":266
 *     PyMem_Free(arr)
 * 
 * cdef inline void free_Pysst_3dmat(Py_ssize_t*** arr, Py_ssize_t M, Py_ssize_t N):             # <<<<<<<<<<<<<<
 *     """
 *     """
 */

static CYTHON_INLINE void __pyx_f_12fmsne_implem_free_Pysst_3dmat(Py_ssize_t ***__pyx_v_arr, Py_ssize_t __pyx_v_M, Py_ssize_t __pyx_v_N) {
  Py_ssize_t __pyx_v_m;
  Py_ssize_t __pyx_v_n;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  __Pyx_RefNannySetupContext("free_Pysst_3dmat", 0);

  /* "fmsne_implem.pyx":270
 *     """
 *     cdef Py_ssize_t m, n
 *     for m in range(M):             # <<<<<<<<<<<<<<
 *         for n in range(N):
 *             PyMem_Free(arr[m][n])
 */
  __pyx_t_1 = __pyx_v_M;
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_m = __pyx_t_3;

    /* "fmsne_implem.pyx":271
 *     cdef Py_ssize_t m, n
 *     for m in range(M):
 *         for n in range(N):             # <<<<<<<<<<<<<<
 *             PyMem_Free(arr[m][n])
 *         PyMem_Free(arr[m])
 */
    __pyx_t_4 = __pyx_v_N;
    __pyx_t_5 = __pyx_t_4;
    for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
      __pyx_v_n = __pyx_t_6;

      /* "fmsne_implem.pyx":272
 *     for m in range(M):
 *         for n in range(N):
 *             PyMem_Free(arr[m][n])             # <<<<<<<<<<<<<<
 *         PyMem_Free(arr[m])
 *     PyMem_Free(arr)
 */
      PyMem_Free(((__pyx_v_arr[__pyx_v_m])[__pyx_v_n]));
    }

    /* "fmsne_implem.pyx":273
 *         for n in range(N):
 *             PyMem_Free(arr[m][n])
 *         PyMem_Free(arr[m])             # <<<<<<<<<<<<<<
 *     PyMem_Free(arr)
 * 
 */
    PyMem_Free((__pyx_v_arr[__pyx_v_m]));
  }

  /* "fmsne_implem.pyx":274
 *             PyMem_Free(arr[m][n])
 *         PyMem_Free(arr[m])
 *     PyMem_Free(arr)             # <<<<<<<<<<<<<<
 * 
 * cdef inline int* seq_1step(Py_ssize_t N):
 */
  PyMem_Free(__pyx_v_arr);

  /* "fmsne_implem.pyx":266
 *     PyMem_Free(arr)
 * 
 * cdef inline void free_Pysst_3dmat(Py_ssize_t*** arr, Py_ssize_t M, Py_ssize_t N):             # <<<<<<<<<<<<<<
 *     """
 *     """
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "fmsne_implem.pyx":276
 *     PyMem_Free(arr)
 * 
 * cdef inline int* seq_1step(Py_ssize_t N):             # <<<<<<<<<<<<<<
 *     """
 *     """
 */

static CYTHON_INLINE int *__pyx_f_12fmsne_implem_seq_1step(Py_ssize_t __pyx_v_N) {
  int *__pyx_v_all_ind;
  int __pyx_v_i;
  int *__pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;
  __Pyx_RefNannySetupContext("seq_1step", 0);

  /* "fmsne_implem.pyx":279
 *     """
 *     """
 *     cdef int* all_ind = <int*> PyMem_Malloc(N*sizeof(int))             # <<<<<<<<<<<<<<
 *     if all_ind is NULL:
 *         return NULL
 */
  __pyx_v_all_ind = ((int *)PyMem_Malloc((__pyx_v_N * (sizeof(int)))));

  /* "fmsne_implem.pyx":280
 *     """
 *     cdef int* all_ind = <int*> PyMem_Malloc(N*sizeof(int))
 *     if all_ind is NULL:             # <<<<<<<<<<<<<<
 *         return NULL
 *     cdef int i
 */
  __pyx_t_1 = ((__pyx_v_all_ind == NULL) != 0);
  if (__pyx_t_1) {

    /* "fmsne_implem.pyx":281
 *     cdef int* all_ind = <int*> PyMem_Malloc(N*sizeof(int))
 *     if all_ind is NULL:
 *         return NULL             # <<<<<<<<<<<<<<
 *     cdef int i
 *     for i in range(N):
 */
    __pyx_r = NULL;
    goto __pyx_L0;

    /* "fmsne_implem.pyx":280
 *     """
 *     cdef int* all_ind = <int*> PyMem_Malloc(N*sizeof(int))
 *     if all_ind is NULL:             # <<<<<<<<<<<<<<
 *         return NULL
 *     cdef int i
 */
  }

  /* "fmsne_implem.pyx":283
 *         return NULL
 *     cdef int i
 *     for i in range(N):             # <<<<<<<<<<<<<<
 *         all_ind[i] = i
 *     return all_ind
 */
  __pyx_t_2 = __pyx_v_N;
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "fmsne_implem.pyx":284
 *     cdef int i
 *     for i in range(N):
 *         all_ind[i] = i             # <<<<<<<<<<<<<<
 *     return all_ind
 * 
 */
    (__pyx_v_all_ind[__pyx_v_i]) = __pyx_v_i;
  }

  /* "fmsne_implem.pyx":285
 *     for i in range(N):
 *         all_ind[i] = i
 *     return all_ind             # <<<<<<<<<<<<<<
 * 
 * cdef inline int** calloc_int_2dmat(Py_ssize_t M, Py_ssize_t N):
 */
  __pyx_r = __pyx_v_all_ind;
  goto __pyx_L0;

  /* "fmsne_implem.pyx":276
 *     PyMem_Free(arr)
 * 
 * cdef inline int* seq_1step(Py_ssize_t N):             # <<<<<<<<<<<<<<
 *     """
 *     """
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "fmsne_implem.pyx":287
 *     return all_ind
 * 
 * cdef inline int** calloc_int_2dmat(Py_ssize_t M, Py_ssize_t N):             # <<<<<<<<<<<<<<
 *     """
 *     """
 */

static CYTHON_INLINE int **__pyx_f_12fmsne_implem_calloc_int_2dmat(Py_ssize_t __pyx_v_M, Py_ssize_t __pyx_v_N) {
  int **__pyx_v_mat_ret;
  Py_ssize_t __pyx_v_m;
  size_t __pyx_v_shdp;
  int **__pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  __Pyx_RefNannySetupContext("calloc_int_2dmat", 0);

  /* "fmsne_implem.pyx":290
 *     """
 *     """
 *     cdef int** mat_ret = <int**> PyMem_Malloc(M*sizeof(int*))             # <<<<<<<<<<<<<<
 *     if mat_ret is NULL:
 *         return NULL
 */
  __pyx_v_mat_ret = ((int **)PyMem_Malloc((__pyx_v_M * (sizeof(int *)))));

  /* "fmsne_implem.pyx":291
 *     """
 *     cdef int** mat_ret = <int**> PyMem_Malloc(M*sizeof(int*))
 *     if mat_ret is NULL:             # <<<<<<<<<<<<<<
 *         return NULL
 *     cdef Py_ssize_t m
 */
  __pyx_t_1 = ((__pyx_v_mat_ret == NULL) != 0);
  if (__pyx_t_1) {

    /* "fmsne_implem.pyx":292
 *     cdef int** mat_ret = <int**> PyMem_Malloc(M*sizeof(int*))
 *     if mat_ret is NULL:
 *         return NULL             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t m
 *     cdef size_t shdp = N*sizeof(int)
 */
    __pyx_r = NULL;
    goto __pyx_L0;

    /* "fmsne_implem.pyx":291
 *     """
 *     cdef int** mat_ret = <int**> PyMem_Malloc(M*sizeof(int*))
 *     if mat_ret is NULL:             # <<<<<<<<<<<<<<
 *         return NULL
 *     cdef Py_ssize_t m
 */
  }

  /* "fmsne_implem.pyx":294
 *         return NULL
 *     cdef Py_ssize_t m
 *     cdef size_t shdp = N*sizeof(int)             # <<<<<<<<<<<<<<
 *     for m in range(M):
 *         mat_ret[m] = <int*> PyMem_Malloc(shdp)
 */
  __pyx_v_shdp = (__pyx_v_N * (sizeof(int)));

  /* "fmsne_implem.pyx":295
 *     cdef Py_ssize_t m
 *     cdef size_t shdp = N*sizeof(int)
 *     for m in range(M):             # <<<<<<<<<<<<<<
 *         mat_ret[m] = <int*> PyMem_Malloc(shdp)
 *         if mat_ret is NULL:
 */
  __pyx_t_2 = __pyx_v_M;
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_m = __pyx_t_4;

    /* "fmsne_implem.pyx":296
 *     cdef size_t shdp = N*sizeof(int)
 *     for m in range(M):
 *         mat_ret[m] = <int*> PyMem_Malloc(shdp)             # <<<<<<<<<<<<<<
 *         if mat_ret is NULL:
 *             free_int_2dmat(mat_ret, m)
 */
    (__pyx_v_mat_ret[__pyx_v_m]) = ((int *)PyMem_Malloc(__pyx_v_shdp));

    /* "fmsne_implem.pyx":297
 *     for m in range(M):
 *         mat_ret[m] = <int*> PyMem_Malloc(shdp)
 *         if mat_ret is NULL:             # <<<<<<<<<<<<<<
 *             free_int_2dmat(mat_ret, m)
 *             return NULL
 */
    __pyx_t_1 = ((__pyx_v_mat_ret == NULL) != 0);
    if (__pyx_t_1) {

      /* "fmsne_implem.pyx":298
 *         mat_ret[m] = <int*> PyMem_Malloc(shdp)
 *         if mat_ret is NULL:
 *             free_int_2dmat(mat_ret, m)             # <<<<<<<<<<<<<<
 *             return NULL
 *         # Setting the elements of mat_ret[m] to zero.
 */
      __pyx_f_12fmsne_implem_free_int_2dmat(__pyx_v_mat_ret, __pyx_v_m);

      /* "fmsne_implem.pyx":299
 *         if mat_ret is NULL:
 *             free_int_2dmat(mat_ret, m)
 *             return NULL             # <<<<<<<<<<<<<<
 *         # Setting the elements of mat_ret[m] to zero.
 *         memset(mat_ret[m], 0, shdp)
 */
      __pyx_r = NULL;
      goto __pyx_L0;

      /* "fmsne_implem.pyx":297
 *     for m in range(M):
 *         mat_ret[m] = <int*> PyMem_Malloc(shdp)
 *         if mat_ret is NULL:             # <<<<<<<<<<<<<<
 *             free_int_2dmat(mat_ret, m)
 *             return NULL
 */
    }

    /* "fmsne_implem.pyx":301
 *             return NULL
 *         # Setting the elements of mat_ret[m] to zero.
 *         memset(mat_ret[m], 0, shdp)             # <<<<<<<<<<<<<<
 *     return mat_ret
 * 
 */
    (void)(memset((__pyx_v_mat_ret[__pyx_v_m]), 0, __pyx_v_shdp));
  }

  /* "fmsne_implem.pyx":302
 *         # Setting the elements of mat_ret[m] to zero.
 *         memset(mat_ret[m], 0, shdp)
 *     return mat_ret             # <<<<<<<<<<<<<<
 * 
 * cdef inline int*** alloc_int_3dmat(Py_ssize_t M, Py_ssize_t N, Py_ssize_t K):
 */
  __pyx_r = __pyx_v_mat_ret;
  goto __pyx_L0;

  /* "fmsne_implem.pyx":287
 *     return all_ind
 * 
 * cdef inline int** calloc_int_2dmat(Py_ssize_t M, Py_ssize_t N):             # <<<<<<<<<<<<<<
 *     """
 *     """
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "fmsne_implem.pyx":304
 *     return mat_ret
 * 
 * cdef inline int*** alloc_int_3dmat(Py_ssize_t M, Py_ssize_t N, Py_ssize_t K):             # <<<<<<<<<<<<<<
 *     """
 *     """
 */

static CYTHON_INLINE int ***__pyx_f_12fmsne_implem_alloc_int_3dmat(Py_ssize_t __pyx_v_M, Py_ssize_t __pyx_v_N, Py_ssize_t __pyx_v_K) {
  int ***__pyx_v_mat_ret;
  Py_ssize_t __pyx_v_m;
  Py_ssize_t __pyx_v_n;
  int ***__pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  Py_ssize_t __pyx_t_7;
  __Pyx_RefNannySetupContext("alloc_int_3dmat", 0);

  /* "fmsne_implem.pyx":307
 *     """
 *     """
 *     cdef int*** mat_ret = <int***> PyMem_Malloc(M*sizeof(int**))             # <<<<<<<<<<<<<<
 *     if mat_ret is NULL:
 *         return NULL
 */
  __pyx_v_mat_ret = ((int ***)PyMem_Malloc((__pyx_v_M * (sizeof(int **)))));

  /* "fmsne_implem.pyx":308
 *     """
 *     cdef int*** mat_ret = <int***> PyMem_Malloc(M*sizeof(int**))
 *     if mat_ret is NULL:             # <<<<<<<<<<<<<<
 *         return NULL
 *     cdef Py_ssize_t m, n
 */
  __pyx_t_1 = ((__pyx_v_mat_ret == NULL) != 0);
  if (__pyx_t_1) {

    /* "fmsne_implem.pyx":309
 *     cdef int*** mat_ret = <int***> PyMem_Malloc(M*sizeof(int**))
 *     if mat_ret is NULL:
 *         return NULL             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t m, n
 *     for m in range(M):
 */
    __pyx_r = NULL;
    goto __pyx_L0;

    /* "fmsne_implem.pyx":308
 *     """
 *     cdef int*** mat_ret = <int***> PyMem_Malloc(M*sizeof(int**))
 *     if mat_ret is NULL:             # <<<<<<<<<<<<<<
 *         return NULL
 *     cdef Py_ssize_t m, n
 */
  }

  /* "fmsne_implem.pyx":311
 *         return NULL
 *     cdef Py_ssize_t m, n
 *     for m in range(M):             # <<<<<<<<<<<<<<
 *         mat_ret[m] = <int**> PyMem_Malloc(N*sizeof(int*))
 *         if mat_ret[m] is NULL:
 */
  __pyx_t_2 = __pyx_v_M;
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_m = __pyx_t_4;

    /* "fmsne_implem.pyx":312
 *     cdef Py_ssize_t m, n
 *     for m in range(M):
 *         mat_ret[m] = <int**> PyMem_Malloc(N*sizeof(int*))             # <<<<<<<<<<<<<<
 *         if mat_ret[m] is NULL:
 *             free_int_3dmat(mat_ret, m, N)
 */
    (__pyx_v_mat_ret[__pyx_v_m]) = ((int **)PyMem_Malloc((__pyx_v_N * (sizeof(int *)))));

    /* "fmsne_implem.pyx":313
 *     for m in range(M):
 *         mat_ret[m] = <int**> PyMem_Malloc(N*sizeof(int*))
 *         if mat_ret[m] is NULL:             # <<<<<<<<<<<<<<
 *             free_int_3dmat(mat_ret, m, N)
 *             return NULL
 */
    __pyx_t_1 = (((__pyx_v_mat_ret[__pyx_v_m]) == NULL) != 0);
    if (__pyx_t_1) {

      /* "fmsne_implem.pyx":314
 *         mat_ret[m] = <int**> PyMem_Malloc(N*sizeof(int*))
 *         if mat_ret[m] is NULL:
 *             free_int_3dmat(mat_ret, m, N)             # <<<<<<<<<<<<<<
 *             return NULL
 *         for n in range(N):
 */
      __pyx_f_12fmsne_implem_free_int_3dmat(__pyx_v_mat_ret, __pyx_v_m, __pyx_v_N);

      /* "fmsne_implem.pyx":315
 *         if mat_ret[m] is NULL:
 *             free_int_3dmat(mat_ret, m, N)
 *             return NULL             # <<<<<<<<<<<<<<
 *         for n in range(N):
 *             mat_ret[m][n] = <int*> PyMem_Malloc(K*sizeof(int))
 */
      __pyx_r = NULL;
      goto __pyx_L0;

      /* "fmsne_implem.pyx":313
 *     for m in range(M):
 *         mat_ret[m] = <int**> PyMem_Malloc(N*sizeof(int*))
 *         if mat_ret[m] is NULL:             # <<<<<<<<<<<<<<
 *             free_int_3dmat(mat_ret, m, N)
 *             return NULL
 */
    }

    /* "fmsne_implem.pyx":316
 *             free_int_3dmat(mat_ret, m, N)
 *             return NULL
 *         for n in range(N):             # <<<<<<<<<<<<<<
 *             mat_ret[m][n] = <int*> PyMem_Malloc(K*sizeof(int))
 *             if mat_ret[m][n] is NULL:
 */
    __pyx_t_5 = __pyx_v_N;
    __pyx_t_6 = __pyx_t_5;
    for (__pyx_t_7 = 0; __pyx_t_7 < __pyx_t_6; __pyx_t_7+=1) {
      __pyx_v_n = __pyx_t_7;

      /* "fmsne_implem.pyx":317
 *             return NULL
 *         for n in range(N):
 *             mat_ret[m][n] = <int*> PyMem_Malloc(K*sizeof(int))             # <<<<<<<<<<<<<<
 *             if mat_ret[m][n] is NULL:
 *                 free_int_2dmat(mat_ret[m], n)
 */
      ((__pyx_v_mat_ret[__pyx_v_m])[__pyx_v_n]) = ((int *)PyMem_Malloc((__pyx_v_K * (sizeof(int)))));

      /* "fmsne_implem.pyx":318
 *         for n in range(N):
 *             mat_ret[m][n] = <int*> PyMem_Malloc(K*sizeof(int))
 *             if mat_ret[m][n] is NULL:             # <<<<<<<<<<<<<<
 *                 free_int_2dmat(mat_ret[m], n)
 *                 free_int_3dmat(mat_ret, m, N)
 */
      __pyx_t_1 = ((((__pyx_v_mat_ret[__pyx_v_m])[__pyx_v_n]) == NULL) != 0);
      if (__pyx_t_1) {

        /* "fmsne_implem.pyx":319
 *             mat_ret[m][n] = <int*> PyMem_Malloc(K*sizeof(int))
 *             if mat_ret[m][n] is NULL:
 *                 free_int_2dmat(mat_ret[m], n)             # <<<<<<<<<<<<<<
 *                 free_int_3dmat(mat_ret, m, N)
 *                 return NULL
 */
        __pyx_f_12fmsne_implem_free_int_2dmat((__pyx_v_mat_ret[__pyx_v_m]), __pyx_v_n);

        /* "fmsne_implem.pyx":320
 *             if mat_ret[m][n] is NULL:
 *                 free_int_2dmat(mat_ret[m], n)
 *                 free_int_3dmat(mat_ret, m, N)             # <<<<<<<<<<<<<<
 *                 return NULL
 *     return mat_ret
 */
        __pyx_f_12fmsne_implem_free_int_3dmat(__pyx_v_mat_ret, __pyx_v_m, __pyx_v_N);

        /* "fmsne_implem.pyx":321
 *                 free_int_2dmat(mat_ret[m], n)
 *                 free_int_3dmat(mat_ret, m, N)
 *                 return NULL             # <<<<<<<<<<<<<<
 *     return mat_ret
 * 
 */
        __pyx_r = NULL;
        goto __pyx_L0;

        /* "fmsne_implem.pyx":318
 *         for n in range(N):
 *             mat_ret[m][n] = <int*> PyMem_Malloc(K*sizeof(int))
 *             if mat_ret[m][n] is NULL:             # <<<<<<<<<<<<<<
 *                 free_int_2dmat(mat_ret[m], n)
 *                 free_int_3dmat(mat_ret, m, N)
 */
      }
    }
  }

  /* "fmsne_implem.pyx":322
 *                 free_int_3dmat(mat_ret, m, N)
 *                 return NULL
 *     return mat_ret             # <<<<<<<<<<<<<<
 * 
 * cdef inline double** alloc_dble_2dmat(Py_ssize_t M, Py_ssize_t N):
 */
  __pyx_r = __pyx_v_mat_ret;
  goto __pyx_L0;

  /* "fmsne_implem.pyx":304
 *     return mat_ret
 * 
 * cdef inline int*** alloc_int_3dmat(Py_ssize_t M, Py_ssize_t N, Py_ssize_t K):             # <<<<<<<<<<<<<<
 *     """
 *     """
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "fmsne_implem.pyx":324
 *     return mat_ret
 * 
 * cdef inline double** alloc_dble_2dmat(Py_ssize_t M, Py_ssize_t N):             # <<<<<<<<<<<<<<
 *     """
 *     """
 */

static CYTHON_INLINE double **__pyx_f_12fmsne_implem_alloc_dble_2dmat(Py_ssize_t __pyx_v_M, Py_ssize_t __pyx_v_N) {
  double **__pyx_v_mat_ret;
  Py_ssize_t __pyx_v_m;
  double **__pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  __Pyx_RefNannySetupContext("alloc_dble_2dmat", 0);

  /* "fmsne_implem.pyx":327
 *     """
 *     """
 *     cdef double** mat_ret = <double**> PyMem_Malloc(M*sizeof(double*))             # <<<<<<<<<<<<<<
 *     if mat_ret is NULL:
 *         return NULL
 */
  __pyx_v_mat_ret = ((double **)PyMem_Malloc((__pyx_v_M * (sizeof(double *)))));

  /* "fmsne_implem.pyx":328
 *     """
 *     cdef double** mat_ret = <double**> PyMem_Malloc(M*sizeof(double*))
 *     if mat_ret is NULL:             # <<<<<<<<<<<<<<
 *         return NULL
 *     cdef Py_ssize_t m
 */
  __pyx_t_1 = ((__pyx_v_mat_ret == NULL) != 0);
  if (__pyx_t_1) {

    /* "fmsne_implem.pyx":329
 *     cdef double** mat_ret = <double**> PyMem_Malloc(M*sizeof(double*))
 *     if mat_ret is NULL:
 *         return NULL             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t m
 *     for m in range(M):
 */
    __pyx_r = NULL;
    goto __pyx_L0;

    /* "fmsne_implem.pyx":328
 *     """
 *     cdef double** mat_ret = <double**> PyMem_Malloc(M*sizeof(double*))
 *     if mat_ret is NULL:             # <<<<<<<<<<<<<<
 *         return NULL
 *     cdef Py_ssize_t m
 */
  }

  /* "fmsne_implem.pyx":331
 *         return NULL
 *     cdef Py_ssize_t m
 *     for m in range(M):             # <<<<<<<<<<<<<<
 *         mat_ret[m] = <double*> PyMem_Malloc(N*sizeof(double))
 *         if mat_ret[m] is NULL:
 */
  __pyx_t_2 = __pyx_v_M;
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_m = __pyx_t_4;

    /* "fmsne_implem.pyx":332
 *     cdef Py_ssize_t m
 *     for m in range(M):
 *         mat_ret[m] = <double*> PyMem_Malloc(N*sizeof(double))             # <<<<<<<<<<<<<<
 *         if mat_ret[m] is NULL:
 *             free_dble_2dmat(mat_ret, m)
 */
    (__pyx_v_mat_ret[__pyx_v_m]) = ((double *)PyMem_Malloc((__pyx_v_N * (sizeof(double)))));

    /* "fmsne_implem.pyx":333
 *     for m in range(M):
 *         mat_ret[m] = <double*> PyMem_Malloc(N*sizeof(double))
 *         if mat_ret[m] is NULL:             # <<<<<<<<<<<<<<
 *             free_dble_2dmat(mat_ret, m)
 *             return NULL
 */
    __pyx_t_1 = (((__pyx_v_mat_ret[__pyx_v_m]) == NULL) != 0);
    if (__pyx_t_1) {

      /* "fmsne_implem.pyx":334
 *         mat_ret[m] = <double*> PyMem_Malloc(N*sizeof(double))
 *         if mat_ret[m] is NULL:
 *             free_dble_2dmat(mat_ret, m)             # <<<<<<<<<<<<<<
 *             return NULL
 *     return mat_ret
 */
      __pyx_f_12fmsne_implem_free_dble_2dmat(__pyx_v_mat_ret, __pyx_v_m);

      /* "fmsne_implem.pyx":335
 *         if mat_ret[m] is NULL:
 *             free_dble_2dmat(mat_ret, m)
 *             return NULL             # <<<<<<<<<<<<<<
 *     return mat_ret
 * 
 */
      __pyx_r = NULL;
      goto __pyx_L0;

      /* "fmsne_implem.pyx":333
 *     for m in range(M):
 *         mat_ret[m] = <double*> PyMem_Malloc(N*sizeof(double))
 *         if mat_ret[m] is NULL:             # <<<<<<<<<<<<<<
 *             free_dble_2dmat(mat_ret, m)
 *             return NULL
 */
    }
  }

  /* "fmsne_implem.pyx":336
 *             free_dble_2dmat(mat_ret, m)
 *             return NULL
 *     return mat_ret             # <<<<<<<<<<<<<<
 * 
 * cdef inline double** alloc_dble_2dmat_varKpysst(Py_ssize_t M, Py_ssize_t* N):
 */
  __pyx_r = __pyx_v_mat_ret;
  goto __pyx_L0;

  /* "fmsne_implem.pyx":324
 *     return mat_ret
 * 
 * cdef inline double** alloc_dble_2dmat(Py_ssize_t M, Py_ssize_t N):             # <<<<<<<<<<<<<<
 *     """
 *     """
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "fmsne_implem.pyx":338
 *     return mat_ret
 * 
 * cdef inline double** alloc_dble_2dmat_varKpysst(Py_ssize_t M, Py_ssize_t* N):             # <<<<<<<<<<<<<<
 *     """
 *     """
 */

static CYTHON_INLINE double **__pyx_f_12fmsne_implem_alloc_dble_2dmat_varKpysst(Py_ssize_t __pyx_v_M, Py_ssize_t *__pyx_v_N) {
  double **__pyx_v_mat_ret;
  Py_ssize_t __pyx_v_m;
  double **__pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  __Pyx_RefNannySetupContext("alloc_dble_2dmat_varKpysst", 0);

  /* "fmsne_implem.pyx":341
 *     """
 *     """
 *     cdef double** mat_ret = <double**> PyMem_Malloc(M*sizeof(double*))             # <<<<<<<<<<<<<<
 *     if mat_ret is NULL:
 *         return NULL
 */
  __pyx_v_mat_ret = ((double **)PyMem_Malloc((__pyx_v_M * (sizeof(double *)))));

  /* "fmsne_implem.pyx":342
 *     """
 *     cdef double** mat_ret = <double**> PyMem_Malloc(M*sizeof(double*))
 *     if mat_ret is NULL:             # <<<<<<<<<<<<<<
 *         return NULL
 *     cdef Py_ssize_t m
 */
  __pyx_t_1 = ((__pyx_v_mat_ret == NULL) != 0);
  if (__pyx_t_1) {

    /* "fmsne_implem.pyx":343
 *     cdef double** mat_ret = <double**> PyMem_Malloc(M*sizeof(double*))
 *     if mat_ret is NULL:
 *         return NULL             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t m
 *     for m in range(M):
 */
    __pyx_r = NULL;
    goto __pyx_L0;

    /* "fmsne_implem.pyx":342
 *     """
 *     cdef double** mat_ret = <double**> PyMem_Malloc(M*sizeof(double*))
 *     if mat_ret is NULL:             # <<<<<<<<<<<<<<
 *         return NULL
 *     cdef Py_ssize_t m
 */
  }

  /* "fmsne_implem.pyx":345
 *         return NULL
 *     cdef Py_ssize_t m
 *     for m in range(M):             # <<<<<<<<<<<<<<
 *         mat_ret[m] = <double*> PyMem_Malloc(N[m]*sizeof(double))
 *         if mat_ret[m] is NULL:
 */
  __pyx_t_2 = __pyx_v_M;
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_m = __pyx_t_4;

    /* "fmsne_implem.pyx":346
 *     cdef Py_ssize_t m
 *     for m in range(M):
 *         mat_ret[m] = <double*> PyMem_Malloc(N[m]*sizeof(double))             # <<<<<<<<<<<<<<
 *         if mat_ret[m] is NULL:
 *             free_dble_2dmat(mat_ret, m)
 */
    (__pyx_v_mat_ret[__pyx_v_m]) = ((double *)PyMem_Malloc(((__pyx_v_N[__pyx_v_m]) * (sizeof(double)))));

    /* "fmsne_implem.pyx":347
 *     for m in range(M):
 *         mat_ret[m] = <double*> PyMem_Malloc(N[m]*sizeof(double))
 *         if mat_ret[m] is NULL:             # <<<<<<<<<<<<<<
 *             free_dble_2dmat(mat_ret, m)
 *             return NULL
 */
    __pyx_t_1 = (((__pyx_v_mat_ret[__pyx_v_m]) == NULL) != 0);
    if (__pyx_t_1) {

      /* "fmsne_implem.pyx":348
 *         mat_ret[m] = <double*> PyMem_Malloc(N[m]*sizeof(double))
 *         if mat_ret[m] is NULL:
 *             free_dble_2dmat(mat_ret, m)             # <<<<<<<<<<<<<<
 *             return NULL
 *     return mat_ret
 */
      __pyx_f_12fmsne_implem_free_dble_2dmat(__pyx_v_mat_ret, __pyx_v_m);

      /* "fmsne_implem.pyx":349
 *         if mat_ret[m] is NULL:
 *             free_dble_2dmat(mat_ret, m)
 *             return NULL             # <<<<<<<<<<<<<<
 *     return mat_ret
 * 
 */
      __pyx_r = NULL;
      goto __pyx_L0;

      /* "fmsne_implem.pyx":347
 *     for m in range(M):
 *         mat_ret[m] = <double*> PyMem_Malloc(N[m]*sizeof(double))
 *         if mat_ret[m] is NULL:             # <<<<<<<<<<<<<<
 *             free_dble_2dmat(mat_ret, m)
 *             return NULL
 */
    }
  }

  /* "fmsne_implem.pyx":350
 *             free_dble_2dmat(mat_ret, m)
 *             return NULL
 *     return mat_ret             # <<<<<<<<<<<<<<
 * 
 * cdef inline double*** alloc_dble_3dmat(Py_ssize_t M, Py_ssize_t N, Py_ssize_t K):
 */
  __pyx_r = __pyx_v_mat_ret;
  goto __pyx_L0;

  /* "fmsne_implem.pyx":338
 *     return mat_ret
 * 
 * cdef inline double** alloc_dble_2dmat_varKpysst(Py_ssize_t M, Py_ssize_t* N):             # <<<<<<<<<<<<<<
 *     """
 *     """
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "fmsne_implem.pyx":352
 *     return mat_ret
 * 
 * cdef inline double*** alloc_dble_3dmat(Py_ssize_t M, Py_ssize_t N, Py_ssize_t K):             # <<<<<<<<<<<<<<
 *     """
 *     """
 */

static CYTHON_INLINE double ***__pyx_f_12fmsne_implem_alloc_dble_3dmat(Py_ssize_t __pyx_v_M, Py_ssize_t __pyx_v_N, Py_ssize_t __pyx_v_K) {
  double ***__pyx_v_mat_ret;
  Py_ssize_t __pyx_v_m;
  Py_ssize_t __pyx_v_n;
  double ***__pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  Py_ssize_t __pyx_t_7;
  __Pyx_RefNannySetupContext("alloc_dble_3dmat", 0);

  /* "fmsne_implem.pyx":355
 *     """
 *     """
 *     cdef double*** mat_ret = <double***> PyMem_Malloc(M*sizeof(double**))             # <<<<<<<<<<<<<<
 *     if mat_ret is NULL:
 *         return NULL
 */
  __pyx_v_mat_ret = ((double ***)PyMem_Malloc((__pyx_v_M * (sizeof(double **)))));

  /* "fmsne_implem.pyx":356
 *     """
 *     cdef double*** mat_ret = <double***> PyMem_Malloc(M*sizeof(double**))
 *     if mat_ret is NULL:             # <<<<<<<<<<<<<<
 *         return NULL
 *     cdef Py_ssize_t m, n
 */
  __pyx_t_1 = ((__pyx_v_mat_ret == NULL) != 0);
  if (__pyx_t_1) {

    /* "fmsne_implem.pyx":357
 *     cdef double*** mat_ret = <double***> PyMem_Malloc(M*sizeof(double**))
 *     if mat_ret is NULL:
 *         return NULL             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t m, n
 *     for m in range(M):
 */
    __pyx_r = NULL;
    goto __pyx_L0;

    /* "fmsne_implem.pyx":356
 *     """
 *     cdef double*** mat_ret = <double***> PyMem_Malloc(M*sizeof(double**))
 *     if mat_ret is NULL:             # <<<<<<<<<<<<<<
 *         return NULL
 *     cdef Py_ssize_t m, n
 */
  }

  /* "fmsne_implem.pyx":359
 *         return NULL
 *     cdef Py_ssize_t m, n
 *     for m in range(M):             # <<<<<<<<<<<<<<
 *         mat_ret[m] = <double**> PyMem_Malloc(N*sizeof(double*))
 *         if mat_ret[m] is NULL:
 */
  __pyx_t_2 = __pyx_v_M;
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_m = __pyx_t_4;

    /* "fmsne_implem.pyx":360
 *     cdef Py_ssize_t m, n
 *     for m in range(M):
 *         mat_ret[m] = <double**> PyMem_Malloc(N*sizeof(double*))             # <<<<<<<<<<<<<<
 *         if mat_ret[m] is NULL:
 *             free_dble_3dmat(mat_ret, m, N)
 */
    (__pyx_v_mat_ret[__pyx_v_m]) = ((double **)PyMem_Malloc((__pyx_v_N * (sizeof(double *)))));

    /* "fmsne_implem.pyx":361
 *     for m in range(M):
 *         mat_ret[m] = <double**> PyMem_Malloc(N*sizeof(double*))
 *         if mat_ret[m] is NULL:             # <<<<<<<<<<<<<<
 *             free_dble_3dmat(mat_ret, m, N)
 *             return NULL
 */
    __pyx_t_1 = (((__pyx_v_mat_ret[__pyx_v_m]) == NULL) != 0);
    if (__pyx_t_1) {

      /* "fmsne_implem.pyx":362
 *         mat_ret[m] = <double**> PyMem_Malloc(N*sizeof(double*))
 *         if mat_ret[m] is NULL:
 *             free_dble_3dmat(mat_ret, m, N)             # <<<<<<<<<<<<<<
 *             return NULL
 *         for n in range(N):
 */
      __pyx_f_12fmsne_implem_free_dble_3dmat(__pyx_v_mat_ret, __pyx_v_m, __pyx_v_N);

      /* "fmsne_implem.pyx":363
 *         if mat_ret[m] is NULL:
 *             free_dble_3dmat(mat_ret, m, N)
 *             return NULL             # <<<<<<<<<<<<<<
 *         for n in range(N):
 *             mat_ret[m][n] = <double*> PyMem_Malloc(K*sizeof(double))
 */
      __pyx_r = NULL;
      goto __pyx_L0;

      /* "fmsne_implem.pyx":361
 *     for m in range(M):
 *         mat_ret[m] = <double**> PyMem_Malloc(N*sizeof(double*))
 *         if mat_ret[m] is NULL:             # <<<<<<<<<<<<<<
 *             free_dble_3dmat(mat_ret, m, N)
 *             return NULL
 */
    }

    /* "fmsne_implem.pyx":364
 *             free_dble_3dmat(mat_ret, m, N)
 *             return NULL
 *         for n in range(N):             # <<<<<<<<<<<<<<
 *             mat_ret[m][n] = <double*> PyMem_Malloc(K*sizeof(double))
 *             if mat_ret[m][n] is NULL:
 */
    __pyx_t_5 = __pyx_v_N;
    __pyx_t_6 = __pyx_t_5;
    for (__pyx_t_7 = 0; __pyx_t_7 < __pyx_t_6; __pyx_t_7+=1) {
      __pyx_v_n = __pyx_t_7;

      /* "fmsne_implem.pyx":365
 *             return NULL
 *         for n in range(N):
 *             mat_ret[m][n] = <double*> PyMem_Malloc(K*sizeof(double))             # <<<<<<<<<<<<<<
 *             if mat_ret[m][n] is NULL:
 *                 free_dble_2dmat(mat_ret[m], n)
 */
      ((__pyx_v_mat_ret[__pyx_v_m])[__pyx_v_n]) = ((double *)PyMem_Malloc((__pyx_v_K * (sizeof(double)))));

      /* "fmsne_implem.pyx":366
 *         for n in range(N):
 *             mat_ret[m][n] = <double*> PyMem_Malloc(K*sizeof(double))
 *             if mat_ret[m][n] is NULL:             # <<<<<<<<<<<<<<
 *                 free_dble_2dmat(mat_ret[m], n)
 *                 free_dble_3dmat(mat_ret, m, N)
 */
      __pyx_t_1 = ((((__pyx_v_mat_ret[__pyx_v_m])[__pyx_v_n]) == NULL) != 0);
      if (__pyx_t_1) {

        /* "fmsne_implem.pyx":367
 *             mat_ret[m][n] = <double*> PyMem_Malloc(K*sizeof(double))
 *             if mat_ret[m][n] is NULL:
 *                 free_dble_2dmat(mat_ret[m], n)             # <<<<<<<<<<<<<<
 *                 free_dble_3dmat(mat_ret, m, N)
 *                 return NULL
 */
        __pyx_f_12fmsne_implem_free_dble_2dmat((__pyx_v_mat_ret[__pyx_v_m]), __pyx_v_n);

        /* "fmsne_implem.pyx":368
 *             if mat_ret[m][n] is NULL:
 *                 free_dble_2dmat(mat_ret[m], n)
 *                 free_dble_3dmat(mat_ret, m, N)             # <<<<<<<<<<<<<<
 *                 return NULL
 *     return mat_ret
 */
        __pyx_f_12fmsne_implem_free_dble_3dmat(__pyx_v_mat_ret, __pyx_v_m, __pyx_v_N);

        /* "fmsne_implem.pyx":369
 *                 free_dble_2dmat(mat_ret[m], n)
 *                 free_dble_3dmat(mat_ret, m, N)
 *                 return NULL             # <<<<<<<<<<<<<<
 *     return mat_ret
 * 
 */
        __pyx_r = NULL;
        goto __pyx_L0;

        /* "fmsne_implem.pyx":366
 *         for n in range(N):
 *             mat_ret[m][n] = <double*> PyMem_Malloc(K*sizeof(double))
 *             if mat_ret[m][n] is NULL:             # <<<<<<<<<<<<<<
 *                 free_dble_2dmat(mat_ret[m], n)
 *                 free_dble_3dmat(mat_ret, m, N)
 */
      }
    }
  }

  /* "fmsne_implem.pyx":370
 *                 free_dble_3dmat(mat_ret, m, N)
 *                 return NULL
 *     return mat_ret             # <<<<<<<<<<<<<<
 * 
 * cdef inline double*** alloc_dble_3dmat_varK(Py_ssize_t M, Py_ssize_t N, int** K):
 */
  __pyx_r = __pyx_v_mat_ret;
  goto __pyx_L0;

  /* "fmsne_implem.pyx":352
 *     return mat_ret
 * 
 * cdef inline double*** alloc_dble_3dmat(Py_ssize_t M, Py_ssize_t N, Py_ssize_t K):             # <<<<<<<<<<<<<<
 *     """
 *     """
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "fmsne_implem.pyx":372
 *     return mat_ret
 * 
 * cdef inline double*** alloc_dble_3dmat_varK(Py_ssize_t M, Py_ssize_t N, int** K):             # <<<<<<<<<<<<<<
 *     """
 *     Same as alloc_dble_3dmat, but the size of the third dimension may change.
 */

static CYTHON_INLINE double ***__pyx_f_12fmsne_implem_alloc_dble_3dmat_varK(Py_ssize_t __pyx_v_M, Py_ssize_t __pyx_v_N, int **__pyx_v_K) {
  double ***__pyx_v_mat_ret;
  Py_ssize_t __pyx_v_m;
  Py_ssize_t __pyx_v_n;
  double ***__pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  Py_ssize_t __pyx_t_7;
  __Pyx_RefNannySetupContext("alloc_dble_3dmat_varK", 0);

  /* "fmsne_implem.pyx":376
 *     Same as alloc_dble_3dmat, but the size of the third dimension may change.
 *     """
 *     cdef double*** mat_ret = <double***> PyMem_Malloc(M*sizeof(double**))             # <<<<<<<<<<<<<<
 *     if mat_ret is NULL:
 *         return NULL
 */
  __pyx_v_mat_ret = ((double ***)PyMem_Malloc((__pyx_v_M * (sizeof(double **)))));

  /* "fmsne_implem.pyx":377
 *     """
 *     cdef double*** mat_ret = <double***> PyMem_Malloc(M*sizeof(double**))
 *     if mat_ret is NULL:             # <<<<<<<<<<<<<<
 *         return NULL
 *     cdef Py_ssize_t m, n
 */
  __pyx_t_1 = ((__pyx_v_mat_ret == NULL) != 0);
  if (__pyx_t_1) {

    /* "fmsne_implem.pyx":378
 *     cdef double*** mat_ret = <double***> PyMem_Malloc(M*sizeof(double**))
 *     if mat_ret is NULL:
 *         return NULL             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t m, n
 *     for m in range(M):
 */
    __pyx_r = NULL;
    goto __pyx_L0;

    /* "fmsne_implem.pyx":377
 *     """
 *     cdef double*** mat_ret = <double***> PyMem_Malloc(M*sizeof(double**))
 *     if mat_ret is NULL:             # <<<<<<<<<<<<<<
 *         return NULL
 *     cdef Py_ssize_t m, n
 */
  }

  /* "fmsne_implem.pyx":380
 *         return NULL
 *     cdef Py_ssize_t m, n
 *     for m in range(M):             # <<<<<<<<<<<<<<
 *         mat_ret[m] = <double**> PyMem_Malloc(N*sizeof(double*))
 *         if mat_ret[m] is NULL:
 */
  __pyx_t_2 = __pyx_v_M;
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_m = __pyx_t_4;

    /* "fmsne_implem.pyx":381
 *     cdef Py_ssize_t m, n
 *     for m in range(M):
 *         mat_ret[m] = <double**> PyMem_Malloc(N*sizeof(double*))             # <<<<<<<<<<<<<<
 *         if mat_ret[m] is NULL:
 *             free_dble_3dmat(mat_ret, m, N)
 */
    (__pyx_v_mat_ret[__pyx_v_m]) = ((double **)PyMem_Malloc((__pyx_v_N * (sizeof(double *)))));

    /* "fmsne_implem.pyx":382
 *     for m in range(M):
 *         mat_ret[m] = <double**> PyMem_Malloc(N*sizeof(double*))
 *         if mat_ret[m] is NULL:             # <<<<<<<<<<<<<<
 *             free_dble_3dmat(mat_ret, m, N)
 *             return NULL
 */
    __pyx_t_1 = (((__pyx_v_mat_ret[__pyx_v_m]) == NULL) != 0);
    if (__pyx_t_1) {

      /* "fmsne_implem.pyx":383
 *         mat_ret[m] = <double**> PyMem_Malloc(N*sizeof(double*))
 *         if mat_ret[m] is NULL:
 *             free_dble_3dmat(mat_ret, m, N)             # <<<<<<<<<<<<<<
 *             return NULL
 *         for n in range(N):
 */
      __pyx_f_12fmsne_implem_free_dble_3dmat(__pyx_v_mat_ret, __pyx_v_m, __pyx_v_N);

      /* "fmsne_implem.pyx":384
 *         if mat_ret[m] is NULL:
 *             free_dble_3dmat(mat_ret, m, N)
 *             return NULL             # <<<<<<<<<<<<<<
 *         for n in range(N):
 *             mat_ret[m][n] = <double*> PyMem_Malloc(K[m][n]*sizeof(double))
 */
      __pyx_r = NULL;
      goto __pyx_L0;

      /* "fmsne_implem.pyx":382
 *     for m in range(M):
 *         mat_ret[m] = <double**> PyMem_Malloc(N*sizeof(double*))
 *         if mat_ret[m] is NULL:             # <<<<<<<<<<<<<<
 *             free_dble_3dmat(mat_ret, m, N)
 *             return NULL
 */
    }

    /* "fmsne_implem.pyx":385
 *             free_dble_3dmat(mat_ret, m, N)
 *             return NULL
 *         for n in range(N):             # <<<<<<<<<<<<<<
 *             mat_ret[m][n] = <double*> PyMem_Malloc(K[m][n]*sizeof(double))
 *             if mat_ret[m][n] is NULL:
 */
    __pyx_t_5 = __pyx_v_N;
    __pyx_t_6 = __pyx_t_5;
    for (__pyx_t_7 = 0; __pyx_t_7 < __pyx_t_6; __pyx_t_7+=1) {
      __pyx_v_n = __pyx_t_7;

      /* "fmsne_implem.pyx":386
 *             return NULL
 *         for n in range(N):
 *             mat_ret[m][n] = <double*> PyMem_Malloc(K[m][n]*sizeof(double))             # <<<<<<<<<<<<<<
 *             if mat_ret[m][n] is NULL:
 *                 free_dble_2dmat(mat_ret[m], n)
 */
      ((__pyx_v_mat_ret[__pyx_v_m])[__pyx_v_n]) = ((double *)PyMem_Malloc((((__pyx_v_K[__pyx_v_m])[__pyx_v_n]) * (sizeof(double)))));

      /* "fmsne_implem.pyx":387
 *         for n in range(N):
 *             mat_ret[m][n] = <double*> PyMem_Malloc(K[m][n]*sizeof(double))
 *             if mat_ret[m][n] is NULL:             # <<<<<<<<<<<<<<
 *                 free_dble_2dmat(mat_ret[m], n)
 *                 free_dble_3dmat(mat_ret, m, N)
 */
      __pyx_t_1 = ((((__pyx_v_mat_ret[__pyx_v_m])[__pyx_v_n]) == NULL) != 0);
      if (__pyx_t_1) {

        /* "fmsne_implem.pyx":388
 *             mat_ret[m][n] = <double*> PyMem_Malloc(K[m][n]*sizeof(double))
 *             if mat_ret[m][n] is NULL:
 *                 free_dble_2dmat(mat_ret[m], n)             # <<<<<<<<<<<<<<
 *                 free_dble_3dmat(mat_ret, m, N)
 *                 return NULL
 */
        __pyx_f_12fmsne_implem_free_dble_2dmat((__pyx_v_mat_ret[__pyx_v_m]), __pyx_v_n);

        /* "fmsne_implem.pyx":389
 *             if mat_ret[m][n] is NULL:
 *                 free_dble_2dmat(mat_ret[m], n)
 *                 free_dble_3dmat(mat_ret, m, N)             # <<<<<<<<<<<<<<
 *                 return NULL
 *     return mat_ret
 */
        __pyx_f_12fmsne_implem_free_dble_3dmat(__pyx_v_mat_ret, __pyx_v_m, __pyx_v_N);

        /* "fmsne_implem.pyx":390
 *                 free_dble_2dmat(mat_ret[m], n)
 *                 free_dble_3dmat(mat_ret, m, N)
 *                 return NULL             # <<<<<<<<<<<<<<
 *     return mat_ret
 * 
 */
        __pyx_r = NULL;
        goto __pyx_L0;

        /* "fmsne_implem.pyx":387
 *         for n in range(N):
 *             mat_ret[m][n] = <double*> PyMem_Malloc(K[m][n]*sizeof(double))
 *             if mat_ret[m][n] is NULL:             # <<<<<<<<<<<<<<
 *                 free_dble_2dmat(mat_ret[m], n)
 *                 free_dble_3dmat(mat_ret, m, N)
 */
      }
    }
  }

  /* "fmsne_implem.pyx":391
 *                 free_dble_3dmat(mat_ret, m, N)
 *                 return NULL
 *     return mat_ret             # <<<<<<<<<<<<<<
 * 
 * cdef inline Py_ssize_t** alloc_Pysst_2dmat_varN(Py_ssize_t M, Py_ssize_t* N):
 */
  __pyx_r = __pyx_v_mat_ret;
  goto __pyx_L0;

  /* "fmsne_implem.pyx":372
 *     return mat_ret
 * 
 * cdef inline double*** alloc_dble_3dmat_varK(Py_ssize_t M, Py_ssize_t N, int** K):             # <<<<<<<<<<<<<<
 *     """
 *     Same as alloc_dble_3dmat, but the size of the third dimension may change.
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "fmsne_implem.pyx":393
 *     return mat_ret
 * 
 * cdef inline Py_ssize_t** alloc_Pysst_2dmat_varN(Py_ssize_t M, Py_ssize_t* N):             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t** mat_ret = <Py_ssize_t**> PyMem_Malloc(M*sizeof(Py_ssize_t*))
 *     if mat_ret is NULL:
 */

static CYTHON_INLINE Py_ssize_t **__pyx_f_12fmsne_implem_alloc_Pysst_2dmat_varN(Py_ssize_t __pyx_v_M, Py_ssize_t *__pyx_v_N) {
  Py_ssize_t **__pyx_v_mat_ret;
  Py_ssize_t __pyx_v_m;
  Py_ssize_t **__pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  __Pyx_RefNannySetupContext("alloc_Pysst_2dmat_varN", 0);

  /* "fmsne_implem.pyx":394
 * 
 * cdef inline Py_ssize_t** alloc_Pysst_2dmat_varN(Py_ssize_t M, Py_ssize_t* N):
 *     cdef Py_ssize_t** mat_ret = <Py_ssize_t**> PyMem_Malloc(M*sizeof(Py_ssize_t*))             # <<<<<<<<<<<<<<
 *     if mat_ret is NULL:
 *         return NULL
 */
  __pyx_v_mat_ret = ((Py_ssize_t **)PyMem_Malloc((__pyx_v_M * (sizeof(Py_ssize_t *)))));

  /* "fmsne_implem.pyx":395
 * cdef inline Py_ssize_t** alloc_Pysst_2dmat_varN(Py_ssize_t M, Py_ssize_t* N):
 *     cdef Py_ssize_t** mat_ret = <Py_ssize_t**> PyMem_Malloc(M*sizeof(Py_ssize_t*))
 *     if mat_ret is NULL:             # <<<<<<<<<<<<<<
 *         return NULL
 *     cdef Py_ssize_t m
 */
  __pyx_t_1 = ((__pyx_v_mat_ret == NULL) != 0);
  if (__pyx_t_1) {

    /* "fmsne_implem.pyx":396
 *     cdef Py_ssize_t** mat_ret = <Py_ssize_t**> PyMem_Malloc(M*sizeof(Py_ssize_t*))
 *     if mat_ret is NULL:
 *         return NULL             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t m
 *     for m in range(M):
 */
    __pyx_r = NULL;
    goto __pyx_L0;

    /* "fmsne_implem.pyx":395
 * cdef inline Py_ssize_t** alloc_Pysst_2dmat_varN(Py_ssize_t M, Py_ssize_t* N):
 *     cdef Py_ssize_t** mat_ret = <Py_ssize_t**> PyMem_Malloc(M*sizeof(Py_ssize_t*))
 *     if mat_ret is NULL:             # <<<<<<<<<<<<<<
 *         return NULL
 *     cdef Py_ssize_t m
 */
  }

  /* "fmsne_implem.pyx":398
 *         return NULL
 *     cdef Py_ssize_t m
 *     for m in range(M):             # <<<<<<<<<<<<<<
 *         mat_ret[m] = <Py_ssize_t*> PyMem_Malloc(N[m]*sizeof(Py_ssize_t))
 *         if mat_ret[m] is NULL:
 */
  __pyx_t_2 = __pyx_v_M;
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_m = __pyx_t_4;

    /* "fmsne_implem.pyx":399
 *     cdef Py_ssize_t m
 *     for m in range(M):
 *         mat_ret[m] = <Py_ssize_t*> PyMem_Malloc(N[m]*sizeof(Py_ssize_t))             # <<<<<<<<<<<<<<
 *         if mat_ret[m] is NULL:
 *             free_Pysst_2dmat(mat_ret, m)
 */
    (__pyx_v_mat_ret[__pyx_v_m]) = ((Py_ssize_t *)PyMem_Malloc(((__pyx_v_N[__pyx_v_m]) * (sizeof(Py_ssize_t)))));

    /* "fmsne_implem.pyx":400
 *     for m in range(M):
 *         mat_ret[m] = <Py_ssize_t*> PyMem_Malloc(N[m]*sizeof(Py_ssize_t))
 *         if mat_ret[m] is NULL:             # <<<<<<<<<<<<<<
 *             free_Pysst_2dmat(mat_ret, m)
 *             return NULL
 */
    __pyx_t_1 = (((__pyx_v_mat_ret[__pyx_v_m]) == NULL) != 0);
    if (__pyx_t_1) {

      /* "fmsne_implem.pyx":401
 *         mat_ret[m] = <Py_ssize_t*> PyMem_Malloc(N[m]*sizeof(Py_ssize_t))
 *         if mat_ret[m] is NULL:
 *             free_Pysst_2dmat(mat_ret, m)             # <<<<<<<<<<<<<<
 *             return NULL
 *     return mat_ret
 */
      __pyx_f_12fmsne_implem_free_Pysst_2dmat(__pyx_v_mat_ret, __pyx_v_m);

      /* "fmsne_implem.pyx":402
 *         if mat_ret[m] is NULL:
 *             free_Pysst_2dmat(mat_ret, m)
 *             return NULL             # <<<<<<<<<<<<<<
 *     return mat_ret
 * 
 */
      __pyx_r = NULL;
      goto __pyx_L0;

      /* "fmsne_implem.pyx":400
 *     for m in range(M):
 *         mat_ret[m] = <Py_ssize_t*> PyMem_Malloc(N[m]*sizeof(Py_ssize_t))
 *         if mat_ret[m] is NULL:             # <<<<<<<<<<<<<<
 *             free_Pysst_2dmat(mat_ret, m)
 *             return NULL
 */
    }
  }

  /* "fmsne_implem.pyx":403
 *             free_Pysst_2dmat(mat_ret, m)
 *             return NULL
 *     return mat_ret             # <<<<<<<<<<<<<<
 * 
 * cdef inline Py_ssize_t*** alloc_Pysst_3dmat_varK(Py_ssize_t M, Py_ssize_t N, int** K):
 */
  __pyx_r = __pyx_v_mat_ret;
  goto __pyx_L0;

  /* "fmsne_implem.pyx":393
 *     return mat_ret
 * 
 * cdef inline Py_ssize_t** alloc_Pysst_2dmat_varN(Py_ssize_t M, Py_ssize_t* N):             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t** mat_ret = <Py_ssize_t**> PyMem_Malloc(M*sizeof(Py_ssize_t*))
 *     if mat_ret is NULL:
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "fmsne_implem.pyx":405
 *     return mat_ret
 * 
 * cdef inline Py_ssize_t*** alloc_Pysst_3dmat_varK(Py_ssize_t M, Py_ssize_t N, int** K):             # <<<<<<<<<<<<<<
 *     """
 *     Same as alloc_dble_3dmat, but the size of the third dimension may change.
 */

static CYTHON_INLINE Py_ssize_t ***__pyx_f_12fmsne_implem_alloc_Pysst_3dmat_varK(Py_ssize_t __pyx_v_M, Py_ssize_t __pyx_v_N, int **__pyx_v_K) {
  Py_ssize_t ***__pyx_v_mat_ret;
  Py_ssize_t __pyx_v_m;
  Py_ssize_t __pyx_v_n;
  Py_ssize_t ***__pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  Py_ssize_t __pyx_t_7;
  __Pyx_RefNannySetupContext("alloc_Pysst_3dmat_varK", 0);

  /* "fmsne_implem.pyx":409
 *     Same as alloc_dble_3dmat, but the size of the third dimension may change.
 *     """
 *     cdef Py_ssize_t*** mat_ret = <Py_ssize_t***> PyMem_Malloc(M*sizeof(Py_ssize_t**))             # <<<<<<<<<<<<<<
 *     if mat_ret is NULL:
 *         return NULL
 */
  __pyx_v_mat_ret = ((Py_ssize_t ***)PyMem_Malloc((__pyx_v_M * (sizeof(Py_ssize_t **)))));

  /* "fmsne_implem.pyx":410
 *     """
 *     cdef Py_ssize_t*** mat_ret = <Py_ssize_t***> PyMem_Malloc(M*sizeof(Py_ssize_t**))
 *     if mat_ret is NULL:             # <<<<<<<<<<<<<<
 *         return NULL
 *     cdef Py_ssize_t m, n
 */
  __pyx_t_1 = ((__pyx_v_mat_ret == NULL) != 0);
  if (__pyx_t_1) {

    /* "fmsne_implem.pyx":411
 *     cdef Py_ssize_t*** mat_ret = <Py_ssize_t***> PyMem_Malloc(M*sizeof(Py_ssize_t**))
 *     if mat_ret is NULL:
 *         return NULL             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t m, n
 *     for m in range(M):
 */
    __pyx_r = NULL;
    goto __pyx_L0;

    /* "fmsne_implem.pyx":410
 *     """
 *     cdef Py_ssize_t*** mat_ret = <Py_ssize_t***> PyMem_Malloc(M*sizeof(Py_ssize_t**))
 *     if mat_ret is NULL:             # <<<<<<<<<<<<<<
 *         return NULL
 *     cdef Py_ssize_t m, n
 */
  }

  /* "fmsne_implem.pyx":413
 *         return NULL
 *     cdef Py_ssize_t m, n
 *     for m in range(M):             # <<<<<<<<<<<<<<
 *         mat_ret[m] = <Py_ssize_t**> PyMem_Malloc(N*sizeof(Py_ssize_t*))
 *         if mat_ret[m] is NULL:
 */
  __pyx_t_2 = __pyx_v_M;
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_m = __pyx_t_4;

    /* "fmsne_implem.pyx":414
 *     cdef Py_ssize_t m, n
 *     for m in range(M):
 *         mat_ret[m] = <Py_ssize_t**> PyMem_Malloc(N*sizeof(Py_ssize_t*))             # <<<<<<<<<<<<<<
 *         if mat_ret[m] is NULL:
 *             free_Pysst_3dmat(mat_ret, m, N)
 */
    (__pyx_v_mat_ret[__pyx_v_m]) = ((Py_ssize_t **)PyMem_Malloc((__pyx_v_N * (sizeof(Py_ssize_t *)))));

    /* "fmsne_implem.pyx":415
 *     for m in range(M):
 *         mat_ret[m] = <Py_ssize_t**> PyMem_Malloc(N*sizeof(Py_ssize_t*))
 *         if mat_ret[m] is NULL:             # <<<<<<<<<<<<<<
 *             free_Pysst_3dmat(mat_ret, m, N)
 *             return NULL
 */
    __pyx_t_1 = (((__pyx_v_mat_ret[__pyx_v_m]) == NULL) != 0);
    if (__pyx_t_1) {

      /* "fmsne_implem.pyx":416
 *         mat_ret[m] = <Py_ssize_t**> PyMem_Malloc(N*sizeof(Py_ssize_t*))
 *         if mat_ret[m] is NULL:
 *             free_Pysst_3dmat(mat_ret, m, N)             # <<<<<<<<<<<<<<
 *             return NULL
 *         for n in range(N):
 */
      __pyx_f_12fmsne_implem_free_Pysst_3dmat(__pyx_v_mat_ret, __pyx_v_m, __pyx_v_N);

      /* "fmsne_implem.pyx":417
 *         if mat_ret[m] is NULL:
 *             free_Pysst_3dmat(mat_ret, m, N)
 *             return NULL             # <<<<<<<<<<<<<<
 *         for n in range(N):
 *             mat_ret[m][n] = <Py_ssize_t*> PyMem_Malloc(K[m][n]*sizeof(Py_ssize_t))
 */
      __pyx_r = NULL;
      goto __pyx_L0;

      /* "fmsne_implem.pyx":415
 *     for m in range(M):
 *         mat_ret[m] = <Py_ssize_t**> PyMem_Malloc(N*sizeof(Py_ssize_t*))
 *         if mat_ret[m] is NULL:             # <<<<<<<<<<<<<<
 *             free_Pysst_3dmat(mat_ret, m, N)
 *             return NULL
 */
    }

    /* "fmsne_implem.pyx":418
 *             free_Pysst_3dmat(mat_ret, m, N)
 *             return NULL
 *         for n in range(N):             # <<<<<<<<<<<<<<
 *             mat_ret[m][n] = <Py_ssize_t*> PyMem_Malloc(K[m][n]*sizeof(Py_ssize_t))
 *             if mat_ret[m][n] is NULL:
 */
    __pyx_t_5 = __pyx_v_N;
    __pyx_t_6 = __pyx_t_5;
    for (__pyx_t_7 = 0; __pyx_t_7 < __pyx_t_6; __pyx_t_7+=1) {
      __pyx_v_n = __pyx_t_7;

      /* "fmsne_implem.pyx":419
 *             return NULL
 *         for n in range(N):
 *             mat_ret[m][n] = <Py_ssize_t*> PyMem_Malloc(K[m][n]*sizeof(Py_ssize_t))             # <<<<<<<<<<<<<<
 *             if mat_ret[m][n] is NULL:
 *                 free_Pysst_2dmat(mat_ret[m], n)
 */
      ((__pyx_v_mat_ret[__pyx_v_m])[__pyx_v_n]) = ((Py_ssize_t *)PyMem_Malloc((((__pyx_v_K[__pyx_v_m])[__pyx_v_n]) * (sizeof(Py_ssize_t)))));

      /* "fmsne_implem.pyx":420
 *         for n in range(N):
 *             mat_ret[m][n] = <Py_ssize_t*> PyMem_Malloc(K[m][n]*sizeof(Py_ssize_t))
 *             if mat_ret[m][n] is NULL:             # <<<<<<<<<<<<<<
 *                 free_Pysst_2dmat(mat_ret[m], n)
 *                 free_Pysst_3dmat(mat_ret, m, N)
 */
      __pyx_t_1 = ((((__pyx_v_mat_ret[__pyx_v_m])[__pyx_v_n]) == NULL) != 0);
      if (__pyx_t_1) {

        /* "fmsne_implem.pyx":421
 *             mat_ret[m][n] = <Py_ssize_t*> PyMem_Malloc(K[m][n]*sizeof(Py_ssize_t))
 *             if mat_ret[m][n] is NULL:
 *                 free_Pysst_2dmat(mat_ret[m], n)             # <<<<<<<<<<<<<<
 *                 free_Pysst_3dmat(mat_ret, m, N)
 *                 return NULL
 */
        __pyx_f_12fmsne_implem_free_Pysst_2dmat((__pyx_v_mat_ret[__pyx_v_m]), __pyx_v_n);

        /* "fmsne_implem.pyx":422
 *             if mat_ret[m][n] is NULL:
 *                 free_Pysst_2dmat(mat_ret[m], n)
 *                 free_Pysst_3dmat(mat_ret, m, N)             # <<<<<<<<<<<<<<
 *                 return NULL
 *     return mat_ret
 */
        __pyx_f_12fmsne_implem_free_Pysst_3dmat(__pyx_v_mat_ret, __pyx_v_m, __pyx_v_N);

        /* "fmsne_implem.pyx":423
 *                 free_Pysst_2dmat(mat_ret[m], n)
 *                 free_Pysst_3dmat(mat_ret, m, N)
 *                 return NULL             # <<<<<<<<<<<<<<
 *     return mat_ret
 * 
 */
        __pyx_r = NULL;
        goto __pyx_L0;

        /* "fmsne_implem.pyx":420
 *         for n in range(N):
 *             mat_ret[m][n] = <Py_ssize_t*> PyMem_Malloc(K[m][n]*sizeof(Py_ssize_t))
 *             if mat_ret[m][n] is NULL:             # <<<<<<<<<<<<<<
 *                 free_Pysst_2dmat(mat_ret[m], n)
 *                 free_Pysst_3dmat(mat_ret, m, N)
 */
      }
    }
  }

  /* "fmsne_implem.pyx":424
 *                 free_Pysst_3dmat(mat_ret, m, N)
 *                 return NULL
 *     return mat_ret             # <<<<<<<<<<<<<<
 * 
 * cdef inline Py_ssize_t*** alloc_Pysst_3dmat_varK_3dK(Py_ssize_t M, Py_ssize_t N, Py_ssize_t*** K, Py_ssize_t idk):
 */
  __pyx_r = __pyx_v_mat_ret;
  goto __pyx_L0;

  /* "fmsne_implem.pyx":405
 *     return mat_ret
 * 
 * cdef inline Py_ssize_t*** alloc_Pysst_3dmat_varK(Py_ssize_t M, Py_ssize_t N, int** K):             # <<<<<<<<<<<<<<
 *     """
 *     Same as alloc_dble_3dmat, but the size of the third dimension may change.
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "fmsne_implem.pyx":426
 *     return mat_ret
 * 
 * cdef inline Py_ssize_t*** alloc_Pysst_3dmat_varK_3dK(Py_ssize_t M, Py_ssize_t N, Py_ssize_t*** K, Py_ssize_t idk):             # <<<<<<<<<<<<<<
 *     """
 *     Same as alloc_dble_3dmat, but the size of the third dimension may change.
 */

static CYTHON_INLINE Py_ssize_t ***__pyx_f_12fmsne_implem_alloc_Pysst_3dmat_varK_3dK(Py_ssize_t __pyx_v_M, Py_ssize_t __pyx_v_N, Py_ssize_t ***__pyx_v_K, Py_ssize_t __pyx_v_idk) {
  Py_ssize_t ***__pyx_v_mat_ret;
  Py_ssize_t __pyx_v_m;
  Py_ssize_t __pyx_v_n;
  Py_ssize_t ***__pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  Py_ssize_t __pyx_t_7;
  __Pyx_RefNannySetupContext("alloc_Pysst_3dmat_varK_3dK", 0);

  /* "fmsne_implem.pyx":430
 *     Same as alloc_dble_3dmat, but the size of the third dimension may change.
 *     """
 *     cdef Py_ssize_t*** mat_ret = <Py_ssize_t***> PyMem_Malloc(M*sizeof(Py_ssize_t**))             # <<<<<<<<<<<<<<
 *     if mat_ret is NULL:
 *         return NULL
 */
  __pyx_v_mat_ret = ((Py_ssize_t ***)PyMem_Malloc((__pyx_v_M * (sizeof(Py_ssize_t **)))));

  /* "fmsne_implem.pyx":431
 *     """
 *     cdef Py_ssize_t*** mat_ret = <Py_ssize_t***> PyMem_Malloc(M*sizeof(Py_ssize_t**))
 *     if mat_ret is NULL:             # <<<<<<<<<<<<<<
 *         return NULL
 *     cdef Py_ssize_t m, n
 */
  __pyx_t_1 = ((__pyx_v_mat_ret == NULL) != 0);
  if (__pyx_t_1) {

    /* "fmsne_implem.pyx":432
 *     cdef Py_ssize_t*** mat_ret = <Py_ssize_t***> PyMem_Malloc(M*sizeof(Py_ssize_t**))
 *     if mat_ret is NULL:
 *         return NULL             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t m, n
 *     for m in range(M):
 */
    __pyx_r = NULL;
    goto __pyx_L0;

    /* "fmsne_implem.pyx":431
 *     """
 *     cdef Py_ssize_t*** mat_ret = <Py_ssize_t***> PyMem_Malloc(M*sizeof(Py_ssize_t**))
 *     if mat_ret is NULL:             # <<<<<<<<<<<<<<
 *         return NULL
 *     cdef Py_ssize_t m, n
 */
  }

  /* "fmsne_implem.pyx":434
 *         return NULL
 *     cdef Py_ssize_t m, n
 *     for m in range(M):             # <<<<<<<<<<<<<<
 *         mat_ret[m] = <Py_ssize_t**> PyMem_Malloc(N*sizeof(Py_ssize_t*))
 *         if mat_ret[m] is NULL:
 */
  __pyx_t_2 = __pyx_v_M;
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_m = __pyx_t_4;

    /* "fmsne_implem.pyx":435
 *     cdef Py_ssize_t m, n
 *     for m in range(M):
 *         mat_ret[m] = <Py_ssize_t**> PyMem_Malloc(N*sizeof(Py_ssize_t*))             # <<<<<<<<<<<<<<
 *         if mat_ret[m] is NULL:
 *             free_Pysst_3dmat(mat_ret, m, N)
 */
    (__pyx_v_mat_ret[__pyx_v_m]) = ((Py_ssize_t **)PyMem_Malloc((__pyx_v_N * (sizeof(Py_ssize_t *)))));

    /* "fmsne_implem.pyx":436
 *     for m in range(M):
 *         mat_ret[m] = <Py_ssize_t**> PyMem_Malloc(N*sizeof(Py_ssize_t*))
 *         if mat_ret[m] is NULL:             # <<<<<<<<<<<<<<
 *             free_Pysst_3dmat(mat_ret, m, N)
 *             return NULL
 */
    __pyx_t_1 = (((__pyx_v_mat_ret[__pyx_v_m]) == NULL) != 0);
    if (__pyx_t_1) {

      /* "fmsne_implem.pyx":437
 *         mat_ret[m] = <Py_ssize_t**> PyMem_Malloc(N*sizeof(Py_ssize_t*))
 *         if mat_ret[m] is NULL:
 *             free_Pysst_3dmat(mat_ret, m, N)             # <<<<<<<<<<<<<<
 *             return NULL
 *         for n in range(N):
 */
      __pyx_f_12fmsne_implem_free_Pysst_3dmat(__pyx_v_mat_ret, __pyx_v_m, __pyx_v_N);

      /* "fmsne_implem.pyx":438
 *         if mat_ret[m] is NULL:
 *             free_Pysst_3dmat(mat_ret, m, N)
 *             return NULL             # <<<<<<<<<<<<<<
 *         for n in range(N):
 *             mat_ret[m][n] = <Py_ssize_t*> PyMem_Malloc(K[m][n][idk]*sizeof(Py_ssize_t))
 */
      __pyx_r = NULL;
      goto __pyx_L0;

      /* "fmsne_implem.pyx":436
 *     for m in range(M):
 *         mat_ret[m] = <Py_ssize_t**> PyMem_Malloc(N*sizeof(Py_ssize_t*))
 *         if mat_ret[m] is NULL:             # <<<<<<<<<<<<<<
 *             free_Pysst_3dmat(mat_ret, m, N)
 *             return NULL
 */
    }

    /* "fmsne_implem.pyx":439
 *             free_Pysst_3dmat(mat_ret, m, N)
 *             return NULL
 *         for n in range(N):             # <<<<<<<<<<<<<<
 *             mat_ret[m][n] = <Py_ssize_t*> PyMem_Malloc(K[m][n][idk]*sizeof(Py_ssize_t))
 *             if mat_ret[m][n] is NULL:
 */
    __pyx_t_5 = __pyx_v_N;
    __pyx_t_6 = __pyx_t_5;
    for (__pyx_t_7 = 0; __pyx_t_7 < __pyx_t_6; __pyx_t_7+=1) {
      __pyx_v_n = __pyx_t_7;

      /* "fmsne_implem.pyx":440
 *             return NULL
 *         for n in range(N):
 *             mat_ret[m][n] = <Py_ssize_t*> PyMem_Malloc(K[m][n][idk]*sizeof(Py_ssize_t))             # <<<<<<<<<<<<<<
 *             if mat_ret[m][n] is NULL:
 *                 free_Pysst_2dmat(mat_ret[m], n)
 */
      ((__pyx_v_mat_ret[__pyx_v_m])[__pyx_v_n]) = ((Py_ssize_t *)PyMem_Malloc(((((__pyx_v_K[__pyx_v_m])[__pyx_v_n])[__pyx_v_idk]) * (sizeof(Py_ssize_t)))));

      /* "fmsne_implem.pyx":441
 *         for n in range(N):
 *             mat_ret[m][n] = <Py_ssize_t*> PyMem_Malloc(K[m][n][idk]*sizeof(Py_ssize_t))
 *             if mat_ret[m][n] is NULL:             # <<<<<<<<<<<<<<
 *                 free_Pysst_2dmat(mat_ret[m], n)
 *                 free_Pysst_3dmat(mat_ret, m, N)
 */
      __pyx_t_1 = ((((__pyx_v_mat_ret[__pyx_v_m])[__pyx_v_n]) == NULL) != 0);
      if (__pyx_t_1) {

        /* "fmsne_implem.pyx":442
 *             mat_ret[m][n] = <Py_ssize_t*> PyMem_Malloc(K[m][n][idk]*sizeof(Py_ssize_t))
 *             if mat_ret[m][n] is NULL:
 *                 free_Pysst_2dmat(mat_ret[m], n)             # <<<<<<<<<<<<<<
 *                 free_Pysst_3dmat(mat_ret, m, N)
 *                 return NULL
 */
        __pyx_f_12fmsne_implem_free_Pysst_2dmat((__pyx_v_mat_ret[__pyx_v_m]), __pyx_v_n);

        /* "fmsne_implem.pyx":443
 *             if mat_ret[m][n] is NULL:
 *                 free_Pysst_2dmat(mat_ret[m], n)
 *                 free_Pysst_3dmat(mat_ret, m, N)             # <<<<<<<<<<<<<<
 *                 return NULL
 *     return mat_ret
 */
        __pyx_f_12fmsne_implem_free_Pysst_3dmat(__pyx_v_mat_ret, __pyx_v_m, __pyx_v_N);

        /* "fmsne_implem.pyx":444
 *                 free_Pysst_2dmat(mat_ret[m], n)
 *                 free_Pysst_3dmat(mat_ret, m, N)
 *                 return NULL             # <<<<<<<<<<<<<<
 *     return mat_ret
 * 
 */
        __pyx_r = NULL;
        goto __pyx_L0;

        /* "fmsne_implem.pyx":441
 *         for n in range(N):
 *             mat_ret[m][n] = <Py_ssize_t*> PyMem_Malloc(K[m][n][idk]*sizeof(Py_ssize_t))
 *             if mat_ret[m][n] is NULL:             # <<<<<<<<<<<<<<
 *                 free_Pysst_2dmat(mat_ret[m], n)
 *                 free_Pysst_3dmat(mat_ret, m, N)
 */
      }
    }
  }

  /* "fmsne_implem.pyx":445
 *                 free_Pysst_3dmat(mat_ret, m, N)
 *                 return NULL
 *     return mat_ret             # <<<<<<<<<<<<<<
 * 
 * #######################################################
 */
  __pyx_r = __pyx_v_mat_ret;
  goto __pyx_L0;

  /* "fmsne_implem.pyx":426
 *     return mat_ret
 * 
 * cdef inline Py_ssize_t*** alloc_Pysst_3dmat_varK_3dK(Py_ssize_t M, Py_ssize_t N, Py_ssize_t*** K, Py_ssize_t idk):             # <<<<<<<<<<<<<<
 *     """
 *     Same as alloc_dble_3dmat, but the size of the third dimension may change.
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "fmsne_implem.pyx":527
 * #######################################################
 * 
 * cdef inline int ms_def_n_scales(double Nd, int K_star, int L_min, bint isLmin1) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     """
 */

static CYTHON_INLINE int __pyx_f_12fmsne_implem_ms_def_n_scales(double __pyx_v_Nd, int __pyx_v_K_star, int __pyx_v_L_min, int __pyx_v_isLmin1) {
  int __pyx_r;
  int __pyx_t_1;

  /* "fmsne_implem.pyx":530
 *     """
 *     """
 *     if isLmin1:             # <<<<<<<<<<<<<<
 *         return <int> round(log2(Nd/(<double> K_star)))
 *     else:
 */
  __pyx_t_1 = (__pyx_v_isLmin1 != 0);
  if (__pyx_t_1) {

    /* "fmsne_implem.pyx":531
 *     """
 *     if isLmin1:
 *         return <int> round(log2(Nd/(<double> K_star)))             # <<<<<<<<<<<<<<
 *     else:
 *         return (<int> round(log2(Nd/(<double> K_star)))) + 1 - L_min
 */
    __pyx_r = ((int)round(log2((__pyx_v_Nd / ((double)__pyx_v_K_star)))));
    goto __pyx_L0;

    /* "fmsne_implem.pyx":530
 *     """
 *     """
 *     if isLmin1:             # <<<<<<<<<<<<<<
 *         return <int> round(log2(Nd/(<double> K_star)))
 *     else:
 */
  }

  /* "fmsne_implem.pyx":533
 *         return <int> round(log2(Nd/(<double> K_star)))
 *     else:
 *         return (<int> round(log2(Nd/(<double> K_star)))) + 1 - L_min             # <<<<<<<<<<<<<<
 * 
 * cdef inline int ms_def_shift_Lmin(bint isnotLmin1, Py_ssize_t L_min) nogil:
 */
  /*else*/ {
    __pyx_r = ((((int)round(log2((__pyx_v_Nd / ((double)__pyx_v_K_star))))) + 1) - __pyx_v_L_min);
    goto __pyx_L0;
  }

  /* "fmsne_implem.pyx":527
 * #######################################################
 * 
 * cdef inline int ms_def_n_scales(double Nd, int K_star, int L_min, bint isLmin1) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     """
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "fmsne_implem.pyx":535
 *         return (<int> round(log2(Nd/(<double> K_star)))) + 1 - L_min
 * 
 * cdef inline int ms_def_shift_Lmin(bint isnotLmin1, Py_ssize_t L_min) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     """
 */

static CYTHON_INLINE int __pyx_f_12fmsne_implem_ms_def_shift_Lmin(int __pyx_v_isnotLmin1, Py_ssize_t __pyx_v_L_min) {
  int __pyx_v_shift_L_min;
  CYTHON_UNUSED Py_ssize_t __pyx_v_h;
  int __pyx_r;
  int __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  Py_ssize_t __pyx_t_4;

  /* "fmsne_implem.pyx":538
 *     """
 *     """
 *     cdef int shift_L_min = 1             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t h
 *     if isnotLmin1:
 */
  __pyx_v_shift_L_min = 1;

  /* "fmsne_implem.pyx":540
 *     cdef int shift_L_min = 1
 *     cdef Py_ssize_t h
 *     if isnotLmin1:             # <<<<<<<<<<<<<<
 *         for h in range(L_min-1):
 *             shift_L_min *= 2
 */
  __pyx_t_1 = (__pyx_v_isnotLmin1 != 0);
  if (__pyx_t_1) {

    /* "fmsne_implem.pyx":541
 *     cdef Py_ssize_t h
 *     if isnotLmin1:
 *         for h in range(L_min-1):             # <<<<<<<<<<<<<<
 *             shift_L_min *= 2
 *     return shift_L_min
 */
    __pyx_t_2 = (__pyx_v_L_min - 1);
    __pyx_t_3 = __pyx_t_2;
    for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
      __pyx_v_h = __pyx_t_4;

      /* "fmsne_implem.pyx":542
 *     if isnotLmin1:
 *         for h in range(L_min-1):
 *             shift_L_min *= 2             # <<<<<<<<<<<<<<
 *     return shift_L_min
 * 
 */
      __pyx_v_shift_L_min = (__pyx_v_shift_L_min * 2);
    }

    /* "fmsne_implem.pyx":540
 *     cdef int shift_L_min = 1
 *     cdef Py_ssize_t h
 *     if isnotLmin1:             # <<<<<<<<<<<<<<
 *         for h in range(L_min-1):
 *             shift_L_min *= 2
 */
  }

  /* "fmsne_implem.pyx":543
 *         for h in range(L_min-1):
 *             shift_L_min *= 2
 *     return shift_L_min             # <<<<<<<<<<<<<<
 * 
 * cdef inline int* ms_def_Kh(int K_star, bint isnotLmin1, int shift_L_min, Py_ssize_t L):
 */
  __pyx_r = __pyx_v_shift_L_min;
  goto __pyx_L0;

  /* "fmsne_implem.pyx":535
 *         return (<int> round(log2(Nd/(<double> K_star)))) + 1 - L_min
 * 
 * cdef inline int ms_def_shift_Lmin(bint isnotLmin1, Py_ssize_t L_min) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     """
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "fmsne_implem.pyx":545
 *     return shift_L_min
 * 
 * cdef inline int* ms_def_Kh(int K_star, bint isnotLmin1, int shift_L_min, Py_ssize_t L):             # <<<<<<<<<<<<<<
 *     """
 *     The returned value must be freed.
 */

static CYTHON_INLINE int *__pyx_f_12fmsne_implem_ms_def_Kh(int __pyx_v_K_star, int __pyx_v_isnotLmin1, int __pyx_v_shift_L_min, Py_ssize_t __pyx_v_L) {
  int *__pyx_v_K_h;
  Py_ssize_t __pyx_v_h;
  int *__pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  long __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  __Pyx_RefNannySetupContext("ms_def_Kh", 0);

  /* "fmsne_implem.pyx":549
 *     The returned value must be freed.
 *     """
 *     cdef int* K_h = <int*> PyMem_Malloc(L*sizeof(int))             # <<<<<<<<<<<<<<
 *     if K_h is NULL:
 *         return NULL
 */
  __pyx_v_K_h = ((int *)PyMem_Malloc((__pyx_v_L * (sizeof(int)))));

  /* "fmsne_implem.pyx":550
 *     """
 *     cdef int* K_h = <int*> PyMem_Malloc(L*sizeof(int))
 *     if K_h is NULL:             # <<<<<<<<<<<<<<
 *         return NULL
 *     K_h[0] = K_star
 */
  __pyx_t_1 = ((__pyx_v_K_h == NULL) != 0);
  if (__pyx_t_1) {

    /* "fmsne_implem.pyx":551
 *     cdef int* K_h = <int*> PyMem_Malloc(L*sizeof(int))
 *     if K_h is NULL:
 *         return NULL             # <<<<<<<<<<<<<<
 *     K_h[0] = K_star
 *     if isnotLmin1:
 */
    __pyx_r = NULL;
    goto __pyx_L0;

    /* "fmsne_implem.pyx":550
 *     """
 *     cdef int* K_h = <int*> PyMem_Malloc(L*sizeof(int))
 *     if K_h is NULL:             # <<<<<<<<<<<<<<
 *         return NULL
 *     K_h[0] = K_star
 */
  }

  /* "fmsne_implem.pyx":552
 *     if K_h is NULL:
 *         return NULL
 *     K_h[0] = K_star             # <<<<<<<<<<<<<<
 *     if isnotLmin1:
 *         K_h[0] *= shift_L_min
 */
  (__pyx_v_K_h[0]) = __pyx_v_K_star;

  /* "fmsne_implem.pyx":553
 *         return NULL
 *     K_h[0] = K_star
 *     if isnotLmin1:             # <<<<<<<<<<<<<<
 *         K_h[0] *= shift_L_min
 *     cdef Py_ssize_t h
 */
  __pyx_t_1 = (__pyx_v_isnotLmin1 != 0);
  if (__pyx_t_1) {

    /* "fmsne_implem.pyx":554
 *     K_h[0] = K_star
 *     if isnotLmin1:
 *         K_h[0] *= shift_L_min             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t h
 *     for h in range(1, L, 1):
 */
    __pyx_t_2 = 0;
    (__pyx_v_K_h[__pyx_t_2]) = ((__pyx_v_K_h[__pyx_t_2]) * __pyx_v_shift_L_min);

    /* "fmsne_implem.pyx":553
 *         return NULL
 *     K_h[0] = K_star
 *     if isnotLmin1:             # <<<<<<<<<<<<<<
 *         K_h[0] *= shift_L_min
 *     cdef Py_ssize_t h
 */
  }

  /* "fmsne_implem.pyx":556
 *         K_h[0] *= shift_L_min
 *     cdef Py_ssize_t h
 *     for h in range(1, L, 1):             # <<<<<<<<<<<<<<
 *         K_h[h] = K_h[h-1]*2
 *     return K_h
 */
  __pyx_t_3 = __pyx_v_L;
  __pyx_t_4 = __pyx_t_3;
  for (__pyx_t_5 = 1; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
    __pyx_v_h = __pyx_t_5;

    /* "fmsne_implem.pyx":557
 *     cdef Py_ssize_t h
 *     for h in range(1, L, 1):
 *         K_h[h] = K_h[h-1]*2             # <<<<<<<<<<<<<<
 *     return K_h
 * 
 */
    (__pyx_v_K_h[__pyx_v_h]) = ((__pyx_v_K_h[(__pyx_v_h - 1)]) * 2);
  }

  /* "fmsne_implem.pyx":558
 *     for h in range(1, L, 1):
 *         K_h[h] = K_h[h-1]*2
 *     return K_h             # <<<<<<<<<<<<<<
 * 
 * cdef inline double** sne_ds_hd(double* xhds, Py_ssize_t N, Py_ssize_t d_hds, Py_ssize_t N_1):
 */
  __pyx_r = __pyx_v_K_h;
  goto __pyx_L0;

  /* "fmsne_implem.pyx":545
 *     return shift_L_min
 * 
 * cdef inline int* ms_def_Kh(int K_star, bint isnotLmin1, int shift_L_min, Py_ssize_t L):             # <<<<<<<<<<<<<<
 *     """
 *     The returned value must be freed.
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "fmsne_implem.pyx":560
 *     return K_h
 * 
 * cdef inline double** sne_ds_hd(double* xhds, Py_ssize_t N, Py_ssize_t d_hds, Py_ssize_t N_1):             # <<<<<<<<<<<<<<
 *     """
 *     The returned value must be freed.
 */

static CYTHON_INLINE double **__pyx_f_12fmsne_implem_sne_ds_hd(double *__pyx_v_xhds, Py_ssize_t __pyx_v_N, Py_ssize_t __pyx_v_d_hds, Py_ssize_t __pyx_v_N_1) {
  Py_ssize_t __pyx_v_i;
  Py_ssize_t __pyx_v_j;
  Py_ssize_t __pyx_v_idx;
  Py_ssize_t __pyx_v_idxj;
  double **__pyx_v_ds_hd;
  double *__pyx_v_x;
  double __pyx_v_min_ds;
  double **__pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  Py_ssize_t __pyx_t_7;
  __Pyx_RefNannySetupContext("sne_ds_hd", 0);

  /* "fmsne_implem.pyx":568
 *     """
 *     cdef Py_ssize_t i, j, idx, idxj
 *     cdef double** ds_hd = alloc_dble_2dmat(N, N_1)             # <<<<<<<<<<<<<<
 *     if ds_hd is NULL:
 *         return NULL
 */
  __pyx_v_ds_hd = __pyx_f_12fmsne_implem_alloc_dble_2dmat(__pyx_v_N, __pyx_v_N_1);

  /* "fmsne_implem.pyx":569
 *     cdef Py_ssize_t i, j, idx, idxj
 *     cdef double** ds_hd = alloc_dble_2dmat(N, N_1)
 *     if ds_hd is NULL:             # <<<<<<<<<<<<<<
 *         return NULL
 *     # Computing the pairwise squared Euclidean distances
 */
  __pyx_t_1 = ((__pyx_v_ds_hd == NULL) != 0);
  if (__pyx_t_1) {

    /* "fmsne_implem.pyx":570
 *     cdef double** ds_hd = alloc_dble_2dmat(N, N_1)
 *     if ds_hd is NULL:
 *         return NULL             # <<<<<<<<<<<<<<
 *     # Computing the pairwise squared Euclidean distances
 *     cdef double* x
 */
    __pyx_r = NULL;
    goto __pyx_L0;

    /* "fmsne_implem.pyx":569
 *     cdef Py_ssize_t i, j, idx, idxj
 *     cdef double** ds_hd = alloc_dble_2dmat(N, N_1)
 *     if ds_hd is NULL:             # <<<<<<<<<<<<<<
 *         return NULL
 *     # Computing the pairwise squared Euclidean distances
 */
  }

  /* "fmsne_implem.pyx":573
 *     # Computing the pairwise squared Euclidean distances
 *     cdef double* x
 *     idx = 0             # <<<<<<<<<<<<<<
 *     for i in range(N_1):
 *         x = &xhds[idx]
 */
  __pyx_v_idx = 0;

  /* "fmsne_implem.pyx":574
 *     cdef double* x
 *     idx = 0
 *     for i in range(N_1):             # <<<<<<<<<<<<<<
 *         x = &xhds[idx]
 *         idx += d_hds
 */
  __pyx_t_2 = __pyx_v_N_1;
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "fmsne_implem.pyx":575
 *     idx = 0
 *     for i in range(N_1):
 *         x = &xhds[idx]             # <<<<<<<<<<<<<<
 *         idx += d_hds
 *         idxj = idx
 */
    __pyx_v_x = (&(__pyx_v_xhds[__pyx_v_idx]));

    /* "fmsne_implem.pyx":576
 *     for i in range(N_1):
 *         x = &xhds[idx]
 *         idx += d_hds             # <<<<<<<<<<<<<<
 *         idxj = idx
 *         for j in range(i, N_1, 1):
 */
    __pyx_v_idx = (__pyx_v_idx + __pyx_v_d_hds);

    /* "fmsne_implem.pyx":577
 *         x = &xhds[idx]
 *         idx += d_hds
 *         idxj = idx             # <<<<<<<<<<<<<<
 *         for j in range(i, N_1, 1):
 *             ds_hd[i][j] = sqeucl_dist_ptr(x, &xhds[idxj], d_hds)
 */
    __pyx_v_idxj = __pyx_v_idx;

    /* "fmsne_implem.pyx":578
 *         idx += d_hds
 *         idxj = idx
 *         for j in range(i, N_1, 1):             # <<<<<<<<<<<<<<
 *             ds_hd[i][j] = sqeucl_dist_ptr(x, &xhds[idxj], d_hds)
 *             ds_hd[j+1][i] = ds_hd[i][j]
 */
    __pyx_t_5 = __pyx_v_N_1;
    __pyx_t_6 = __pyx_t_5;
    for (__pyx_t_7 = __pyx_v_i; __pyx_t_7 < __pyx_t_6; __pyx_t_7+=1) {
      __pyx_v_j = __pyx_t_7;

      /* "fmsne_implem.pyx":579
 *         idxj = idx
 *         for j in range(i, N_1, 1):
 *             ds_hd[i][j] = sqeucl_dist_ptr(x, &xhds[idxj], d_hds)             # <<<<<<<<<<<<<<
 *             ds_hd[j+1][i] = ds_hd[i][j]
 *             idxj += d_hds
 */
      ((__pyx_v_ds_hd[__pyx_v_i])[__pyx_v_j]) = __pyx_f_12fmsne_implem_sqeucl_dist_ptr(__pyx_v_x, (&(__pyx_v_xhds[__pyx_v_idxj])), __pyx_v_d_hds);

      /* "fmsne_implem.pyx":580
 *         for j in range(i, N_1, 1):
 *             ds_hd[i][j] = sqeucl_dist_ptr(x, &xhds[idxj], d_hds)
 *             ds_hd[j+1][i] = ds_hd[i][j]             # <<<<<<<<<<<<<<
 *             idxj += d_hds
 *     # Computing the minimum of the distances with respect to each data point and substracting the minimum from the distances
 */
      ((__pyx_v_ds_hd[(__pyx_v_j + 1)])[__pyx_v_i]) = ((__pyx_v_ds_hd[__pyx_v_i])[__pyx_v_j]);

      /* "fmsne_implem.pyx":581
 *             ds_hd[i][j] = sqeucl_dist_ptr(x, &xhds[idxj], d_hds)
 *             ds_hd[j+1][i] = ds_hd[i][j]
 *             idxj += d_hds             # <<<<<<<<<<<<<<
 *     # Computing the minimum of the distances with respect to each data point and substracting the minimum from the distances
 *     cdef double min_ds
 */
      __pyx_v_idxj = (__pyx_v_idxj + __pyx_v_d_hds);
    }
  }

  /* "fmsne_implem.pyx":584
 *     # Computing the minimum of the distances with respect to each data point and substracting the minimum from the distances
 *     cdef double min_ds
 *     for i in range(N):             # <<<<<<<<<<<<<<
 *         min_ds = min_arr_ptr(ds_hd[i], N_1)
 *         for j in range(N_1):
 */
  __pyx_t_2 = __pyx_v_N;
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "fmsne_implem.pyx":585
 *     cdef double min_ds
 *     for i in range(N):
 *         min_ds = min_arr_ptr(ds_hd[i], N_1)             # <<<<<<<<<<<<<<
 *         for j in range(N_1):
 *             ds_hd[i][j] = min_ds - ds_hd[i][j]
 */
    __pyx_v_min_ds = __pyx_f_12fmsne_implem_min_arr_ptr((__pyx_v_ds_hd[__pyx_v_i]), __pyx_v_N_1);

    /* "fmsne_implem.pyx":586
 *     for i in range(N):
 *         min_ds = min_arr_ptr(ds_hd[i], N_1)
 *         for j in range(N_1):             # <<<<<<<<<<<<<<
 *             ds_hd[i][j] = min_ds - ds_hd[i][j]
 *     return ds_hd
 */
    __pyx_t_5 = __pyx_v_N_1;
    __pyx_t_6 = __pyx_t_5;
    for (__pyx_t_7 = 0; __pyx_t_7 < __pyx_t_6; __pyx_t_7+=1) {
      __pyx_v_j = __pyx_t_7;

      /* "fmsne_implem.pyx":587
 *         min_ds = min_arr_ptr(ds_hd[i], N_1)
 *         for j in range(N_1):
 *             ds_hd[i][j] = min_ds - ds_hd[i][j]             # <<<<<<<<<<<<<<
 *     return ds_hd
 * 
 */
      ((__pyx_v_ds_hd[__pyx_v_i])[__pyx_v_j]) = (__pyx_v_min_ds - ((__pyx_v_ds_hd[__pyx_v_i])[__pyx_v_j]));
    }
  }

  /* "fmsne_implem.pyx":588
 *         for j in range(N_1):
 *             ds_hd[i][j] = min_ds - ds_hd[i][j]
 *     return ds_hd             # <<<<<<<<<<<<<<
 * 
 * cdef inline void sne_hdpinn_nolog(const double* ds_nn, double tau, Py_ssize_t nnn, double* pinn) nogil:
 */
  __pyx_r = __pyx_v_ds_hd;
  goto __pyx_L0;

  /* "fmsne_implem.pyx":560
 *     return K_h
 * 
 * cdef inline double** sne_ds_hd(double* xhds, Py_ssize_t N, Py_ssize_t d_hds, Py_ssize_t N_1):             # <<<<<<<<<<<<<<
 *     """
 *     The returned value must be freed.
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "fmsne_implem.pyx":590
 *     return ds_hd
 * 
 * cdef inline void sne_hdpinn_nolog(const double* ds_nn, double tau, Py_ssize_t nnn, double* pinn) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     Computes SNE sim, without their log.
 */

static CYTHON_INLINE void __pyx_f_12fmsne_implem_sne_hdpinn_nolog(double const *__pyx_v_ds_nn, double __pyx_v_tau, Py_ssize_t __pyx_v_nnn, double *__pyx_v_pinn) {
  double __pyx_v_den;
  Py_ssize_t __pyx_v_i;
  Py_ssize_t __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  Py_ssize_t __pyx_t_4;

  /* "fmsne_implem.pyx":598
 *     pinn is the location at which the similarities will be stored.
 *     """
 *     cdef double den = 0.0             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t i
 *     for i in range(nnn):
 */
  __pyx_v_den = 0.0;

  /* "fmsne_implem.pyx":600
 *     cdef double den = 0.0
 *     cdef Py_ssize_t i
 *     for i in range(nnn):             # <<<<<<<<<<<<<<
 *         pinn[i] = exp(ds_nn[i]/tau)
 *         den += pinn[i]
 */
  __pyx_t_1 = __pyx_v_nnn;
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "fmsne_implem.pyx":601
 *     cdef Py_ssize_t i
 *     for i in range(nnn):
 *         pinn[i] = exp(ds_nn[i]/tau)             # <<<<<<<<<<<<<<
 *         den += pinn[i]
 *     for i in range(nnn):
 */
    (__pyx_v_pinn[__pyx_v_i]) = exp((((double)(__pyx_v_ds_nn[__pyx_v_i])) / __pyx_v_tau));

    /* "fmsne_implem.pyx":602
 *     for i in range(nnn):
 *         pinn[i] = exp(ds_nn[i]/tau)
 *         den += pinn[i]             # <<<<<<<<<<<<<<
 *     for i in range(nnn):
 *         pinn[i] /= den
 */
    __pyx_v_den = (__pyx_v_den + (__pyx_v_pinn[__pyx_v_i]));
  }

  /* "fmsne_implem.pyx":603
 *         pinn[i] = exp(ds_nn[i]/tau)
 *         den += pinn[i]
 *     for i in range(nnn):             # <<<<<<<<<<<<<<
 *         pinn[i] /= den
 * 
 */
  __pyx_t_1 = __pyx_v_nnn;
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "fmsne_implem.pyx":604
 *         den += pinn[i]
 *     for i in range(nnn):
 *         pinn[i] /= den             # <<<<<<<<<<<<<<
 * 
 * cdef inline double sne_densim(const double* ds_nn, double tau, Py_ssize_t nnn) nogil:
 */
    __pyx_t_4 = __pyx_v_i;
    (__pyx_v_pinn[__pyx_t_4]) = ((__pyx_v_pinn[__pyx_t_4]) / __pyx_v_den);
  }

  /* "fmsne_implem.pyx":590
 *     return ds_hd
 * 
 * cdef inline void sne_hdpinn_nolog(const double* ds_nn, double tau, Py_ssize_t nnn, double* pinn) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     Computes SNE sim, without their log.
 */

  /* function exit code */
}

/* "fmsne_implem.pyx":606
 *         pinn[i] /= den
 * 
 * cdef inline double sne_densim(const double* ds_nn, double tau, Py_ssize_t nnn) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     Computes the denominator of the similarities
 */

static CYTHON_INLINE double __pyx_f_12fmsne_implem_sne_densim(double const *__pyx_v_ds_nn, double __pyx_v_tau, Py_ssize_t __pyx_v_nnn) {
  double __pyx_v_den;
  Py_ssize_t __pyx_v_i;
  double __pyx_r;
  Py_ssize_t __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;

  /* "fmsne_implem.pyx":613
 *     nnn is the number of neighbors
 *     """
 *     cdef double den = 0.0             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t i
 *     for i in range(nnn):
 */
  __pyx_v_den = 0.0;

  /* "fmsne_implem.pyx":615
 *     cdef double den = 0.0
 *     cdef Py_ssize_t i
 *     for i in range(nnn):             # <<<<<<<<<<<<<<
 *         den += exp(ds_nn[i]/tau)
 *     return den
 */
  __pyx_t_1 = __pyx_v_nnn;
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "fmsne_implem.pyx":616
 *     cdef Py_ssize_t i
 *     for i in range(nnn):
 *         den += exp(ds_nn[i]/tau)             # <<<<<<<<<<<<<<
 *     return den
 * 
 */
    __pyx_v_den = (__pyx_v_den + exp((((double)(__pyx_v_ds_nn[__pyx_v_i])) / __pyx_v_tau)));
  }

  /* "fmsne_implem.pyx":617
 *     for i in range(nnn):
 *         den += exp(ds_nn[i]/tau)
 *     return den             # <<<<<<<<<<<<<<
 * 
 * cdef inline double sne_binsearch_fct(const double* ds_nn, double tau, Py_ssize_t nnn, double log_perp) nogil:
 */
  __pyx_r = __pyx_v_den;
  goto __pyx_L0;

  /* "fmsne_implem.pyx":606
 *         pinn[i] /= den
 * 
 * cdef inline double sne_densim(const double* ds_nn, double tau, Py_ssize_t nnn) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     Computes the denominator of the similarities
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "fmsne_implem.pyx":619
 *     return den
 * 
 * cdef inline double sne_binsearch_fct(const double* ds_nn, double tau, Py_ssize_t nnn, double log_perp) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     Computes the entropry of the similarities minus the logarithm of the perplexity
 */

static CYTHON_INLINE double __pyx_f_12fmsne_implem_sne_binsearch_fct(double const *__pyx_v_ds_nn, double __pyx_v_tau, Py_ssize_t __pyx_v_nnn, double __pyx_v_log_perp) {
  double __pyx_v_a;
  double __pyx_v_b;
  double __pyx_v_v;
  double __pyx_v_den;
  Py_ssize_t __pyx_v_i;
  double __pyx_r;
  Py_ssize_t __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;

  /* "fmsne_implem.pyx":627
 *     """
 *     cdef double a, b, v, den
 *     v = 0.0             # <<<<<<<<<<<<<<
 *     den = 0.0
 *     cdef Py_ssize_t i
 */
  __pyx_v_v = 0.0;

  /* "fmsne_implem.pyx":628
 *     cdef double a, b, v, den
 *     v = 0.0
 *     den = 0.0             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t i
 *     for i in range(nnn):
 */
  __pyx_v_den = 0.0;

  /* "fmsne_implem.pyx":630
 *     den = 0.0
 *     cdef Py_ssize_t i
 *     for i in range(nnn):             # <<<<<<<<<<<<<<
 *         a = ds_nn[i]/tau
 *         b = exp(a)
 */
  __pyx_t_1 = __pyx_v_nnn;
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "fmsne_implem.pyx":631
 *     cdef Py_ssize_t i
 *     for i in range(nnn):
 *         a = ds_nn[i]/tau             # <<<<<<<<<<<<<<
 *         b = exp(a)
 *         v -= a*b
 */
    __pyx_v_a = (((double)(__pyx_v_ds_nn[__pyx_v_i])) / __pyx_v_tau);

    /* "fmsne_implem.pyx":632
 *     for i in range(nnn):
 *         a = ds_nn[i]/tau
 *         b = exp(a)             # <<<<<<<<<<<<<<
 *         v -= a*b
 *         den += b
 */
    __pyx_v_b = exp(__pyx_v_a);

    /* "fmsne_implem.pyx":633
 *         a = ds_nn[i]/tau
 *         b = exp(a)
 *         v -= a*b             # <<<<<<<<<<<<<<
 *         den += b
 *     return v/den + log(den) - log_perp
 */
    __pyx_v_v = (__pyx_v_v - (__pyx_v_a * __pyx_v_b));

    /* "fmsne_implem.pyx":634
 *         b = exp(a)
 *         v -= a*b
 *         den += b             # <<<<<<<<<<<<<<
 *     return v/den + log(den) - log_perp
 * 
 */
    __pyx_v_den = (__pyx_v_den + __pyx_v_b);
  }

  /* "fmsne_implem.pyx":635
 *         v -= a*b
 *         den += b
 *     return v/den + log(den) - log_perp             # <<<<<<<<<<<<<<
 * 
 * cdef inline double sne_binsearch_bandwidth_fit(const double* ds_nn, Py_ssize_t nnn, double log_perp, double tau) nogil:
 */
  __pyx_r = (((__pyx_v_v / __pyx_v_den) + log(__pyx_v_den)) - __pyx_v_log_perp);
  goto __pyx_L0;

  /* "fmsne_implem.pyx":619
 *     return den
 * 
 * cdef inline double sne_binsearch_fct(const double* ds_nn, double tau, Py_ssize_t nnn, double log_perp) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     Computes the entropry of the similarities minus the logarithm of the perplexity
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "fmsne_implem.pyx":637
 *     return v/den + log(den) - log_perp
 * 
 * cdef inline double sne_binsearch_bandwidth_fit(const double* ds_nn, Py_ssize_t nnn, double log_perp, double tau) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     Tune the bandwidths of HD SNE similarities.
 */

static CYTHON_INLINE double __pyx_f_12fmsne_implem_sne_binsearch_bandwidth_fit(double const *__pyx_v_ds_nn, Py_ssize_t __pyx_v_nnn, double __pyx_v_log_perp, double __pyx_v_tau) {
  double __pyx_v_f_tau;
  double __pyx_v_tau_up;
  double __pyx_v_tau_low;
  Py_ssize_t __pyx_v_nit;
  Py_ssize_t __pyx_v_nit_max;
  double __pyx_r;
  int __pyx_t_1;
  int __pyx_t_2;

  /* "fmsne_implem.pyx":645
 *     The 4th parameter, tau, is the starting point for the binary search. It can be set to 1.0 if no prior guess is known.
 *     """
 *     cdef double f_tau = sne_binsearch_fct(ds_nn, tau, nnn, log_perp)             # <<<<<<<<<<<<<<
 *     if fabs(f_tau) <= EPSILON_DBL:
 *         return tau
 */
  __pyx_v_f_tau = __pyx_f_12fmsne_implem_sne_binsearch_fct(__pyx_v_ds_nn, __pyx_v_tau, __pyx_v_nnn, __pyx_v_log_perp);

  /* "fmsne_implem.pyx":646
 *     """
 *     cdef double f_tau = sne_binsearch_fct(ds_nn, tau, nnn, log_perp)
 *     if fabs(f_tau) <= EPSILON_DBL:             # <<<<<<<<<<<<<<
 *         return tau
 *     cdef double tau_up, tau_low
 */
  __pyx_t_1 = ((fabs(__pyx_v_f_tau) <= __pyx_v_12fmsne_implem_EPSILON_DBL) != 0);
  if (__pyx_t_1) {

    /* "fmsne_implem.pyx":647
 *     cdef double f_tau = sne_binsearch_fct(ds_nn, tau, nnn, log_perp)
 *     if fabs(f_tau) <= EPSILON_DBL:
 *         return tau             # <<<<<<<<<<<<<<
 *     cdef double tau_up, tau_low
 *     if f_tau > 0:
 */
    __pyx_r = __pyx_v_tau;
    goto __pyx_L0;

    /* "fmsne_implem.pyx":646
 *     """
 *     cdef double f_tau = sne_binsearch_fct(ds_nn, tau, nnn, log_perp)
 *     if fabs(f_tau) <= EPSILON_DBL:             # <<<<<<<<<<<<<<
 *         return tau
 *     cdef double tau_up, tau_low
 */
  }

  /* "fmsne_implem.pyx":649
 *         return tau
 *     cdef double tau_up, tau_low
 *     if f_tau > 0:             # <<<<<<<<<<<<<<
 *         tau_low = tau*0.5
 *         if (tau_low < DBL_MIN) or (fabs(sne_densim(ds_nn, tau_low, nnn)) < DBL_MIN):
 */
  __pyx_t_1 = ((__pyx_v_f_tau > 0.0) != 0);
  if (__pyx_t_1) {

    /* "fmsne_implem.pyx":650
 *     cdef double tau_up, tau_low
 *     if f_tau > 0:
 *         tau_low = tau*0.5             # <<<<<<<<<<<<<<
 *         if (tau_low < DBL_MIN) or (fabs(sne_densim(ds_nn, tau_low, nnn)) < DBL_MIN):
 *             # Binary search failed. The root is too close from 0 for the numerical precision: the denominator of the similarities is almost 0.
 */
    __pyx_v_tau_low = (__pyx_v_tau * 0.5);

    /* "fmsne_implem.pyx":651
 *     if f_tau > 0:
 *         tau_low = tau*0.5
 *         if (tau_low < DBL_MIN) or (fabs(sne_densim(ds_nn, tau_low, nnn)) < DBL_MIN):             # <<<<<<<<<<<<<<
 *             # Binary search failed. The root is too close from 0 for the numerical precision: the denominator of the similarities is almost 0.
 *             return tau
 */
    __pyx_t_2 = ((__pyx_v_tau_low < DBL_MIN) != 0);
    if (!__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L6_bool_binop_done;
    }
    __pyx_t_2 = ((fabs(__pyx_f_12fmsne_implem_sne_densim(__pyx_v_ds_nn, __pyx_v_tau_low, __pyx_v_nnn)) < DBL_MIN) != 0);
    __pyx_t_1 = __pyx_t_2;
    __pyx_L6_bool_binop_done:;
    if (__pyx_t_1) {

      /* "fmsne_implem.pyx":653
 *         if (tau_low < DBL_MIN) or (fabs(sne_densim(ds_nn, tau_low, nnn)) < DBL_MIN):
 *             # Binary search failed. The root is too close from 0 for the numerical precision: the denominator of the similarities is almost 0.
 *             return tau             # <<<<<<<<<<<<<<
 *         f_tau = sne_binsearch_fct(ds_nn, tau_low, nnn, log_perp)
 *         if fabs(f_tau) <= EPSILON_DBL:
 */
      __pyx_r = __pyx_v_tau;
      goto __pyx_L0;

      /* "fmsne_implem.pyx":651
 *     if f_tau > 0:
 *         tau_low = tau*0.5
 *         if (tau_low < DBL_MIN) or (fabs(sne_densim(ds_nn, tau_low, nnn)) < DBL_MIN):             # <<<<<<<<<<<<<<
 *             # Binary search failed. The root is too close from 0 for the numerical precision: the denominator of the similarities is almost 0.
 *             return tau
 */
    }

    /* "fmsne_implem.pyx":654
 *             # Binary search failed. The root is too close from 0 for the numerical precision: the denominator of the similarities is almost 0.
 *             return tau
 *         f_tau = sne_binsearch_fct(ds_nn, tau_low, nnn, log_perp)             # <<<<<<<<<<<<<<
 *         if fabs(f_tau) <= EPSILON_DBL:
 *             return tau_low
 */
    __pyx_v_f_tau = __pyx_f_12fmsne_implem_sne_binsearch_fct(__pyx_v_ds_nn, __pyx_v_tau_low, __pyx_v_nnn, __pyx_v_log_perp);

    /* "fmsne_implem.pyx":655
 *             return tau
 *         f_tau = sne_binsearch_fct(ds_nn, tau_low, nnn, log_perp)
 *         if fabs(f_tau) <= EPSILON_DBL:             # <<<<<<<<<<<<<<
 *             return tau_low
 *         tau_up = tau
 */
    __pyx_t_1 = ((fabs(__pyx_v_f_tau) <= __pyx_v_12fmsne_implem_EPSILON_DBL) != 0);
    if (__pyx_t_1) {

      /* "fmsne_implem.pyx":656
 *         f_tau = sne_binsearch_fct(ds_nn, tau_low, nnn, log_perp)
 *         if fabs(f_tau) <= EPSILON_DBL:
 *             return tau_low             # <<<<<<<<<<<<<<
 *         tau_up = tau
 *         while f_tau > 0:
 */
      __pyx_r = __pyx_v_tau_low;
      goto __pyx_L0;

      /* "fmsne_implem.pyx":655
 *             return tau
 *         f_tau = sne_binsearch_fct(ds_nn, tau_low, nnn, log_perp)
 *         if fabs(f_tau) <= EPSILON_DBL:             # <<<<<<<<<<<<<<
 *             return tau_low
 *         tau_up = tau
 */
    }

    /* "fmsne_implem.pyx":657
 *         if fabs(f_tau) <= EPSILON_DBL:
 *             return tau_low
 *         tau_up = tau             # <<<<<<<<<<<<<<
 *         while f_tau > 0:
 *             tau_up = tau_low
 */
    __pyx_v_tau_up = __pyx_v_tau;

    /* "fmsne_implem.pyx":658
 *             return tau_low
 *         tau_up = tau
 *         while f_tau > 0:             # <<<<<<<<<<<<<<
 *             tau_up = tau_low
 *             tau_low *= 0.5
 */
    while (1) {
      __pyx_t_1 = ((__pyx_v_f_tau > 0.0) != 0);
      if (!__pyx_t_1) break;

      /* "fmsne_implem.pyx":659
 *         tau_up = tau
 *         while f_tau > 0:
 *             tau_up = tau_low             # <<<<<<<<<<<<<<
 *             tau_low *= 0.5
 *             if (tau_low < DBL_MIN) or (fabs(sne_densim(ds_nn, tau_low, nnn)) < DBL_MIN):
 */
      __pyx_v_tau_up = __pyx_v_tau_low;

      /* "fmsne_implem.pyx":660
 *         while f_tau > 0:
 *             tau_up = tau_low
 *             tau_low *= 0.5             # <<<<<<<<<<<<<<
 *             if (tau_low < DBL_MIN) or (fabs(sne_densim(ds_nn, tau_low, nnn)) < DBL_MIN):
 *                 # Binary search failed. The root is too close from 0 for the numerical precision.
 */
      __pyx_v_tau_low = (__pyx_v_tau_low * 0.5);

      /* "fmsne_implem.pyx":661
 *             tau_up = tau_low
 *             tau_low *= 0.5
 *             if (tau_low < DBL_MIN) or (fabs(sne_densim(ds_nn, tau_low, nnn)) < DBL_MIN):             # <<<<<<<<<<<<<<
 *                 # Binary search failed. The root is too close from 0 for the numerical precision.
 *                 return tau_up
 */
      __pyx_t_2 = ((__pyx_v_tau_low < DBL_MIN) != 0);
      if (!__pyx_t_2) {
      } else {
        __pyx_t_1 = __pyx_t_2;
        goto __pyx_L12_bool_binop_done;
      }
      __pyx_t_2 = ((fabs(__pyx_f_12fmsne_implem_sne_densim(__pyx_v_ds_nn, __pyx_v_tau_low, __pyx_v_nnn)) < DBL_MIN) != 0);
      __pyx_t_1 = __pyx_t_2;
      __pyx_L12_bool_binop_done:;
      if (__pyx_t_1) {

        /* "fmsne_implem.pyx":663
 *             if (tau_low < DBL_MIN) or (fabs(sne_densim(ds_nn, tau_low, nnn)) < DBL_MIN):
 *                 # Binary search failed. The root is too close from 0 for the numerical precision.
 *                 return tau_up             # <<<<<<<<<<<<<<
 *             f_tau = sne_binsearch_fct(ds_nn, tau_low, nnn, log_perp)
 *             if fabs(f_tau) <= EPSILON_DBL:
 */
        __pyx_r = __pyx_v_tau_up;
        goto __pyx_L0;

        /* "fmsne_implem.pyx":661
 *             tau_up = tau_low
 *             tau_low *= 0.5
 *             if (tau_low < DBL_MIN) or (fabs(sne_densim(ds_nn, tau_low, nnn)) < DBL_MIN):             # <<<<<<<<<<<<<<
 *                 # Binary search failed. The root is too close from 0 for the numerical precision.
 *                 return tau_up
 */
      }

      /* "fmsne_implem.pyx":664
 *                 # Binary search failed. The root is too close from 0 for the numerical precision.
 *                 return tau_up
 *             f_tau = sne_binsearch_fct(ds_nn, tau_low, nnn, log_perp)             # <<<<<<<<<<<<<<
 *             if fabs(f_tau) <= EPSILON_DBL:
 *                 return tau_low
 */
      __pyx_v_f_tau = __pyx_f_12fmsne_implem_sne_binsearch_fct(__pyx_v_ds_nn, __pyx_v_tau_low, __pyx_v_nnn, __pyx_v_log_perp);

      /* "fmsne_implem.pyx":665
 *                 return tau_up
 *             f_tau = sne_binsearch_fct(ds_nn, tau_low, nnn, log_perp)
 *             if fabs(f_tau) <= EPSILON_DBL:             # <<<<<<<<<<<<<<
 *                 return tau_low
 *     else:
 */
      __pyx_t_1 = ((fabs(__pyx_v_f_tau) <= __pyx_v_12fmsne_implem_EPSILON_DBL) != 0);
      if (__pyx_t_1) {

        /* "fmsne_implem.pyx":666
 *             f_tau = sne_binsearch_fct(ds_nn, tau_low, nnn, log_perp)
 *             if fabs(f_tau) <= EPSILON_DBL:
 *                 return tau_low             # <<<<<<<<<<<<<<
 *     else:
 *         tau_up = 2.0*tau
 */
        __pyx_r = __pyx_v_tau_low;
        goto __pyx_L0;

        /* "fmsne_implem.pyx":665
 *                 return tau_up
 *             f_tau = sne_binsearch_fct(ds_nn, tau_low, nnn, log_perp)
 *             if fabs(f_tau) <= EPSILON_DBL:             # <<<<<<<<<<<<<<
 *                 return tau_low
 *     else:
 */
      }
    }

    /* "fmsne_implem.pyx":649
 *         return tau
 *     cdef double tau_up, tau_low
 *     if f_tau > 0:             # <<<<<<<<<<<<<<
 *         tau_low = tau*0.5
 *         if (tau_low < DBL_MIN) or (fabs(sne_densim(ds_nn, tau_low, nnn)) < DBL_MIN):
 */
    goto __pyx_L4;
  }

  /* "fmsne_implem.pyx":668
 *                 return tau_low
 *     else:
 *         tau_up = 2.0*tau             # <<<<<<<<<<<<<<
 *         if fabs(sne_densim(ds_nn, tau_up, nnn)-nnn) <= EPSILON_DBL:
 *             # Binary search failed. The root is too big for the numerical precision of the exponentials of the similarities. All the exponentials at the denominator = 1 and hence, the denominator = nnn.
 */
  /*else*/ {
    __pyx_v_tau_up = (2.0 * __pyx_v_tau);

    /* "fmsne_implem.pyx":669
 *     else:
 *         tau_up = 2.0*tau
 *         if fabs(sne_densim(ds_nn, tau_up, nnn)-nnn) <= EPSILON_DBL:             # <<<<<<<<<<<<<<
 *             # Binary search failed. The root is too big for the numerical precision of the exponentials of the similarities. All the exponentials at the denominator = 1 and hence, the denominator = nnn.
 *             return tau
 */
    __pyx_t_1 = ((fabs((__pyx_f_12fmsne_implem_sne_densim(__pyx_v_ds_nn, __pyx_v_tau_up, __pyx_v_nnn) - __pyx_v_nnn)) <= __pyx_v_12fmsne_implem_EPSILON_DBL) != 0);
    if (__pyx_t_1) {

      /* "fmsne_implem.pyx":671
 *         if fabs(sne_densim(ds_nn, tau_up, nnn)-nnn) <= EPSILON_DBL:
 *             # Binary search failed. The root is too big for the numerical precision of the exponentials of the similarities. All the exponentials at the denominator = 1 and hence, the denominator = nnn.
 *             return tau             # <<<<<<<<<<<<<<
 *         f_tau = sne_binsearch_fct(ds_nn, tau_up, nnn, log_perp)
 *         if fabs(f_tau) <= EPSILON_DBL:
 */
      __pyx_r = __pyx_v_tau;
      goto __pyx_L0;

      /* "fmsne_implem.pyx":669
 *     else:
 *         tau_up = 2.0*tau
 *         if fabs(sne_densim(ds_nn, tau_up, nnn)-nnn) <= EPSILON_DBL:             # <<<<<<<<<<<<<<
 *             # Binary search failed. The root is too big for the numerical precision of the exponentials of the similarities. All the exponentials at the denominator = 1 and hence, the denominator = nnn.
 *             return tau
 */
    }

    /* "fmsne_implem.pyx":672
 *             # Binary search failed. The root is too big for the numerical precision of the exponentials of the similarities. All the exponentials at the denominator = 1 and hence, the denominator = nnn.
 *             return tau
 *         f_tau = sne_binsearch_fct(ds_nn, tau_up, nnn, log_perp)             # <<<<<<<<<<<<<<
 *         if fabs(f_tau) <= EPSILON_DBL:
 *             return tau_up
 */
    __pyx_v_f_tau = __pyx_f_12fmsne_implem_sne_binsearch_fct(__pyx_v_ds_nn, __pyx_v_tau_up, __pyx_v_nnn, __pyx_v_log_perp);

    /* "fmsne_implem.pyx":673
 *             return tau
 *         f_tau = sne_binsearch_fct(ds_nn, tau_up, nnn, log_perp)
 *         if fabs(f_tau) <= EPSILON_DBL:             # <<<<<<<<<<<<<<
 *             return tau_up
 *         tau_low = tau
 */
    __pyx_t_1 = ((fabs(__pyx_v_f_tau) <= __pyx_v_12fmsne_implem_EPSILON_DBL) != 0);
    if (__pyx_t_1) {

      /* "fmsne_implem.pyx":674
 *         f_tau = sne_binsearch_fct(ds_nn, tau_up, nnn, log_perp)
 *         if fabs(f_tau) <= EPSILON_DBL:
 *             return tau_up             # <<<<<<<<<<<<<<
 *         tau_low = tau
 *         while f_tau < 0:
 */
      __pyx_r = __pyx_v_tau_up;
      goto __pyx_L0;

      /* "fmsne_implem.pyx":673
 *             return tau
 *         f_tau = sne_binsearch_fct(ds_nn, tau_up, nnn, log_perp)
 *         if fabs(f_tau) <= EPSILON_DBL:             # <<<<<<<<<<<<<<
 *             return tau_up
 *         tau_low = tau
 */
    }

    /* "fmsne_implem.pyx":675
 *         if fabs(f_tau) <= EPSILON_DBL:
 *             return tau_up
 *         tau_low = tau             # <<<<<<<<<<<<<<
 *         while f_tau < 0:
 *             tau_low = tau_up
 */
    __pyx_v_tau_low = __pyx_v_tau;

    /* "fmsne_implem.pyx":676
 *             return tau_up
 *         tau_low = tau
 *         while f_tau < 0:             # <<<<<<<<<<<<<<
 *             tau_low = tau_up
 *             tau_up *= 2.0
 */
    while (1) {
      __pyx_t_1 = ((__pyx_v_f_tau < 0.0) != 0);
      if (!__pyx_t_1) break;

      /* "fmsne_implem.pyx":677
 *         tau_low = tau
 *         while f_tau < 0:
 *             tau_low = tau_up             # <<<<<<<<<<<<<<
 *             tau_up *= 2.0
 *             if fabs(sne_densim(ds_nn, tau_up, nnn)-nnn) <= EPSILON_DBL:
 */
      __pyx_v_tau_low = __pyx_v_tau_up;

      /* "fmsne_implem.pyx":678
 *         while f_tau < 0:
 *             tau_low = tau_up
 *             tau_up *= 2.0             # <<<<<<<<<<<<<<
 *             if fabs(sne_densim(ds_nn, tau_up, nnn)-nnn) <= EPSILON_DBL:
 *                 # Binary search failed. The root is too big for the numerical precision of the exponentials of the similarities.
 */
      __pyx_v_tau_up = (__pyx_v_tau_up * 2.0);

      /* "fmsne_implem.pyx":679
 *             tau_low = tau_up
 *             tau_up *= 2.0
 *             if fabs(sne_densim(ds_nn, tau_up, nnn)-nnn) <= EPSILON_DBL:             # <<<<<<<<<<<<<<
 *                 # Binary search failed. The root is too big for the numerical precision of the exponentials of the similarities.
 *                 return tau_low
 */
      __pyx_t_1 = ((fabs((__pyx_f_12fmsne_implem_sne_densim(__pyx_v_ds_nn, __pyx_v_tau_up, __pyx_v_nnn) - __pyx_v_nnn)) <= __pyx_v_12fmsne_implem_EPSILON_DBL) != 0);
      if (__pyx_t_1) {

        /* "fmsne_implem.pyx":681
 *             if fabs(sne_densim(ds_nn, tau_up, nnn)-nnn) <= EPSILON_DBL:
 *                 # Binary search failed. The root is too big for the numerical precision of the exponentials of the similarities.
 *                 return tau_low             # <<<<<<<<<<<<<<
 *             f_tau = sne_binsearch_fct(ds_nn, tau_up, nnn, log_perp)
 *             if fabs(f_tau) <= EPSILON_DBL:
 */
        __pyx_r = __pyx_v_tau_low;
        goto __pyx_L0;

        /* "fmsne_implem.pyx":679
 *             tau_low = tau_up
 *             tau_up *= 2.0
 *             if fabs(sne_densim(ds_nn, tau_up, nnn)-nnn) <= EPSILON_DBL:             # <<<<<<<<<<<<<<
 *                 # Binary search failed. The root is too big for the numerical precision of the exponentials of the similarities.
 *                 return tau_low
 */
      }

      /* "fmsne_implem.pyx":682
 *                 # Binary search failed. The root is too big for the numerical precision of the exponentials of the similarities.
 *                 return tau_low
 *             f_tau = sne_binsearch_fct(ds_nn, tau_up, nnn, log_perp)             # <<<<<<<<<<<<<<
 *             if fabs(f_tau) <= EPSILON_DBL:
 *                 return tau_up
 */
      __pyx_v_f_tau = __pyx_f_12fmsne_implem_sne_binsearch_fct(__pyx_v_ds_nn, __pyx_v_tau_up, __pyx_v_nnn, __pyx_v_log_perp);

      /* "fmsne_implem.pyx":683
 *                 return tau_low
 *             f_tau = sne_binsearch_fct(ds_nn, tau_up, nnn, log_perp)
 *             if fabs(f_tau) <= EPSILON_DBL:             # <<<<<<<<<<<<<<
 *                 return tau_up
 *     cdef Py_ssize_t nit = 0
 */
      __pyx_t_1 = ((fabs(__pyx_v_f_tau) <= __pyx_v_12fmsne_implem_EPSILON_DBL) != 0);
      if (__pyx_t_1) {

        /* "fmsne_implem.pyx":684
 *             f_tau = sne_binsearch_fct(ds_nn, tau_up, nnn, log_perp)
 *             if fabs(f_tau) <= EPSILON_DBL:
 *                 return tau_up             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t nit = 0
 *     cdef Py_ssize_t nit_max = 1000
 */
        __pyx_r = __pyx_v_tau_up;
        goto __pyx_L0;

        /* "fmsne_implem.pyx":683
 *                 return tau_low
 *             f_tau = sne_binsearch_fct(ds_nn, tau_up, nnn, log_perp)
 *             if fabs(f_tau) <= EPSILON_DBL:             # <<<<<<<<<<<<<<
 *                 return tau_up
 *     cdef Py_ssize_t nit = 0
 */
      }
    }
  }
  __pyx_L4:;

  /* "fmsne_implem.pyx":685
 *             if fabs(f_tau) <= EPSILON_DBL:
 *                 return tau_up
 *     cdef Py_ssize_t nit = 0             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t nit_max = 1000
 *     while nit < nit_max:
 */
  __pyx_v_nit = 0;

  /* "fmsne_implem.pyx":686
 *                 return tau_up
 *     cdef Py_ssize_t nit = 0
 *     cdef Py_ssize_t nit_max = 1000             # <<<<<<<<<<<<<<
 *     while nit < nit_max:
 *         tau = (tau_up+tau_low)*0.5
 */
  __pyx_v_nit_max = 0x3E8;

  /* "fmsne_implem.pyx":687
 *     cdef Py_ssize_t nit = 0
 *     cdef Py_ssize_t nit_max = 1000
 *     while nit < nit_max:             # <<<<<<<<<<<<<<
 *         tau = (tau_up+tau_low)*0.5
 *         f_tau = sne_binsearch_fct(ds_nn, tau, nnn, log_perp)
 */
  while (1) {
    __pyx_t_1 = ((__pyx_v_nit < __pyx_v_nit_max) != 0);
    if (!__pyx_t_1) break;

    /* "fmsne_implem.pyx":688
 *     cdef Py_ssize_t nit_max = 1000
 *     while nit < nit_max:
 *         tau = (tau_up+tau_low)*0.5             # <<<<<<<<<<<<<<
 *         f_tau = sne_binsearch_fct(ds_nn, tau, nnn, log_perp)
 *         if fabs(f_tau) <= EPSILON_DBL:
 */
    __pyx_v_tau = ((__pyx_v_tau_up + __pyx_v_tau_low) * 0.5);

    /* "fmsne_implem.pyx":689
 *     while nit < nit_max:
 *         tau = (tau_up+tau_low)*0.5
 *         f_tau = sne_binsearch_fct(ds_nn, tau, nnn, log_perp)             # <<<<<<<<<<<<<<
 *         if fabs(f_tau) <= EPSILON_DBL:
 *             return tau
 */
    __pyx_v_f_tau = __pyx_f_12fmsne_implem_sne_binsearch_fct(__pyx_v_ds_nn, __pyx_v_tau, __pyx_v_nnn, __pyx_v_log_perp);

    /* "fmsne_implem.pyx":690
 *         tau = (tau_up+tau_low)*0.5
 *         f_tau = sne_binsearch_fct(ds_nn, tau, nnn, log_perp)
 *         if fabs(f_tau) <= EPSILON_DBL:             # <<<<<<<<<<<<<<
 *             return tau
 *         elif f_tau > 0:
 */
    __pyx_t_1 = ((fabs(__pyx_v_f_tau) <= __pyx_v_12fmsne_implem_EPSILON_DBL) != 0);
    if (__pyx_t_1) {

      /* "fmsne_implem.pyx":691
 *         f_tau = sne_binsearch_fct(ds_nn, tau, nnn, log_perp)
 *         if fabs(f_tau) <= EPSILON_DBL:
 *             return tau             # <<<<<<<<<<<<<<
 *         elif f_tau > 0:
 *             tau_up = tau
 */
      __pyx_r = __pyx_v_tau;
      goto __pyx_L0;

      /* "fmsne_implem.pyx":690
 *         tau = (tau_up+tau_low)*0.5
 *         f_tau = sne_binsearch_fct(ds_nn, tau, nnn, log_perp)
 *         if fabs(f_tau) <= EPSILON_DBL:             # <<<<<<<<<<<<<<
 *             return tau
 *         elif f_tau > 0:
 */
    }

    /* "fmsne_implem.pyx":692
 *         if fabs(f_tau) <= EPSILON_DBL:
 *             return tau
 *         elif f_tau > 0:             # <<<<<<<<<<<<<<
 *             tau_up = tau
 *         else:
 */
    __pyx_t_1 = ((__pyx_v_f_tau > 0.0) != 0);
    if (__pyx_t_1) {

      /* "fmsne_implem.pyx":693
 *             return tau
 *         elif f_tau > 0:
 *             tau_up = tau             # <<<<<<<<<<<<<<
 *         else:
 *             tau_low = tau
 */
      __pyx_v_tau_up = __pyx_v_tau;

      /* "fmsne_implem.pyx":692
 *         if fabs(f_tau) <= EPSILON_DBL:
 *             return tau
 *         elif f_tau > 0:             # <<<<<<<<<<<<<<
 *             tau_up = tau
 *         else:
 */
      goto __pyx_L23;
    }

    /* "fmsne_implem.pyx":695
 *             tau_up = tau
 *         else:
 *             tau_low = tau             # <<<<<<<<<<<<<<
 *         nit += 1
 *     # Binary search failed
 */
    /*else*/ {
      __pyx_v_tau_low = __pyx_v_tau;
    }
    __pyx_L23:;

    /* "fmsne_implem.pyx":696
 *         else:
 *             tau_low = tau
 *         nit += 1             # <<<<<<<<<<<<<<
 *     # Binary search failed
 *     return tau
 */
    __pyx_v_nit = (__pyx_v_nit + 1);
  }

  /* "fmsne_implem.pyx":698
 *         nit += 1
 *     # Binary search failed
 *     return tau             # <<<<<<<<<<<<<<
 * 
 * cdef inline double** ms_hdsim(double** ds_hd, Py_ssize_t N, Py_ssize_t L, int* K_h, Py_ssize_t N_1):
 */
  __pyx_r = __pyx_v_tau;
  goto __pyx_L0;

  /* "fmsne_implem.pyx":637
 *     return v/den + log(den) - log_perp
 * 
 * cdef inline double sne_binsearch_bandwidth_fit(const double* ds_nn, Py_ssize_t nnn, double log_perp, double tau) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     Tune the bandwidths of HD SNE similarities.
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "fmsne_implem.pyx":700
 *     return tau
 * 
 * cdef inline double** ms_hdsim(double** ds_hd, Py_ssize_t N, Py_ssize_t L, int* K_h, Py_ssize_t N_1):             # <<<<<<<<<<<<<<
 *     """
 *     Return NULL if memory problem.
 */

static CYTHON_INLINE double **__pyx_f_12fmsne_implem_ms_hdsim(double **__pyx_v_ds_hd, Py_ssize_t __pyx_v_N, Py_ssize_t __pyx_v_L, int *__pyx_v_K_h, Py_ssize_t __pyx_v_N_1) {
  double **__pyx_v_tau_h;
  Py_ssize_t __pyx_v_i;
  Py_ssize_t __pyx_v_h;
  Py_ssize_t __pyx_v_L_1;
  Py_ssize_t __pyx_v_L_2;
  double *__pyx_v_log_perp;
  double **__pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  int __pyx_t_6;
  Py_ssize_t __pyx_t_7;
  __Pyx_RefNannySetupContext("ms_hdsim", 0);

  /* "fmsne_implem.pyx":704
 *     Return NULL if memory problem.
 *     """
 *     cdef double** tau_h = alloc_dble_2dmat(L, N)             # <<<<<<<<<<<<<<
 *     if tau_h is NULL:
 *         return NULL
 */
  __pyx_v_tau_h = __pyx_f_12fmsne_implem_alloc_dble_2dmat(__pyx_v_L, __pyx_v_N);

  /* "fmsne_implem.pyx":705
 *     """
 *     cdef double** tau_h = alloc_dble_2dmat(L, N)
 *     if tau_h is NULL:             # <<<<<<<<<<<<<<
 *         return NULL
 *     cdef Py_ssize_t i, h, L_1, L_2
 */
  __pyx_t_1 = ((__pyx_v_tau_h == NULL) != 0);
  if (__pyx_t_1) {

    /* "fmsne_implem.pyx":706
 *     cdef double** tau_h = alloc_dble_2dmat(L, N)
 *     if tau_h is NULL:
 *         return NULL             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t i, h, L_1, L_2
 *     cdef double* log_perp = <double*> PyMem_Malloc(L*sizeof(double))
 */
    __pyx_r = NULL;
    goto __pyx_L0;

    /* "fmsne_implem.pyx":705
 *     """
 *     cdef double** tau_h = alloc_dble_2dmat(L, N)
 *     if tau_h is NULL:             # <<<<<<<<<<<<<<
 *         return NULL
 *     cdef Py_ssize_t i, h, L_1, L_2
 */
  }

  /* "fmsne_implem.pyx":708
 *         return NULL
 *     cdef Py_ssize_t i, h, L_1, L_2
 *     cdef double* log_perp = <double*> PyMem_Malloc(L*sizeof(double))             # <<<<<<<<<<<<<<
 *     if log_perp is NULL:
 *         free_dble_2dmat(tau_h, L)
 */
  __pyx_v_log_perp = ((double *)PyMem_Malloc((__pyx_v_L * (sizeof(double)))));

  /* "fmsne_implem.pyx":709
 *     cdef Py_ssize_t i, h, L_1, L_2
 *     cdef double* log_perp = <double*> PyMem_Malloc(L*sizeof(double))
 *     if log_perp is NULL:             # <<<<<<<<<<<<<<
 *         free_dble_2dmat(tau_h, L)
 *         return NULL
 */
  __pyx_t_1 = ((__pyx_v_log_perp == NULL) != 0);
  if (__pyx_t_1) {

    /* "fmsne_implem.pyx":710
 *     cdef double* log_perp = <double*> PyMem_Malloc(L*sizeof(double))
 *     if log_perp is NULL:
 *         free_dble_2dmat(tau_h, L)             # <<<<<<<<<<<<<<
 *         return NULL
 *     for h in range(L):
 */
    __pyx_f_12fmsne_implem_free_dble_2dmat(__pyx_v_tau_h, __pyx_v_L);

    /* "fmsne_implem.pyx":711
 *     if log_perp is NULL:
 *         free_dble_2dmat(tau_h, L)
 *         return NULL             # <<<<<<<<<<<<<<
 *     for h in range(L):
 *         log_perp[h] = log(<double> min(K_h[h], N_1))
 */
    __pyx_r = NULL;
    goto __pyx_L0;

    /* "fmsne_implem.pyx":709
 *     cdef Py_ssize_t i, h, L_1, L_2
 *     cdef double* log_perp = <double*> PyMem_Malloc(L*sizeof(double))
 *     if log_perp is NULL:             # <<<<<<<<<<<<<<
 *         free_dble_2dmat(tau_h, L)
 *         return NULL
 */
  }

  /* "fmsne_implem.pyx":712
 *         free_dble_2dmat(tau_h, L)
 *         return NULL
 *     for h in range(L):             # <<<<<<<<<<<<<<
 *         log_perp[h] = log(<double> min(K_h[h], N_1))
 *     L_1 = L - 1
 */
  __pyx_t_2 = __pyx_v_L;
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_h = __pyx_t_4;

    /* "fmsne_implem.pyx":713
 *         return NULL
 *     for h in range(L):
 *         log_perp[h] = log(<double> min(K_h[h], N_1))             # <<<<<<<<<<<<<<
 *     L_1 = L - 1
 *     L_2 = L_1 - 1
 */
    __pyx_t_5 = __pyx_v_N_1;
    __pyx_t_6 = (__pyx_v_K_h[__pyx_v_h]);
    if (((__pyx_t_5 < __pyx_t_6) != 0)) {
      __pyx_t_7 = __pyx_t_5;
    } else {
      __pyx_t_7 = __pyx_t_6;
    }
    (__pyx_v_log_perp[__pyx_v_h]) = log(((double)__pyx_t_7));
  }

  /* "fmsne_implem.pyx":714
 *     for h in range(L):
 *         log_perp[h] = log(<double> min(K_h[h], N_1))
 *     L_1 = L - 1             # <<<<<<<<<<<<<<
 *     L_2 = L_1 - 1
 *     # For each data point
 */
  __pyx_v_L_1 = (__pyx_v_L - 1);

  /* "fmsne_implem.pyx":715
 *         log_perp[h] = log(<double> min(K_h[h], N_1))
 *     L_1 = L - 1
 *     L_2 = L_1 - 1             # <<<<<<<<<<<<<<
 *     # For each data point
 *     for i in range(N):
 */
  __pyx_v_L_2 = (__pyx_v_L_1 - 1);

  /* "fmsne_implem.pyx":717
 *     L_2 = L_1 - 1
 *     # For each data point
 *     for i in range(N):             # <<<<<<<<<<<<<<
 *         # Computing the bandwidth for the last scale. The binary search is initialized with 1.
 *         tau_h[L_1][i] = sne_binsearch_bandwidth_fit(ds_hd[i], N_1, log_perp[L_1], 1.0)
 */
  __pyx_t_2 = __pyx_v_N;
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "fmsne_implem.pyx":719
 *     for i in range(N):
 *         # Computing the bandwidth for the last scale. The binary search is initialized with 1.
 *         tau_h[L_1][i] = sne_binsearch_bandwidth_fit(ds_hd[i], N_1, log_perp[L_1], 1.0)             # <<<<<<<<<<<<<<
 *         # For the other scales, the binary search is initialized with the bandwidth of the previous scale.
 *         for h in range(L_2, -1, -1):
 */
    ((__pyx_v_tau_h[__pyx_v_L_1])[__pyx_v_i]) = __pyx_f_12fmsne_implem_sne_binsearch_bandwidth_fit((__pyx_v_ds_hd[__pyx_v_i]), __pyx_v_N_1, (__pyx_v_log_perp[__pyx_v_L_1]), 1.0);

    /* "fmsne_implem.pyx":721
 *         tau_h[L_1][i] = sne_binsearch_bandwidth_fit(ds_hd[i], N_1, log_perp[L_1], 1.0)
 *         # For the other scales, the binary search is initialized with the bandwidth of the previous scale.
 *         for h in range(L_2, -1, -1):             # <<<<<<<<<<<<<<
 *             tau_h[h][i] = sne_binsearch_bandwidth_fit(ds_hd[i], N_1, log_perp[h], tau_h[h+1][i])
 *     PyMem_Free(log_perp)
 */
    for (__pyx_t_7 = __pyx_v_L_2; __pyx_t_7 > -1L; __pyx_t_7-=1) {
      __pyx_v_h = __pyx_t_7;

      /* "fmsne_implem.pyx":722
 *         # For the other scales, the binary search is initialized with the bandwidth of the previous scale.
 *         for h in range(L_2, -1, -1):
 *             tau_h[h][i] = sne_binsearch_bandwidth_fit(ds_hd[i], N_1, log_perp[h], tau_h[h+1][i])             # <<<<<<<<<<<<<<
 *     PyMem_Free(log_perp)
 *     return tau_h
 */
      ((__pyx_v_tau_h[__pyx_v_h])[__pyx_v_i]) = __pyx_f_12fmsne_implem_sne_binsearch_bandwidth_fit((__pyx_v_ds_hd[__pyx_v_i]), __pyx_v_N_1, (__pyx_v_log_perp[__pyx_v_h]), ((__pyx_v_tau_h[(__pyx_v_h + 1)])[__pyx_v_i]));
    }
  }

  /* "fmsne_implem.pyx":723
 *         for h in range(L_2, -1, -1):
 *             tau_h[h][i] = sne_binsearch_bandwidth_fit(ds_hd[i], N_1, log_perp[h], tau_h[h+1][i])
 *     PyMem_Free(log_perp)             # <<<<<<<<<<<<<<
 *     return tau_h
 * 
 */
  PyMem_Free(__pyx_v_log_perp);

  /* "fmsne_implem.pyx":724
 *             tau_h[h][i] = sne_binsearch_bandwidth_fit(ds_hd[i], N_1, log_perp[h], tau_h[h+1][i])
 *     PyMem_Free(log_perp)
 *     return tau_h             # <<<<<<<<<<<<<<
 * 
 * cdef inline double msld_def_div2N(bint isnc2, double Nd, double n_c_f) nogil:
 */
  __pyx_r = __pyx_v_tau_h;
  goto __pyx_L0;

  /* "fmsne_implem.pyx":700
 *     return tau
 * 
 * cdef inline double** ms_hdsim(double** ds_hd, Py_ssize_t N, Py_ssize_t L, int* K_h, Py_ssize_t N_1):             # <<<<<<<<<<<<<<
 *     """
 *     Return NULL if memory problem.
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "fmsne_implem.pyx":726
 *     return tau_h
 * 
 * cdef inline double msld_def_div2N(bint isnc2, double Nd, double n_c_f) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     """
 */

static CYTHON_INLINE double __pyx_f_12fmsne_implem_msld_def_div2N(int __pyx_v_isnc2, double __pyx_v_Nd, double __pyx_v_n_c_f) {
  double __pyx_r;
  int __pyx_t_1;

  /* "fmsne_implem.pyx":729
 *     """
 *     """
 *     if isnc2:             # <<<<<<<<<<<<<<
 *         return 1.0/Nd
 *     else:
 */
  __pyx_t_1 = (__pyx_v_isnc2 != 0);
  if (__pyx_t_1) {

    /* "fmsne_implem.pyx":730
 *     """
 *     if isnc2:
 *         return 1.0/Nd             # <<<<<<<<<<<<<<
 *     else:
 *         return 2.0/(Nd*n_c_f)
 */
    __pyx_r = (1.0 / __pyx_v_Nd);
    goto __pyx_L0;

    /* "fmsne_implem.pyx":729
 *     """
 *     """
 *     if isnc2:             # <<<<<<<<<<<<<<
 *         return 1.0/Nd
 *     else:
 */
  }

  /* "fmsne_implem.pyx":732
 *         return 1.0/Nd
 *     else:
 *         return 2.0/(Nd*n_c_f)             # <<<<<<<<<<<<<<
 * 
 * cdef inline double eval_mean_var_X_lds(double Nd, Py_ssize_t n_components, double* xlds, Py_ssize_t prod_N_nc, double n_c_f, double Nd_1) nogil:
 */
  /*else*/ {
    __pyx_r = (2.0 / (__pyx_v_Nd * __pyx_v_n_c_f));
    goto __pyx_L0;
  }

  /* "fmsne_implem.pyx":726
 *     return tau_h
 * 
 * cdef inline double msld_def_div2N(bint isnc2, double Nd, double n_c_f) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     """
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "fmsne_implem.pyx":734
 *         return 2.0/(Nd*n_c_f)
 * 
 * cdef inline double eval_mean_var_X_lds(double Nd, Py_ssize_t n_components, double* xlds, Py_ssize_t prod_N_nc, double n_c_f, double Nd_1) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     """
 */

static CYTHON_INLINE double __pyx_f_12fmsne_implem_eval_mean_var_X_lds(double __pyx_v_Nd, Py_ssize_t __pyx_v_n_components, double *__pyx_v_xlds, Py_ssize_t __pyx_v_prod_N_nc, double __pyx_v_n_c_f, double __pyx_v_Nd_1) {
  double __pyx_v_mean_var_X_lds;
  Py_ssize_t __pyx_v_i;
  double __pyx_r;
  Py_ssize_t __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;

  /* "fmsne_implem.pyx":737
 *     """
 *     """
 *     cdef double mean_var_X_lds = 0.0             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t i
 *     for i in range(n_components):
 */
  __pyx_v_mean_var_X_lds = 0.0;

  /* "fmsne_implem.pyx":739
 *     cdef double mean_var_X_lds = 0.0
 *     cdef Py_ssize_t i
 *     for i in range(n_components):             # <<<<<<<<<<<<<<
 *         mean_var_X_lds += var_arr_ptr_step(xlds, prod_N_nc, i, n_components, Nd, Nd_1)
 *     return mean_var_X_lds/n_c_f
 */
  __pyx_t_1 = __pyx_v_n_components;
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "fmsne_implem.pyx":740
 *     cdef Py_ssize_t i
 *     for i in range(n_components):
 *         mean_var_X_lds += var_arr_ptr_step(xlds, prod_N_nc, i, n_components, Nd, Nd_1)             # <<<<<<<<<<<<<<
 *     return mean_var_X_lds/n_c_f
 * 
 */
    __pyx_v_mean_var_X_lds = (__pyx_v_mean_var_X_lds + __pyx_f_12fmsne_implem_var_arr_ptr_step(__pyx_v_xlds, __pyx_v_prod_N_nc, __pyx_v_i, __pyx_v_n_components, __pyx_v_Nd, __pyx_v_Nd_1));
  }

  /* "fmsne_implem.pyx":741
 *     for i in range(n_components):
 *         mean_var_X_lds += var_arr_ptr_step(xlds, prod_N_nc, i, n_components, Nd, Nd_1)
 *     return mean_var_X_lds/n_c_f             # <<<<<<<<<<<<<<
 * 
 * cdef inline void ms_ldprec_nofitU(double* p_h, double* t_h, bint isnc2, Py_ssize_t L, int* K_h, double ihncf, double ihncfexp, double mean_var_X_lds) nogil:
 */
  __pyx_r = (__pyx_v_mean_var_X_lds / __pyx_v_n_c_f);
  goto __pyx_L0;

  /* "fmsne_implem.pyx":734
 *         return 2.0/(Nd*n_c_f)
 * 
 * cdef inline double eval_mean_var_X_lds(double Nd, Py_ssize_t n_components, double* xlds, Py_ssize_t prod_N_nc, double n_c_f, double Nd_1) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     """
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "fmsne_implem.pyx":743
 *     return mean_var_X_lds/n_c_f
 * 
 * cdef inline void ms_ldprec_nofitU(double* p_h, double* t_h, bint isnc2, Py_ssize_t L, int* K_h, double ihncf, double ihncfexp, double mean_var_X_lds) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     """
 */

static CYTHON_INLINE void __pyx_f_12fmsne_implem_ms_ldprec_nofitU(double *__pyx_v_p_h, double *__pyx_v_t_h, int __pyx_v_isnc2, Py_ssize_t __pyx_v_L, int *__pyx_v_K_h, double __pyx_v_ihncf, double __pyx_v_ihncfexp, double __pyx_v_mean_var_X_lds) {
  Py_ssize_t __pyx_v_h;
  double __pyx_v_mf;
  int __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  Py_ssize_t __pyx_t_5;

  /* "fmsne_implem.pyx":747
 *     """
 *     cdef Py_ssize_t h
 *     if isnc2:             # <<<<<<<<<<<<<<
 *         for h in range(L):
 *             p_h[h] = <double> K_h[h]
 */
  __pyx_t_1 = (__pyx_v_isnc2 != 0);
  if (__pyx_t_1) {

    /* "fmsne_implem.pyx":748
 *     cdef Py_ssize_t h
 *     if isnc2:
 *         for h in range(L):             # <<<<<<<<<<<<<<
 *             p_h[h] = <double> K_h[h]
 *     else:
 */
    __pyx_t_2 = __pyx_v_L;
    __pyx_t_3 = __pyx_t_2;
    for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
      __pyx_v_h = __pyx_t_4;

      /* "fmsne_implem.pyx":749
 *     if isnc2:
 *         for h in range(L):
 *             p_h[h] = <double> K_h[h]             # <<<<<<<<<<<<<<
 *     else:
 *         for h in range(L):
 */
      (__pyx_v_p_h[__pyx_v_h]) = ((double)(__pyx_v_K_h[__pyx_v_h]));
    }

    /* "fmsne_implem.pyx":747
 *     """
 *     cdef Py_ssize_t h
 *     if isnc2:             # <<<<<<<<<<<<<<
 *         for h in range(L):
 *             p_h[h] = <double> K_h[h]
 */
    goto __pyx_L3;
  }

  /* "fmsne_implem.pyx":751
 *             p_h[h] = <double> K_h[h]
 *     else:
 *         for h in range(L):             # <<<<<<<<<<<<<<
 *             p_h[h] = pow(<double> K_h[h], ihncf)
 *     cdef double mf = max_arr_ptr(p_h, L)*ihncfexp
 */
  /*else*/ {
    __pyx_t_2 = __pyx_v_L;
    __pyx_t_3 = __pyx_t_2;
    for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
      __pyx_v_h = __pyx_t_4;

      /* "fmsne_implem.pyx":752
 *     else:
 *         for h in range(L):
 *             p_h[h] = pow(<double> K_h[h], ihncf)             # <<<<<<<<<<<<<<
 *     cdef double mf = max_arr_ptr(p_h, L)*ihncfexp
 *     for h in range(L):
 */
      (__pyx_v_p_h[__pyx_v_h]) = pow(((double)(__pyx_v_K_h[__pyx_v_h])), __pyx_v_ihncf);
    }
  }
  __pyx_L3:;

  /* "fmsne_implem.pyx":753
 *         for h in range(L):
 *             p_h[h] = pow(<double> K_h[h], ihncf)
 *     cdef double mf = max_arr_ptr(p_h, L)*ihncfexp             # <<<<<<<<<<<<<<
 *     for h in range(L):
 *         p_h[h] *= mean_var_X_lds
 */
  __pyx_v_mf = (__pyx_f_12fmsne_implem_max_arr_ptr(__pyx_v_p_h, __pyx_v_L) * __pyx_v_ihncfexp);

  /* "fmsne_implem.pyx":754
 *             p_h[h] = pow(<double> K_h[h], ihncf)
 *     cdef double mf = max_arr_ptr(p_h, L)*ihncfexp
 *     for h in range(L):             # <<<<<<<<<<<<<<
 *         p_h[h] *= mean_var_X_lds
 *         if p_h[h] < FLOAT64_EPS:
 */
  __pyx_t_2 = __pyx_v_L;
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_h = __pyx_t_4;

    /* "fmsne_implem.pyx":755
 *     cdef double mf = max_arr_ptr(p_h, L)*ihncfexp
 *     for h in range(L):
 *         p_h[h] *= mean_var_X_lds             # <<<<<<<<<<<<<<
 *         if p_h[h] < FLOAT64_EPS:
 *             p_h[h] = FLOAT64_EPS
 */
    __pyx_t_5 = __pyx_v_h;
    (__pyx_v_p_h[__pyx_t_5]) = ((__pyx_v_p_h[__pyx_t_5]) * __pyx_v_mean_var_X_lds);

    /* "fmsne_implem.pyx":756
 *     for h in range(L):
 *         p_h[h] *= mean_var_X_lds
 *         if p_h[h] < FLOAT64_EPS:             # <<<<<<<<<<<<<<
 *             p_h[h] = FLOAT64_EPS
 *         p_h[h] = mf/p_h[h]
 */
    __pyx_t_1 = (((__pyx_v_p_h[__pyx_v_h]) < __pyx_v_12fmsne_implem_FLOAT64_EPS) != 0);
    if (__pyx_t_1) {

      /* "fmsne_implem.pyx":757
 *         p_h[h] *= mean_var_X_lds
 *         if p_h[h] < FLOAT64_EPS:
 *             p_h[h] = FLOAT64_EPS             # <<<<<<<<<<<<<<
 *         p_h[h] = mf/p_h[h]
 *         if p_h[h] < FLOAT64_EPS:
 */
      (__pyx_v_p_h[__pyx_v_h]) = __pyx_v_12fmsne_implem_FLOAT64_EPS;

      /* "fmsne_implem.pyx":756
 *     for h in range(L):
 *         p_h[h] *= mean_var_X_lds
 *         if p_h[h] < FLOAT64_EPS:             # <<<<<<<<<<<<<<
 *             p_h[h] = FLOAT64_EPS
 *         p_h[h] = mf/p_h[h]
 */
    }

    /* "fmsne_implem.pyx":758
 *         if p_h[h] < FLOAT64_EPS:
 *             p_h[h] = FLOAT64_EPS
 *         p_h[h] = mf/p_h[h]             # <<<<<<<<<<<<<<
 *         if p_h[h] < FLOAT64_EPS:
 *             t_h[h] = 2.0/FLOAT64_EPS
 */
    (__pyx_v_p_h[__pyx_v_h]) = (__pyx_v_mf / (__pyx_v_p_h[__pyx_v_h]));

    /* "fmsne_implem.pyx":759
 *             p_h[h] = FLOAT64_EPS
 *         p_h[h] = mf/p_h[h]
 *         if p_h[h] < FLOAT64_EPS:             # <<<<<<<<<<<<<<
 *             t_h[h] = 2.0/FLOAT64_EPS
 *         else:
 */
    __pyx_t_1 = (((__pyx_v_p_h[__pyx_v_h]) < __pyx_v_12fmsne_implem_FLOAT64_EPS) != 0);
    if (__pyx_t_1) {

      /* "fmsne_implem.pyx":760
 *         p_h[h] = mf/p_h[h]
 *         if p_h[h] < FLOAT64_EPS:
 *             t_h[h] = 2.0/FLOAT64_EPS             # <<<<<<<<<<<<<<
 *         else:
 *             t_h[h] = 2.0/p_h[h]
 */
      (__pyx_v_t_h[__pyx_v_h]) = (2.0 / __pyx_v_12fmsne_implem_FLOAT64_EPS);

      /* "fmsne_implem.pyx":759
 *             p_h[h] = FLOAT64_EPS
 *         p_h[h] = mf/p_h[h]
 *         if p_h[h] < FLOAT64_EPS:             # <<<<<<<<<<<<<<
 *             t_h[h] = 2.0/FLOAT64_EPS
 *         else:
 */
      goto __pyx_L11;
    }

    /* "fmsne_implem.pyx":762
 *             t_h[h] = 2.0/FLOAT64_EPS
 *         else:
 *             t_h[h] = 2.0/p_h[h]             # <<<<<<<<<<<<<<
 *         if t_h[h] < FLOAT64_EPS:
 *             t_h[h] = FLOAT64_EPS
 */
    /*else*/ {
      (__pyx_v_t_h[__pyx_v_h]) = (2.0 / (__pyx_v_p_h[__pyx_v_h]));
    }
    __pyx_L11:;

    /* "fmsne_implem.pyx":763
 *         else:
 *             t_h[h] = 2.0/p_h[h]
 *         if t_h[h] < FLOAT64_EPS:             # <<<<<<<<<<<<<<
 *             t_h[h] = FLOAT64_EPS
 * 
 */
    __pyx_t_1 = (((__pyx_v_t_h[__pyx_v_h]) < __pyx_v_12fmsne_implem_FLOAT64_EPS) != 0);
    if (__pyx_t_1) {

      /* "fmsne_implem.pyx":764
 *             t_h[h] = 2.0/p_h[h]
 *         if t_h[h] < FLOAT64_EPS:
 *             t_h[h] = FLOAT64_EPS             # <<<<<<<<<<<<<<
 * 
 * cdef inline void ms_ldprec(Py_ssize_t n_components, double Nd, double* xlds, Py_ssize_t prod_N_nc, bint fit_U, Py_ssize_t L, Py_ssize_t N, double** tau_h, int* K_h, double* p_h, double* t_h, int N_1) nogil:
 */
      (__pyx_v_t_h[__pyx_v_h]) = __pyx_v_12fmsne_implem_FLOAT64_EPS;

      /* "fmsne_implem.pyx":763
 *         else:
 *             t_h[h] = 2.0/p_h[h]
 *         if t_h[h] < FLOAT64_EPS:             # <<<<<<<<<<<<<<
 *             t_h[h] = FLOAT64_EPS
 * 
 */
    }
  }

  /* "fmsne_implem.pyx":743
 *     return mean_var_X_lds/n_c_f
 * 
 * cdef inline void ms_ldprec_nofitU(double* p_h, double* t_h, bint isnc2, Py_ssize_t L, int* K_h, double ihncf, double ihncfexp, double mean_var_X_lds) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     """
 */

  /* function exit code */
}

/* "fmsne_implem.pyx":766
 *             t_h[h] = FLOAT64_EPS
 * 
 * cdef inline void ms_ldprec(Py_ssize_t n_components, double Nd, double* xlds, Py_ssize_t prod_N_nc, bint fit_U, Py_ssize_t L, Py_ssize_t N, double** tau_h, int* K_h, double* p_h, double* t_h, int N_1) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     """
 */

static CYTHON_INLINE void __pyx_f_12fmsne_implem_ms_ldprec(Py_ssize_t __pyx_v_n_components, double __pyx_v_Nd, double *__pyx_v_xlds, Py_ssize_t __pyx_v_prod_N_nc, int __pyx_v_fit_U, Py_ssize_t __pyx_v_L, Py_ssize_t __pyx_v_N, double **__pyx_v_tau_h, int *__pyx_v_K_h, double *__pyx_v_p_h, double *__pyx_v_t_h, int __pyx_v_N_1) {
  int __pyx_v_isnc2;
  double __pyx_v_Dhmax;
  double __pyx_v_td;
  double __pyx_v_mf;
  double __pyx_v_ihncf;
  double __pyx_v_ihncfexp;
  double __pyx_v_n_c_f;
  double __pyx_v_mean_var_X_lds;
  Py_ssize_t __pyx_v_i;
  Py_ssize_t __pyx_v_k;
  Py_ssize_t __pyx_v_h;
  int __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  Py_ssize_t __pyx_t_7;

  /* "fmsne_implem.pyx":769
 *     """
 *     """
 *     cdef bint isnc2 = n_components == 2             # <<<<<<<<<<<<<<
 *     cdef double Dhmax, td, mf, ihncf, ihncfexp, n_c_f, mean_var_X_lds
 *     n_c_f = <double> n_components
 */
  __pyx_v_isnc2 = (__pyx_v_n_components == 2);

  /* "fmsne_implem.pyx":771
 *     cdef bint isnc2 = n_components == 2
 *     cdef double Dhmax, td, mf, ihncf, ihncfexp, n_c_f, mean_var_X_lds
 *     n_c_f = <double> n_components             # <<<<<<<<<<<<<<
 *     if isnc2:
 *         ihncf = 1.0
 */
  __pyx_v_n_c_f = ((double)__pyx_v_n_components);

  /* "fmsne_implem.pyx":772
 *     cdef double Dhmax, td, mf, ihncf, ihncfexp, n_c_f, mean_var_X_lds
 *     n_c_f = <double> n_components
 *     if isnc2:             # <<<<<<<<<<<<<<
 *         ihncf = 1.0
 *         ihncfexp = 4.0
 */
  __pyx_t_1 = (__pyx_v_isnc2 != 0);
  if (__pyx_t_1) {

    /* "fmsne_implem.pyx":773
 *     n_c_f = <double> n_components
 *     if isnc2:
 *         ihncf = 1.0             # <<<<<<<<<<<<<<
 *         ihncfexp = 4.0
 *     else:
 */
    __pyx_v_ihncf = 1.0;

    /* "fmsne_implem.pyx":774
 *     if isnc2:
 *         ihncf = 1.0
 *         ihncfexp = 4.0             # <<<<<<<<<<<<<<
 *     else:
 *         ihncf = 2.0/n_c_f
 */
    __pyx_v_ihncfexp = 4.0;

    /* "fmsne_implem.pyx":772
 *     cdef double Dhmax, td, mf, ihncf, ihncfexp, n_c_f, mean_var_X_lds
 *     n_c_f = <double> n_components
 *     if isnc2:             # <<<<<<<<<<<<<<
 *         ihncf = 1.0
 *         ihncfexp = 4.0
 */
    goto __pyx_L3;
  }

  /* "fmsne_implem.pyx":776
 *         ihncfexp = 4.0
 *     else:
 *         ihncf = 2.0/n_c_f             # <<<<<<<<<<<<<<
 *         ihncfexp = pow(2.0, 1.0+ihncf)
 *     mean_var_X_lds = eval_mean_var_X_lds(Nd, n_components, xlds, prod_N_nc, n_c_f, <double> N_1)
 */
  /*else*/ {
    __pyx_v_ihncf = (2.0 / __pyx_v_n_c_f);

    /* "fmsne_implem.pyx":777
 *     else:
 *         ihncf = 2.0/n_c_f
 *         ihncfexp = pow(2.0, 1.0+ihncf)             # <<<<<<<<<<<<<<
 *     mean_var_X_lds = eval_mean_var_X_lds(Nd, n_components, xlds, prod_N_nc, n_c_f, <double> N_1)
 *     cdef Py_ssize_t i, k, h
 */
    __pyx_v_ihncfexp = pow(2.0, (1.0 + __pyx_v_ihncf));
  }
  __pyx_L3:;

  /* "fmsne_implem.pyx":778
 *         ihncf = 2.0/n_c_f
 *         ihncfexp = pow(2.0, 1.0+ihncf)
 *     mean_var_X_lds = eval_mean_var_X_lds(Nd, n_components, xlds, prod_N_nc, n_c_f, <double> N_1)             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t i, k, h
 *     if fit_U:
 */
  __pyx_v_mean_var_X_lds = __pyx_f_12fmsne_implem_eval_mean_var_X_lds(__pyx_v_Nd, __pyx_v_n_components, __pyx_v_xlds, __pyx_v_prod_N_nc, __pyx_v_n_c_f, ((double)__pyx_v_N_1));

  /* "fmsne_implem.pyx":780
 *     mean_var_X_lds = eval_mean_var_X_lds(Nd, n_components, xlds, prod_N_nc, n_c_f, <double> N_1)
 *     cdef Py_ssize_t i, k, h
 *     if fit_U:             # <<<<<<<<<<<<<<
 *         # Computing the U and storing it in mf
 *         Dhmax = -DBL_MAX
 */
  __pyx_t_1 = (__pyx_v_fit_U != 0);
  if (__pyx_t_1) {

    /* "fmsne_implem.pyx":782
 *     if fit_U:
 *         # Computing the U and storing it in mf
 *         Dhmax = -DBL_MAX             # <<<<<<<<<<<<<<
 *         for k in range(1, L, 1):
 *             mf = 0.0
 */
    __pyx_v_Dhmax = (-DBL_MAX);

    /* "fmsne_implem.pyx":783
 *         # Computing the U and storing it in mf
 *         Dhmax = -DBL_MAX
 *         for k in range(1, L, 1):             # <<<<<<<<<<<<<<
 *             mf = 0.0
 *             h = k-1
 */
    __pyx_t_2 = __pyx_v_L;
    __pyx_t_3 = __pyx_t_2;
    for (__pyx_t_4 = 1; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
      __pyx_v_k = __pyx_t_4;

      /* "fmsne_implem.pyx":784
 *         Dhmax = -DBL_MAX
 *         for k in range(1, L, 1):
 *             mf = 0.0             # <<<<<<<<<<<<<<
 *             h = k-1
 *             for i in range(N):
 */
      __pyx_v_mf = 0.0;

      /* "fmsne_implem.pyx":785
 *         for k in range(1, L, 1):
 *             mf = 0.0
 *             h = k-1             # <<<<<<<<<<<<<<
 *             for i in range(N):
 *                 td = log2(tau_h[k][i]) - log2(tau_h[h][i])
 */
      __pyx_v_h = (__pyx_v_k - 1);

      /* "fmsne_implem.pyx":786
 *             mf = 0.0
 *             h = k-1
 *             for i in range(N):             # <<<<<<<<<<<<<<
 *                 td = log2(tau_h[k][i]) - log2(tau_h[h][i])
 *                 if td >= DBL_MIN:
 */
      __pyx_t_5 = __pyx_v_N;
      __pyx_t_6 = __pyx_t_5;
      for (__pyx_t_7 = 0; __pyx_t_7 < __pyx_t_6; __pyx_t_7+=1) {
        __pyx_v_i = __pyx_t_7;

        /* "fmsne_implem.pyx":787
 *             h = k-1
 *             for i in range(N):
 *                 td = log2(tau_h[k][i]) - log2(tau_h[h][i])             # <<<<<<<<<<<<<<
 *                 if td >= DBL_MIN:
 *                     mf += 1.0/td
 */
        __pyx_v_td = (log2(((__pyx_v_tau_h[__pyx_v_k])[__pyx_v_i])) - log2(((__pyx_v_tau_h[__pyx_v_h])[__pyx_v_i])));

        /* "fmsne_implem.pyx":788
 *             for i in range(N):
 *                 td = log2(tau_h[k][i]) - log2(tau_h[h][i])
 *                 if td >= DBL_MIN:             # <<<<<<<<<<<<<<
 *                     mf += 1.0/td
 *             if mf > Dhmax:
 */
        __pyx_t_1 = ((__pyx_v_td >= DBL_MIN) != 0);
        if (__pyx_t_1) {

          /* "fmsne_implem.pyx":789
 *                 td = log2(tau_h[k][i]) - log2(tau_h[h][i])
 *                 if td >= DBL_MIN:
 *                     mf += 1.0/td             # <<<<<<<<<<<<<<
 *             if mf > Dhmax:
 *                 Dhmax = mf
 */
          __pyx_v_mf = (__pyx_v_mf + (1.0 / __pyx_v_td));

          /* "fmsne_implem.pyx":788
 *             for i in range(N):
 *                 td = log2(tau_h[k][i]) - log2(tau_h[h][i])
 *                 if td >= DBL_MIN:             # <<<<<<<<<<<<<<
 *                     mf += 1.0/td
 *             if mf > Dhmax:
 */
        }
      }

      /* "fmsne_implem.pyx":790
 *                 if td >= DBL_MIN:
 *                     mf += 1.0/td
 *             if mf > Dhmax:             # <<<<<<<<<<<<<<
 *                 Dhmax = mf
 *         mf = Dhmax*msld_def_div2N(isnc2, Nd, n_c_f)
 */
      __pyx_t_1 = ((__pyx_v_mf > __pyx_v_Dhmax) != 0);
      if (__pyx_t_1) {

        /* "fmsne_implem.pyx":791
 *                     mf += 1.0/td
 *             if mf > Dhmax:
 *                 Dhmax = mf             # <<<<<<<<<<<<<<
 *         mf = Dhmax*msld_def_div2N(isnc2, Nd, n_c_f)
 *         if mf < 1.0:
 */
        __pyx_v_Dhmax = __pyx_v_mf;

        /* "fmsne_implem.pyx":790
 *                 if td >= DBL_MIN:
 *                     mf += 1.0/td
 *             if mf > Dhmax:             # <<<<<<<<<<<<<<
 *                 Dhmax = mf
 *         mf = Dhmax*msld_def_div2N(isnc2, Nd, n_c_f)
 */
      }
    }

    /* "fmsne_implem.pyx":792
 *             if mf > Dhmax:
 *                 Dhmax = mf
 *         mf = Dhmax*msld_def_div2N(isnc2, Nd, n_c_f)             # <<<<<<<<<<<<<<
 *         if mf < 1.0:
 *             mf = 1.0
 */
    __pyx_v_mf = (__pyx_v_Dhmax * __pyx_f_12fmsne_implem_msld_def_div2N(__pyx_v_isnc2, __pyx_v_Nd, __pyx_v_n_c_f));

    /* "fmsne_implem.pyx":793
 *                 Dhmax = mf
 *         mf = Dhmax*msld_def_div2N(isnc2, Nd, n_c_f)
 *         if mf < 1.0:             # <<<<<<<<<<<<<<
 *             mf = 1.0
 *         elif mf > 2.0:
 */
    __pyx_t_1 = ((__pyx_v_mf < 1.0) != 0);
    if (__pyx_t_1) {

      /* "fmsne_implem.pyx":794
 *         mf = Dhmax*msld_def_div2N(isnc2, Nd, n_c_f)
 *         if mf < 1.0:
 *             mf = 1.0             # <<<<<<<<<<<<<<
 *         elif mf > 2.0:
 *             mf = 2.0
 */
      __pyx_v_mf = 1.0;

      /* "fmsne_implem.pyx":793
 *                 Dhmax = mf
 *         mf = Dhmax*msld_def_div2N(isnc2, Nd, n_c_f)
 *         if mf < 1.0:             # <<<<<<<<<<<<<<
 *             mf = 1.0
 *         elif mf > 2.0:
 */
      goto __pyx_L11;
    }

    /* "fmsne_implem.pyx":795
 *         if mf < 1.0:
 *             mf = 1.0
 *         elif mf > 2.0:             # <<<<<<<<<<<<<<
 *             mf = 2.0
 *         # Computing the LD precisions
 */
    __pyx_t_1 = ((__pyx_v_mf > 2.0) != 0);
    if (__pyx_t_1) {

      /* "fmsne_implem.pyx":796
 *             mf = 1.0
 *         elif mf > 2.0:
 *             mf = 2.0             # <<<<<<<<<<<<<<
 *         # Computing the LD precisions
 *         if isnc2:
 */
      __pyx_v_mf = 2.0;

      /* "fmsne_implem.pyx":795
 *         if mf < 1.0:
 *             mf = 1.0
 *         elif mf > 2.0:             # <<<<<<<<<<<<<<
 *             mf = 2.0
 *         # Computing the LD precisions
 */
    }
    __pyx_L11:;

    /* "fmsne_implem.pyx":798
 *             mf = 2.0
 *         # Computing the LD precisions
 *         if isnc2:             # <<<<<<<<<<<<<<
 *             for h in range(L):
 *                 p_h[h] = pow(<double> K_h[h], mf)
 */
    __pyx_t_1 = (__pyx_v_isnc2 != 0);
    if (__pyx_t_1) {

      /* "fmsne_implem.pyx":799
 *         # Computing the LD precisions
 *         if isnc2:
 *             for h in range(L):             # <<<<<<<<<<<<<<
 *                 p_h[h] = pow(<double> K_h[h], mf)
 *         else:
 */
      __pyx_t_2 = __pyx_v_L;
      __pyx_t_3 = __pyx_t_2;
      for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
        __pyx_v_h = __pyx_t_4;

        /* "fmsne_implem.pyx":800
 *         if isnc2:
 *             for h in range(L):
 *                 p_h[h] = pow(<double> K_h[h], mf)             # <<<<<<<<<<<<<<
 *         else:
 *             for h in range(L):
 */
        (__pyx_v_p_h[__pyx_v_h]) = pow(((double)(__pyx_v_K_h[__pyx_v_h])), __pyx_v_mf);
      }

      /* "fmsne_implem.pyx":798
 *             mf = 2.0
 *         # Computing the LD precisions
 *         if isnc2:             # <<<<<<<<<<<<<<
 *             for h in range(L):
 *                 p_h[h] = pow(<double> K_h[h], mf)
 */
      goto __pyx_L12;
    }

    /* "fmsne_implem.pyx":802
 *                 p_h[h] = pow(<double> K_h[h], mf)
 *         else:
 *             for h in range(L):             # <<<<<<<<<<<<<<
 *                 p_h[h] = pow(<double> K_h[h], mf*ihncf)
 *         mf = max_arr_ptr(p_h, L)*ihncfexp
 */
    /*else*/ {
      __pyx_t_2 = __pyx_v_L;
      __pyx_t_3 = __pyx_t_2;
      for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
        __pyx_v_h = __pyx_t_4;

        /* "fmsne_implem.pyx":803
 *         else:
 *             for h in range(L):
 *                 p_h[h] = pow(<double> K_h[h], mf*ihncf)             # <<<<<<<<<<<<<<
 *         mf = max_arr_ptr(p_h, L)*ihncfexp
 *         for h in range(L):
 */
        (__pyx_v_p_h[__pyx_v_h]) = pow(((double)(__pyx_v_K_h[__pyx_v_h])), (__pyx_v_mf * __pyx_v_ihncf));
      }
    }
    __pyx_L12:;

    /* "fmsne_implem.pyx":804
 *             for h in range(L):
 *                 p_h[h] = pow(<double> K_h[h], mf*ihncf)
 *         mf = max_arr_ptr(p_h, L)*ihncfexp             # <<<<<<<<<<<<<<
 *         for h in range(L):
 *             p_h[h] *= mean_var_X_lds
 */
    __pyx_v_mf = (__pyx_f_12fmsne_implem_max_arr_ptr(__pyx_v_p_h, __pyx_v_L) * __pyx_v_ihncfexp);

    /* "fmsne_implem.pyx":805
 *                 p_h[h] = pow(<double> K_h[h], mf*ihncf)
 *         mf = max_arr_ptr(p_h, L)*ihncfexp
 *         for h in range(L):             # <<<<<<<<<<<<<<
 *             p_h[h] *= mean_var_X_lds
 *             if p_h[h] < FLOAT64_EPS:
 */
    __pyx_t_2 = __pyx_v_L;
    __pyx_t_3 = __pyx_t_2;
    for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
      __pyx_v_h = __pyx_t_4;

      /* "fmsne_implem.pyx":806
 *         mf = max_arr_ptr(p_h, L)*ihncfexp
 *         for h in range(L):
 *             p_h[h] *= mean_var_X_lds             # <<<<<<<<<<<<<<
 *             if p_h[h] < FLOAT64_EPS:
 *                 p_h[h] = FLOAT64_EPS
 */
      __pyx_t_5 = __pyx_v_h;
      (__pyx_v_p_h[__pyx_t_5]) = ((__pyx_v_p_h[__pyx_t_5]) * __pyx_v_mean_var_X_lds);

      /* "fmsne_implem.pyx":807
 *         for h in range(L):
 *             p_h[h] *= mean_var_X_lds
 *             if p_h[h] < FLOAT64_EPS:             # <<<<<<<<<<<<<<
 *                 p_h[h] = FLOAT64_EPS
 *             p_h[h] = mf/p_h[h]
 */
      __pyx_t_1 = (((__pyx_v_p_h[__pyx_v_h]) < __pyx_v_12fmsne_implem_FLOAT64_EPS) != 0);
      if (__pyx_t_1) {

        /* "fmsne_implem.pyx":808
 *             p_h[h] *= mean_var_X_lds
 *             if p_h[h] < FLOAT64_EPS:
 *                 p_h[h] = FLOAT64_EPS             # <<<<<<<<<<<<<<
 *             p_h[h] = mf/p_h[h]
 *             if p_h[h] < FLOAT64_EPS:
 */
        (__pyx_v_p_h[__pyx_v_h]) = __pyx_v_12fmsne_implem_FLOAT64_EPS;

        /* "fmsne_implem.pyx":807
 *         for h in range(L):
 *             p_h[h] *= mean_var_X_lds
 *             if p_h[h] < FLOAT64_EPS:             # <<<<<<<<<<<<<<
 *                 p_h[h] = FLOAT64_EPS
 *             p_h[h] = mf/p_h[h]
 */
      }

      /* "fmsne_implem.pyx":809
 *             if p_h[h] < FLOAT64_EPS:
 *                 p_h[h] = FLOAT64_EPS
 *             p_h[h] = mf/p_h[h]             # <<<<<<<<<<<<<<
 *             if p_h[h] < FLOAT64_EPS:
 *                 t_h[h] = 2.0/FLOAT64_EPS
 */
      (__pyx_v_p_h[__pyx_v_h]) = (__pyx_v_mf / (__pyx_v_p_h[__pyx_v_h]));

      /* "fmsne_implem.pyx":810
 *                 p_h[h] = FLOAT64_EPS
 *             p_h[h] = mf/p_h[h]
 *             if p_h[h] < FLOAT64_EPS:             # <<<<<<<<<<<<<<
 *                 t_h[h] = 2.0/FLOAT64_EPS
 *             else:
 */
      __pyx_t_1 = (((__pyx_v_p_h[__pyx_v_h]) < __pyx_v_12fmsne_implem_FLOAT64_EPS) != 0);
      if (__pyx_t_1) {

        /* "fmsne_implem.pyx":811
 *             p_h[h] = mf/p_h[h]
 *             if p_h[h] < FLOAT64_EPS:
 *                 t_h[h] = 2.0/FLOAT64_EPS             # <<<<<<<<<<<<<<
 *             else:
 *                 t_h[h] = 2.0/p_h[h]
 */
        (__pyx_v_t_h[__pyx_v_h]) = (2.0 / __pyx_v_12fmsne_implem_FLOAT64_EPS);

        /* "fmsne_implem.pyx":810
 *                 p_h[h] = FLOAT64_EPS
 *             p_h[h] = mf/p_h[h]
 *             if p_h[h] < FLOAT64_EPS:             # <<<<<<<<<<<<<<
 *                 t_h[h] = 2.0/FLOAT64_EPS
 *             else:
 */
        goto __pyx_L20;
      }

      /* "fmsne_implem.pyx":813
 *                 t_h[h] = 2.0/FLOAT64_EPS
 *             else:
 *                 t_h[h] = 2.0/p_h[h]             # <<<<<<<<<<<<<<
 *             if t_h[h] < FLOAT64_EPS:
 *                 t_h[h] = FLOAT64_EPS
 */
      /*else*/ {
        (__pyx_v_t_h[__pyx_v_h]) = (2.0 / (__pyx_v_p_h[__pyx_v_h]));
      }
      __pyx_L20:;

      /* "fmsne_implem.pyx":814
 *             else:
 *                 t_h[h] = 2.0/p_h[h]
 *             if t_h[h] < FLOAT64_EPS:             # <<<<<<<<<<<<<<
 *                 t_h[h] = FLOAT64_EPS
 *     else:
 */
      __pyx_t_1 = (((__pyx_v_t_h[__pyx_v_h]) < __pyx_v_12fmsne_implem_FLOAT64_EPS) != 0);
      if (__pyx_t_1) {

        /* "fmsne_implem.pyx":815
 *                 t_h[h] = 2.0/p_h[h]
 *             if t_h[h] < FLOAT64_EPS:
 *                 t_h[h] = FLOAT64_EPS             # <<<<<<<<<<<<<<
 *     else:
 *         ms_ldprec_nofitU(p_h, t_h, isnc2, L, K_h, ihncf, ihncfexp, mean_var_X_lds)
 */
        (__pyx_v_t_h[__pyx_v_h]) = __pyx_v_12fmsne_implem_FLOAT64_EPS;

        /* "fmsne_implem.pyx":814
 *             else:
 *                 t_h[h] = 2.0/p_h[h]
 *             if t_h[h] < FLOAT64_EPS:             # <<<<<<<<<<<<<<
 *                 t_h[h] = FLOAT64_EPS
 *     else:
 */
      }
    }

    /* "fmsne_implem.pyx":780
 *     mean_var_X_lds = eval_mean_var_X_lds(Nd, n_components, xlds, prod_N_nc, n_c_f, <double> N_1)
 *     cdef Py_ssize_t i, k, h
 *     if fit_U:             # <<<<<<<<<<<<<<
 *         # Computing the U and storing it in mf
 *         Dhmax = -DBL_MAX
 */
    goto __pyx_L4;
  }

  /* "fmsne_implem.pyx":817
 *                 t_h[h] = FLOAT64_EPS
 *     else:
 *         ms_ldprec_nofitU(p_h, t_h, isnc2, L, K_h, ihncf, ihncfexp, mean_var_X_lds)             # <<<<<<<<<<<<<<
 * 
 * cdef inline lbfgsfloatval_t* init_lbfgs_var(size_t shdp, int prod_N_nc, double* xlds):
 */
  /*else*/ {
    __pyx_f_12fmsne_implem_ms_ldprec_nofitU(__pyx_v_p_h, __pyx_v_t_h, __pyx_v_isnc2, __pyx_v_L, __pyx_v_K_h, __pyx_v_ihncf, __pyx_v_ihncfexp, __pyx_v_mean_var_X_lds);
  }
  __pyx_L4:;

  /* "fmsne_implem.pyx":766
 *             t_h[h] = FLOAT64_EPS
 * 
 * cdef inline void ms_ldprec(Py_ssize_t n_components, double Nd, double* xlds, Py_ssize_t prod_N_nc, bint fit_U, Py_ssize_t L, Py_ssize_t N, double** tau_h, int* K_h, double* p_h, double* t_h, int N_1) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     """
 */

  /* function exit code */
}

/* "fmsne_implem.pyx":819
 *         ms_ldprec_nofitU(p_h, t_h, isnc2, L, K_h, ihncf, ihncfexp, mean_var_X_lds)
 * 
 * cdef inline lbfgsfloatval_t* init_lbfgs_var(size_t shdp, int prod_N_nc, double* xlds):             # <<<<<<<<<<<<<<
 *     """
 *     """
 */

static CYTHON_INLINE lbfgsfloatval_t *__pyx_f_12fmsne_implem_init_lbfgs_var(size_t __pyx_v_shdp, int __pyx_v_prod_N_nc, double *__pyx_v_xlds) {
  lbfgsfloatval_t *__pyx_v_xopt;
  lbfgsfloatval_t *__pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("init_lbfgs_var", 0);

  /* "fmsne_implem.pyx":823
 *     """
 *     # Variables for the optimization. We must use lbfgs_malloc to benefitt from SSE2 optimization.
 *     cdef lbfgsfloatval_t* xopt = lbfgs_malloc(prod_N_nc)             # <<<<<<<<<<<<<<
 *     if xopt is NULL:
 *         return NULL
 */
  __pyx_v_xopt = lbfgs_malloc(__pyx_v_prod_N_nc);

  /* "fmsne_implem.pyx":824
 *     # Variables for the optimization. We must use lbfgs_malloc to benefitt from SSE2 optimization.
 *     cdef lbfgsfloatval_t* xopt = lbfgs_malloc(prod_N_nc)
 *     if xopt is NULL:             # <<<<<<<<<<<<<<
 *         return NULL
 *     # Initializing the the variables to the current LDS. We can use memcpy as lbfgsfloatval_t is, in our case, strictly equivalent to a double.
 */
  __pyx_t_1 = ((__pyx_v_xopt == NULL) != 0);
  if (__pyx_t_1) {

    /* "fmsne_implem.pyx":825
 *     cdef lbfgsfloatval_t* xopt = lbfgs_malloc(prod_N_nc)
 *     if xopt is NULL:
 *         return NULL             # <<<<<<<<<<<<<<
 *     # Initializing the the variables to the current LDS. We can use memcpy as lbfgsfloatval_t is, in our case, strictly equivalent to a double.
 *     memcpy(xopt, xlds, shdp)
 */
    __pyx_r = NULL;
    goto __pyx_L0;

    /* "fmsne_implem.pyx":824
 *     # Variables for the optimization. We must use lbfgs_malloc to benefitt from SSE2 optimization.
 *     cdef lbfgsfloatval_t* xopt = lbfgs_malloc(prod_N_nc)
 *     if xopt is NULL:             # <<<<<<<<<<<<<<
 *         return NULL
 *     # Initializing the the variables to the current LDS. We can use memcpy as lbfgsfloatval_t is, in our case, strictly equivalent to a double.
 */
  }

  /* "fmsne_implem.pyx":827
 *         return NULL
 *     # Initializing the the variables to the current LDS. We can use memcpy as lbfgsfloatval_t is, in our case, strictly equivalent to a double.
 *     memcpy(xopt, xlds, shdp)             # <<<<<<<<<<<<<<
 *     # Returning
 *     return xopt
 */
  (void)(memcpy(__pyx_v_xopt, __pyx_v_xlds, __pyx_v_shdp));

  /* "fmsne_implem.pyx":829
 *     memcpy(xopt, xlds, shdp)
 *     # Returning
 *     return xopt             # <<<<<<<<<<<<<<
 * 
 * cdef inline double ms_update_mso_step(Py_ssize_t k, Py_ssize_t h, Py_ssize_t N, Py_ssize_t N_1, double** ds_hd, double** tau_h, double** simhd_ms, double** simhd_h) nogil:
 */
  __pyx_r = __pyx_v_xopt;
  goto __pyx_L0;

  /* "fmsne_implem.pyx":819
 *         ms_ldprec_nofitU(p_h, t_h, isnc2, L, K_h, ihncf, ihncfexp, mean_var_X_lds)
 * 
 * cdef inline lbfgsfloatval_t* init_lbfgs_var(size_t shdp, int prod_N_nc, double* xlds):             # <<<<<<<<<<<<<<
 *     """
 *     """
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "fmsne_implem.pyx":831
 *     return xopt
 * 
 * cdef inline double ms_update_mso_step(Py_ssize_t k, Py_ssize_t h, Py_ssize_t N, Py_ssize_t N_1, double** ds_hd, double** tau_h, double** simhd_ms, double** simhd_h) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     k refers to the number of currently considered scales, between 1 and the number of scales.
 */

static CYTHON_INLINE double __pyx_f_12fmsne_implem_ms_update_mso_step(Py_ssize_t __pyx_v_k, Py_ssize_t __pyx_v_h, Py_ssize_t __pyx_v_N, Py_ssize_t __pyx_v_N_1, double **__pyx_v_ds_hd, double **__pyx_v_tau_h, double **__pyx_v_simhd_ms, double **__pyx_v_simhd_h) {
  Py_ssize_t __pyx_v_i;
  Py_ssize_t __pyx_v_j;
  double __pyx_v_kd;
  double __pyx_v_ikd;
  double __pyx_r;
  int __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  Py_ssize_t __pyx_t_7;

  /* "fmsne_implem.pyx":839
 *     cdef double kd, ikd
 *     # Computing the multi-scale similarities for the current multi-scale optimization step
 *     if k == 1:             # <<<<<<<<<<<<<<
 *         # Computing the similarities at the last scale and storing them in simhd_ms
 *         for i in range(N):
 */
  __pyx_t_1 = ((__pyx_v_k == 1) != 0);
  if (__pyx_t_1) {

    /* "fmsne_implem.pyx":841
 *     if k == 1:
 *         # Computing the similarities at the last scale and storing them in simhd_ms
 *         for i in range(N):             # <<<<<<<<<<<<<<
 *             sne_hdpinn_nolog(ds_hd[i], tau_h[h][i], N_1, simhd_ms[i])
 *         return 1.0
 */
    __pyx_t_2 = __pyx_v_N;
    __pyx_t_3 = __pyx_t_2;
    for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
      __pyx_v_i = __pyx_t_4;

      /* "fmsne_implem.pyx":842
 *         # Computing the similarities at the last scale and storing them in simhd_ms
 *         for i in range(N):
 *             sne_hdpinn_nolog(ds_hd[i], tau_h[h][i], N_1, simhd_ms[i])             # <<<<<<<<<<<<<<
 *         return 1.0
 *     else:
 */
      __pyx_f_12fmsne_implem_sne_hdpinn_nolog((__pyx_v_ds_hd[__pyx_v_i]), ((__pyx_v_tau_h[__pyx_v_h])[__pyx_v_i]), __pyx_v_N_1, (__pyx_v_simhd_ms[__pyx_v_i]));
    }

    /* "fmsne_implem.pyx":843
 *         for i in range(N):
 *             sne_hdpinn_nolog(ds_hd[i], tau_h[h][i], N_1, simhd_ms[i])
 *         return 1.0             # <<<<<<<<<<<<<<
 *     else:
 *         # Storing the current value of k, in double
 */
    __pyx_r = 1.0;
    goto __pyx_L0;

    /* "fmsne_implem.pyx":839
 *     cdef double kd, ikd
 *     # Computing the multi-scale similarities for the current multi-scale optimization step
 *     if k == 1:             # <<<<<<<<<<<<<<
 *         # Computing the similarities at the last scale and storing them in simhd_ms
 *         for i in range(N):
 */
  }

  /* "fmsne_implem.pyx":846
 *     else:
 *         # Storing the current value of k, in double
 *         kd = <double> k             # <<<<<<<<<<<<<<
 *         # Inverse of k
 *         ikd = 1.0/kd
 */
  /*else*/ {
    __pyx_v_kd = ((double)__pyx_v_k);

    /* "fmsne_implem.pyx":848
 *         kd = <double> k
 *         # Inverse of k
 *         ikd = 1.0/kd             # <<<<<<<<<<<<<<
 *         # Value of kd at the previous step
 *         kd -= 1.0
 */
    __pyx_v_ikd = (1.0 / __pyx_v_kd);

    /* "fmsne_implem.pyx":850
 *         ikd = 1.0/kd
 *         # Value of kd at the previous step
 *         kd -= 1.0             # <<<<<<<<<<<<<<
 *         # Computing the similarities at the current scale and updating simhd_ms
 *         for i in range(N):
 */
    __pyx_v_kd = (__pyx_v_kd - 1.0);

    /* "fmsne_implem.pyx":852
 *         kd -= 1.0
 *         # Computing the similarities at the current scale and updating simhd_ms
 *         for i in range(N):             # <<<<<<<<<<<<<<
 *             sne_hdpinn_nolog(ds_hd[i], tau_h[h][i], N_1, simhd_h[i])
 *             for j in range(N_1):
 */
    __pyx_t_2 = __pyx_v_N;
    __pyx_t_3 = __pyx_t_2;
    for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
      __pyx_v_i = __pyx_t_4;

      /* "fmsne_implem.pyx":853
 *         # Computing the similarities at the current scale and updating simhd_ms
 *         for i in range(N):
 *             sne_hdpinn_nolog(ds_hd[i], tau_h[h][i], N_1, simhd_h[i])             # <<<<<<<<<<<<<<
 *             for j in range(N_1):
 *                 simhd_ms[i][j] = (kd*simhd_ms[i][j] + simhd_h[i][j])*ikd
 */
      __pyx_f_12fmsne_implem_sne_hdpinn_nolog((__pyx_v_ds_hd[__pyx_v_i]), ((__pyx_v_tau_h[__pyx_v_h])[__pyx_v_i]), __pyx_v_N_1, (__pyx_v_simhd_h[__pyx_v_i]));

      /* "fmsne_implem.pyx":854
 *         for i in range(N):
 *             sne_hdpinn_nolog(ds_hd[i], tau_h[h][i], N_1, simhd_h[i])
 *             for j in range(N_1):             # <<<<<<<<<<<<<<
 *                 simhd_ms[i][j] = (kd*simhd_ms[i][j] + simhd_h[i][j])*ikd
 *         return ikd
 */
      __pyx_t_5 = __pyx_v_N_1;
      __pyx_t_6 = __pyx_t_5;
      for (__pyx_t_7 = 0; __pyx_t_7 < __pyx_t_6; __pyx_t_7+=1) {
        __pyx_v_j = __pyx_t_7;

        /* "fmsne_implem.pyx":855
 *             sne_hdpinn_nolog(ds_hd[i], tau_h[h][i], N_1, simhd_h[i])
 *             for j in range(N_1):
 *                 simhd_ms[i][j] = (kd*simhd_ms[i][j] + simhd_h[i][j])*ikd             # <<<<<<<<<<<<<<
 *         return ikd
 * 
 */
        ((__pyx_v_simhd_ms[__pyx_v_i])[__pyx_v_j]) = (((__pyx_v_kd * ((__pyx_v_simhd_ms[__pyx_v_i])[__pyx_v_j])) + ((__pyx_v_simhd_h[__pyx_v_i])[__pyx_v_j])) * __pyx_v_ikd);
      }
    }

    /* "fmsne_implem.pyx":856
 *             for j in range(N_1):
 *                 simhd_ms[i][j] = (kd*simhd_ms[i][j] + simhd_h[i][j])*ikd
 *         return ikd             # <<<<<<<<<<<<<<
 * 
 * cdef struct OpMssne:
 */
    __pyx_r = __pyx_v_ikd;
    goto __pyx_L0;
  }

  /* "fmsne_implem.pyx":831
 *     return xopt
 * 
 * cdef inline double ms_update_mso_step(Py_ssize_t k, Py_ssize_t h, Py_ssize_t N, Py_ssize_t N_1, double** ds_hd, double** tau_h, double** simhd_ms, double** simhd_h) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     k refers to the number of currently considered scales, between 1 and the number of scales.
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "fmsne_implem.pyx":871
 *     double** simld_h        # Memory to store the LD similarities with respect to a data point at each scale, hence with ns x (N-1) elements
 * 
 * cdef inline lbfgsfloatval_t mssne_evaluate(void* instance, const lbfgsfloatval_t* x, lbfgsfloatval_t* g, const int n, const lbfgsfloatval_t step) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     Computes cost function and gradient for the current LD coordinates.
 */

static CYTHON_INLINE lbfgsfloatval_t __pyx_f_12fmsne_implem_mssne_evaluate(void *__pyx_v_instance, lbfgsfloatval_t const *__pyx_v_x, lbfgsfloatval_t *__pyx_v_g, int const __pyx_v_n, CYTHON_UNUSED lbfgsfloatval_t const __pyx_v_step) {
  struct __pyx_t_12fmsne_implem_OpMssne *__pyx_v_popt;
  lbfgsfloatval_t __pyx_v_fx;
  Py_ssize_t __pyx_v_i;
  Py_ssize_t __pyx_v_j;
  Py_ssize_t __pyx_v_h;
  Py_ssize_t __pyx_v_k;
  Py_ssize_t __pyx_v_idx;
  Py_ssize_t __pyx_v_idxj;
  double __pyx_v_a;
  double __pyx_v_b;
  double __pyx_v_c;
  double const *__pyx_v_xi;
  lbfgsfloatval_t __pyx_r;
  Py_ssize_t __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  Py_ssize_t __pyx_t_7;
  Py_ssize_t __pyx_t_8;
  Py_ssize_t __pyx_t_9;
  int __pyx_t_10;
  Py_ssize_t __pyx_t_11;
  Py_ssize_t __pyx_t_12;
  Py_ssize_t __pyx_t_13;
  Py_ssize_t __pyx_t_14;
  int __pyx_t_15;
  int __pyx_t_16;

  /* "fmsne_implem.pyx":877
 *     n stores the number of variables
 *     """
 *     cdef OpMssne* popt = <OpMssne*> instance             # <<<<<<<<<<<<<<
 *     # Cost function value to return
 *     cdef lbfgsfloatval_t fx = 0.0
 */
  __pyx_v_popt = ((struct __pyx_t_12fmsne_implem_OpMssne *)__pyx_v_instance);

  /* "fmsne_implem.pyx":879
 *     cdef OpMssne* popt = <OpMssne*> instance
 *     # Cost function value to return
 *     cdef lbfgsfloatval_t fx = 0.0             # <<<<<<<<<<<<<<
 *     # Initializing the gradient to 0
 *     memset(g, 0, popt.sstx)
 */
  __pyx_v_fx = 0.0;

  /* "fmsne_implem.pyx":881
 *     cdef lbfgsfloatval_t fx = 0.0
 *     # Initializing the gradient to 0
 *     memset(g, 0, popt.sstx)             # <<<<<<<<<<<<<<
 *     # Index variables
 *     cdef Py_ssize_t i, j, h, k, idx, idxj
 */
  (void)(memset(__pyx_v_g, 0, __pyx_v_popt->sstx));

  /* "fmsne_implem.pyx":888
 *     cdef const double* xi
 *     # Stores the index of the currently considered data point in x
 *     idx = 0             # <<<<<<<<<<<<<<
 *     # For each data point
 *     for i in range(popt.N):
 */
  __pyx_v_idx = 0;

  /* "fmsne_implem.pyx":890
 *     idx = 0
 *     # For each data point
 *     for i in range(popt.N):             # <<<<<<<<<<<<<<
 *         # Currently considered data point
 *         xi = &x[idx]
 */
  __pyx_t_1 = __pyx_v_popt->N;
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "fmsne_implem.pyx":892
 *     for i in range(popt.N):
 *         # Currently considered data point
 *         xi = &x[idx]             # <<<<<<<<<<<<<<
 *         # Computing the LD distances with respect to the other data points and storing them in simld_ms
 *         idxj = 0
 */
    __pyx_v_xi = (&(__pyx_v_x[__pyx_v_idx]));

    /* "fmsne_implem.pyx":894
 *         xi = &x[idx]
 *         # Computing the LD distances with respect to the other data points and storing them in simld_ms
 *         idxj = 0             # <<<<<<<<<<<<<<
 *         for j in range(i):
 *             popt.simld_ms[j] = sqeucl_dist_ptr(xi, &x[idxj], popt.n_components)
 */
    __pyx_v_idxj = 0;

    /* "fmsne_implem.pyx":895
 *         # Computing the LD distances with respect to the other data points and storing them in simld_ms
 *         idxj = 0
 *         for j in range(i):             # <<<<<<<<<<<<<<
 *             popt.simld_ms[j] = sqeucl_dist_ptr(xi, &x[idxj], popt.n_components)
 *             idxj += popt.n_components
 */
    __pyx_t_4 = __pyx_v_i;
    __pyx_t_5 = __pyx_t_4;
    for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
      __pyx_v_j = __pyx_t_6;

      /* "fmsne_implem.pyx":896
 *         idxj = 0
 *         for j in range(i):
 *             popt.simld_ms[j] = sqeucl_dist_ptr(xi, &x[idxj], popt.n_components)             # <<<<<<<<<<<<<<
 *             idxj += popt.n_components
 *         for j in range(i, popt.N_1, 1):
 */
      (__pyx_v_popt->simld_ms[__pyx_v_j]) = __pyx_f_12fmsne_implem_sqeucl_dist_ptr(__pyx_v_xi, (&(__pyx_v_x[__pyx_v_idxj])), __pyx_v_popt->n_components);

      /* "fmsne_implem.pyx":897
 *         for j in range(i):
 *             popt.simld_ms[j] = sqeucl_dist_ptr(xi, &x[idxj], popt.n_components)
 *             idxj += popt.n_components             # <<<<<<<<<<<<<<
 *         for j in range(i, popt.N_1, 1):
 *             idxj += popt.n_components
 */
      __pyx_v_idxj = (__pyx_v_idxj + __pyx_v_popt->n_components);
    }

    /* "fmsne_implem.pyx":898
 *             popt.simld_ms[j] = sqeucl_dist_ptr(xi, &x[idxj], popt.n_components)
 *             idxj += popt.n_components
 *         for j in range(i, popt.N_1, 1):             # <<<<<<<<<<<<<<
 *             idxj += popt.n_components
 *             popt.simld_ms[j] = sqeucl_dist_ptr(xi, &x[idxj], popt.n_components)
 */
    __pyx_t_4 = __pyx_v_popt->N_1;
    __pyx_t_5 = __pyx_t_4;
    for (__pyx_t_6 = __pyx_v_i; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
      __pyx_v_j = __pyx_t_6;

      /* "fmsne_implem.pyx":899
 *             idxj += popt.n_components
 *         for j in range(i, popt.N_1, 1):
 *             idxj += popt.n_components             # <<<<<<<<<<<<<<
 *             popt.simld_ms[j] = sqeucl_dist_ptr(xi, &x[idxj], popt.n_components)
 *         # Minimum distance
 */
      __pyx_v_idxj = (__pyx_v_idxj + __pyx_v_popt->n_components);

      /* "fmsne_implem.pyx":900
 *         for j in range(i, popt.N_1, 1):
 *             idxj += popt.n_components
 *             popt.simld_ms[j] = sqeucl_dist_ptr(xi, &x[idxj], popt.n_components)             # <<<<<<<<<<<<<<
 *         # Minimum distance
 *         a = min_arr_ptr(popt.simld_ms, popt.N_1)
 */
      (__pyx_v_popt->simld_ms[__pyx_v_j]) = __pyx_f_12fmsne_implem_sqeucl_dist_ptr(__pyx_v_xi, (&(__pyx_v_x[__pyx_v_idxj])), __pyx_v_popt->n_components);
    }

    /* "fmsne_implem.pyx":902
 *             popt.simld_ms[j] = sqeucl_dist_ptr(xi, &x[idxj], popt.n_components)
 *         # Minimum distance
 *         a = min_arr_ptr(popt.simld_ms, popt.N_1)             # <<<<<<<<<<<<<<
 *         # Removing the minimum from the distances and changing the sign
 *         for j in range(popt.N_1):
 */
    __pyx_v_a = __pyx_f_12fmsne_implem_min_arr_ptr(__pyx_v_popt->simld_ms, __pyx_v_popt->N_1);

    /* "fmsne_implem.pyx":904
 *         a = min_arr_ptr(popt.simld_ms, popt.N_1)
 *         # Removing the minimum from the distances and changing the sign
 *         for j in range(popt.N_1):             # <<<<<<<<<<<<<<
 *             popt.simld_ms[j] = a - popt.simld_ms[j]
 *         # Computing the LD similarities with respect to the other data points for each scale
 */
    __pyx_t_4 = __pyx_v_popt->N_1;
    __pyx_t_5 = __pyx_t_4;
    for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
      __pyx_v_j = __pyx_t_6;

      /* "fmsne_implem.pyx":905
 *         # Removing the minimum from the distances and changing the sign
 *         for j in range(popt.N_1):
 *             popt.simld_ms[j] = a - popt.simld_ms[j]             # <<<<<<<<<<<<<<
 *         # Computing the LD similarities with respect to the other data points for each scale
 *         for h in range(popt.ns):
 */
      (__pyx_v_popt->simld_ms[__pyx_v_j]) = (__pyx_v_a - (__pyx_v_popt->simld_ms[__pyx_v_j]));
    }

    /* "fmsne_implem.pyx":907
 *             popt.simld_ms[j] = a - popt.simld_ms[j]
 *         # Computing the LD similarities with respect to the other data points for each scale
 *         for h in range(popt.ns):             # <<<<<<<<<<<<<<
 *             a = 0.0
 *             for j in range(popt.N_1):
 */
    __pyx_t_4 = __pyx_v_popt->ns;
    __pyx_t_5 = __pyx_t_4;
    for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
      __pyx_v_h = __pyx_t_6;

      /* "fmsne_implem.pyx":908
 *         # Computing the LD similarities with respect to the other data points for each scale
 *         for h in range(popt.ns):
 *             a = 0.0             # <<<<<<<<<<<<<<
 *             for j in range(popt.N_1):
 *                 popt.simld_h[h][j] = exp(popt.simld_ms[j]/popt.t_h[h])
 */
      __pyx_v_a = 0.0;

      /* "fmsne_implem.pyx":909
 *         for h in range(popt.ns):
 *             a = 0.0
 *             for j in range(popt.N_1):             # <<<<<<<<<<<<<<
 *                 popt.simld_h[h][j] = exp(popt.simld_ms[j]/popt.t_h[h])
 *                 a += popt.simld_h[h][j]
 */
      __pyx_t_7 = __pyx_v_popt->N_1;
      __pyx_t_8 = __pyx_t_7;
      for (__pyx_t_9 = 0; __pyx_t_9 < __pyx_t_8; __pyx_t_9+=1) {
        __pyx_v_j = __pyx_t_9;

        /* "fmsne_implem.pyx":910
 *             a = 0.0
 *             for j in range(popt.N_1):
 *                 popt.simld_h[h][j] = exp(popt.simld_ms[j]/popt.t_h[h])             # <<<<<<<<<<<<<<
 *                 a += popt.simld_h[h][j]
 *             if a < FLOAT64_EPS:
 */
        ((__pyx_v_popt->simld_h[__pyx_v_h])[__pyx_v_j]) = exp(((__pyx_v_popt->simld_ms[__pyx_v_j]) / (__pyx_v_popt->t_h[__pyx_v_h])));

        /* "fmsne_implem.pyx":911
 *             for j in range(popt.N_1):
 *                 popt.simld_h[h][j] = exp(popt.simld_ms[j]/popt.t_h[h])
 *                 a += popt.simld_h[h][j]             # <<<<<<<<<<<<<<
 *             if a < FLOAT64_EPS:
 *                 a = FLOAT64_EPS
 */
        __pyx_v_a = (__pyx_v_a + ((__pyx_v_popt->simld_h[__pyx_v_h])[__pyx_v_j]));
      }

      /* "fmsne_implem.pyx":912
 *                 popt.simld_h[h][j] = exp(popt.simld_ms[j]/popt.t_h[h])
 *                 a += popt.simld_h[h][j]
 *             if a < FLOAT64_EPS:             # <<<<<<<<<<<<<<
 *                 a = FLOAT64_EPS
 *             for j in range(popt.N_1):
 */
      __pyx_t_10 = ((__pyx_v_a < __pyx_v_12fmsne_implem_FLOAT64_EPS) != 0);
      if (__pyx_t_10) {

        /* "fmsne_implem.pyx":913
 *                 a += popt.simld_h[h][j]
 *             if a < FLOAT64_EPS:
 *                 a = FLOAT64_EPS             # <<<<<<<<<<<<<<
 *             for j in range(popt.N_1):
 *                 popt.simld_h[h][j] /= a
 */
        __pyx_v_a = __pyx_v_12fmsne_implem_FLOAT64_EPS;

        /* "fmsne_implem.pyx":912
 *                 popt.simld_h[h][j] = exp(popt.simld_ms[j]/popt.t_h[h])
 *                 a += popt.simld_h[h][j]
 *             if a < FLOAT64_EPS:             # <<<<<<<<<<<<<<
 *                 a = FLOAT64_EPS
 *             for j in range(popt.N_1):
 */
      }

      /* "fmsne_implem.pyx":914
 *             if a < FLOAT64_EPS:
 *                 a = FLOAT64_EPS
 *             for j in range(popt.N_1):             # <<<<<<<<<<<<<<
 *                 popt.simld_h[h][j] /= a
 *         # Computing the multi-scale LD similarities, updating the cost function evaluation and storing the multi-scale HD similarities divided by the LD ones in popt.simld_ms
 */
      __pyx_t_7 = __pyx_v_popt->N_1;
      __pyx_t_8 = __pyx_t_7;
      for (__pyx_t_9 = 0; __pyx_t_9 < __pyx_t_8; __pyx_t_9+=1) {
        __pyx_v_j = __pyx_t_9;

        /* "fmsne_implem.pyx":915
 *                 a = FLOAT64_EPS
 *             for j in range(popt.N_1):
 *                 popt.simld_h[h][j] /= a             # <<<<<<<<<<<<<<
 *         # Computing the multi-scale LD similarities, updating the cost function evaluation and storing the multi-scale HD similarities divided by the LD ones in popt.simld_ms
 *         for j in range(popt.N_1):
 */
        __pyx_t_11 = __pyx_v_h;
        __pyx_t_12 = __pyx_v_j;
        ((__pyx_v_popt->simld_h[__pyx_t_11])[__pyx_t_12]) = (((__pyx_v_popt->simld_h[__pyx_t_11])[__pyx_t_12]) / __pyx_v_a);
      }
    }

    /* "fmsne_implem.pyx":917
 *                 popt.simld_h[h][j] /= a
 *         # Computing the multi-scale LD similarities, updating the cost function evaluation and storing the multi-scale HD similarities divided by the LD ones in popt.simld_ms
 *         for j in range(popt.N_1):             # <<<<<<<<<<<<<<
 *             popt.simld_ms[j] = 0.0
 *             for h in range(popt.ns):
 */
    __pyx_t_4 = __pyx_v_popt->N_1;
    __pyx_t_5 = __pyx_t_4;
    for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
      __pyx_v_j = __pyx_t_6;

      /* "fmsne_implem.pyx":918
 *         # Computing the multi-scale LD similarities, updating the cost function evaluation and storing the multi-scale HD similarities divided by the LD ones in popt.simld_ms
 *         for j in range(popt.N_1):
 *             popt.simld_ms[j] = 0.0             # <<<<<<<<<<<<<<
 *             for h in range(popt.ns):
 *                 popt.simld_ms[j] += popt.simld_h[h][j]
 */
      (__pyx_v_popt->simld_ms[__pyx_v_j]) = 0.0;

      /* "fmsne_implem.pyx":919
 *         for j in range(popt.N_1):
 *             popt.simld_ms[j] = 0.0
 *             for h in range(popt.ns):             # <<<<<<<<<<<<<<
 *                 popt.simld_ms[j] += popt.simld_h[h][j]
 *             popt.simld_ms[j] *= popt.inv_ns
 */
      __pyx_t_7 = __pyx_v_popt->ns;
      __pyx_t_8 = __pyx_t_7;
      for (__pyx_t_9 = 0; __pyx_t_9 < __pyx_t_8; __pyx_t_9+=1) {
        __pyx_v_h = __pyx_t_9;

        /* "fmsne_implem.pyx":920
 *             popt.simld_ms[j] = 0.0
 *             for h in range(popt.ns):
 *                 popt.simld_ms[j] += popt.simld_h[h][j]             # <<<<<<<<<<<<<<
 *             popt.simld_ms[j] *= popt.inv_ns
 *             if popt.simld_ms[j] < FLOAT64_EPS:
 */
        __pyx_t_11 = __pyx_v_j;
        (__pyx_v_popt->simld_ms[__pyx_t_11]) = ((__pyx_v_popt->simld_ms[__pyx_t_11]) + ((__pyx_v_popt->simld_h[__pyx_v_h])[__pyx_v_j]));
      }

      /* "fmsne_implem.pyx":921
 *             for h in range(popt.ns):
 *                 popt.simld_ms[j] += popt.simld_h[h][j]
 *             popt.simld_ms[j] *= popt.inv_ns             # <<<<<<<<<<<<<<
 *             if popt.simld_ms[j] < FLOAT64_EPS:
 *                 popt.simld_ms[j] = FLOAT64_EPS
 */
      __pyx_t_7 = __pyx_v_j;
      (__pyx_v_popt->simld_ms[__pyx_t_7]) = ((__pyx_v_popt->simld_ms[__pyx_t_7]) * __pyx_v_popt->inv_ns);

      /* "fmsne_implem.pyx":922
 *                 popt.simld_ms[j] += popt.simld_h[h][j]
 *             popt.simld_ms[j] *= popt.inv_ns
 *             if popt.simld_ms[j] < FLOAT64_EPS:             # <<<<<<<<<<<<<<
 *                 popt.simld_ms[j] = FLOAT64_EPS
 *             fx -= popt.simhd_ms[i][j] * log(popt.simld_ms[j])
 */
      __pyx_t_10 = (((__pyx_v_popt->simld_ms[__pyx_v_j]) < __pyx_v_12fmsne_implem_FLOAT64_EPS) != 0);
      if (__pyx_t_10) {

        /* "fmsne_implem.pyx":923
 *             popt.simld_ms[j] *= popt.inv_ns
 *             if popt.simld_ms[j] < FLOAT64_EPS:
 *                 popt.simld_ms[j] = FLOAT64_EPS             # <<<<<<<<<<<<<<
 *             fx -= popt.simhd_ms[i][j] * log(popt.simld_ms[j])
 *             popt.simld_ms[j] = popt.simhd_ms[i][j]/popt.simld_ms[j]
 */
        (__pyx_v_popt->simld_ms[__pyx_v_j]) = __pyx_v_12fmsne_implem_FLOAT64_EPS;

        /* "fmsne_implem.pyx":922
 *                 popt.simld_ms[j] += popt.simld_h[h][j]
 *             popt.simld_ms[j] *= popt.inv_ns
 *             if popt.simld_ms[j] < FLOAT64_EPS:             # <<<<<<<<<<<<<<
 *                 popt.simld_ms[j] = FLOAT64_EPS
 *             fx -= popt.simhd_ms[i][j] * log(popt.simld_ms[j])
 */
      }

      /* "fmsne_implem.pyx":924
 *             if popt.simld_ms[j] < FLOAT64_EPS:
 *                 popt.simld_ms[j] = FLOAT64_EPS
 *             fx -= popt.simhd_ms[i][j] * log(popt.simld_ms[j])             # <<<<<<<<<<<<<<
 *             popt.simld_ms[j] = popt.simhd_ms[i][j]/popt.simld_ms[j]
 *         # Updating the gradient
 */
      __pyx_v_fx = (__pyx_v_fx - (((__pyx_v_popt->simhd_ms[__pyx_v_i])[__pyx_v_j]) * log((__pyx_v_popt->simld_ms[__pyx_v_j]))));

      /* "fmsne_implem.pyx":925
 *                 popt.simld_ms[j] = FLOAT64_EPS
 *             fx -= popt.simhd_ms[i][j] * log(popt.simld_ms[j])
 *             popt.simld_ms[j] = popt.simhd_ms[i][j]/popt.simld_ms[j]             # <<<<<<<<<<<<<<
 *         # Updating the gradient
 *         for h in range(popt.ns):
 */
      (__pyx_v_popt->simld_ms[__pyx_v_j]) = (((__pyx_v_popt->simhd_ms[__pyx_v_i])[__pyx_v_j]) / (__pyx_v_popt->simld_ms[__pyx_v_j]));
    }

    /* "fmsne_implem.pyx":927
 *             popt.simld_ms[j] = popt.simhd_ms[i][j]/popt.simld_ms[j]
 *         # Updating the gradient
 *         for h in range(popt.ns):             # <<<<<<<<<<<<<<
 *             a = 0.0
 *             for j in range(popt.N_1):
 */
    __pyx_t_4 = __pyx_v_popt->ns;
    __pyx_t_5 = __pyx_t_4;
    for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
      __pyx_v_h = __pyx_t_6;

      /* "fmsne_implem.pyx":928
 *         # Updating the gradient
 *         for h in range(popt.ns):
 *             a = 0.0             # <<<<<<<<<<<<<<
 *             for j in range(popt.N_1):
 *                 a += popt.simld_ms[j]*popt.simld_h[h][j]
 */
      __pyx_v_a = 0.0;

      /* "fmsne_implem.pyx":929
 *         for h in range(popt.ns):
 *             a = 0.0
 *             for j in range(popt.N_1):             # <<<<<<<<<<<<<<
 *                 a += popt.simld_ms[j]*popt.simld_h[h][j]
 *             idxj = 0
 */
      __pyx_t_7 = __pyx_v_popt->N_1;
      __pyx_t_8 = __pyx_t_7;
      for (__pyx_t_9 = 0; __pyx_t_9 < __pyx_t_8; __pyx_t_9+=1) {
        __pyx_v_j = __pyx_t_9;

        /* "fmsne_implem.pyx":930
 *             a = 0.0
 *             for j in range(popt.N_1):
 *                 a += popt.simld_ms[j]*popt.simld_h[h][j]             # <<<<<<<<<<<<<<
 *             idxj = 0
 *             for j in range(popt.N_1):
 */
        __pyx_v_a = (__pyx_v_a + ((__pyx_v_popt->simld_ms[__pyx_v_j]) * ((__pyx_v_popt->simld_h[__pyx_v_h])[__pyx_v_j])));
      }

      /* "fmsne_implem.pyx":931
 *             for j in range(popt.N_1):
 *                 a += popt.simld_ms[j]*popt.simld_h[h][j]
 *             idxj = 0             # <<<<<<<<<<<<<<
 *             for j in range(popt.N_1):
 *                 if j == i:
 */
      __pyx_v_idxj = 0;

      /* "fmsne_implem.pyx":932
 *                 a += popt.simld_ms[j]*popt.simld_h[h][j]
 *             idxj = 0
 *             for j in range(popt.N_1):             # <<<<<<<<<<<<<<
 *                 if j == i:
 *                     idxj += popt.n_components
 */
      __pyx_t_7 = __pyx_v_popt->N_1;
      __pyx_t_8 = __pyx_t_7;
      for (__pyx_t_9 = 0; __pyx_t_9 < __pyx_t_8; __pyx_t_9+=1) {
        __pyx_v_j = __pyx_t_9;

        /* "fmsne_implem.pyx":933
 *             idxj = 0
 *             for j in range(popt.N_1):
 *                 if j == i:             # <<<<<<<<<<<<<<
 *                     idxj += popt.n_components
 *                 b = popt.p_h[h]*popt.simld_h[h][j]*(popt.simld_ms[j] - a)
 */
        __pyx_t_10 = ((__pyx_v_j == __pyx_v_i) != 0);
        if (__pyx_t_10) {

          /* "fmsne_implem.pyx":934
 *             for j in range(popt.N_1):
 *                 if j == i:
 *                     idxj += popt.n_components             # <<<<<<<<<<<<<<
 *                 b = popt.p_h[h]*popt.simld_h[h][j]*(popt.simld_ms[j] - a)
 *                 for k in range(popt.n_components):
 */
          __pyx_v_idxj = (__pyx_v_idxj + __pyx_v_popt->n_components);

          /* "fmsne_implem.pyx":933
 *             idxj = 0
 *             for j in range(popt.N_1):
 *                 if j == i:             # <<<<<<<<<<<<<<
 *                     idxj += popt.n_components
 *                 b = popt.p_h[h]*popt.simld_h[h][j]*(popt.simld_ms[j] - a)
 */
        }

        /* "fmsne_implem.pyx":935
 *                 if j == i:
 *                     idxj += popt.n_components
 *                 b = popt.p_h[h]*popt.simld_h[h][j]*(popt.simld_ms[j] - a)             # <<<<<<<<<<<<<<
 *                 for k in range(popt.n_components):
 *                     c = b * (xi[k] - x[idxj])
 */
        __pyx_v_b = (((__pyx_v_popt->p_h[__pyx_v_h]) * ((__pyx_v_popt->simld_h[__pyx_v_h])[__pyx_v_j])) * ((__pyx_v_popt->simld_ms[__pyx_v_j]) - __pyx_v_a));

        /* "fmsne_implem.pyx":936
 *                     idxj += popt.n_components
 *                 b = popt.p_h[h]*popt.simld_h[h][j]*(popt.simld_ms[j] - a)
 *                 for k in range(popt.n_components):             # <<<<<<<<<<<<<<
 *                     c = b * (xi[k] - x[idxj])
 *                     g[idx+k] += c
 */
        __pyx_t_11 = __pyx_v_popt->n_components;
        __pyx_t_12 = __pyx_t_11;
        for (__pyx_t_13 = 0; __pyx_t_13 < __pyx_t_12; __pyx_t_13+=1) {
          __pyx_v_k = __pyx_t_13;

          /* "fmsne_implem.pyx":937
 *                 b = popt.p_h[h]*popt.simld_h[h][j]*(popt.simld_ms[j] - a)
 *                 for k in range(popt.n_components):
 *                     c = b * (xi[k] - x[idxj])             # <<<<<<<<<<<<<<
 *                     g[idx+k] += c
 *                     g[idxj] -= c
 */
          __pyx_v_c = (__pyx_v_b * ((__pyx_v_xi[__pyx_v_k]) - (__pyx_v_x[__pyx_v_idxj])));

          /* "fmsne_implem.pyx":938
 *                 for k in range(popt.n_components):
 *                     c = b * (xi[k] - x[idxj])
 *                     g[idx+k] += c             # <<<<<<<<<<<<<<
 *                     g[idxj] -= c
 *                     idxj += 1
 */
          __pyx_t_14 = (__pyx_v_idx + __pyx_v_k);
          (__pyx_v_g[__pyx_t_14]) = ((__pyx_v_g[__pyx_t_14]) + __pyx_v_c);

          /* "fmsne_implem.pyx":939
 *                     c = b * (xi[k] - x[idxj])
 *                     g[idx+k] += c
 *                     g[idxj] -= c             # <<<<<<<<<<<<<<
 *                     idxj += 1
 *         # Updating idx
 */
          __pyx_t_14 = __pyx_v_idxj;
          (__pyx_v_g[__pyx_t_14]) = ((__pyx_v_g[__pyx_t_14]) - __pyx_v_c);

          /* "fmsne_implem.pyx":940
 *                     g[idx+k] += c
 *                     g[idxj] -= c
 *                     idxj += 1             # <<<<<<<<<<<<<<
 *         # Updating idx
 *         idx += popt.n_components
 */
          __pyx_v_idxj = (__pyx_v_idxj + 1);
        }
      }
    }

    /* "fmsne_implem.pyx":942
 *                     idxj += 1
 *         # Updating idx
 *         idx += popt.n_components             # <<<<<<<<<<<<<<
 *     # Normalizing the gradient
 *     for i in range(n):
 */
    __pyx_v_idx = (__pyx_v_idx + __pyx_v_popt->n_components);
  }

  /* "fmsne_implem.pyx":944
 *         idx += popt.n_components
 *     # Normalizing the gradient
 *     for i in range(n):             # <<<<<<<<<<<<<<
 *         g[i] *= popt.inv_ns
 *     # Returning the cost function value
 */
  __pyx_t_15 = __pyx_v_n;
  __pyx_t_16 = __pyx_t_15;
  for (__pyx_t_1 = 0; __pyx_t_1 < __pyx_t_16; __pyx_t_1+=1) {
    __pyx_v_i = __pyx_t_1;

    /* "fmsne_implem.pyx":945
 *     # Normalizing the gradient
 *     for i in range(n):
 *         g[i] *= popt.inv_ns             # <<<<<<<<<<<<<<
 *     # Returning the cost function value
 *     return fx
 */
    __pyx_t_2 = __pyx_v_i;
    (__pyx_v_g[__pyx_t_2]) = ((__pyx_v_g[__pyx_t_2]) * __pyx_v_popt->inv_ns);
  }

  /* "fmsne_implem.pyx":947
 *         g[i] *= popt.inv_ns
 *     # Returning the cost function value
 *     return fx             # <<<<<<<<<<<<<<
 * 
 * cpdef inline void mssne_implem(double[::1] X_hds, double[::1] X_lds, int N, int d_hds, int n_components, bint fit_U, int nit_max, double gtol, double ftol, int maxls, int maxcor, int L_min):
 */
  __pyx_r = __pyx_v_fx;
  goto __pyx_L0;

  /* "fmsne_implem.pyx":871
 *     double** simld_h        # Memory to store the LD similarities with respect to a data point at each scale, hence with ns x (N-1) elements
 * 
 * cdef inline lbfgsfloatval_t mssne_evaluate(void* instance, const lbfgsfloatval_t* x, lbfgsfloatval_t* g, const int n, const lbfgsfloatval_t step) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     Computes cost function and gradient for the current LD coordinates.
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "fmsne_implem.pyx":949
 *     return fx
 * 
 * cpdef inline void mssne_implem(double[::1] X_hds, double[::1] X_lds, int N, int d_hds, int n_components, bint fit_U, int nit_max, double gtol, double ftol, int maxls, int maxcor, int L_min):             # <<<<<<<<<<<<<<
 *     """
 *     Cython implementation of Ms SNE.
 */

static PyObject *__pyx_pw_12fmsne_implem_1mssne_implem(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static CYTHON_INLINE void __pyx_f_12fmsne_implem_mssne_implem(__Pyx_memviewslice __pyx_v_X_hds, __Pyx_memviewslice __pyx_v_X_lds, int __pyx_v_N, int __pyx_v_d_hds, int __pyx_v_n_components, int __pyx_v_fit_U, int __pyx_v_nit_max, double __pyx_v_gtol, double __pyx_v_ftol, int __pyx_v_maxls, int __pyx_v_maxcor, int __pyx_v_L_min, CYTHON_UNUSED int __pyx_skip_dispatch) {
  double __pyx_v_Nd;
  int __pyx_v_K_star;
  int __pyx_v_isnotLmin1;
  int __pyx_v_L;
  int *__pyx_v_K_h;
  double **__pyx_v_ds_hd;
  double **__pyx_v_tau_h;
  double *__pyx_v_p_h;
  double *__pyx_v_t_h;
  double *__pyx_v_xlds;
  int __pyx_v_prod_N_nc;
  double **__pyx_v_simhd_ms;
  double **__pyx_v_simhd_h;
  size_t __pyx_v_shdp;
  lbfgsfloatval_t *__pyx_v_xopt;
  struct __pyx_t_12fmsne_implem_OpMssne *__pyx_v_popt;
  lbfgs_parameter_t __pyx_v_param;
  lbfgs_parameter_t *__pyx_v_pparam;
  Py_ssize_t __pyx_v_k;
  Py_ssize_t __pyx_v_h;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  long __pyx_t_3;
  long __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  __Pyx_RefNannySetupContext("mssne_implem", 0);

  /* "fmsne_implem.pyx":956
 *     """
 *     # Number of data points in double
 *     cdef double Nd = <double> N             # <<<<<<<<<<<<<<
 * 
 *     #####
 */
  __pyx_v_Nd = ((double)__pyx_v_N);

  /* "fmsne_implem.pyx":962
 *     #####
 * 
 *     cdef int K_star = 2             # <<<<<<<<<<<<<<
 *     cdef bint isnotLmin1 = L_min != 1
 *     # Number of scales
 */
  __pyx_v_K_star = 2;

  /* "fmsne_implem.pyx":963
 * 
 *     cdef int K_star = 2
 *     cdef bint isnotLmin1 = L_min != 1             # <<<<<<<<<<<<<<
 *     # Number of scales
 *     cdef int L = ms_def_n_scales(Nd, K_star, L_min, not isnotLmin1)
 */
  __pyx_v_isnotLmin1 = (__pyx_v_L_min != 1);

  /* "fmsne_implem.pyx":965
 *     cdef bint isnotLmin1 = L_min != 1
 *     # Number of scales
 *     cdef int L = ms_def_n_scales(Nd, K_star, L_min, not isnotLmin1)             # <<<<<<<<<<<<<<
 * 
 *     # Perplexity at each scale
 */
  __pyx_v_L = __pyx_f_12fmsne_implem_ms_def_n_scales(__pyx_v_Nd, __pyx_v_K_star, __pyx_v_L_min, (!(__pyx_v_isnotLmin1 != 0)));

  /* "fmsne_implem.pyx":968
 * 
 *     # Perplexity at each scale
 *     cdef int* K_h = ms_def_Kh(K_star, isnotLmin1, ms_def_shift_Lmin(isnotLmin1, L_min), L)             # <<<<<<<<<<<<<<
 *     if K_h is NULL:
 *         printf("Error in mssne_implem function of fmsne_implem.pyx: out of memory for K_h.")
 */
  __pyx_v_K_h = __pyx_f_12fmsne_implem_ms_def_Kh(__pyx_v_K_star, __pyx_v_isnotLmin1, __pyx_f_12fmsne_implem_ms_def_shift_Lmin(__pyx_v_isnotLmin1, __pyx_v_L_min), __pyx_v_L);

  /* "fmsne_implem.pyx":969
 *     # Perplexity at each scale
 *     cdef int* K_h = ms_def_Kh(K_star, isnotLmin1, ms_def_shift_Lmin(isnotLmin1, L_min), L)
 *     if K_h is NULL:             # <<<<<<<<<<<<<<
 *         printf("Error in mssne_implem function of fmsne_implem.pyx: out of memory for K_h.")
 *         exit(EXIT_FAILURE)
 */
  __pyx_t_1 = ((__pyx_v_K_h == NULL) != 0);
  if (__pyx_t_1) {

    /* "fmsne_implem.pyx":970
 *     cdef int* K_h = ms_def_Kh(K_star, isnotLmin1, ms_def_shift_Lmin(isnotLmin1, L_min), L)
 *     if K_h is NULL:
 *         printf("Error in mssne_implem function of fmsne_implem.pyx: out of memory for K_h.")             # <<<<<<<<<<<<<<
 *         exit(EXIT_FAILURE)
 * 
 */
    (void)(printf(((char const *)"Error in mssne_implem function of fmsne_implem.pyx: out of memory for K_h.")));

    /* "fmsne_implem.pyx":971
 *     if K_h is NULL:
 *         printf("Error in mssne_implem function of fmsne_implem.pyx: out of memory for K_h.")
 *         exit(EXIT_FAILURE)             # <<<<<<<<<<<<<<
 * 
 *     #####
 */
    exit(EXIT_FAILURE);

    /* "fmsne_implem.pyx":969
 *     # Perplexity at each scale
 *     cdef int* K_h = ms_def_Kh(K_star, isnotLmin1, ms_def_shift_Lmin(isnotLmin1, L_min), L)
 *     if K_h is NULL:             # <<<<<<<<<<<<<<
 *         printf("Error in mssne_implem function of fmsne_implem.pyx: out of memory for K_h.")
 *         exit(EXIT_FAILURE)
 */
  }

  /* "fmsne_implem.pyx":981
 * 
 *     # K_star now refers to N-1
 *     K_star = N-1             # <<<<<<<<<<<<<<
 * 
 *     cdef double** ds_hd = sne_ds_hd(&X_hds[0], N, d_hds, K_star)
 */
  __pyx_v_K_star = (__pyx_v_N - 1);

  /* "fmsne_implem.pyx":983
 *     K_star = N-1
 * 
 *     cdef double** ds_hd = sne_ds_hd(&X_hds[0], N, d_hds, K_star)             # <<<<<<<<<<<<<<
 *     if ds_hd is NULL:
 *         PyMem_Free(K_h)
 */
  __pyx_t_2 = 0;
  __pyx_v_ds_hd = __pyx_f_12fmsne_implem_sne_ds_hd((&(*((double *) ( /* dim=0 */ ((char *) (((double *) __pyx_v_X_hds.data) + __pyx_t_2)) )))), __pyx_v_N, __pyx_v_d_hds, __pyx_v_K_star);

  /* "fmsne_implem.pyx":984
 * 
 *     cdef double** ds_hd = sne_ds_hd(&X_hds[0], N, d_hds, K_star)
 *     if ds_hd is NULL:             # <<<<<<<<<<<<<<
 *         PyMem_Free(K_h)
 *         printf("Error in mssne_implem function of fmsne_implem.pyx: out of memory for ds_hd.")
 */
  __pyx_t_1 = ((__pyx_v_ds_hd == NULL) != 0);
  if (__pyx_t_1) {

    /* "fmsne_implem.pyx":985
 *     cdef double** ds_hd = sne_ds_hd(&X_hds[0], N, d_hds, K_star)
 *     if ds_hd is NULL:
 *         PyMem_Free(K_h)             # <<<<<<<<<<<<<<
 *         printf("Error in mssne_implem function of fmsne_implem.pyx: out of memory for ds_hd.")
 *         exit(EXIT_FAILURE)
 */
    PyMem_Free(__pyx_v_K_h);

    /* "fmsne_implem.pyx":986
 *     if ds_hd is NULL:
 *         PyMem_Free(K_h)
 *         printf("Error in mssne_implem function of fmsne_implem.pyx: out of memory for ds_hd.")             # <<<<<<<<<<<<<<
 *         exit(EXIT_FAILURE)
 * 
 */
    (void)(printf(((char const *)"Error in mssne_implem function of fmsne_implem.pyx: out of memory for ds_hd.")));

    /* "fmsne_implem.pyx":987
 *         PyMem_Free(K_h)
 *         printf("Error in mssne_implem function of fmsne_implem.pyx: out of memory for ds_hd.")
 *         exit(EXIT_FAILURE)             # <<<<<<<<<<<<<<
 * 
 *     #####
 */
    exit(EXIT_FAILURE);

    /* "fmsne_implem.pyx":984
 * 
 *     cdef double** ds_hd = sne_ds_hd(&X_hds[0], N, d_hds, K_star)
 *     if ds_hd is NULL:             # <<<<<<<<<<<<<<
 *         PyMem_Free(K_h)
 *         printf("Error in mssne_implem function of fmsne_implem.pyx: out of memory for ds_hd.")
 */
  }

  /* "fmsne_implem.pyx":994
 * 
 *     # HD bandwidths for each scale and data point. Only stored if fit_U is True.
 *     cdef double** tau_h = ms_hdsim(ds_hd, N, L, K_h, K_star)             # <<<<<<<<<<<<<<
 *     if tau_h is NULL:
 *         PyMem_Free(K_h)
 */
  __pyx_v_tau_h = __pyx_f_12fmsne_implem_ms_hdsim(__pyx_v_ds_hd, __pyx_v_N, __pyx_v_L, __pyx_v_K_h, __pyx_v_K_star);

  /* "fmsne_implem.pyx":995
 *     # HD bandwidths for each scale and data point. Only stored if fit_U is True.
 *     cdef double** tau_h = ms_hdsim(ds_hd, N, L, K_h, K_star)
 *     if tau_h is NULL:             # <<<<<<<<<<<<<<
 *         PyMem_Free(K_h)
 *         free_dble_2dmat(ds_hd, N)
 */
  __pyx_t_1 = ((__pyx_v_tau_h == NULL) != 0);
  if (__pyx_t_1) {

    /* "fmsne_implem.pyx":996
 *     cdef double** tau_h = ms_hdsim(ds_hd, N, L, K_h, K_star)
 *     if tau_h is NULL:
 *         PyMem_Free(K_h)             # <<<<<<<<<<<<<<
 *         free_dble_2dmat(ds_hd, N)
 *         printf("Error in mssne_implem function of fmsne_implem.pyx: out of memory in function ms_hdsim.")
 */
    PyMem_Free(__pyx_v_K_h);

    /* "fmsne_implem.pyx":997
 *     if tau_h is NULL:
 *         PyMem_Free(K_h)
 *         free_dble_2dmat(ds_hd, N)             # <<<<<<<<<<<<<<
 *         printf("Error in mssne_implem function of fmsne_implem.pyx: out of memory in function ms_hdsim.")
 *         exit(EXIT_FAILURE)
 */
    __pyx_f_12fmsne_implem_free_dble_2dmat(__pyx_v_ds_hd, __pyx_v_N);

    /* "fmsne_implem.pyx":998
 *         PyMem_Free(K_h)
 *         free_dble_2dmat(ds_hd, N)
 *         printf("Error in mssne_implem function of fmsne_implem.pyx: out of memory in function ms_hdsim.")             # <<<<<<<<<<<<<<
 *         exit(EXIT_FAILURE)
 * 
 */
    (void)(printf(((char const *)"Error in mssne_implem function of fmsne_implem.pyx: out of memory in function ms_hdsim.")));

    /* "fmsne_implem.pyx":999
 *         free_dble_2dmat(ds_hd, N)
 *         printf("Error in mssne_implem function of fmsne_implem.pyx: out of memory in function ms_hdsim.")
 *         exit(EXIT_FAILURE)             # <<<<<<<<<<<<<<
 * 
 *     #####
 */
    exit(EXIT_FAILURE);

    /* "fmsne_implem.pyx":995
 *     # HD bandwidths for each scale and data point. Only stored if fit_U is True.
 *     cdef double** tau_h = ms_hdsim(ds_hd, N, L, K_h, K_star)
 *     if tau_h is NULL:             # <<<<<<<<<<<<<<
 *         PyMem_Free(K_h)
 *         free_dble_2dmat(ds_hd, N)
 */
  }

  /* "fmsne_implem.pyx":1006
 * 
 *     # Array storing the LD precisions for each scale when fit_U is False.
 *     cdef double* p_h = <double*> PyMem_Malloc(L*sizeof(double))             # <<<<<<<<<<<<<<
 *     if p_h is NULL:
 *         PyMem_Free(K_h)
 */
  __pyx_v_p_h = ((double *)PyMem_Malloc((__pyx_v_L * (sizeof(double)))));

  /* "fmsne_implem.pyx":1007
 *     # Array storing the LD precisions for each scale when fit_U is False.
 *     cdef double* p_h = <double*> PyMem_Malloc(L*sizeof(double))
 *     if p_h is NULL:             # <<<<<<<<<<<<<<
 *         PyMem_Free(K_h)
 *         free_dble_2dmat(ds_hd, N)
 */
  __pyx_t_1 = ((__pyx_v_p_h == NULL) != 0);
  if (__pyx_t_1) {

    /* "fmsne_implem.pyx":1008
 *     cdef double* p_h = <double*> PyMem_Malloc(L*sizeof(double))
 *     if p_h is NULL:
 *         PyMem_Free(K_h)             # <<<<<<<<<<<<<<
 *         free_dble_2dmat(ds_hd, N)
 *         free_dble_2dmat(tau_h, L)
 */
    PyMem_Free(__pyx_v_K_h);

    /* "fmsne_implem.pyx":1009
 *     if p_h is NULL:
 *         PyMem_Free(K_h)
 *         free_dble_2dmat(ds_hd, N)             # <<<<<<<<<<<<<<
 *         free_dble_2dmat(tau_h, L)
 *         printf("Error in mssne_implem function of fmsne_implem.pyx: out of memory for p_h.")
 */
    __pyx_f_12fmsne_implem_free_dble_2dmat(__pyx_v_ds_hd, __pyx_v_N);

    /* "fmsne_implem.pyx":1010
 *         PyMem_Free(K_h)
 *         free_dble_2dmat(ds_hd, N)
 *         free_dble_2dmat(tau_h, L)             # <<<<<<<<<<<<<<
 *         printf("Error in mssne_implem function of fmsne_implem.pyx: out of memory for p_h.")
 *         exit(EXIT_FAILURE)
 */
    __pyx_f_12fmsne_implem_free_dble_2dmat(__pyx_v_tau_h, __pyx_v_L);

    /* "fmsne_implem.pyx":1011
 *         free_dble_2dmat(ds_hd, N)
 *         free_dble_2dmat(tau_h, L)
 *         printf("Error in mssne_implem function of fmsne_implem.pyx: out of memory for p_h.")             # <<<<<<<<<<<<<<
 *         exit(EXIT_FAILURE)
 *     # Array storing 2/p_h
 */
    (void)(printf(((char const *)"Error in mssne_implem function of fmsne_implem.pyx: out of memory for p_h.")));

    /* "fmsne_implem.pyx":1012
 *         free_dble_2dmat(tau_h, L)
 *         printf("Error in mssne_implem function of fmsne_implem.pyx: out of memory for p_h.")
 *         exit(EXIT_FAILURE)             # <<<<<<<<<<<<<<
 *     # Array storing 2/p_h
 *     cdef double* t_h = <double*> PyMem_Malloc(L*sizeof(double))
 */
    exit(EXIT_FAILURE);

    /* "fmsne_implem.pyx":1007
 *     # Array storing the LD precisions for each scale when fit_U is False.
 *     cdef double* p_h = <double*> PyMem_Malloc(L*sizeof(double))
 *     if p_h is NULL:             # <<<<<<<<<<<<<<
 *         PyMem_Free(K_h)
 *         free_dble_2dmat(ds_hd, N)
 */
  }

  /* "fmsne_implem.pyx":1014
 *         exit(EXIT_FAILURE)
 *     # Array storing 2/p_h
 *     cdef double* t_h = <double*> PyMem_Malloc(L*sizeof(double))             # <<<<<<<<<<<<<<
 *     if t_h is NULL:
 *         PyMem_Free(K_h)
 */
  __pyx_v_t_h = ((double *)PyMem_Malloc((__pyx_v_L * (sizeof(double)))));

  /* "fmsne_implem.pyx":1015
 *     # Array storing 2/p_h
 *     cdef double* t_h = <double*> PyMem_Malloc(L*sizeof(double))
 *     if t_h is NULL:             # <<<<<<<<<<<<<<
 *         PyMem_Free(K_h)
 *         free_dble_2dmat(ds_hd, N)
 */
  __pyx_t_1 = ((__pyx_v_t_h == NULL) != 0);
  if (__pyx_t_1) {

    /* "fmsne_implem.pyx":1016
 *     cdef double* t_h = <double*> PyMem_Malloc(L*sizeof(double))
 *     if t_h is NULL:
 *         PyMem_Free(K_h)             # <<<<<<<<<<<<<<
 *         free_dble_2dmat(ds_hd, N)
 *         free_dble_2dmat(tau_h, L)
 */
    PyMem_Free(__pyx_v_K_h);

    /* "fmsne_implem.pyx":1017
 *     if t_h is NULL:
 *         PyMem_Free(K_h)
 *         free_dble_2dmat(ds_hd, N)             # <<<<<<<<<<<<<<
 *         free_dble_2dmat(tau_h, L)
 *         PyMem_Free(p_h)
 */
    __pyx_f_12fmsne_implem_free_dble_2dmat(__pyx_v_ds_hd, __pyx_v_N);

    /* "fmsne_implem.pyx":1018
 *         PyMem_Free(K_h)
 *         free_dble_2dmat(ds_hd, N)
 *         free_dble_2dmat(tau_h, L)             # <<<<<<<<<<<<<<
 *         PyMem_Free(p_h)
 *         printf("Error in mssne_implem function of fmsne_implem.pyx: out of memory for t_h.")
 */
    __pyx_f_12fmsne_implem_free_dble_2dmat(__pyx_v_tau_h, __pyx_v_L);

    /* "fmsne_implem.pyx":1019
 *         free_dble_2dmat(ds_hd, N)
 *         free_dble_2dmat(tau_h, L)
 *         PyMem_Free(p_h)             # <<<<<<<<<<<<<<
 *         printf("Error in mssne_implem function of fmsne_implem.pyx: out of memory for t_h.")
 *         exit(EXIT_FAILURE)
 */
    PyMem_Free(__pyx_v_p_h);

    /* "fmsne_implem.pyx":1020
 *         free_dble_2dmat(tau_h, L)
 *         PyMem_Free(p_h)
 *         printf("Error in mssne_implem function of fmsne_implem.pyx: out of memory for t_h.")             # <<<<<<<<<<<<<<
 *         exit(EXIT_FAILURE)
 *     # Pointer toward the start of the LDS
 */
    (void)(printf(((char const *)"Error in mssne_implem function of fmsne_implem.pyx: out of memory for t_h.")));

    /* "fmsne_implem.pyx":1021
 *         PyMem_Free(p_h)
 *         printf("Error in mssne_implem function of fmsne_implem.pyx: out of memory for t_h.")
 *         exit(EXIT_FAILURE)             # <<<<<<<<<<<<<<
 *     # Pointer toward the start of the LDS
 *     cdef double* xlds = &X_lds[0]
 */
    exit(EXIT_FAILURE);

    /* "fmsne_implem.pyx":1015
 *     # Array storing 2/p_h
 *     cdef double* t_h = <double*> PyMem_Malloc(L*sizeof(double))
 *     if t_h is NULL:             # <<<<<<<<<<<<<<
 *         PyMem_Free(K_h)
 *         free_dble_2dmat(ds_hd, N)
 */
  }

  /* "fmsne_implem.pyx":1023
 *         exit(EXIT_FAILURE)
 *     # Pointer toward the start of the LDS
 *     cdef double* xlds = &X_lds[0]             # <<<<<<<<<<<<<<
 *     cdef int prod_N_nc = N*n_components
 *     # Computing the LD precisions
 */
  __pyx_t_2 = 0;
  __pyx_v_xlds = (&(*((double *) ( /* dim=0 */ ((char *) (((double *) __pyx_v_X_lds.data) + __pyx_t_2)) ))));

  /* "fmsne_implem.pyx":1024
 *     # Pointer toward the start of the LDS
 *     cdef double* xlds = &X_lds[0]
 *     cdef int prod_N_nc = N*n_components             # <<<<<<<<<<<<<<
 *     # Computing the LD precisions
 *     ms_ldprec(n_components, Nd, xlds, prod_N_nc, fit_U, L, N, tau_h, K_h, p_h, t_h, K_star)
 */
  __pyx_v_prod_N_nc = (__pyx_v_N * __pyx_v_n_components);

  /* "fmsne_implem.pyx":1026
 *     cdef int prod_N_nc = N*n_components
 *     # Computing the LD precisions
 *     ms_ldprec(n_components, Nd, xlds, prod_N_nc, fit_U, L, N, tau_h, K_h, p_h, t_h, K_star)             # <<<<<<<<<<<<<<
 * 
 *     # Free stuff which will not be used anymore
 */
  __pyx_f_12fmsne_implem_ms_ldprec(__pyx_v_n_components, __pyx_v_Nd, __pyx_v_xlds, __pyx_v_prod_N_nc, __pyx_v_fit_U, __pyx_v_L, __pyx_v_N, __pyx_v_tau_h, __pyx_v_K_h, __pyx_v_p_h, __pyx_v_t_h, __pyx_v_K_star);

  /* "fmsne_implem.pyx":1029
 * 
 *     # Free stuff which will not be used anymore
 *     PyMem_Free(K_h)             # <<<<<<<<<<<<<<
 * 
 *     #####
 */
  PyMem_Free(__pyx_v_K_h);

  /* "fmsne_implem.pyx":1036
 * 
 *     # Array storing the multi-scale HD similarities, as computed during the multi-scale optimization
 *     cdef double** simhd_ms = alloc_dble_2dmat(N, K_star)             # <<<<<<<<<<<<<<
 *     if simhd_ms is NULL:
 *         free_dble_2dmat(ds_hd, N)
 */
  __pyx_v_simhd_ms = __pyx_f_12fmsne_implem_alloc_dble_2dmat(__pyx_v_N, __pyx_v_K_star);

  /* "fmsne_implem.pyx":1037
 *     # Array storing the multi-scale HD similarities, as computed during the multi-scale optimization
 *     cdef double** simhd_ms = alloc_dble_2dmat(N, K_star)
 *     if simhd_ms is NULL:             # <<<<<<<<<<<<<<
 *         free_dble_2dmat(ds_hd, N)
 *         free_dble_2dmat(tau_h, L)
 */
  __pyx_t_1 = ((__pyx_v_simhd_ms == NULL) != 0);
  if (__pyx_t_1) {

    /* "fmsne_implem.pyx":1038
 *     cdef double** simhd_ms = alloc_dble_2dmat(N, K_star)
 *     if simhd_ms is NULL:
 *         free_dble_2dmat(ds_hd, N)             # <<<<<<<<<<<<<<
 *         free_dble_2dmat(tau_h, L)
 *         PyMem_Free(p_h)
 */
    __pyx_f_12fmsne_implem_free_dble_2dmat(__pyx_v_ds_hd, __pyx_v_N);

    /* "fmsne_implem.pyx":1039
 *     if simhd_ms is NULL:
 *         free_dble_2dmat(ds_hd, N)
 *         free_dble_2dmat(tau_h, L)             # <<<<<<<<<<<<<<
 *         PyMem_Free(p_h)
 *         PyMem_Free(t_h)
 */
    __pyx_f_12fmsne_implem_free_dble_2dmat(__pyx_v_tau_h, __pyx_v_L);

    /* "fmsne_implem.pyx":1040
 *         free_dble_2dmat(ds_hd, N)
 *         free_dble_2dmat(tau_h, L)
 *         PyMem_Free(p_h)             # <<<<<<<<<<<<<<
 *         PyMem_Free(t_h)
 *         printf("Error in mssne_implem function of fmsne_implem.pyx: out of memory for simhd_ms.")
 */
    PyMem_Free(__pyx_v_p_h);

    /* "fmsne_implem.pyx":1041
 *         free_dble_2dmat(tau_h, L)
 *         PyMem_Free(p_h)
 *         PyMem_Free(t_h)             # <<<<<<<<<<<<<<
 *         printf("Error in mssne_implem function of fmsne_implem.pyx: out of memory for simhd_ms.")
 *         exit(EXIT_FAILURE)
 */
    PyMem_Free(__pyx_v_t_h);

    /* "fmsne_implem.pyx":1042
 *         PyMem_Free(p_h)
 *         PyMem_Free(t_h)
 *         printf("Error in mssne_implem function of fmsne_implem.pyx: out of memory for simhd_ms.")             # <<<<<<<<<<<<<<
 *         exit(EXIT_FAILURE)
 * 
 */
    (void)(printf(((char const *)"Error in mssne_implem function of fmsne_implem.pyx: out of memory for simhd_ms.")));

    /* "fmsne_implem.pyx":1043
 *         PyMem_Free(t_h)
 *         printf("Error in mssne_implem function of fmsne_implem.pyx: out of memory for simhd_ms.")
 *         exit(EXIT_FAILURE)             # <<<<<<<<<<<<<<
 * 
 *     # Array storing the HD similarities at some scale h, during the multi-scale optimization
 */
    exit(EXIT_FAILURE);

    /* "fmsne_implem.pyx":1037
 *     # Array storing the multi-scale HD similarities, as computed during the multi-scale optimization
 *     cdef double** simhd_ms = alloc_dble_2dmat(N, K_star)
 *     if simhd_ms is NULL:             # <<<<<<<<<<<<<<
 *         free_dble_2dmat(ds_hd, N)
 *         free_dble_2dmat(tau_h, L)
 */
  }

  /* "fmsne_implem.pyx":1046
 * 
 *     # Array storing the HD similarities at some scale h, during the multi-scale optimization
 *     cdef double** simhd_h = alloc_dble_2dmat(N, K_star)             # <<<<<<<<<<<<<<
 *     if simhd_h is NULL:
 *         free_dble_2dmat(ds_hd, N)
 */
  __pyx_v_simhd_h = __pyx_f_12fmsne_implem_alloc_dble_2dmat(__pyx_v_N, __pyx_v_K_star);

  /* "fmsne_implem.pyx":1047
 *     # Array storing the HD similarities at some scale h, during the multi-scale optimization
 *     cdef double** simhd_h = alloc_dble_2dmat(N, K_star)
 *     if simhd_h is NULL:             # <<<<<<<<<<<<<<
 *         free_dble_2dmat(ds_hd, N)
 *         free_dble_2dmat(tau_h, L)
 */
  __pyx_t_1 = ((__pyx_v_simhd_h == NULL) != 0);
  if (__pyx_t_1) {

    /* "fmsne_implem.pyx":1048
 *     cdef double** simhd_h = alloc_dble_2dmat(N, K_star)
 *     if simhd_h is NULL:
 *         free_dble_2dmat(ds_hd, N)             # <<<<<<<<<<<<<<
 *         free_dble_2dmat(tau_h, L)
 *         PyMem_Free(p_h)
 */
    __pyx_f_12fmsne_implem_free_dble_2dmat(__pyx_v_ds_hd, __pyx_v_N);

    /* "fmsne_implem.pyx":1049
 *     if simhd_h is NULL:
 *         free_dble_2dmat(ds_hd, N)
 *         free_dble_2dmat(tau_h, L)             # <<<<<<<<<<<<<<
 *         PyMem_Free(p_h)
 *         PyMem_Free(t_h)
 */
    __pyx_f_12fmsne_implem_free_dble_2dmat(__pyx_v_tau_h, __pyx_v_L);

    /* "fmsne_implem.pyx":1050
 *         free_dble_2dmat(ds_hd, N)
 *         free_dble_2dmat(tau_h, L)
 *         PyMem_Free(p_h)             # <<<<<<<<<<<<<<
 *         PyMem_Free(t_h)
 *         free_dble_2dmat(simhd_ms, N)
 */
    PyMem_Free(__pyx_v_p_h);

    /* "fmsne_implem.pyx":1051
 *         free_dble_2dmat(tau_h, L)
 *         PyMem_Free(p_h)
 *         PyMem_Free(t_h)             # <<<<<<<<<<<<<<
 *         free_dble_2dmat(simhd_ms, N)
 *         printf("Error in mssne_implem function of fmsne_implem.pyx: out of memory for simhd_h.")
 */
    PyMem_Free(__pyx_v_t_h);

    /* "fmsne_implem.pyx":1052
 *         PyMem_Free(p_h)
 *         PyMem_Free(t_h)
 *         free_dble_2dmat(simhd_ms, N)             # <<<<<<<<<<<<<<
 *         printf("Error in mssne_implem function of fmsne_implem.pyx: out of memory for simhd_h.")
 *         exit(EXIT_FAILURE)
 */
    __pyx_f_12fmsne_implem_free_dble_2dmat(__pyx_v_simhd_ms, __pyx_v_N);

    /* "fmsne_implem.pyx":1053
 *         PyMem_Free(t_h)
 *         free_dble_2dmat(simhd_ms, N)
 *         printf("Error in mssne_implem function of fmsne_implem.pyx: out of memory for simhd_h.")             # <<<<<<<<<<<<<<
 *         exit(EXIT_FAILURE)
 * 
 */
    (void)(printf(((char const *)"Error in mssne_implem function of fmsne_implem.pyx: out of memory for simhd_h.")));

    /* "fmsne_implem.pyx":1054
 *         free_dble_2dmat(simhd_ms, N)
 *         printf("Error in mssne_implem function of fmsne_implem.pyx: out of memory for simhd_h.")
 *         exit(EXIT_FAILURE)             # <<<<<<<<<<<<<<
 * 
 *     #####
 */
    exit(EXIT_FAILURE);

    /* "fmsne_implem.pyx":1047
 *     # Array storing the HD similarities at some scale h, during the multi-scale optimization
 *     cdef double** simhd_h = alloc_dble_2dmat(N, K_star)
 *     if simhd_h is NULL:             # <<<<<<<<<<<<<<
 *         free_dble_2dmat(ds_hd, N)
 *         free_dble_2dmat(tau_h, L)
 */
  }

  /* "fmsne_implem.pyx":1061
 * 
 *     # Number of bytes of the array for the optimization
 *     cdef size_t shdp = prod_N_nc*sizeof(double)             # <<<<<<<<<<<<<<
 *     # Variables for the optimization, initialized to the current LDS.
 *     cdef lbfgsfloatval_t* xopt = init_lbfgs_var(shdp, prod_N_nc, xlds)
 */
  __pyx_v_shdp = (__pyx_v_prod_N_nc * (sizeof(double)));

  /* "fmsne_implem.pyx":1063
 *     cdef size_t shdp = prod_N_nc*sizeof(double)
 *     # Variables for the optimization, initialized to the current LDS.
 *     cdef lbfgsfloatval_t* xopt = init_lbfgs_var(shdp, prod_N_nc, xlds)             # <<<<<<<<<<<<<<
 *     if xopt is NULL:
 *         free_dble_2dmat(ds_hd, N)
 */
  __pyx_v_xopt = __pyx_f_12fmsne_implem_init_lbfgs_var(__pyx_v_shdp, __pyx_v_prod_N_nc, __pyx_v_xlds);

  /* "fmsne_implem.pyx":1064
 *     # Variables for the optimization, initialized to the current LDS.
 *     cdef lbfgsfloatval_t* xopt = init_lbfgs_var(shdp, prod_N_nc, xlds)
 *     if xopt is NULL:             # <<<<<<<<<<<<<<
 *         free_dble_2dmat(ds_hd, N)
 *         free_dble_2dmat(tau_h, L)
 */
  __pyx_t_1 = ((__pyx_v_xopt == NULL) != 0);
  if (__pyx_t_1) {

    /* "fmsne_implem.pyx":1065
 *     cdef lbfgsfloatval_t* xopt = init_lbfgs_var(shdp, prod_N_nc, xlds)
 *     if xopt is NULL:
 *         free_dble_2dmat(ds_hd, N)             # <<<<<<<<<<<<<<
 *         free_dble_2dmat(tau_h, L)
 *         PyMem_Free(p_h)
 */
    __pyx_f_12fmsne_implem_free_dble_2dmat(__pyx_v_ds_hd, __pyx_v_N);

    /* "fmsne_implem.pyx":1066
 *     if xopt is NULL:
 *         free_dble_2dmat(ds_hd, N)
 *         free_dble_2dmat(tau_h, L)             # <<<<<<<<<<<<<<
 *         PyMem_Free(p_h)
 *         PyMem_Free(t_h)
 */
    __pyx_f_12fmsne_implem_free_dble_2dmat(__pyx_v_tau_h, __pyx_v_L);

    /* "fmsne_implem.pyx":1067
 *         free_dble_2dmat(ds_hd, N)
 *         free_dble_2dmat(tau_h, L)
 *         PyMem_Free(p_h)             # <<<<<<<<<<<<<<
 *         PyMem_Free(t_h)
 *         free_dble_2dmat(simhd_ms, N)
 */
    PyMem_Free(__pyx_v_p_h);

    /* "fmsne_implem.pyx":1068
 *         free_dble_2dmat(tau_h, L)
 *         PyMem_Free(p_h)
 *         PyMem_Free(t_h)             # <<<<<<<<<<<<<<
 *         free_dble_2dmat(simhd_ms, N)
 *         free_dble_2dmat(simhd_h, N)
 */
    PyMem_Free(__pyx_v_t_h);

    /* "fmsne_implem.pyx":1069
 *         PyMem_Free(p_h)
 *         PyMem_Free(t_h)
 *         free_dble_2dmat(simhd_ms, N)             # <<<<<<<<<<<<<<
 *         free_dble_2dmat(simhd_h, N)
 *         printf('Error in function mssne_implem of fmsne_implem.pyx: out of memory for xopt')
 */
    __pyx_f_12fmsne_implem_free_dble_2dmat(__pyx_v_simhd_ms, __pyx_v_N);

    /* "fmsne_implem.pyx":1070
 *         PyMem_Free(t_h)
 *         free_dble_2dmat(simhd_ms, N)
 *         free_dble_2dmat(simhd_h, N)             # <<<<<<<<<<<<<<
 *         printf('Error in function mssne_implem of fmsne_implem.pyx: out of memory for xopt')
 *         exit(EXIT_FAILURE)
 */
    __pyx_f_12fmsne_implem_free_dble_2dmat(__pyx_v_simhd_h, __pyx_v_N);

    /* "fmsne_implem.pyx":1071
 *         free_dble_2dmat(simhd_ms, N)
 *         free_dble_2dmat(simhd_h, N)
 *         printf('Error in function mssne_implem of fmsne_implem.pyx: out of memory for xopt')             # <<<<<<<<<<<<<<
 *         exit(EXIT_FAILURE)
 * 
 */
    (void)(printf(((char const *)"Error in function mssne_implem of fmsne_implem.pyx: out of memory for xopt")));

    /* "fmsne_implem.pyx":1072
 *         free_dble_2dmat(simhd_h, N)
 *         printf('Error in function mssne_implem of fmsne_implem.pyx: out of memory for xopt')
 *         exit(EXIT_FAILURE)             # <<<<<<<<<<<<<<
 * 
 *     # Structure gathering the data which are necessary to evaluate the cost function and the gradient
 */
    exit(EXIT_FAILURE);

    /* "fmsne_implem.pyx":1064
 *     # Variables for the optimization, initialized to the current LDS.
 *     cdef lbfgsfloatval_t* xopt = init_lbfgs_var(shdp, prod_N_nc, xlds)
 *     if xopt is NULL:             # <<<<<<<<<<<<<<
 *         free_dble_2dmat(ds_hd, N)
 *         free_dble_2dmat(tau_h, L)
 */
  }

  /* "fmsne_implem.pyx":1075
 * 
 *     # Structure gathering the data which are necessary to evaluate the cost function and the gradient
 *     cdef OpMssne* popt = <OpMssne*> PyMem_Malloc(sizeof(OpMssne))             # <<<<<<<<<<<<<<
 *     if popt is NULL:
 *         free_dble_2dmat(ds_hd, N)
 */
  __pyx_v_popt = ((struct __pyx_t_12fmsne_implem_OpMssne *)PyMem_Malloc((sizeof(struct __pyx_t_12fmsne_implem_OpMssne))));

  /* "fmsne_implem.pyx":1076
 *     # Structure gathering the data which are necessary to evaluate the cost function and the gradient
 *     cdef OpMssne* popt = <OpMssne*> PyMem_Malloc(sizeof(OpMssne))
 *     if popt is NULL:             # <<<<<<<<<<<<<<
 *         free_dble_2dmat(ds_hd, N)
 *         free_dble_2dmat(tau_h, L)
 */
  __pyx_t_1 = ((__pyx_v_popt == NULL) != 0);
  if (__pyx_t_1) {

    /* "fmsne_implem.pyx":1077
 *     cdef OpMssne* popt = <OpMssne*> PyMem_Malloc(sizeof(OpMssne))
 *     if popt is NULL:
 *         free_dble_2dmat(ds_hd, N)             # <<<<<<<<<<<<<<
 *         free_dble_2dmat(tau_h, L)
 *         PyMem_Free(p_h)
 */
    __pyx_f_12fmsne_implem_free_dble_2dmat(__pyx_v_ds_hd, __pyx_v_N);

    /* "fmsne_implem.pyx":1078
 *     if popt is NULL:
 *         free_dble_2dmat(ds_hd, N)
 *         free_dble_2dmat(tau_h, L)             # <<<<<<<<<<<<<<
 *         PyMem_Free(p_h)
 *         PyMem_Free(t_h)
 */
    __pyx_f_12fmsne_implem_free_dble_2dmat(__pyx_v_tau_h, __pyx_v_L);

    /* "fmsne_implem.pyx":1079
 *         free_dble_2dmat(ds_hd, N)
 *         free_dble_2dmat(tau_h, L)
 *         PyMem_Free(p_h)             # <<<<<<<<<<<<<<
 *         PyMem_Free(t_h)
 *         free_dble_2dmat(simhd_ms, N)
 */
    PyMem_Free(__pyx_v_p_h);

    /* "fmsne_implem.pyx":1080
 *         free_dble_2dmat(tau_h, L)
 *         PyMem_Free(p_h)
 *         PyMem_Free(t_h)             # <<<<<<<<<<<<<<
 *         free_dble_2dmat(simhd_ms, N)
 *         free_dble_2dmat(simhd_h, N)
 */
    PyMem_Free(__pyx_v_t_h);

    /* "fmsne_implem.pyx":1081
 *         PyMem_Free(p_h)
 *         PyMem_Free(t_h)
 *         free_dble_2dmat(simhd_ms, N)             # <<<<<<<<<<<<<<
 *         free_dble_2dmat(simhd_h, N)
 *         lbfgs_free(xopt)
 */
    __pyx_f_12fmsne_implem_free_dble_2dmat(__pyx_v_simhd_ms, __pyx_v_N);

    /* "fmsne_implem.pyx":1082
 *         PyMem_Free(t_h)
 *         free_dble_2dmat(simhd_ms, N)
 *         free_dble_2dmat(simhd_h, N)             # <<<<<<<<<<<<<<
 *         lbfgs_free(xopt)
 *         printf("Error in function mssne_implem of module cyfastpyx: out of memory for popt")
 */
    __pyx_f_12fmsne_implem_free_dble_2dmat(__pyx_v_simhd_h, __pyx_v_N);

    /* "fmsne_implem.pyx":1083
 *         free_dble_2dmat(simhd_ms, N)
 *         free_dble_2dmat(simhd_h, N)
 *         lbfgs_free(xopt)             # <<<<<<<<<<<<<<
 *         printf("Error in function mssne_implem of module cyfastpyx: out of memory for popt")
 *         exit(EXIT_FAILURE)
 */
    lbfgs_free(__pyx_v_xopt);

    /* "fmsne_implem.pyx":1084
 *         free_dble_2dmat(simhd_h, N)
 *         lbfgs_free(xopt)
 *         printf("Error in function mssne_implem of module cyfastpyx: out of memory for popt")             # <<<<<<<<<<<<<<
 *         exit(EXIT_FAILURE)
 *     # Filling popt
 */
    (void)(printf(((char const *)"Error in function mssne_implem of module cyfastpyx: out of memory for popt")));

    /* "fmsne_implem.pyx":1085
 *         lbfgs_free(xopt)
 *         printf("Error in function mssne_implem of module cyfastpyx: out of memory for popt")
 *         exit(EXIT_FAILURE)             # <<<<<<<<<<<<<<
 *     # Filling popt
 *     popt.N = N
 */
    exit(EXIT_FAILURE);

    /* "fmsne_implem.pyx":1076
 *     # Structure gathering the data which are necessary to evaluate the cost function and the gradient
 *     cdef OpMssne* popt = <OpMssne*> PyMem_Malloc(sizeof(OpMssne))
 *     if popt is NULL:             # <<<<<<<<<<<<<<
 *         free_dble_2dmat(ds_hd, N)
 *         free_dble_2dmat(tau_h, L)
 */
  }

  /* "fmsne_implem.pyx":1087
 *         exit(EXIT_FAILURE)
 *     # Filling popt
 *     popt.N = N             # <<<<<<<<<<<<<<
 *     popt.N_1 = K_star
 *     popt.n_components = n_components
 */
  __pyx_v_popt->N = __pyx_v_N;

  /* "fmsne_implem.pyx":1088
 *     # Filling popt
 *     popt.N = N
 *     popt.N_1 = K_star             # <<<<<<<<<<<<<<
 *     popt.n_components = n_components
 *     popt.sstx = shdp
 */
  __pyx_v_popt->N_1 = __pyx_v_K_star;

  /* "fmsne_implem.pyx":1089
 *     popt.N = N
 *     popt.N_1 = K_star
 *     popt.n_components = n_components             # <<<<<<<<<<<<<<
 *     popt.sstx = shdp
 *     popt.simhd_ms = simhd_ms
 */
  __pyx_v_popt->n_components = __pyx_v_n_components;

  /* "fmsne_implem.pyx":1090
 *     popt.N_1 = K_star
 *     popt.n_components = n_components
 *     popt.sstx = shdp             # <<<<<<<<<<<<<<
 *     popt.simhd_ms = simhd_ms
 *     popt.simld_ms = <double*> PyMem_Malloc(K_star*sizeof(double))
 */
  __pyx_v_popt->sstx = __pyx_v_shdp;

  /* "fmsne_implem.pyx":1091
 *     popt.n_components = n_components
 *     popt.sstx = shdp
 *     popt.simhd_ms = simhd_ms             # <<<<<<<<<<<<<<
 *     popt.simld_ms = <double*> PyMem_Malloc(K_star*sizeof(double))
 *     if popt.simld_ms is NULL:
 */
  __pyx_v_popt->simhd_ms = __pyx_v_simhd_ms;

  /* "fmsne_implem.pyx":1092
 *     popt.sstx = shdp
 *     popt.simhd_ms = simhd_ms
 *     popt.simld_ms = <double*> PyMem_Malloc(K_star*sizeof(double))             # <<<<<<<<<<<<<<
 *     if popt.simld_ms is NULL:
 *         free_dble_2dmat(ds_hd, N)
 */
  __pyx_v_popt->simld_ms = ((double *)PyMem_Malloc((__pyx_v_K_star * (sizeof(double)))));

  /* "fmsne_implem.pyx":1093
 *     popt.simhd_ms = simhd_ms
 *     popt.simld_ms = <double*> PyMem_Malloc(K_star*sizeof(double))
 *     if popt.simld_ms is NULL:             # <<<<<<<<<<<<<<
 *         free_dble_2dmat(ds_hd, N)
 *         free_dble_2dmat(tau_h, L)
 */
  __pyx_t_1 = ((__pyx_v_popt->simld_ms == NULL) != 0);
  if (__pyx_t_1) {

    /* "fmsne_implem.pyx":1094
 *     popt.simld_ms = <double*> PyMem_Malloc(K_star*sizeof(double))
 *     if popt.simld_ms is NULL:
 *         free_dble_2dmat(ds_hd, N)             # <<<<<<<<<<<<<<
 *         free_dble_2dmat(tau_h, L)
 *         PyMem_Free(p_h)
 */
    __pyx_f_12fmsne_implem_free_dble_2dmat(__pyx_v_ds_hd, __pyx_v_N);

    /* "fmsne_implem.pyx":1095
 *     if popt.simld_ms is NULL:
 *         free_dble_2dmat(ds_hd, N)
 *         free_dble_2dmat(tau_h, L)             # <<<<<<<<<<<<<<
 *         PyMem_Free(p_h)
 *         PyMem_Free(t_h)
 */
    __pyx_f_12fmsne_implem_free_dble_2dmat(__pyx_v_tau_h, __pyx_v_L);

    /* "fmsne_implem.pyx":1096
 *         free_dble_2dmat(ds_hd, N)
 *         free_dble_2dmat(tau_h, L)
 *         PyMem_Free(p_h)             # <<<<<<<<<<<<<<
 *         PyMem_Free(t_h)
 *         free_dble_2dmat(simhd_ms, N)
 */
    PyMem_Free(__pyx_v_p_h);

    /* "fmsne_implem.pyx":1097
 *         free_dble_2dmat(tau_h, L)
 *         PyMem_Free(p_h)
 *         PyMem_Free(t_h)             # <<<<<<<<<<<<<<
 *         free_dble_2dmat(simhd_ms, N)
 *         free_dble_2dmat(simhd_h, N)
 */
    PyMem_Free(__pyx_v_t_h);

    /* "fmsne_implem.pyx":1098
 *         PyMem_Free(p_h)
 *         PyMem_Free(t_h)
 *         free_dble_2dmat(simhd_ms, N)             # <<<<<<<<<<<<<<
 *         free_dble_2dmat(simhd_h, N)
 *         lbfgs_free(xopt)
 */
    __pyx_f_12fmsne_implem_free_dble_2dmat(__pyx_v_simhd_ms, __pyx_v_N);

    /* "fmsne_implem.pyx":1099
 *         PyMem_Free(t_h)
 *         free_dble_2dmat(simhd_ms, N)
 *         free_dble_2dmat(simhd_h, N)             # <<<<<<<<<<<<<<
 *         lbfgs_free(xopt)
 *         PyMem_Free(popt)
 */
    __pyx_f_12fmsne_implem_free_dble_2dmat(__pyx_v_simhd_h, __pyx_v_N);

    /* "fmsne_implem.pyx":1100
 *         free_dble_2dmat(simhd_ms, N)
 *         free_dble_2dmat(simhd_h, N)
 *         lbfgs_free(xopt)             # <<<<<<<<<<<<<<
 *         PyMem_Free(popt)
 *         printf("Error in function mssne_implem of module cyfastpyx: out of memory for popt.simld_ms")
 */
    lbfgs_free(__pyx_v_xopt);

    /* "fmsne_implem.pyx":1101
 *         free_dble_2dmat(simhd_h, N)
 *         lbfgs_free(xopt)
 *         PyMem_Free(popt)             # <<<<<<<<<<<<<<
 *         printf("Error in function mssne_implem of module cyfastpyx: out of memory for popt.simld_ms")
 *         exit(EXIT_FAILURE)
 */
    PyMem_Free(__pyx_v_popt);

    /* "fmsne_implem.pyx":1102
 *         lbfgs_free(xopt)
 *         PyMem_Free(popt)
 *         printf("Error in function mssne_implem of module cyfastpyx: out of memory for popt.simld_ms")             # <<<<<<<<<<<<<<
 *         exit(EXIT_FAILURE)
 *     popt.simld_h = alloc_dble_2dmat(L, K_star)
 */
    (void)(printf(((char const *)"Error in function mssne_implem of module cyfastpyx: out of memory for popt.simld_ms")));

    /* "fmsne_implem.pyx":1103
 *         PyMem_Free(popt)
 *         printf("Error in function mssne_implem of module cyfastpyx: out of memory for popt.simld_ms")
 *         exit(EXIT_FAILURE)             # <<<<<<<<<<<<<<
 *     popt.simld_h = alloc_dble_2dmat(L, K_star)
 *     if popt.simld_h is NULL:
 */
    exit(EXIT_FAILURE);

    /* "fmsne_implem.pyx":1093
 *     popt.simhd_ms = simhd_ms
 *     popt.simld_ms = <double*> PyMem_Malloc(K_star*sizeof(double))
 *     if popt.simld_ms is NULL:             # <<<<<<<<<<<<<<
 *         free_dble_2dmat(ds_hd, N)
 *         free_dble_2dmat(tau_h, L)
 */
  }

  /* "fmsne_implem.pyx":1104
 *         printf("Error in function mssne_implem of module cyfastpyx: out of memory for popt.simld_ms")
 *         exit(EXIT_FAILURE)
 *     popt.simld_h = alloc_dble_2dmat(L, K_star)             # <<<<<<<<<<<<<<
 *     if popt.simld_h is NULL:
 *         free_dble_2dmat(ds_hd, N)
 */
  __pyx_v_popt->simld_h = __pyx_f_12fmsne_implem_alloc_dble_2dmat(__pyx_v_L, __pyx_v_K_star);

  /* "fmsne_implem.pyx":1105
 *         exit(EXIT_FAILURE)
 *     popt.simld_h = alloc_dble_2dmat(L, K_star)
 *     if popt.simld_h is NULL:             # <<<<<<<<<<<<<<
 *         free_dble_2dmat(ds_hd, N)
 *         free_dble_2dmat(tau_h, L)
 */
  __pyx_t_1 = ((__pyx_v_popt->simld_h == NULL) != 0);
  if (__pyx_t_1) {

    /* "fmsne_implem.pyx":1106
 *     popt.simld_h = alloc_dble_2dmat(L, K_star)
 *     if popt.simld_h is NULL:
 *         free_dble_2dmat(ds_hd, N)             # <<<<<<<<<<<<<<
 *         free_dble_2dmat(tau_h, L)
 *         PyMem_Free(p_h)
 */
    __pyx_f_12fmsne_implem_free_dble_2dmat(__pyx_v_ds_hd, __pyx_v_N);

    /* "fmsne_implem.pyx":1107
 *     if popt.simld_h is NULL:
 *         free_dble_2dmat(ds_hd, N)
 *         free_dble_2dmat(tau_h, L)             # <<<<<<<<<<<<<<
 *         PyMem_Free(p_h)
 *         PyMem_Free(t_h)
 */
    __pyx_f_12fmsne_implem_free_dble_2dmat(__pyx_v_tau_h, __pyx_v_L);

    /* "fmsne_implem.pyx":1108
 *         free_dble_2dmat(ds_hd, N)
 *         free_dble_2dmat(tau_h, L)
 *         PyMem_Free(p_h)             # <<<<<<<<<<<<<<
 *         PyMem_Free(t_h)
 *         free_dble_2dmat(simhd_ms, N)
 */
    PyMem_Free(__pyx_v_p_h);

    /* "fmsne_implem.pyx":1109
 *         free_dble_2dmat(tau_h, L)
 *         PyMem_Free(p_h)
 *         PyMem_Free(t_h)             # <<<<<<<<<<<<<<
 *         free_dble_2dmat(simhd_ms, N)
 *         free_dble_2dmat(simhd_h, N)
 */
    PyMem_Free(__pyx_v_t_h);

    /* "fmsne_implem.pyx":1110
 *         PyMem_Free(p_h)
 *         PyMem_Free(t_h)
 *         free_dble_2dmat(simhd_ms, N)             # <<<<<<<<<<<<<<
 *         free_dble_2dmat(simhd_h, N)
 *         lbfgs_free(xopt)
 */
    __pyx_f_12fmsne_implem_free_dble_2dmat(__pyx_v_simhd_ms, __pyx_v_N);

    /* "fmsne_implem.pyx":1111
 *         PyMem_Free(t_h)
 *         free_dble_2dmat(simhd_ms, N)
 *         free_dble_2dmat(simhd_h, N)             # <<<<<<<<<<<<<<
 *         lbfgs_free(xopt)
 *         PyMem_Free(popt.simld_ms)
 */
    __pyx_f_12fmsne_implem_free_dble_2dmat(__pyx_v_simhd_h, __pyx_v_N);

    /* "fmsne_implem.pyx":1112
 *         free_dble_2dmat(simhd_ms, N)
 *         free_dble_2dmat(simhd_h, N)
 *         lbfgs_free(xopt)             # <<<<<<<<<<<<<<
 *         PyMem_Free(popt.simld_ms)
 *         PyMem_Free(popt)
 */
    lbfgs_free(__pyx_v_xopt);

    /* "fmsne_implem.pyx":1113
 *         free_dble_2dmat(simhd_h, N)
 *         lbfgs_free(xopt)
 *         PyMem_Free(popt.simld_ms)             # <<<<<<<<<<<<<<
 *         PyMem_Free(popt)
 *         printf("Error in function mssne_implem of module cyfastpyx: out of memory for popt.simld_h")
 */
    PyMem_Free(__pyx_v_popt->simld_ms);

    /* "fmsne_implem.pyx":1114
 *         lbfgs_free(xopt)
 *         PyMem_Free(popt.simld_ms)
 *         PyMem_Free(popt)             # <<<<<<<<<<<<<<
 *         printf("Error in function mssne_implem of module cyfastpyx: out of memory for popt.simld_h")
 *         exit(EXIT_FAILURE)
 */
    PyMem_Free(__pyx_v_popt);

    /* "fmsne_implem.pyx":1115
 *         PyMem_Free(popt.simld_ms)
 *         PyMem_Free(popt)
 *         printf("Error in function mssne_implem of module cyfastpyx: out of memory for popt.simld_h")             # <<<<<<<<<<<<<<
 *         exit(EXIT_FAILURE)
 * 
 */
    (void)(printf(((char const *)"Error in function mssne_implem of module cyfastpyx: out of memory for popt.simld_h")));

    /* "fmsne_implem.pyx":1116
 *         PyMem_Free(popt)
 *         printf("Error in function mssne_implem of module cyfastpyx: out of memory for popt.simld_h")
 *         exit(EXIT_FAILURE)             # <<<<<<<<<<<<<<
 * 
 *     # Parameters of the L-BFGS optimization
 */
    exit(EXIT_FAILURE);

    /* "fmsne_implem.pyx":1105
 *         exit(EXIT_FAILURE)
 *     popt.simld_h = alloc_dble_2dmat(L, K_star)
 *     if popt.simld_h is NULL:             # <<<<<<<<<<<<<<
 *         free_dble_2dmat(ds_hd, N)
 *         free_dble_2dmat(tau_h, L)
 */
  }

  /* "fmsne_implem.pyx":1120
 *     # Parameters of the L-BFGS optimization
 *     cdef lbfgs_parameter_t param
 *     cdef lbfgs_parameter_t* pparam = &param             # <<<<<<<<<<<<<<
 *     # Initializing param with default values
 *     lbfgs_parameter_init(pparam)
 */
  __pyx_v_pparam = (&__pyx_v_param);

  /* "fmsne_implem.pyx":1122
 *     cdef lbfgs_parameter_t* pparam = &param
 *     # Initializing param with default values
 *     lbfgs_parameter_init(pparam)             # <<<<<<<<<<<<<<
 *     # Updating some parameters
 *     param.m = maxcor
 */
  lbfgs_parameter_init(__pyx_v_pparam);

  /* "fmsne_implem.pyx":1124
 *     lbfgs_parameter_init(pparam)
 *     # Updating some parameters
 *     param.m = maxcor             # <<<<<<<<<<<<<<
 *     param.epsilon = gtol
 *     param.delta = ftol
 */
  __pyx_v_param.m = __pyx_v_maxcor;

  /* "fmsne_implem.pyx":1125
 *     # Updating some parameters
 *     param.m = maxcor
 *     param.epsilon = gtol             # <<<<<<<<<<<<<<
 *     param.delta = ftol
 *     param.max_iterations = nit_max
 */
  __pyx_v_param.epsilon = __pyx_v_gtol;

  /* "fmsne_implem.pyx":1126
 *     param.m = maxcor
 *     param.epsilon = gtol
 *     param.delta = ftol             # <<<<<<<<<<<<<<
 *     param.max_iterations = nit_max
 *     param.max_linesearch = maxls
 */
  __pyx_v_param.delta = __pyx_v_ftol;

  /* "fmsne_implem.pyx":1127
 *     param.epsilon = gtol
 *     param.delta = ftol
 *     param.max_iterations = nit_max             # <<<<<<<<<<<<<<
 *     param.max_linesearch = maxls
 *     param.past = 1
 */
  __pyx_v_param.max_iterations = __pyx_v_nit_max;

  /* "fmsne_implem.pyx":1128
 *     param.delta = ftol
 *     param.max_iterations = nit_max
 *     param.max_linesearch = maxls             # <<<<<<<<<<<<<<
 *     param.past = 1
 *     # We modify the default values of the minimum and maximum step sizes of the line search because the problem is badly scaled
 */
  __pyx_v_param.max_linesearch = __pyx_v_maxls;

  /* "fmsne_implem.pyx":1129
 *     param.max_iterations = nit_max
 *     param.max_linesearch = maxls
 *     param.past = 1             # <<<<<<<<<<<<<<
 *     # We modify the default values of the minimum and maximum step sizes of the line search because the problem is badly scaled
 *     param.max_step = DBL_MAX
 */
  __pyx_v_param.past = 1;

  /* "fmsne_implem.pyx":1131
 *     param.past = 1
 *     # We modify the default values of the minimum and maximum step sizes of the line search because the problem is badly scaled
 *     param.max_step = DBL_MAX             # <<<<<<<<<<<<<<
 *     param.min_step = DBL_MIN
 * 
 */
  __pyx_v_param.max_step = DBL_MAX;

  /* "fmsne_implem.pyx":1132
 *     # We modify the default values of the minimum and maximum step sizes of the line search because the problem is badly scaled
 *     param.max_step = DBL_MAX
 *     param.min_step = DBL_MIN             # <<<<<<<<<<<<<<
 * 
 *     # k refers to the number of currently considered scales and h to the index of the current scale. Nd will store the inverse of the number of currently considered scales.
 */
  __pyx_v_param.min_step = DBL_MIN;

  /* "fmsne_implem.pyx":1136
 *     # k refers to the number of currently considered scales and h to the index of the current scale. Nd will store the inverse of the number of currently considered scales.
 *     cdef Py_ssize_t k, h
 *     h = L-1             # <<<<<<<<<<<<<<
 *     for k in range(1, L+1, 1):
 *         # Updates related to the current multi-scale optimization step
 */
  __pyx_v_h = (__pyx_v_L - 1);

  /* "fmsne_implem.pyx":1137
 *     cdef Py_ssize_t k, h
 *     h = L-1
 *     for k in range(1, L+1, 1):             # <<<<<<<<<<<<<<
 *         # Updates related to the current multi-scale optimization step
 *         Nd = ms_update_mso_step(k, h, N, K_star, ds_hd, tau_h, simhd_ms, simhd_h)
 */
  __pyx_t_3 = (__pyx_v_L + 1);
  __pyx_t_4 = __pyx_t_3;
  for (__pyx_t_5 = 1; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
    __pyx_v_k = __pyx_t_5;

    /* "fmsne_implem.pyx":1139
 *     for k in range(1, L+1, 1):
 *         # Updates related to the current multi-scale optimization step
 *         Nd = ms_update_mso_step(k, h, N, K_star, ds_hd, tau_h, simhd_ms, simhd_h)             # <<<<<<<<<<<<<<
 *         # Updating the data structure to evaluate the cost function and the gradient
 *         popt.ns = k
 */
    __pyx_v_Nd = __pyx_f_12fmsne_implem_ms_update_mso_step(__pyx_v_k, __pyx_v_h, __pyx_v_N, __pyx_v_K_star, __pyx_v_ds_hd, __pyx_v_tau_h, __pyx_v_simhd_ms, __pyx_v_simhd_h);

    /* "fmsne_implem.pyx":1141
 *         Nd = ms_update_mso_step(k, h, N, K_star, ds_hd, tau_h, simhd_ms, simhd_h)
 *         # Updating the data structure to evaluate the cost function and the gradient
 *         popt.ns = k             # <<<<<<<<<<<<<<
 *         popt.inv_ns = Nd
 *         popt.p_h = &p_h[h]
 */
    __pyx_v_popt->ns = __pyx_v_k;

    /* "fmsne_implem.pyx":1142
 *         # Updating the data structure to evaluate the cost function and the gradient
 *         popt.ns = k
 *         popt.inv_ns = Nd             # <<<<<<<<<<<<<<
 *         popt.p_h = &p_h[h]
 *         popt.t_h = &t_h[h]
 */
    __pyx_v_popt->inv_ns = __pyx_v_Nd;

    /* "fmsne_implem.pyx":1143
 *         popt.ns = k
 *         popt.inv_ns = Nd
 *         popt.p_h = &p_h[h]             # <<<<<<<<<<<<<<
 *         popt.t_h = &t_h[h]
 *         # Performing the optimization
 */
    __pyx_v_popt->p_h = (&(__pyx_v_p_h[__pyx_v_h]));

    /* "fmsne_implem.pyx":1144
 *         popt.inv_ns = Nd
 *         popt.p_h = &p_h[h]
 *         popt.t_h = &t_h[h]             # <<<<<<<<<<<<<<
 *         # Performing the optimization
 *         lbfgs(prod_N_nc, xopt, NULL, mssne_evaluate, NULL, popt, pparam)
 */
    __pyx_v_popt->t_h = (&(__pyx_v_t_h[__pyx_v_h]));

    /* "fmsne_implem.pyx":1146
 *         popt.t_h = &t_h[h]
 *         # Performing the optimization
 *         lbfgs(prod_N_nc, xopt, NULL, mssne_evaluate, NULL, popt, pparam)             # <<<<<<<<<<<<<<
 *         h -= 1
 *     # Gathering the optimized LD coordinates
 */
    (void)(lbfgs(__pyx_v_prod_N_nc, __pyx_v_xopt, NULL, __pyx_f_12fmsne_implem_mssne_evaluate, NULL, __pyx_v_popt, __pyx_v_pparam));

    /* "fmsne_implem.pyx":1147
 *         # Performing the optimization
 *         lbfgs(prod_N_nc, xopt, NULL, mssne_evaluate, NULL, popt, pparam)
 *         h -= 1             # <<<<<<<<<<<<<<
 *     # Gathering the optimized LD coordinates
 *     memcpy(xlds, xopt, shdp)
 */
    __pyx_v_h = (__pyx_v_h - 1);
  }

  /* "fmsne_implem.pyx":1149
 *         h -= 1
 *     # Gathering the optimized LD coordinates
 *     memcpy(xlds, xopt, shdp)             # <<<<<<<<<<<<<<
 * 
 *     # Free the ressources
 */
  (void)(memcpy(__pyx_v_xlds, __pyx_v_xopt, __pyx_v_shdp));

  /* "fmsne_implem.pyx":1152
 * 
 *     # Free the ressources
 *     free_dble_2dmat(ds_hd, N)             # <<<<<<<<<<<<<<
 *     free_dble_2dmat(tau_h, L)
 *     PyMem_Free(p_h)
 */
  __pyx_f_12fmsne_implem_free_dble_2dmat(__pyx_v_ds_hd, __pyx_v_N);

  /* "fmsne_implem.pyx":1153
 *     # Free the ressources
 *     free_dble_2dmat(ds_hd, N)
 *     free_dble_2dmat(tau_h, L)             # <<<<<<<<<<<<<<
 *     PyMem_Free(p_h)
 *     PyMem_Free(t_h)
 */
  __pyx_f_12fmsne_implem_free_dble_2dmat(__pyx_v_tau_h, __pyx_v_L);

  /* "fmsne_implem.pyx":1154
 *     free_dble_2dmat(ds_hd, N)
 *     free_dble_2dmat(tau_h, L)
 *     PyMem_Free(p_h)             # <<<<<<<<<<<<<<
 *     PyMem_Free(t_h)
 *     free_dble_2dmat(simhd_ms, N)
 */
  PyMem_Free(__pyx_v_p_h);

  /* "fmsne_implem.pyx":1155
 *     free_dble_2dmat(tau_h, L)
 *     PyMem_Free(p_h)
 *     PyMem_Free(t_h)             # <<<<<<<<<<<<<<
 *     free_dble_2dmat(simhd_ms, N)
 *     free_dble_2dmat(simhd_h, N)
 */
  PyMem_Free(__pyx_v_t_h);

  /* "fmsne_implem.pyx":1156
 *     PyMem_Free(p_h)
 *     PyMem_Free(t_h)
 *     free_dble_2dmat(simhd_ms, N)             # <<<<<<<<<<<<<<
 *     free_dble_2dmat(simhd_h, N)
 *     lbfgs_free(xopt)
 */
  __pyx_f_12fmsne_implem_free_dble_2dmat(__pyx_v_simhd_ms, __pyx_v_N);

  /* "fmsne_implem.pyx":1157
 *     PyMem_Free(t_h)
 *     free_dble_2dmat(simhd_ms, N)
 *     free_dble_2dmat(simhd_h, N)             # <<<<<<<<<<<<<<
 *     lbfgs_free(xopt)
 *     PyMem_Free(popt.simld_ms)
 */
  __pyx_f_12fmsne_implem_free_dble_2dmat(__pyx_v_simhd_h, __pyx_v_N);

  /* "fmsne_implem.pyx":1158
 *     free_dble_2dmat(simhd_ms, N)
 *     free_dble_2dmat(simhd_h, N)
 *     lbfgs_free(xopt)             # <<<<<<<<<<<<<<
 *     PyMem_Free(popt.simld_ms)
 *     free_dble_2dmat(popt.simld_h, L)
 */
  lbfgs_free(__pyx_v_xopt);

  /* "fmsne_implem.pyx":1159
 *     free_dble_2dmat(simhd_h, N)
 *     lbfgs_free(xopt)
 *     PyMem_Free(popt.simld_ms)             # <<<<<<<<<<<<<<
 *     free_dble_2dmat(popt.simld_h, L)
 *     PyMem_Free(popt)
 */
  PyMem_Free(__pyx_v_popt->simld_ms);

  /* "fmsne_implem.pyx":1160
 *     lbfgs_free(xopt)
 *     PyMem_Free(popt.simld_ms)
 *     free_dble_2dmat(popt.simld_h, L)             # <<<<<<<<<<<<<<
 *     PyMem_Free(popt)
 * 
 */
  __pyx_f_12fmsne_implem_free_dble_2dmat(__pyx_v_popt->simld_h, __pyx_v_L);

  /* "fmsne_implem.pyx":1161
 *     PyMem_Free(popt.simld_ms)
 *     free_dble_2dmat(popt.simld_h, L)
 *     PyMem_Free(popt)             # <<<<<<<<<<<<<<
 * 
 * #######################################################
 */
  PyMem_Free(__pyx_v_popt);

  /* "fmsne_implem.pyx":949
 *     return fx
 * 
 * cpdef inline void mssne_implem(double[::1] X_hds, double[::1] X_lds, int N, int d_hds, int n_components, bint fit_U, int nit_max, double gtol, double ftol, int maxls, int maxcor, int L_min):             # <<<<<<<<<<<<<<
 *     """
 *     Cython implementation of Ms SNE.
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* Python wrapper */
static PyObject *__pyx_pw_12fmsne_implem_1mssne_implem(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12fmsne_implem_mssne_implem[] = "\n    Cython implementation of Ms SNE.\n    L_min is provided in argument.\n    X_hds and X_lds must both be in a 1d array\n    ";
static PyObject *__pyx_pw_12fmsne_implem_1mssne_implem(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  __Pyx_memviewslice __pyx_v_X_hds = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_X_lds = { 0, 0, { 0 }, { 0 }, { 0 } };
  int __pyx_v_N;
  int __pyx_v_d_hds;
  int __pyx_v_n_components;
  int __pyx_v_fit_U;
  int __pyx_v_nit_max;
  double __pyx_v_gtol;
  double __pyx_v_ftol;
  int __pyx_v_maxls;
  int __pyx_v_maxcor;
  int __pyx_v_L_min;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("mssne_implem (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_X_hds,&__pyx_n_s_X_lds,&__pyx_n_s_N,&__pyx_n_s_d_hds,&__pyx_n_s_n_components,&__pyx_n_s_fit_U,&__pyx_n_s_nit_max,&__pyx_n_s_gtol,&__pyx_n_s_ftol,&__pyx_n_s_maxls,&__pyx_n_s_maxcor,&__pyx_n_s_L_min,0};
    PyObject* values[12] = {0,0,0,0,0,0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case 12: values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
        CYTHON_FALLTHROUGH;
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        CYTHON_FALLTHROUGH;
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        CYTHON_FALLTHROUGH;
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_X_hds)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_X_lds)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("mssne_implem", 1, 12, 12, 1); __PYX_ERR(0, 949, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_N)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("mssne_implem", 1, 12, 12, 2); __PYX_ERR(0, 949, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_d_hds)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("mssne_implem", 1, 12, 12, 3); __PYX_ERR(0, 949, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_n_components)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("mssne_implem", 1, 12, 12, 4); __PYX_ERR(0, 949, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_fit_U)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("mssne_implem", 1, 12, 12, 5); __PYX_ERR(0, 949, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (likely((values[6] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_nit_max)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("mssne_implem", 1, 12, 12, 6); __PYX_ERR(0, 949, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (likely((values[7] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_gtol)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("mssne_implem", 1, 12, 12, 7); __PYX_ERR(0, 949, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  8:
        if (likely((values[8] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ftol)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("mssne_implem", 1, 12, 12, 8); __PYX_ERR(0, 949, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  9:
        if (likely((values[9] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_maxls)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("mssne_implem", 1, 12, 12, 9); __PYX_ERR(0, 949, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 10:
        if (likely((values[10] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_maxcor)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("mssne_implem", 1, 12, 12, 10); __PYX_ERR(0, 949, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 11:
        if (likely((values[11] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_L_min)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("mssne_implem", 1, 12, 12, 11); __PYX_ERR(0, 949, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "mssne_implem") < 0)) __PYX_ERR(0, 949, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 12) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
      values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
      values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
      values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
      values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
      values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
    }
    __pyx_v_X_hds = __Pyx_PyObject_to_MemoryviewSlice_dc_double(values[0], PyBUF_WRITABLE); if (unlikely(!__pyx_v_X_hds.memview)) __PYX_ERR(0, 949, __pyx_L3_error)
    __pyx_v_X_lds = __Pyx_PyObject_to_MemoryviewSlice_dc_double(values[1], PyBUF_WRITABLE); if (unlikely(!__pyx_v_X_lds.memview)) __PYX_ERR(0, 949, __pyx_L3_error)
    __pyx_v_N = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_N == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 949, __pyx_L3_error)
    __pyx_v_d_hds = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_d_hds == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 949, __pyx_L3_error)
    __pyx_v_n_components = __Pyx_PyInt_As_int(values[4]); if (unlikely((__pyx_v_n_components == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 949, __pyx_L3_error)
    __pyx_v_fit_U = __Pyx_PyObject_IsTrue(values[5]); if (unlikely((__pyx_v_fit_U == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 949, __pyx_L3_error)
    __pyx_v_nit_max = __Pyx_PyInt_As_int(values[6]); if (unlikely((__pyx_v_nit_max == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 949, __pyx_L3_error)
    __pyx_v_gtol = __pyx_PyFloat_AsDouble(values[7]); if (unlikely((__pyx_v_gtol == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 949, __pyx_L3_error)
    __pyx_v_ftol = __pyx_PyFloat_AsDouble(values[8]); if (unlikely((__pyx_v_ftol == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 949, __pyx_L3_error)
    __pyx_v_maxls = __Pyx_PyInt_As_int(values[9]); if (unlikely((__pyx_v_maxls == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 949, __pyx_L3_error)
    __pyx_v_maxcor = __Pyx_PyInt_As_int(values[10]); if (unlikely((__pyx_v_maxcor == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 949, __pyx_L3_error)
    __pyx_v_L_min = __Pyx_PyInt_As_int(values[11]); if (unlikely((__pyx_v_L_min == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 949, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("mssne_implem", 1, 12, 12, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 949, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("fmsne_implem.mssne_implem", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_12fmsne_implem_mssne_implem(__pyx_self, __pyx_v_X_hds, __pyx_v_X_lds, __pyx_v_N, __pyx_v_d_hds, __pyx_v_n_components, __pyx_v_fit_U, __pyx_v_nit_max, __pyx_v_gtol, __pyx_v_ftol, __pyx_v_maxls, __pyx_v_maxcor, __pyx_v_L_min);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12fmsne_implem_mssne_implem(CYTHON_UNUSED PyObject *__pyx_self, __Pyx_memviewslice __pyx_v_X_hds, __Pyx_memviewslice __pyx_v_X_lds, int __pyx_v_N, int __pyx_v_d_hds, int __pyx_v_n_components, int __pyx_v_fit_U, int __pyx_v_nit_max, double __pyx_v_gtol, double __pyx_v_ftol, int __pyx_v_maxls, int __pyx_v_maxcor, int __pyx_v_L_min) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("mssne_implem", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_void_to_None(__pyx_f_12fmsne_implem_mssne_implem(__pyx_v_X_hds, __pyx_v_X_lds, __pyx_v_N, __pyx_v_d_hds, __pyx_v_n_components, __pyx_v_fit_U, __pyx_v_nit_max, __pyx_v_gtol, __pyx_v_ftol, __pyx_v_maxls, __pyx_v_maxcor, __pyx_v_L_min, 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 949, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("fmsne_implem.mssne_implem", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __PYX_XDEC_MEMVIEW(&__pyx_v_X_hds, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_X_lds, 1);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "fmsne_implem.pyx":1167
 * #######################################################
 * 
 * cdef inline void mstsne_symmetrize(Py_ssize_t N_1, double** a, double** a_sym) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     Stores a symmetric version of a in the top half of a_sym.
 */

static CYTHON_INLINE void __pyx_f_12fmsne_implem_mstsne_symmetrize(Py_ssize_t __pyx_v_N_1, double **__pyx_v_a, double **__pyx_v_a_sym) {
  double __pyx_v_tot;
  Py_ssize_t __pyx_v_i;
  Py_ssize_t __pyx_v_j;
  Py_ssize_t __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  Py_ssize_t __pyx_t_7;
  Py_ssize_t __pyx_t_8;

  /* "fmsne_implem.pyx":1171
 *     Stores a symmetric version of a in the top half of a_sym.
 *     """
 *     cdef double tot = 0.0             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t i, j
 *     for i in range(N_1):
 */
  __pyx_v_tot = 0.0;

  /* "fmsne_implem.pyx":1173
 *     cdef double tot = 0.0
 *     cdef Py_ssize_t i, j
 *     for i in range(N_1):             # <<<<<<<<<<<<<<
 *         for j in range(i, N_1, 1):
 *             a_sym[i][j] = a[i][j] + a[j+1][i]
 */
  __pyx_t_1 = __pyx_v_N_1;
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "fmsne_implem.pyx":1174
 *     cdef Py_ssize_t i, j
 *     for i in range(N_1):
 *         for j in range(i, N_1, 1):             # <<<<<<<<<<<<<<
 *             a_sym[i][j] = a[i][j] + a[j+1][i]
 *             tot += a_sym[i][j]
 */
    __pyx_t_4 = __pyx_v_N_1;
    __pyx_t_5 = __pyx_t_4;
    for (__pyx_t_6 = __pyx_v_i; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
      __pyx_v_j = __pyx_t_6;

      /* "fmsne_implem.pyx":1175
 *     for i in range(N_1):
 *         for j in range(i, N_1, 1):
 *             a_sym[i][j] = a[i][j] + a[j+1][i]             # <<<<<<<<<<<<<<
 *             tot += a_sym[i][j]
 *     tot = 1.0/(2.0*tot)
 */
      ((__pyx_v_a_sym[__pyx_v_i])[__pyx_v_j]) = (((__pyx_v_a[__pyx_v_i])[__pyx_v_j]) + ((__pyx_v_a[(__pyx_v_j + 1)])[__pyx_v_i]));

      /* "fmsne_implem.pyx":1176
 *         for j in range(i, N_1, 1):
 *             a_sym[i][j] = a[i][j] + a[j+1][i]
 *             tot += a_sym[i][j]             # <<<<<<<<<<<<<<
 *     tot = 1.0/(2.0*tot)
 *     for i in range(N_1):
 */
      __pyx_v_tot = (__pyx_v_tot + ((__pyx_v_a_sym[__pyx_v_i])[__pyx_v_j]));
    }
  }

  /* "fmsne_implem.pyx":1177
 *             a_sym[i][j] = a[i][j] + a[j+1][i]
 *             tot += a_sym[i][j]
 *     tot = 1.0/(2.0*tot)             # <<<<<<<<<<<<<<
 *     for i in range(N_1):
 *         for j in range(i, N_1, 1):
 */
  __pyx_v_tot = (1.0 / (2.0 * __pyx_v_tot));

  /* "fmsne_implem.pyx":1178
 *             tot += a_sym[i][j]
 *     tot = 1.0/(2.0*tot)
 *     for i in range(N_1):             # <<<<<<<<<<<<<<
 *         for j in range(i, N_1, 1):
 *             a_sym[i][j] *= tot
 */
  __pyx_t_1 = __pyx_v_N_1;
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "fmsne_implem.pyx":1179
 *     tot = 1.0/(2.0*tot)
 *     for i in range(N_1):
 *         for j in range(i, N_1, 1):             # <<<<<<<<<<<<<<
 *             a_sym[i][j] *= tot
 * 
 */
    __pyx_t_4 = __pyx_v_N_1;
    __pyx_t_5 = __pyx_t_4;
    for (__pyx_t_6 = __pyx_v_i; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
      __pyx_v_j = __pyx_t_6;

      /* "fmsne_implem.pyx":1180
 *     for i in range(N_1):
 *         for j in range(i, N_1, 1):
 *             a_sym[i][j] *= tot             # <<<<<<<<<<<<<<
 * 
 * cdef struct OpMstsne:
 */
      __pyx_t_7 = __pyx_v_i;
      __pyx_t_8 = __pyx_v_j;
      ((__pyx_v_a_sym[__pyx_t_7])[__pyx_t_8]) = (((__pyx_v_a_sym[__pyx_t_7])[__pyx_t_8]) * __pyx_v_tot);
    }
  }

  /* "fmsne_implem.pyx":1167
 * #######################################################
 * 
 * cdef inline void mstsne_symmetrize(Py_ssize_t N_1, double** a, double** a_sym) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     Stores a symmetric version of a in the top half of a_sym.
 */

  /* function exit code */
}

/* "fmsne_implem.pyx":1189
 *     double** simld          # Memory to store the LD similarities between all pairs of distinct data points, hence with N x N-1 elements
 * 
 * cdef inline lbfgsfloatval_t mstsne_evaluate(void* instance, const lbfgsfloatval_t* x, lbfgsfloatval_t* g, const int n, const lbfgsfloatval_t step) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     Computes cost function and gradient for the current LD coordinates.
 */

static CYTHON_INLINE lbfgsfloatval_t __pyx_f_12fmsne_implem_mstsne_evaluate(void *__pyx_v_instance, lbfgsfloatval_t const *__pyx_v_x, lbfgsfloatval_t *__pyx_v_g, int const __pyx_v_n, CYTHON_UNUSED lbfgsfloatval_t const __pyx_v_step) {
  struct __pyx_t_12fmsne_implem_OpMstsne *__pyx_v_popt;
  lbfgsfloatval_t __pyx_v_fx;
  Py_ssize_t __pyx_v_i;
  Py_ssize_t __pyx_v_j;
  Py_ssize_t __pyx_v_k;
  Py_ssize_t __pyx_v_idx;
  Py_ssize_t __pyx_v_idxj;
  double __pyx_v_d;
  double __pyx_v_a;
  double __pyx_v_b;
  double const *__pyx_v_xi;
  lbfgsfloatval_t __pyx_r;
  Py_ssize_t __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  int __pyx_t_7;
  Py_ssize_t __pyx_t_8;
  Py_ssize_t __pyx_t_9;
  Py_ssize_t __pyx_t_10;
  Py_ssize_t __pyx_t_11;
  int __pyx_t_12;
  int __pyx_t_13;

  /* "fmsne_implem.pyx":1196
 *     Pay attention to the fact that only the top half of popt.simhd_ms can be used.
 *     """
 *     cdef OpMstsne* popt = <OpMstsne*> instance             # <<<<<<<<<<<<<<
 *     # Cost function value to return
 *     cdef lbfgsfloatval_t fx = 0.0
 */
  __pyx_v_popt = ((struct __pyx_t_12fmsne_implem_OpMstsne *)__pyx_v_instance);

  /* "fmsne_implem.pyx":1198
 *     cdef OpMstsne* popt = <OpMstsne*> instance
 *     # Cost function value to return
 *     cdef lbfgsfloatval_t fx = 0.0             # <<<<<<<<<<<<<<
 *     # Initializing the gradient to 0
 *     memset(g, 0, popt.sstx)
 */
  __pyx_v_fx = 0.0;

  /* "fmsne_implem.pyx":1200
 *     cdef lbfgsfloatval_t fx = 0.0
 *     # Initializing the gradient to 0
 *     memset(g, 0, popt.sstx)             # <<<<<<<<<<<<<<
 *     # Index variables
 *     cdef Py_ssize_t i, j, k, idx, idxj
 */
  (void)(memset(__pyx_v_g, 0, __pyx_v_popt->sstx));

  /* "fmsne_implem.pyx":1208
 *     cdef const double* xi
 *     # Computing the numerators of the LD similarities as well as the denominator
 *     idx = 0             # <<<<<<<<<<<<<<
 *     d = 0.0
 *     for i in range(popt.N_1):
 */
  __pyx_v_idx = 0;

  /* "fmsne_implem.pyx":1209
 *     # Computing the numerators of the LD similarities as well as the denominator
 *     idx = 0
 *     d = 0.0             # <<<<<<<<<<<<<<
 *     for i in range(popt.N_1):
 *         xi = &x[idx]
 */
  __pyx_v_d = 0.0;

  /* "fmsne_implem.pyx":1210
 *     idx = 0
 *     d = 0.0
 *     for i in range(popt.N_1):             # <<<<<<<<<<<<<<
 *         xi = &x[idx]
 *         idx += popt.n_components
 */
  __pyx_t_1 = __pyx_v_popt->N_1;
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "fmsne_implem.pyx":1211
 *     d = 0.0
 *     for i in range(popt.N_1):
 *         xi = &x[idx]             # <<<<<<<<<<<<<<
 *         idx += popt.n_components
 *         idxj = idx
 */
    __pyx_v_xi = (&(__pyx_v_x[__pyx_v_idx]));

    /* "fmsne_implem.pyx":1212
 *     for i in range(popt.N_1):
 *         xi = &x[idx]
 *         idx += popt.n_components             # <<<<<<<<<<<<<<
 *         idxj = idx
 *         for j in range(i, popt.N_1, 1):
 */
    __pyx_v_idx = (__pyx_v_idx + __pyx_v_popt->n_components);

    /* "fmsne_implem.pyx":1213
 *         xi = &x[idx]
 *         idx += popt.n_components
 *         idxj = idx             # <<<<<<<<<<<<<<
 *         for j in range(i, popt.N_1, 1):
 *             popt.simld[i][j] = 1.0 + sqeucl_dist_ptr(xi, &x[idxj], popt.n_components)
 */
    __pyx_v_idxj = __pyx_v_idx;

    /* "fmsne_implem.pyx":1214
 *         idx += popt.n_components
 *         idxj = idx
 *         for j in range(i, popt.N_1, 1):             # <<<<<<<<<<<<<<
 *             popt.simld[i][j] = 1.0 + sqeucl_dist_ptr(xi, &x[idxj], popt.n_components)
 *             k = j+1
 */
    __pyx_t_4 = __pyx_v_popt->N_1;
    __pyx_t_5 = __pyx_t_4;
    for (__pyx_t_6 = __pyx_v_i; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
      __pyx_v_j = __pyx_t_6;

      /* "fmsne_implem.pyx":1215
 *         idxj = idx
 *         for j in range(i, popt.N_1, 1):
 *             popt.simld[i][j] = 1.0 + sqeucl_dist_ptr(xi, &x[idxj], popt.n_components)             # <<<<<<<<<<<<<<
 *             k = j+1
 *             popt.simld[k][i] = 1.0/popt.simld[i][j]
 */
      ((__pyx_v_popt->simld[__pyx_v_i])[__pyx_v_j]) = (1.0 + __pyx_f_12fmsne_implem_sqeucl_dist_ptr(__pyx_v_xi, (&(__pyx_v_x[__pyx_v_idxj])), __pyx_v_popt->n_components));

      /* "fmsne_implem.pyx":1216
 *         for j in range(i, popt.N_1, 1):
 *             popt.simld[i][j] = 1.0 + sqeucl_dist_ptr(xi, &x[idxj], popt.n_components)
 *             k = j+1             # <<<<<<<<<<<<<<
 *             popt.simld[k][i] = 1.0/popt.simld[i][j]
 *             d += popt.simld[k][i]
 */
      __pyx_v_k = (__pyx_v_j + 1);

      /* "fmsne_implem.pyx":1217
 *             popt.simld[i][j] = 1.0 + sqeucl_dist_ptr(xi, &x[idxj], popt.n_components)
 *             k = j+1
 *             popt.simld[k][i] = 1.0/popt.simld[i][j]             # <<<<<<<<<<<<<<
 *             d += popt.simld[k][i]
 *             idxj += popt.n_components
 */
      ((__pyx_v_popt->simld[__pyx_v_k])[__pyx_v_i]) = (1.0 / ((__pyx_v_popt->simld[__pyx_v_i])[__pyx_v_j]));

      /* "fmsne_implem.pyx":1218
 *             k = j+1
 *             popt.simld[k][i] = 1.0/popt.simld[i][j]
 *             d += popt.simld[k][i]             # <<<<<<<<<<<<<<
 *             idxj += popt.n_components
 *     d *= 2.0
 */
      __pyx_v_d = (__pyx_v_d + ((__pyx_v_popt->simld[__pyx_v_k])[__pyx_v_i]));

      /* "fmsne_implem.pyx":1219
 *             popt.simld[k][i] = 1.0/popt.simld[i][j]
 *             d += popt.simld[k][i]
 *             idxj += popt.n_components             # <<<<<<<<<<<<<<
 *     d *= 2.0
 *     if d < FLOAT64_EPS:
 */
      __pyx_v_idxj = (__pyx_v_idxj + __pyx_v_popt->n_components);
    }
  }

  /* "fmsne_implem.pyx":1220
 *             d += popt.simld[k][i]
 *             idxj += popt.n_components
 *     d *= 2.0             # <<<<<<<<<<<<<<
 *     if d < FLOAT64_EPS:
 *         d = FLOAT64_EPS
 */
  __pyx_v_d = (__pyx_v_d * 2.0);

  /* "fmsne_implem.pyx":1221
 *             idxj += popt.n_components
 *     d *= 2.0
 *     if d < FLOAT64_EPS:             # <<<<<<<<<<<<<<
 *         d = FLOAT64_EPS
 *     # Stores the index of the currently considered data point in x
 */
  __pyx_t_7 = ((__pyx_v_d < __pyx_v_12fmsne_implem_FLOAT64_EPS) != 0);
  if (__pyx_t_7) {

    /* "fmsne_implem.pyx":1222
 *     d *= 2.0
 *     if d < FLOAT64_EPS:
 *         d = FLOAT64_EPS             # <<<<<<<<<<<<<<
 *     # Stores the index of the currently considered data point in x
 *     idx = 0
 */
    __pyx_v_d = __pyx_v_12fmsne_implem_FLOAT64_EPS;

    /* "fmsne_implem.pyx":1221
 *             idxj += popt.n_components
 *     d *= 2.0
 *     if d < FLOAT64_EPS:             # <<<<<<<<<<<<<<
 *         d = FLOAT64_EPS
 *     # Stores the index of the currently considered data point in x
 */
  }

  /* "fmsne_implem.pyx":1224
 *         d = FLOAT64_EPS
 *     # Stores the index of the currently considered data point in x
 *     idx = 0             # <<<<<<<<<<<<<<
 *     # For each data point
 *     for i in range(popt.N_1):
 */
  __pyx_v_idx = 0;

  /* "fmsne_implem.pyx":1226
 *     idx = 0
 *     # For each data point
 *     for i in range(popt.N_1):             # <<<<<<<<<<<<<<
 *         # Currently considered data point
 *         xi = &x[idx]
 */
  __pyx_t_1 = __pyx_v_popt->N_1;
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "fmsne_implem.pyx":1228
 *     for i in range(popt.N_1):
 *         # Currently considered data point
 *         xi = &x[idx]             # <<<<<<<<<<<<<<
 *         idxj = idx + popt.n_components
 *         for j in range(i, popt.N_1, 1):
 */
    __pyx_v_xi = (&(__pyx_v_x[__pyx_v_idx]));

    /* "fmsne_implem.pyx":1229
 *         # Currently considered data point
 *         xi = &x[idx]
 *         idxj = idx + popt.n_components             # <<<<<<<<<<<<<<
 *         for j in range(i, popt.N_1, 1):
 *             # We use the fact that the similarities are symmetric to double fx afterwards.
 */
    __pyx_v_idxj = (__pyx_v_idx + __pyx_v_popt->n_components);

    /* "fmsne_implem.pyx":1230
 *         xi = &x[idx]
 *         idxj = idx + popt.n_components
 *         for j in range(i, popt.N_1, 1):             # <<<<<<<<<<<<<<
 *             # We use the fact that the similarities are symmetric to double fx afterwards.
 *             fx += log(popt.simld[i][j]) * popt.simhd_ms[i][j]
 */
    __pyx_t_4 = __pyx_v_popt->N_1;
    __pyx_t_5 = __pyx_t_4;
    for (__pyx_t_6 = __pyx_v_i; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
      __pyx_v_j = __pyx_t_6;

      /* "fmsne_implem.pyx":1232
 *         for j in range(i, popt.N_1, 1):
 *             # We use the fact that the similarities are symmetric to double fx afterwards.
 *             fx += log(popt.simld[i][j]) * popt.simhd_ms[i][j]             # <<<<<<<<<<<<<<
 *             k = j+1
 *             a = (popt.simhd_ms[i][j] - popt.simld[k][i]/d) * popt.simld[k][i]
 */
      __pyx_v_fx = (__pyx_v_fx + (log(((__pyx_v_popt->simld[__pyx_v_i])[__pyx_v_j])) * ((__pyx_v_popt->simhd_ms[__pyx_v_i])[__pyx_v_j])));

      /* "fmsne_implem.pyx":1233
 *             # We use the fact that the similarities are symmetric to double fx afterwards.
 *             fx += log(popt.simld[i][j]) * popt.simhd_ms[i][j]
 *             k = j+1             # <<<<<<<<<<<<<<
 *             a = (popt.simhd_ms[i][j] - popt.simld[k][i]/d) * popt.simld[k][i]
 *             for k in range(popt.n_components):
 */
      __pyx_v_k = (__pyx_v_j + 1);

      /* "fmsne_implem.pyx":1234
 *             fx += log(popt.simld[i][j]) * popt.simhd_ms[i][j]
 *             k = j+1
 *             a = (popt.simhd_ms[i][j] - popt.simld[k][i]/d) * popt.simld[k][i]             # <<<<<<<<<<<<<<
 *             for k in range(popt.n_components):
 *                 b = a * (xi[k] - x[idxj])
 */
      __pyx_v_a = ((((__pyx_v_popt->simhd_ms[__pyx_v_i])[__pyx_v_j]) - (((__pyx_v_popt->simld[__pyx_v_k])[__pyx_v_i]) / __pyx_v_d)) * ((__pyx_v_popt->simld[__pyx_v_k])[__pyx_v_i]));

      /* "fmsne_implem.pyx":1235
 *             k = j+1
 *             a = (popt.simhd_ms[i][j] - popt.simld[k][i]/d) * popt.simld[k][i]
 *             for k in range(popt.n_components):             # <<<<<<<<<<<<<<
 *                 b = a * (xi[k] - x[idxj])
 *                 g[idx+k] += b
 */
      __pyx_t_8 = __pyx_v_popt->n_components;
      __pyx_t_9 = __pyx_t_8;
      for (__pyx_t_10 = 0; __pyx_t_10 < __pyx_t_9; __pyx_t_10+=1) {
        __pyx_v_k = __pyx_t_10;

        /* "fmsne_implem.pyx":1236
 *             a = (popt.simhd_ms[i][j] - popt.simld[k][i]/d) * popt.simld[k][i]
 *             for k in range(popt.n_components):
 *                 b = a * (xi[k] - x[idxj])             # <<<<<<<<<<<<<<
 *                 g[idx+k] += b
 *                 g[idxj] -= b
 */
        __pyx_v_b = (__pyx_v_a * ((__pyx_v_xi[__pyx_v_k]) - (__pyx_v_x[__pyx_v_idxj])));

        /* "fmsne_implem.pyx":1237
 *             for k in range(popt.n_components):
 *                 b = a * (xi[k] - x[idxj])
 *                 g[idx+k] += b             # <<<<<<<<<<<<<<
 *                 g[idxj] -= b
 *                 idxj += 1
 */
        __pyx_t_11 = (__pyx_v_idx + __pyx_v_k);
        (__pyx_v_g[__pyx_t_11]) = ((__pyx_v_g[__pyx_t_11]) + __pyx_v_b);

        /* "fmsne_implem.pyx":1238
 *                 b = a * (xi[k] - x[idxj])
 *                 g[idx+k] += b
 *                 g[idxj] -= b             # <<<<<<<<<<<<<<
 *                 idxj += 1
 *         # Updating idx
 */
        __pyx_t_11 = __pyx_v_idxj;
        (__pyx_v_g[__pyx_t_11]) = ((__pyx_v_g[__pyx_t_11]) - __pyx_v_b);

        /* "fmsne_implem.pyx":1239
 *                 g[idx+k] += b
 *                 g[idxj] -= b
 *                 idxj += 1             # <<<<<<<<<<<<<<
 *         # Updating idx
 *         idx += popt.n_components
 */
        __pyx_v_idxj = (__pyx_v_idxj + 1);
      }
    }

    /* "fmsne_implem.pyx":1241
 *                 idxj += 1
 *         # Updating idx
 *         idx += popt.n_components             # <<<<<<<<<<<<<<
 *     # Scaling the gradient
 *     for i in range(n):
 */
    __pyx_v_idx = (__pyx_v_idx + __pyx_v_popt->n_components);
  }

  /* "fmsne_implem.pyx":1243
 *         idx += popt.n_components
 *     # Scaling the gradient
 *     for i in range(n):             # <<<<<<<<<<<<<<
 *         g[i] *= 4.0
 *     # Returning the cost function value
 */
  __pyx_t_12 = __pyx_v_n;
  __pyx_t_13 = __pyx_t_12;
  for (__pyx_t_1 = 0; __pyx_t_1 < __pyx_t_13; __pyx_t_1+=1) {
    __pyx_v_i = __pyx_t_1;

    /* "fmsne_implem.pyx":1244
 *     # Scaling the gradient
 *     for i in range(n):
 *         g[i] *= 4.0             # <<<<<<<<<<<<<<
 *     # Returning the cost function value
 *     return fx * 2.0 + log(d)
 */
    __pyx_t_2 = __pyx_v_i;
    (__pyx_v_g[__pyx_t_2]) = ((__pyx_v_g[__pyx_t_2]) * 4.0);
  }

  /* "fmsne_implem.pyx":1246
 *         g[i] *= 4.0
 *     # Returning the cost function value
 *     return fx * 2.0 + log(d)             # <<<<<<<<<<<<<<
 * 
 * cpdef inline void mstsne_implem(double[::1] X_hds, double[::1] X_lds, int N, int d_hds, int n_components, int nit_max, double gtol, double ftol, int maxls, int maxcor, int L_min):
 */
  __pyx_r = ((__pyx_v_fx * 2.0) + log(__pyx_v_d));
  goto __pyx_L0;

  /* "fmsne_implem.pyx":1189
 *     double** simld          # Memory to store the LD similarities between all pairs of distinct data points, hence with N x N-1 elements
 * 
 * cdef inline lbfgsfloatval_t mstsne_evaluate(void* instance, const lbfgsfloatval_t* x, lbfgsfloatval_t* g, const int n, const lbfgsfloatval_t step) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     Computes cost function and gradient for the current LD coordinates.
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "fmsne_implem.pyx":1248
 *     return fx * 2.0 + log(d)
 * 
 * cpdef inline void mstsne_implem(double[::1] X_hds, double[::1] X_lds, int N, int d_hds, int n_components, int nit_max, double gtol, double ftol, int maxls, int maxcor, int L_min):             # <<<<<<<<<<<<<<
 *     """
 *     Cython implementation of Ms SNE.
 */

static PyObject *__pyx_pw_12fmsne_implem_3mstsne_implem(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static CYTHON_INLINE void __pyx_f_12fmsne_implem_mstsne_implem(__Pyx_memviewslice __pyx_v_X_hds, __Pyx_memviewslice __pyx_v_X_lds, int __pyx_v_N, int __pyx_v_d_hds, int __pyx_v_n_components, int __pyx_v_nit_max, double __pyx_v_gtol, double __pyx_v_ftol, int __pyx_v_maxls, int __pyx_v_maxcor, int __pyx_v_L_min, CYTHON_UNUSED int __pyx_skip_dispatch) {
  int __pyx_v_K_star;
  int __pyx_v_isnotLmin1;
  int __pyx_v_L;
  int *__pyx_v_K_h;
  double **__pyx_v_ds_hd;
  double **__pyx_v_tau_h;
  double **__pyx_v_simhd_ms;
  double **__pyx_v_simhd_h;
  int __pyx_v_prod_N_nc;
  size_t __pyx_v_shdp;
  double *__pyx_v_xlds;
  lbfgsfloatval_t *__pyx_v_xopt;
  struct __pyx_t_12fmsne_implem_OpMstsne *__pyx_v_popt;
  lbfgs_parameter_t __pyx_v_param;
  lbfgs_parameter_t *__pyx_v_pparam;
  Py_ssize_t __pyx_v_k;
  Py_ssize_t __pyx_v_h;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  long __pyx_t_3;
  long __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  __Pyx_RefNannySetupContext("mstsne_implem", 0);

  /* "fmsne_implem.pyx":1257
 *     ## Perplexity-related quantities
 *     #####
 *     cdef int K_star = 2             # <<<<<<<<<<<<<<
 *     cdef bint isnotLmin1 = L_min != 1
 *     # Number of scales
 */
  __pyx_v_K_star = 2;

  /* "fmsne_implem.pyx":1258
 *     #####
 *     cdef int K_star = 2
 *     cdef bint isnotLmin1 = L_min != 1             # <<<<<<<<<<<<<<
 *     # Number of scales
 *     cdef int L = ms_def_n_scales(<double> N, K_star, L_min, not isnotLmin1)
 */
  __pyx_v_isnotLmin1 = (__pyx_v_L_min != 1);

  /* "fmsne_implem.pyx":1260
 *     cdef bint isnotLmin1 = L_min != 1
 *     # Number of scales
 *     cdef int L = ms_def_n_scales(<double> N, K_star, L_min, not isnotLmin1)             # <<<<<<<<<<<<<<
 * 
 *     # Perplexity at each scale
 */
  __pyx_v_L = __pyx_f_12fmsne_implem_ms_def_n_scales(((double)__pyx_v_N), __pyx_v_K_star, __pyx_v_L_min, (!(__pyx_v_isnotLmin1 != 0)));

  /* "fmsne_implem.pyx":1263
 * 
 *     # Perplexity at each scale
 *     cdef int* K_h = ms_def_Kh(K_star, isnotLmin1, ms_def_shift_Lmin(isnotLmin1, L_min), L)             # <<<<<<<<<<<<<<
 *     if K_h is NULL:
 *         printf("Error in mstsne_implem function of fmsne_implem.pyx: out of memory for K_h.")
 */
  __pyx_v_K_h = __pyx_f_12fmsne_implem_ms_def_Kh(__pyx_v_K_star, __pyx_v_isnotLmin1, __pyx_f_12fmsne_implem_ms_def_shift_Lmin(__pyx_v_isnotLmin1, __pyx_v_L_min), __pyx_v_L);

  /* "fmsne_implem.pyx":1264
 *     # Perplexity at each scale
 *     cdef int* K_h = ms_def_Kh(K_star, isnotLmin1, ms_def_shift_Lmin(isnotLmin1, L_min), L)
 *     if K_h is NULL:             # <<<<<<<<<<<<<<
 *         printf("Error in mstsne_implem function of fmsne_implem.pyx: out of memory for K_h.")
 *         exit(EXIT_FAILURE)
 */
  __pyx_t_1 = ((__pyx_v_K_h == NULL) != 0);
  if (__pyx_t_1) {

    /* "fmsne_implem.pyx":1265
 *     cdef int* K_h = ms_def_Kh(K_star, isnotLmin1, ms_def_shift_Lmin(isnotLmin1, L_min), L)
 *     if K_h is NULL:
 *         printf("Error in mstsne_implem function of fmsne_implem.pyx: out of memory for K_h.")             # <<<<<<<<<<<<<<
 *         exit(EXIT_FAILURE)
 * 
 */
    (void)(printf(((char const *)"Error in mstsne_implem function of fmsne_implem.pyx: out of memory for K_h.")));

    /* "fmsne_implem.pyx":1266
 *     if K_h is NULL:
 *         printf("Error in mstsne_implem function of fmsne_implem.pyx: out of memory for K_h.")
 *         exit(EXIT_FAILURE)             # <<<<<<<<<<<<<<
 * 
 *     #####
 */
    exit(EXIT_FAILURE);

    /* "fmsne_implem.pyx":1264
 *     # Perplexity at each scale
 *     cdef int* K_h = ms_def_Kh(K_star, isnotLmin1, ms_def_shift_Lmin(isnotLmin1, L_min), L)
 *     if K_h is NULL:             # <<<<<<<<<<<<<<
 *         printf("Error in mstsne_implem function of fmsne_implem.pyx: out of memory for K_h.")
 *         exit(EXIT_FAILURE)
 */
  }

  /* "fmsne_implem.pyx":1276
 * 
 *     # K_star now refers to N-1
 *     K_star = N-1             # <<<<<<<<<<<<<<
 * 
 *     cdef double** ds_hd = sne_ds_hd(&X_hds[0], N, d_hds, K_star)
 */
  __pyx_v_K_star = (__pyx_v_N - 1);

  /* "fmsne_implem.pyx":1278
 *     K_star = N-1
 * 
 *     cdef double** ds_hd = sne_ds_hd(&X_hds[0], N, d_hds, K_star)             # <<<<<<<<<<<<<<
 *     if ds_hd is NULL:
 *         PyMem_Free(K_h)
 */
  __pyx_t_2 = 0;
  __pyx_v_ds_hd = __pyx_f_12fmsne_implem_sne_ds_hd((&(*((double *) ( /* dim=0 */ ((char *) (((double *) __pyx_v_X_hds.data) + __pyx_t_2)) )))), __pyx_v_N, __pyx_v_d_hds, __pyx_v_K_star);

  /* "fmsne_implem.pyx":1279
 * 
 *     cdef double** ds_hd = sne_ds_hd(&X_hds[0], N, d_hds, K_star)
 *     if ds_hd is NULL:             # <<<<<<<<<<<<<<
 *         PyMem_Free(K_h)
 *         printf("Error in mstsne_implem function of fmsne_implem.pyx: out of memory for ds_hd.")
 */
  __pyx_t_1 = ((__pyx_v_ds_hd == NULL) != 0);
  if (__pyx_t_1) {

    /* "fmsne_implem.pyx":1280
 *     cdef double** ds_hd = sne_ds_hd(&X_hds[0], N, d_hds, K_star)
 *     if ds_hd is NULL:
 *         PyMem_Free(K_h)             # <<<<<<<<<<<<<<
 *         printf("Error in mstsne_implem function of fmsne_implem.pyx: out of memory for ds_hd.")
 *         exit(EXIT_FAILURE)
 */
    PyMem_Free(__pyx_v_K_h);

    /* "fmsne_implem.pyx":1281
 *     if ds_hd is NULL:
 *         PyMem_Free(K_h)
 *         printf("Error in mstsne_implem function of fmsne_implem.pyx: out of memory for ds_hd.")             # <<<<<<<<<<<<<<
 *         exit(EXIT_FAILURE)
 * 
 */
    (void)(printf(((char const *)"Error in mstsne_implem function of fmsne_implem.pyx: out of memory for ds_hd.")));

    /* "fmsne_implem.pyx":1282
 *         PyMem_Free(K_h)
 *         printf("Error in mstsne_implem function of fmsne_implem.pyx: out of memory for ds_hd.")
 *         exit(EXIT_FAILURE)             # <<<<<<<<<<<<<<
 * 
 *     #####
 */
    exit(EXIT_FAILURE);

    /* "fmsne_implem.pyx":1279
 * 
 *     cdef double** ds_hd = sne_ds_hd(&X_hds[0], N, d_hds, K_star)
 *     if ds_hd is NULL:             # <<<<<<<<<<<<<<
 *         PyMem_Free(K_h)
 *         printf("Error in mstsne_implem function of fmsne_implem.pyx: out of memory for ds_hd.")
 */
  }

  /* "fmsne_implem.pyx":1289
 * 
 *     # HD bandwidths for each scale and data point. Only stored if fit_U is True.
 *     cdef double** tau_h = ms_hdsim(ds_hd, N, L, K_h, K_star)             # <<<<<<<<<<<<<<
 *     if tau_h is NULL:
 *         free_dble_2dmat(ds_hd, N)
 */
  __pyx_v_tau_h = __pyx_f_12fmsne_implem_ms_hdsim(__pyx_v_ds_hd, __pyx_v_N, __pyx_v_L, __pyx_v_K_h, __pyx_v_K_star);

  /* "fmsne_implem.pyx":1290
 *     # HD bandwidths for each scale and data point. Only stored if fit_U is True.
 *     cdef double** tau_h = ms_hdsim(ds_hd, N, L, K_h, K_star)
 *     if tau_h is NULL:             # <<<<<<<<<<<<<<
 *         free_dble_2dmat(ds_hd, N)
 *         PyMem_Free(K_h)
 */
  __pyx_t_1 = ((__pyx_v_tau_h == NULL) != 0);
  if (__pyx_t_1) {

    /* "fmsne_implem.pyx":1291
 *     cdef double** tau_h = ms_hdsim(ds_hd, N, L, K_h, K_star)
 *     if tau_h is NULL:
 *         free_dble_2dmat(ds_hd, N)             # <<<<<<<<<<<<<<
 *         PyMem_Free(K_h)
 *         printf("Error in mstsne_implem function of fmsne_implem.pyx: out of memory in function ms_hdsim.")
 */
    __pyx_f_12fmsne_implem_free_dble_2dmat(__pyx_v_ds_hd, __pyx_v_N);

    /* "fmsne_implem.pyx":1292
 *     if tau_h is NULL:
 *         free_dble_2dmat(ds_hd, N)
 *         PyMem_Free(K_h)             # <<<<<<<<<<<<<<
 *         printf("Error in mstsne_implem function of fmsne_implem.pyx: out of memory in function ms_hdsim.")
 *         exit(EXIT_FAILURE)
 */
    PyMem_Free(__pyx_v_K_h);

    /* "fmsne_implem.pyx":1293
 *         free_dble_2dmat(ds_hd, N)
 *         PyMem_Free(K_h)
 *         printf("Error in mstsne_implem function of fmsne_implem.pyx: out of memory in function ms_hdsim.")             # <<<<<<<<<<<<<<
 *         exit(EXIT_FAILURE)
 * 
 */
    (void)(printf(((char const *)"Error in mstsne_implem function of fmsne_implem.pyx: out of memory in function ms_hdsim.")));

    /* "fmsne_implem.pyx":1294
 *         PyMem_Free(K_h)
 *         printf("Error in mstsne_implem function of fmsne_implem.pyx: out of memory in function ms_hdsim.")
 *         exit(EXIT_FAILURE)             # <<<<<<<<<<<<<<
 * 
 *     # Free stuff which will not be used anymore
 */
    exit(EXIT_FAILURE);

    /* "fmsne_implem.pyx":1290
 *     # HD bandwidths for each scale and data point. Only stored if fit_U is True.
 *     cdef double** tau_h = ms_hdsim(ds_hd, N, L, K_h, K_star)
 *     if tau_h is NULL:             # <<<<<<<<<<<<<<
 *         free_dble_2dmat(ds_hd, N)
 *         PyMem_Free(K_h)
 */
  }

  /* "fmsne_implem.pyx":1297
 * 
 *     # Free stuff which will not be used anymore
 *     PyMem_Free(K_h)             # <<<<<<<<<<<<<<
 * 
 *     #####
 */
  PyMem_Free(__pyx_v_K_h);

  /* "fmsne_implem.pyx":1304
 * 
 *     # Array storing the multi-scale HD similarities, as computed during the multi-scale optimization
 *     cdef double** simhd_ms = alloc_dble_2dmat(N, K_star)             # <<<<<<<<<<<<<<
 *     if simhd_ms is NULL:
 *         free_dble_2dmat(ds_hd, N)
 */
  __pyx_v_simhd_ms = __pyx_f_12fmsne_implem_alloc_dble_2dmat(__pyx_v_N, __pyx_v_K_star);

  /* "fmsne_implem.pyx":1305
 *     # Array storing the multi-scale HD similarities, as computed during the multi-scale optimization
 *     cdef double** simhd_ms = alloc_dble_2dmat(N, K_star)
 *     if simhd_ms is NULL:             # <<<<<<<<<<<<<<
 *         free_dble_2dmat(ds_hd, N)
 *         free_dble_2dmat(tau_h, L)
 */
  __pyx_t_1 = ((__pyx_v_simhd_ms == NULL) != 0);
  if (__pyx_t_1) {

    /* "fmsne_implem.pyx":1306
 *     cdef double** simhd_ms = alloc_dble_2dmat(N, K_star)
 *     if simhd_ms is NULL:
 *         free_dble_2dmat(ds_hd, N)             # <<<<<<<<<<<<<<
 *         free_dble_2dmat(tau_h, L)
 *         printf("Error in mstsne_implem function of fmsne_implem.pyx: out of memory for simhd_ms.")
 */
    __pyx_f_12fmsne_implem_free_dble_2dmat(__pyx_v_ds_hd, __pyx_v_N);

    /* "fmsne_implem.pyx":1307
 *     if simhd_ms is NULL:
 *         free_dble_2dmat(ds_hd, N)
 *         free_dble_2dmat(tau_h, L)             # <<<<<<<<<<<<<<
 *         printf("Error in mstsne_implem function of fmsne_implem.pyx: out of memory for simhd_ms.")
 *         exit(EXIT_FAILURE)
 */
    __pyx_f_12fmsne_implem_free_dble_2dmat(__pyx_v_tau_h, __pyx_v_L);

    /* "fmsne_implem.pyx":1308
 *         free_dble_2dmat(ds_hd, N)
 *         free_dble_2dmat(tau_h, L)
 *         printf("Error in mstsne_implem function of fmsne_implem.pyx: out of memory for simhd_ms.")             # <<<<<<<<<<<<<<
 *         exit(EXIT_FAILURE)
 * 
 */
    (void)(printf(((char const *)"Error in mstsne_implem function of fmsne_implem.pyx: out of memory for simhd_ms.")));

    /* "fmsne_implem.pyx":1309
 *         free_dble_2dmat(tau_h, L)
 *         printf("Error in mstsne_implem function of fmsne_implem.pyx: out of memory for simhd_ms.")
 *         exit(EXIT_FAILURE)             # <<<<<<<<<<<<<<
 * 
 *     # Array storing the HD similarities at some scale h, during the multi-scale optimization
 */
    exit(EXIT_FAILURE);

    /* "fmsne_implem.pyx":1305
 *     # Array storing the multi-scale HD similarities, as computed during the multi-scale optimization
 *     cdef double** simhd_ms = alloc_dble_2dmat(N, K_star)
 *     if simhd_ms is NULL:             # <<<<<<<<<<<<<<
 *         free_dble_2dmat(ds_hd, N)
 *         free_dble_2dmat(tau_h, L)
 */
  }

  /* "fmsne_implem.pyx":1312
 * 
 *     # Array storing the HD similarities at some scale h, during the multi-scale optimization
 *     cdef double** simhd_h = alloc_dble_2dmat(N, K_star)             # <<<<<<<<<<<<<<
 *     if simhd_h is NULL:
 *         free_dble_2dmat(ds_hd, N)
 */
  __pyx_v_simhd_h = __pyx_f_12fmsne_implem_alloc_dble_2dmat(__pyx_v_N, __pyx_v_K_star);

  /* "fmsne_implem.pyx":1313
 *     # Array storing the HD similarities at some scale h, during the multi-scale optimization
 *     cdef double** simhd_h = alloc_dble_2dmat(N, K_star)
 *     if simhd_h is NULL:             # <<<<<<<<<<<<<<
 *         free_dble_2dmat(ds_hd, N)
 *         free_dble_2dmat(tau_h, L)
 */
  __pyx_t_1 = ((__pyx_v_simhd_h == NULL) != 0);
  if (__pyx_t_1) {

    /* "fmsne_implem.pyx":1314
 *     cdef double** simhd_h = alloc_dble_2dmat(N, K_star)
 *     if simhd_h is NULL:
 *         free_dble_2dmat(ds_hd, N)             # <<<<<<<<<<<<<<
 *         free_dble_2dmat(tau_h, L)
 *         free_dble_2dmat(simhd_ms, N)
 */
    __pyx_f_12fmsne_implem_free_dble_2dmat(__pyx_v_ds_hd, __pyx_v_N);

    /* "fmsne_implem.pyx":1315
 *     if simhd_h is NULL:
 *         free_dble_2dmat(ds_hd, N)
 *         free_dble_2dmat(tau_h, L)             # <<<<<<<<<<<<<<
 *         free_dble_2dmat(simhd_ms, N)
 *         printf("Error in mstsne_implem function of fmsne_implem.pyx: out of memory for simhd_h.")
 */
    __pyx_f_12fmsne_implem_free_dble_2dmat(__pyx_v_tau_h, __pyx_v_L);

    /* "fmsne_implem.pyx":1316
 *         free_dble_2dmat(ds_hd, N)
 *         free_dble_2dmat(tau_h, L)
 *         free_dble_2dmat(simhd_ms, N)             # <<<<<<<<<<<<<<
 *         printf("Error in mstsne_implem function of fmsne_implem.pyx: out of memory for simhd_h.")
 *         exit(EXIT_FAILURE)
 */
    __pyx_f_12fmsne_implem_free_dble_2dmat(__pyx_v_simhd_ms, __pyx_v_N);

    /* "fmsne_implem.pyx":1317
 *         free_dble_2dmat(tau_h, L)
 *         free_dble_2dmat(simhd_ms, N)
 *         printf("Error in mstsne_implem function of fmsne_implem.pyx: out of memory for simhd_h.")             # <<<<<<<<<<<<<<
 *         exit(EXIT_FAILURE)
 * 
 */
    (void)(printf(((char const *)"Error in mstsne_implem function of fmsne_implem.pyx: out of memory for simhd_h.")));

    /* "fmsne_implem.pyx":1318
 *         free_dble_2dmat(simhd_ms, N)
 *         printf("Error in mstsne_implem function of fmsne_implem.pyx: out of memory for simhd_h.")
 *         exit(EXIT_FAILURE)             # <<<<<<<<<<<<<<
 * 
 *     #####
 */
    exit(EXIT_FAILURE);

    /* "fmsne_implem.pyx":1313
 *     # Array storing the HD similarities at some scale h, during the multi-scale optimization
 *     cdef double** simhd_h = alloc_dble_2dmat(N, K_star)
 *     if simhd_h is NULL:             # <<<<<<<<<<<<<<
 *         free_dble_2dmat(ds_hd, N)
 *         free_dble_2dmat(tau_h, L)
 */
  }

  /* "fmsne_implem.pyx":1324
 *     #####
 * 
 *     cdef int prod_N_nc = N*n_components             # <<<<<<<<<<<<<<
 *     # Number of bytes of the array for the optimization
 *     cdef size_t shdp = prod_N_nc*sizeof(double)
 */
  __pyx_v_prod_N_nc = (__pyx_v_N * __pyx_v_n_components);

  /* "fmsne_implem.pyx":1326
 *     cdef int prod_N_nc = N*n_components
 *     # Number of bytes of the array for the optimization
 *     cdef size_t shdp = prod_N_nc*sizeof(double)             # <<<<<<<<<<<<<<
 *     # Pointer toward the start of the LDS
 *     cdef double* xlds = &X_lds[0]
 */
  __pyx_v_shdp = (__pyx_v_prod_N_nc * (sizeof(double)));

  /* "fmsne_implem.pyx":1328
 *     cdef size_t shdp = prod_N_nc*sizeof(double)
 *     # Pointer toward the start of the LDS
 *     cdef double* xlds = &X_lds[0]             # <<<<<<<<<<<<<<
 *     # Variables for the optimization, initialized to the current LDS.
 *     cdef lbfgsfloatval_t* xopt = init_lbfgs_var(shdp, prod_N_nc, xlds)
 */
  __pyx_t_2 = 0;
  __pyx_v_xlds = (&(*((double *) ( /* dim=0 */ ((char *) (((double *) __pyx_v_X_lds.data) + __pyx_t_2)) ))));

  /* "fmsne_implem.pyx":1330
 *     cdef double* xlds = &X_lds[0]
 *     # Variables for the optimization, initialized to the current LDS.
 *     cdef lbfgsfloatval_t* xopt = init_lbfgs_var(shdp, prod_N_nc, xlds)             # <<<<<<<<<<<<<<
 *     if xopt is NULL:
 *         free_dble_2dmat(ds_hd, N)
 */
  __pyx_v_xopt = __pyx_f_12fmsne_implem_init_lbfgs_var(__pyx_v_shdp, __pyx_v_prod_N_nc, __pyx_v_xlds);

  /* "fmsne_implem.pyx":1331
 *     # Variables for the optimization, initialized to the current LDS.
 *     cdef lbfgsfloatval_t* xopt = init_lbfgs_var(shdp, prod_N_nc, xlds)
 *     if xopt is NULL:             # <<<<<<<<<<<<<<
 *         free_dble_2dmat(ds_hd, N)
 *         free_dble_2dmat(tau_h, L)
 */
  __pyx_t_1 = ((__pyx_v_xopt == NULL) != 0);
  if (__pyx_t_1) {

    /* "fmsne_implem.pyx":1332
 *     cdef lbfgsfloatval_t* xopt = init_lbfgs_var(shdp, prod_N_nc, xlds)
 *     if xopt is NULL:
 *         free_dble_2dmat(ds_hd, N)             # <<<<<<<<<<<<<<
 *         free_dble_2dmat(tau_h, L)
 *         free_dble_2dmat(simhd_ms, N)
 */
    __pyx_f_12fmsne_implem_free_dble_2dmat(__pyx_v_ds_hd, __pyx_v_N);

    /* "fmsne_implem.pyx":1333
 *     if xopt is NULL:
 *         free_dble_2dmat(ds_hd, N)
 *         free_dble_2dmat(tau_h, L)             # <<<<<<<<<<<<<<
 *         free_dble_2dmat(simhd_ms, N)
 *         free_dble_2dmat(simhd_h, N)
 */
    __pyx_f_12fmsne_implem_free_dble_2dmat(__pyx_v_tau_h, __pyx_v_L);

    /* "fmsne_implem.pyx":1334
 *         free_dble_2dmat(ds_hd, N)
 *         free_dble_2dmat(tau_h, L)
 *         free_dble_2dmat(simhd_ms, N)             # <<<<<<<<<<<<<<
 *         free_dble_2dmat(simhd_h, N)
 *         printf('Error in function mstsne_implem of fmsne_implem.pyx: out of memory for xopt')
 */
    __pyx_f_12fmsne_implem_free_dble_2dmat(__pyx_v_simhd_ms, __pyx_v_N);

    /* "fmsne_implem.pyx":1335
 *         free_dble_2dmat(tau_h, L)
 *         free_dble_2dmat(simhd_ms, N)
 *         free_dble_2dmat(simhd_h, N)             # <<<<<<<<<<<<<<
 *         printf('Error in function mstsne_implem of fmsne_implem.pyx: out of memory for xopt')
 *         exit(EXIT_FAILURE)
 */
    __pyx_f_12fmsne_implem_free_dble_2dmat(__pyx_v_simhd_h, __pyx_v_N);

    /* "fmsne_implem.pyx":1336
 *         free_dble_2dmat(simhd_ms, N)
 *         free_dble_2dmat(simhd_h, N)
 *         printf('Error in function mstsne_implem of fmsne_implem.pyx: out of memory for xopt')             # <<<<<<<<<<<<<<
 *         exit(EXIT_FAILURE)
 * 
 */
    (void)(printf(((char const *)"Error in function mstsne_implem of fmsne_implem.pyx: out of memory for xopt")));

    /* "fmsne_implem.pyx":1337
 *         free_dble_2dmat(simhd_h, N)
 *         printf('Error in function mstsne_implem of fmsne_implem.pyx: out of memory for xopt')
 *         exit(EXIT_FAILURE)             # <<<<<<<<<<<<<<
 * 
 *     # Structure gathering the data which are necessary to evaluate the cost function and the gradient
 */
    exit(EXIT_FAILURE);

    /* "fmsne_implem.pyx":1331
 *     # Variables for the optimization, initialized to the current LDS.
 *     cdef lbfgsfloatval_t* xopt = init_lbfgs_var(shdp, prod_N_nc, xlds)
 *     if xopt is NULL:             # <<<<<<<<<<<<<<
 *         free_dble_2dmat(ds_hd, N)
 *         free_dble_2dmat(tau_h, L)
 */
  }

  /* "fmsne_implem.pyx":1340
 * 
 *     # Structure gathering the data which are necessary to evaluate the cost function and the gradient
 *     cdef OpMstsne* popt = <OpMstsne*> PyMem_Malloc(sizeof(OpMstsne))             # <<<<<<<<<<<<<<
 *     if popt is NULL:
 *         free_dble_2dmat(ds_hd, N)
 */
  __pyx_v_popt = ((struct __pyx_t_12fmsne_implem_OpMstsne *)PyMem_Malloc((sizeof(struct __pyx_t_12fmsne_implem_OpMstsne))));

  /* "fmsne_implem.pyx":1341
 *     # Structure gathering the data which are necessary to evaluate the cost function and the gradient
 *     cdef OpMstsne* popt = <OpMstsne*> PyMem_Malloc(sizeof(OpMstsne))
 *     if popt is NULL:             # <<<<<<<<<<<<<<
 *         free_dble_2dmat(ds_hd, N)
 *         free_dble_2dmat(tau_h, L)
 */
  __pyx_t_1 = ((__pyx_v_popt == NULL) != 0);
  if (__pyx_t_1) {

    /* "fmsne_implem.pyx":1342
 *     cdef OpMstsne* popt = <OpMstsne*> PyMem_Malloc(sizeof(OpMstsne))
 *     if popt is NULL:
 *         free_dble_2dmat(ds_hd, N)             # <<<<<<<<<<<<<<
 *         free_dble_2dmat(tau_h, L)
 *         free_dble_2dmat(simhd_ms, N)
 */
    __pyx_f_12fmsne_implem_free_dble_2dmat(__pyx_v_ds_hd, __pyx_v_N);

    /* "fmsne_implem.pyx":1343
 *     if popt is NULL:
 *         free_dble_2dmat(ds_hd, N)
 *         free_dble_2dmat(tau_h, L)             # <<<<<<<<<<<<<<
 *         free_dble_2dmat(simhd_ms, N)
 *         free_dble_2dmat(simhd_h, N)
 */
    __pyx_f_12fmsne_implem_free_dble_2dmat(__pyx_v_tau_h, __pyx_v_L);

    /* "fmsne_implem.pyx":1344
 *         free_dble_2dmat(ds_hd, N)
 *         free_dble_2dmat(tau_h, L)
 *         free_dble_2dmat(simhd_ms, N)             # <<<<<<<<<<<<<<
 *         free_dble_2dmat(simhd_h, N)
 *         lbfgs_free(xopt)
 */
    __pyx_f_12fmsne_implem_free_dble_2dmat(__pyx_v_simhd_ms, __pyx_v_N);

    /* "fmsne_implem.pyx":1345
 *         free_dble_2dmat(tau_h, L)
 *         free_dble_2dmat(simhd_ms, N)
 *         free_dble_2dmat(simhd_h, N)             # <<<<<<<<<<<<<<
 *         lbfgs_free(xopt)
 *         printf("Error in function mstsne_implem of module cyfastpyx: out of memory for popt")
 */
    __pyx_f_12fmsne_implem_free_dble_2dmat(__pyx_v_simhd_h, __pyx_v_N);

    /* "fmsne_implem.pyx":1346
 *         free_dble_2dmat(simhd_ms, N)
 *         free_dble_2dmat(simhd_h, N)
 *         lbfgs_free(xopt)             # <<<<<<<<<<<<<<
 *         printf("Error in function mstsne_implem of module cyfastpyx: out of memory for popt")
 *         exit(EXIT_FAILURE)
 */
    lbfgs_free(__pyx_v_xopt);

    /* "fmsne_implem.pyx":1347
 *         free_dble_2dmat(simhd_h, N)
 *         lbfgs_free(xopt)
 *         printf("Error in function mstsne_implem of module cyfastpyx: out of memory for popt")             # <<<<<<<<<<<<<<
 *         exit(EXIT_FAILURE)
 *     # Filling popt
 */
    (void)(printf(((char const *)"Error in function mstsne_implem of module cyfastpyx: out of memory for popt")));

    /* "fmsne_implem.pyx":1348
 *         lbfgs_free(xopt)
 *         printf("Error in function mstsne_implem of module cyfastpyx: out of memory for popt")
 *         exit(EXIT_FAILURE)             # <<<<<<<<<<<<<<
 *     # Filling popt
 *     popt.N_1 = K_star
 */
    exit(EXIT_FAILURE);

    /* "fmsne_implem.pyx":1341
 *     # Structure gathering the data which are necessary to evaluate the cost function and the gradient
 *     cdef OpMstsne* popt = <OpMstsne*> PyMem_Malloc(sizeof(OpMstsne))
 *     if popt is NULL:             # <<<<<<<<<<<<<<
 *         free_dble_2dmat(ds_hd, N)
 *         free_dble_2dmat(tau_h, L)
 */
  }

  /* "fmsne_implem.pyx":1350
 *         exit(EXIT_FAILURE)
 *     # Filling popt
 *     popt.N_1 = K_star             # <<<<<<<<<<<<<<
 *     popt.n_components = n_components
 *     popt.sstx = shdp
 */
  __pyx_v_popt->N_1 = __pyx_v_K_star;

  /* "fmsne_implem.pyx":1351
 *     # Filling popt
 *     popt.N_1 = K_star
 *     popt.n_components = n_components             # <<<<<<<<<<<<<<
 *     popt.sstx = shdp
 *     # popt.simhd_ms is set to simhd_h since the multi-scale HD similarities are symmetrized
 */
  __pyx_v_popt->n_components = __pyx_v_n_components;

  /* "fmsne_implem.pyx":1352
 *     popt.N_1 = K_star
 *     popt.n_components = n_components
 *     popt.sstx = shdp             # <<<<<<<<<<<<<<
 *     # popt.simhd_ms is set to simhd_h since the multi-scale HD similarities are symmetrized
 *     popt.simhd_ms = simhd_h
 */
  __pyx_v_popt->sstx = __pyx_v_shdp;

  /* "fmsne_implem.pyx":1354
 *     popt.sstx = shdp
 *     # popt.simhd_ms is set to simhd_h since the multi-scale HD similarities are symmetrized
 *     popt.simhd_ms = simhd_h             # <<<<<<<<<<<<<<
 *     popt.simld = alloc_dble_2dmat(N, K_star)
 *     if popt.simld is NULL:
 */
  __pyx_v_popt->simhd_ms = __pyx_v_simhd_h;

  /* "fmsne_implem.pyx":1355
 *     # popt.simhd_ms is set to simhd_h since the multi-scale HD similarities are symmetrized
 *     popt.simhd_ms = simhd_h
 *     popt.simld = alloc_dble_2dmat(N, K_star)             # <<<<<<<<<<<<<<
 *     if popt.simld is NULL:
 *         free_dble_2dmat(ds_hd, N)
 */
  __pyx_v_popt->simld = __pyx_f_12fmsne_implem_alloc_dble_2dmat(__pyx_v_N, __pyx_v_K_star);

  /* "fmsne_implem.pyx":1356
 *     popt.simhd_ms = simhd_h
 *     popt.simld = alloc_dble_2dmat(N, K_star)
 *     if popt.simld is NULL:             # <<<<<<<<<<<<<<
 *         free_dble_2dmat(ds_hd, N)
 *         free_dble_2dmat(tau_h, L)
 */
  __pyx_t_1 = ((__pyx_v_popt->simld == NULL) != 0);
  if (__pyx_t_1) {

    /* "fmsne_implem.pyx":1357
 *     popt.simld = alloc_dble_2dmat(N, K_star)
 *     if popt.simld is NULL:
 *         free_dble_2dmat(ds_hd, N)             # <<<<<<<<<<<<<<
 *         free_dble_2dmat(tau_h, L)
 *         free_dble_2dmat(simhd_ms, N)
 */
    __pyx_f_12fmsne_implem_free_dble_2dmat(__pyx_v_ds_hd, __pyx_v_N);

    /* "fmsne_implem.pyx":1358
 *     if popt.simld is NULL:
 *         free_dble_2dmat(ds_hd, N)
 *         free_dble_2dmat(tau_h, L)             # <<<<<<<<<<<<<<
 *         free_dble_2dmat(simhd_ms, N)
 *         free_dble_2dmat(simhd_h, N)
 */
    __pyx_f_12fmsne_implem_free_dble_2dmat(__pyx_v_tau_h, __pyx_v_L);

    /* "fmsne_implem.pyx":1359
 *         free_dble_2dmat(ds_hd, N)
 *         free_dble_2dmat(tau_h, L)
 *         free_dble_2dmat(simhd_ms, N)             # <<<<<<<<<<<<<<
 *         free_dble_2dmat(simhd_h, N)
 *         lbfgs_free(xopt)
 */
    __pyx_f_12fmsne_implem_free_dble_2dmat(__pyx_v_simhd_ms, __pyx_v_N);

    /* "fmsne_implem.pyx":1360
 *         free_dble_2dmat(tau_h, L)
 *         free_dble_2dmat(simhd_ms, N)
 *         free_dble_2dmat(simhd_h, N)             # <<<<<<<<<<<<<<
 *         lbfgs_free(xopt)
 *         PyMem_Free(popt)
 */
    __pyx_f_12fmsne_implem_free_dble_2dmat(__pyx_v_simhd_h, __pyx_v_N);

    /* "fmsne_implem.pyx":1361
 *         free_dble_2dmat(simhd_ms, N)
 *         free_dble_2dmat(simhd_h, N)
 *         lbfgs_free(xopt)             # <<<<<<<<<<<<<<
 *         PyMem_Free(popt)
 *         printf("Error in function mstsne_implem of module cyfastpyx: out of memory for popt.simld")
 */
    lbfgs_free(__pyx_v_xopt);

    /* "fmsne_implem.pyx":1362
 *         free_dble_2dmat(simhd_h, N)
 *         lbfgs_free(xopt)
 *         PyMem_Free(popt)             # <<<<<<<<<<<<<<
 *         printf("Error in function mstsne_implem of module cyfastpyx: out of memory for popt.simld")
 *         exit(EXIT_FAILURE)
 */
    PyMem_Free(__pyx_v_popt);

    /* "fmsne_implem.pyx":1363
 *         lbfgs_free(xopt)
 *         PyMem_Free(popt)
 *         printf("Error in function mstsne_implem of module cyfastpyx: out of memory for popt.simld")             # <<<<<<<<<<<<<<
 *         exit(EXIT_FAILURE)
 * 
 */
    (void)(printf(((char const *)"Error in function mstsne_implem of module cyfastpyx: out of memory for popt.simld")));

    /* "fmsne_implem.pyx":1364
 *         PyMem_Free(popt)
 *         printf("Error in function mstsne_implem of module cyfastpyx: out of memory for popt.simld")
 *         exit(EXIT_FAILURE)             # <<<<<<<<<<<<<<
 * 
 *     # Parameters of the L-BFGS optimization
 */
    exit(EXIT_FAILURE);

    /* "fmsne_implem.pyx":1356
 *     popt.simhd_ms = simhd_h
 *     popt.simld = alloc_dble_2dmat(N, K_star)
 *     if popt.simld is NULL:             # <<<<<<<<<<<<<<
 *         free_dble_2dmat(ds_hd, N)
 *         free_dble_2dmat(tau_h, L)
 */
  }

  /* "fmsne_implem.pyx":1368
 *     # Parameters of the L-BFGS optimization
 *     cdef lbfgs_parameter_t param
 *     cdef lbfgs_parameter_t* pparam = &param             # <<<<<<<<<<<<<<
 *     # Initializing param with default values
 *     lbfgs_parameter_init(pparam)
 */
  __pyx_v_pparam = (&__pyx_v_param);

  /* "fmsne_implem.pyx":1370
 *     cdef lbfgs_parameter_t* pparam = &param
 *     # Initializing param with default values
 *     lbfgs_parameter_init(pparam)             # <<<<<<<<<<<<<<
 *     # Updating some parameters
 *     param.m = maxcor
 */
  lbfgs_parameter_init(__pyx_v_pparam);

  /* "fmsne_implem.pyx":1372
 *     lbfgs_parameter_init(pparam)
 *     # Updating some parameters
 *     param.m = maxcor             # <<<<<<<<<<<<<<
 *     param.epsilon = gtol
 *     param.delta = ftol
 */
  __pyx_v_param.m = __pyx_v_maxcor;

  /* "fmsne_implem.pyx":1373
 *     # Updating some parameters
 *     param.m = maxcor
 *     param.epsilon = gtol             # <<<<<<<<<<<<<<
 *     param.delta = ftol
 *     param.max_iterations = nit_max
 */
  __pyx_v_param.epsilon = __pyx_v_gtol;

  /* "fmsne_implem.pyx":1374
 *     param.m = maxcor
 *     param.epsilon = gtol
 *     param.delta = ftol             # <<<<<<<<<<<<<<
 *     param.max_iterations = nit_max
 *     param.max_linesearch = maxls
 */
  __pyx_v_param.delta = __pyx_v_ftol;

  /* "fmsne_implem.pyx":1375
 *     param.epsilon = gtol
 *     param.delta = ftol
 *     param.max_iterations = nit_max             # <<<<<<<<<<<<<<
 *     param.max_linesearch = maxls
 *     param.past = 1
 */
  __pyx_v_param.max_iterations = __pyx_v_nit_max;

  /* "fmsne_implem.pyx":1376
 *     param.delta = ftol
 *     param.max_iterations = nit_max
 *     param.max_linesearch = maxls             # <<<<<<<<<<<<<<
 *     param.past = 1
 *     # We modify the default values of the minimum and maximum step sizes of the line search because the problem is badly scaled
 */
  __pyx_v_param.max_linesearch = __pyx_v_maxls;

  /* "fmsne_implem.pyx":1377
 *     param.max_iterations = nit_max
 *     param.max_linesearch = maxls
 *     param.past = 1             # <<<<<<<<<<<<<<
 *     # We modify the default values of the minimum and maximum step sizes of the line search because the problem is badly scaled
 *     param.max_step = DBL_MAX
 */
  __pyx_v_param.past = 1;

  /* "fmsne_implem.pyx":1379
 *     param.past = 1
 *     # We modify the default values of the minimum and maximum step sizes of the line search because the problem is badly scaled
 *     param.max_step = DBL_MAX             # <<<<<<<<<<<<<<
 *     param.min_step = DBL_MIN
 * 
 */
  __pyx_v_param.max_step = DBL_MAX;

  /* "fmsne_implem.pyx":1380
 *     # We modify the default values of the minimum and maximum step sizes of the line search because the problem is badly scaled
 *     param.max_step = DBL_MAX
 *     param.min_step = DBL_MIN             # <<<<<<<<<<<<<<
 * 
 *     # k refers to the number of currently considered scales and h to the index of the current scale.
 */
  __pyx_v_param.min_step = DBL_MIN;

  /* "fmsne_implem.pyx":1384
 *     # k refers to the number of currently considered scales and h to the index of the current scale.
 *     cdef Py_ssize_t k, h
 *     h = L-1             # <<<<<<<<<<<<<<
 *     for k in range(1, L+1, 1):
 *         # Updates related to the current multi-scale optimization step
 */
  __pyx_v_h = (__pyx_v_L - 1);

  /* "fmsne_implem.pyx":1385
 *     cdef Py_ssize_t k, h
 *     h = L-1
 *     for k in range(1, L+1, 1):             # <<<<<<<<<<<<<<
 *         # Updates related to the current multi-scale optimization step
 *         ms_update_mso_step(k, h, N, K_star, ds_hd, tau_h, simhd_ms, simhd_h)
 */
  __pyx_t_3 = (__pyx_v_L + 1);
  __pyx_t_4 = __pyx_t_3;
  for (__pyx_t_5 = 1; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
    __pyx_v_k = __pyx_t_5;

    /* "fmsne_implem.pyx":1387
 *     for k in range(1, L+1, 1):
 *         # Updates related to the current multi-scale optimization step
 *         ms_update_mso_step(k, h, N, K_star, ds_hd, tau_h, simhd_ms, simhd_h)             # <<<<<<<<<<<<<<
 *         # Symmetrizing the multi-scale HD similarities in simhd_h. Be careful that only the top half of simhd_h contains the symmetric HD similarities.
 *         mstsne_symmetrize(K_star, simhd_ms, simhd_h)
 */
    (void)(__pyx_f_12fmsne_implem_ms_update_mso_step(__pyx_v_k, __pyx_v_h, __pyx_v_N, __pyx_v_K_star, __pyx_v_ds_hd, __pyx_v_tau_h, __pyx_v_simhd_ms, __pyx_v_simhd_h));

    /* "fmsne_implem.pyx":1389
 *         ms_update_mso_step(k, h, N, K_star, ds_hd, tau_h, simhd_ms, simhd_h)
 *         # Symmetrizing the multi-scale HD similarities in simhd_h. Be careful that only the top half of simhd_h contains the symmetric HD similarities.
 *         mstsne_symmetrize(K_star, simhd_ms, simhd_h)             # <<<<<<<<<<<<<<
 *         # Performing the optimization
 *         lbfgs(prod_N_nc, xopt, NULL, mstsne_evaluate, NULL, popt, pparam)
 */
    __pyx_f_12fmsne_implem_mstsne_symmetrize(__pyx_v_K_star, __pyx_v_simhd_ms, __pyx_v_simhd_h);

    /* "fmsne_implem.pyx":1391
 *         mstsne_symmetrize(K_star, simhd_ms, simhd_h)
 *         # Performing the optimization
 *         lbfgs(prod_N_nc, xopt, NULL, mstsne_evaluate, NULL, popt, pparam)             # <<<<<<<<<<<<<<
 *         h -= 1
 *     # Gathering the optimized LD coordinates
 */
    (void)(lbfgs(__pyx_v_prod_N_nc, __pyx_v_xopt, NULL, __pyx_f_12fmsne_implem_mstsne_evaluate, NULL, __pyx_v_popt, __pyx_v_pparam));

    /* "fmsne_implem.pyx":1392
 *         # Performing the optimization
 *         lbfgs(prod_N_nc, xopt, NULL, mstsne_evaluate, NULL, popt, pparam)
 *         h -= 1             # <<<<<<<<<<<<<<
 *     # Gathering the optimized LD coordinates
 *     memcpy(xlds, xopt, shdp)
 */
    __pyx_v_h = (__pyx_v_h - 1);
  }

  /* "fmsne_implem.pyx":1394
 *         h -= 1
 *     # Gathering the optimized LD coordinates
 *     memcpy(xlds, xopt, shdp)             # <<<<<<<<<<<<<<
 * 
 *     # Free the ressources
 */
  (void)(memcpy(__pyx_v_xlds, __pyx_v_xopt, __pyx_v_shdp));

  /* "fmsne_implem.pyx":1397
 * 
 *     # Free the ressources
 *     free_dble_2dmat(ds_hd, N)             # <<<<<<<<<<<<<<
 *     free_dble_2dmat(tau_h, L)
 *     free_dble_2dmat(simhd_ms, N)
 */
  __pyx_f_12fmsne_implem_free_dble_2dmat(__pyx_v_ds_hd, __pyx_v_N);

  /* "fmsne_implem.pyx":1398
 *     # Free the ressources
 *     free_dble_2dmat(ds_hd, N)
 *     free_dble_2dmat(tau_h, L)             # <<<<<<<<<<<<<<
 *     free_dble_2dmat(simhd_ms, N)
 *     free_dble_2dmat(simhd_h, N)
 */
  __pyx_f_12fmsne_implem_free_dble_2dmat(__pyx_v_tau_h, __pyx_v_L);

  /* "fmsne_implem.pyx":1399
 *     free_dble_2dmat(ds_hd, N)
 *     free_dble_2dmat(tau_h, L)
 *     free_dble_2dmat(simhd_ms, N)             # <<<<<<<<<<<<<<
 *     free_dble_2dmat(simhd_h, N)
 *     lbfgs_free(xopt)
 */
  __pyx_f_12fmsne_implem_free_dble_2dmat(__pyx_v_simhd_ms, __pyx_v_N);

  /* "fmsne_implem.pyx":1400
 *     free_dble_2dmat(tau_h, L)
 *     free_dble_2dmat(simhd_ms, N)
 *     free_dble_2dmat(simhd_h, N)             # <<<<<<<<<<<<<<
 *     lbfgs_free(xopt)
 *     free_dble_2dmat(popt.simld, N)
 */
  __pyx_f_12fmsne_implem_free_dble_2dmat(__pyx_v_simhd_h, __pyx_v_N);

  /* "fmsne_implem.pyx":1401
 *     free_dble_2dmat(simhd_ms, N)
 *     free_dble_2dmat(simhd_h, N)
 *     lbfgs_free(xopt)             # <<<<<<<<<<<<<<
 *     free_dble_2dmat(popt.simld, N)
 *     PyMem_Free(popt)
 */
  lbfgs_free(__pyx_v_xopt);

  /* "fmsne_implem.pyx":1402
 *     free_dble_2dmat(simhd_h, N)
 *     lbfgs_free(xopt)
 *     free_dble_2dmat(popt.simld, N)             # <<<<<<<<<<<<<<
 *     PyMem_Free(popt)
 * 
 */
  __pyx_f_12fmsne_implem_free_dble_2dmat(__pyx_v_popt->simld, __pyx_v_N);

  /* "fmsne_implem.pyx":1403
 *     lbfgs_free(xopt)
 *     free_dble_2dmat(popt.simld, N)
 *     PyMem_Free(popt)             # <<<<<<<<<<<<<<
 * 
 * #######################################################
 */
  PyMem_Free(__pyx_v_popt);

  /* "fmsne_implem.pyx":1248
 *     return fx * 2.0 + log(d)
 * 
 * cpdef inline void mstsne_implem(double[::1] X_hds, double[::1] X_lds, int N, int d_hds, int n_components, int nit_max, double gtol, double ftol, int maxls, int maxcor, int L_min):             # <<<<<<<<<<<<<<
 *     """
 *     Cython implementation of Ms SNE.
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* Python wrapper */
static PyObject *__pyx_pw_12fmsne_implem_3mstsne_implem(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12fmsne_implem_2mstsne_implem[] = "\n    Cython implementation of Ms SNE.\n    L_min is provided in argument.\n    X_hds and X_lds must both be in a 1d array\n    ";
static PyObject *__pyx_pw_12fmsne_implem_3mstsne_implem(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  __Pyx_memviewslice __pyx_v_X_hds = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_X_lds = { 0, 0, { 0 }, { 0 }, { 0 } };
  int __pyx_v_N;
  int __pyx_v_d_hds;
  int __pyx_v_n_components;
  int __pyx_v_nit_max;
  double __pyx_v_gtol;
  double __pyx_v_ftol;
  int __pyx_v_maxls;
  int __pyx_v_maxcor;
  int __pyx_v_L_min;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("mstsne_implem (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_X_hds,&__pyx_n_s_X_lds,&__pyx_n_s_N,&__pyx_n_s_d_hds,&__pyx_n_s_n_components,&__pyx_n_s_nit_max,&__pyx_n_s_gtol,&__pyx_n_s_ftol,&__pyx_n_s_maxls,&__pyx_n_s_maxcor,&__pyx_n_s_L_min,0};
    PyObject* values[11] = {0,0,0,0,0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        CYTHON_FALLTHROUGH;
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        CYTHON_FALLTHROUGH;
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_X_hds)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_X_lds)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("mstsne_implem", 1, 11, 11, 1); __PYX_ERR(0, 1248, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_N)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("mstsne_implem", 1, 11, 11, 2); __PYX_ERR(0, 1248, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_d_hds)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("mstsne_implem", 1, 11, 11, 3); __PYX_ERR(0, 1248, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_n_components)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("mstsne_implem", 1, 11, 11, 4); __PYX_ERR(0, 1248, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_nit_max)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("mstsne_implem", 1, 11, 11, 5); __PYX_ERR(0, 1248, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (likely((values[6] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_gtol)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("mstsne_implem", 1, 11, 11, 6); __PYX_ERR(0, 1248, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (likely((values[7] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ftol)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("mstsne_implem", 1, 11, 11, 7); __PYX_ERR(0, 1248, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  8:
        if (likely((values[8] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_maxls)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("mstsne_implem", 1, 11, 11, 8); __PYX_ERR(0, 1248, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  9:
        if (likely((values[9] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_maxcor)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("mstsne_implem", 1, 11, 11, 9); __PYX_ERR(0, 1248, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 10:
        if (likely((values[10] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_L_min)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("mstsne_implem", 1, 11, 11, 10); __PYX_ERR(0, 1248, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "mstsne_implem") < 0)) __PYX_ERR(0, 1248, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 11) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
      values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
      values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
      values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
      values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
    }
    __pyx_v_X_hds = __Pyx_PyObject_to_MemoryviewSlice_dc_double(values[0], PyBUF_WRITABLE); if (unlikely(!__pyx_v_X_hds.memview)) __PYX_ERR(0, 1248, __pyx_L3_error)
    __pyx_v_X_lds = __Pyx_PyObject_to_MemoryviewSlice_dc_double(values[1], PyBUF_WRITABLE); if (unlikely(!__pyx_v_X_lds.memview)) __PYX_ERR(0, 1248, __pyx_L3_error)
    __pyx_v_N = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_N == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1248, __pyx_L3_error)
    __pyx_v_d_hds = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_d_hds == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1248, __pyx_L3_error)
    __pyx_v_n_components = __Pyx_PyInt_As_int(values[4]); if (unlikely((__pyx_v_n_components == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1248, __pyx_L3_error)
    __pyx_v_nit_max = __Pyx_PyInt_As_int(values[5]); if (unlikely((__pyx_v_nit_max == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1248, __pyx_L3_error)
    __pyx_v_gtol = __pyx_PyFloat_AsDouble(values[6]); if (unlikely((__pyx_v_gtol == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1248, __pyx_L3_error)
    __pyx_v_ftol = __pyx_PyFloat_AsDouble(values[7]); if (unlikely((__pyx_v_ftol == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1248, __pyx_L3_error)
    __pyx_v_maxls = __Pyx_PyInt_As_int(values[8]); if (unlikely((__pyx_v_maxls == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1248, __pyx_L3_error)
    __pyx_v_maxcor = __Pyx_PyInt_As_int(values[9]); if (unlikely((__pyx_v_maxcor == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1248, __pyx_L3_error)
    __pyx_v_L_min = __Pyx_PyInt_As_int(values[10]); if (unlikely((__pyx_v_L_min == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1248, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("mstsne_implem", 1, 11, 11, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1248, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("fmsne_implem.mstsne_implem", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_12fmsne_implem_2mstsne_implem(__pyx_self, __pyx_v_X_hds, __pyx_v_X_lds, __pyx_v_N, __pyx_v_d_hds, __pyx_v_n_components, __pyx_v_nit_max, __pyx_v_gtol, __pyx_v_ftol, __pyx_v_maxls, __pyx_v_maxcor, __pyx_v_L_min);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12fmsne_implem_2mstsne_implem(CYTHON_UNUSED PyObject *__pyx_self, __Pyx_memviewslice __pyx_v_X_hds, __Pyx_memviewslice __pyx_v_X_lds, int __pyx_v_N, int __pyx_v_d_hds, int __pyx_v_n_components, int __pyx_v_nit_max, double __pyx_v_gtol, double __pyx_v_ftol, int __pyx_v_maxls, int __pyx_v_maxcor, int __pyx_v_L_min) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("mstsne_implem", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_void_to_None(__pyx_f_12fmsne_implem_mstsne_implem(__pyx_v_X_hds, __pyx_v_X_lds, __pyx_v_N, __pyx_v_d_hds, __pyx_v_n_components, __pyx_v_nit_max, __pyx_v_gtol, __pyx_v_ftol, __pyx_v_maxls, __pyx_v_maxcor, __pyx_v_L_min, 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1248, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("fmsne_implem.mstsne_implem", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __PYX_XDEC_MEMVIEW(&__pyx_v_X_hds, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_X_lds, 1);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "fmsne_implem.pyx":1438
 *     bint* has_child
 * 
 * cdef inline SpNode* cinit_SpNode(const double* x, Py_ssize_t dim, const double* min_ax, const double* max_ax, bint has_sa, const double* suppl_attr, Py_ssize_t n_sa):             # <<<<<<<<<<<<<<
 *     """
 *     Initialize a node of a space partitioning tree
 */

static CYTHON_INLINE struct __pyx_t_12fmsne_implem_SpNode *__pyx_f_12fmsne_implem_cinit_SpNode(double const *__pyx_v_x, Py_ssize_t __pyx_v_dim, double const *__pyx_v_min_ax, double const *__pyx_v_max_ax, int __pyx_v_has_sa, double const *__pyx_v_suppl_attr, Py_ssize_t __pyx_v_n_sa) {
  struct __pyx_t_12fmsne_implem_SpNode *__pyx_v_node;
  Py_ssize_t __pyx_v_i;
  double __pyx_v_diff;
  struct __pyx_t_12fmsne_implem_SpNode *__pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  __Pyx_RefNannySetupContext("cinit_SpNode", 0);

  /* "fmsne_implem.pyx":1443
 *     Exit the program if an error occured.
 *     """
 *     cdef SpNode* node = <SpNode*> PyMem_Malloc(sizeof(SpNode))             # <<<<<<<<<<<<<<
 *     if node is NULL:
 *         printf("Out of memory in cinit_SpNode")
 */
  __pyx_v_node = ((struct __pyx_t_12fmsne_implem_SpNode *)PyMem_Malloc((sizeof(struct __pyx_t_12fmsne_implem_SpNode))));

  /* "fmsne_implem.pyx":1444
 *     """
 *     cdef SpNode* node = <SpNode*> PyMem_Malloc(sizeof(SpNode))
 *     if node is NULL:             # <<<<<<<<<<<<<<
 *         printf("Out of memory in cinit_SpNode")
 *         exit(EXIT_FAILURE)
 */
  __pyx_t_1 = ((__pyx_v_node == NULL) != 0);
  if (__pyx_t_1) {

    /* "fmsne_implem.pyx":1445
 *     cdef SpNode* node = <SpNode*> PyMem_Malloc(sizeof(SpNode))
 *     if node is NULL:
 *         printf("Out of memory in cinit_SpNode")             # <<<<<<<<<<<<<<
 *         exit(EXIT_FAILURE)
 *     # Different notation than C: instead of ->, just use .
 */
    (void)(printf(((char const *)"Out of memory in cinit_SpNode")));

    /* "fmsne_implem.pyx":1446
 *     if node is NULL:
 *         printf("Out of memory in cinit_SpNode")
 *         exit(EXIT_FAILURE)             # <<<<<<<<<<<<<<
 *     # Different notation than C: instead of ->, just use .
 *     node.npt = 1
 */
    exit(EXIT_FAILURE);

    /* "fmsne_implem.pyx":1444
 *     """
 *     cdef SpNode* node = <SpNode*> PyMem_Malloc(sizeof(SpNode))
 *     if node is NULL:             # <<<<<<<<<<<<<<
 *         printf("Out of memory in cinit_SpNode")
 *         exit(EXIT_FAILURE)
 */
  }

  /* "fmsne_implem.pyx":1448
 *         exit(EXIT_FAILURE)
 *     # Different notation than C: instead of ->, just use .
 *     node.npt = 1             # <<<<<<<<<<<<<<
 *     node.dim = dim
 *     node.cm = <double*> x
 */
  __pyx_v_node->npt = 1;

  /* "fmsne_implem.pyx":1449
 *     # Different notation than C: instead of ->, just use .
 *     node.npt = 1
 *     node.dim = dim             # <<<<<<<<<<<<<<
 *     node.cm = <double*> x
 *     node.min_ax = min_ax
 */
  __pyx_v_node->dim = __pyx_v_dim;

  /* "fmsne_implem.pyx":1450
 *     node.npt = 1
 *     node.dim = dim
 *     node.cm = <double*> x             # <<<<<<<<<<<<<<
 *     node.min_ax = min_ax
 *     node.max_ax = max_ax
 */
  __pyx_v_node->cm = ((double *)__pyx_v_x);

  /* "fmsne_implem.pyx":1451
 *     node.dim = dim
 *     node.cm = <double*> x
 *     node.min_ax = min_ax             # <<<<<<<<<<<<<<
 *     node.max_ax = max_ax
 *     node.mid_ax = <double*> PyMem_Malloc(dim*sizeof(double))
 */
  __pyx_v_node->min_ax = __pyx_v_min_ax;

  /* "fmsne_implem.pyx":1452
 *     node.cm = <double*> x
 *     node.min_ax = min_ax
 *     node.max_ax = max_ax             # <<<<<<<<<<<<<<
 *     node.mid_ax = <double*> PyMem_Malloc(dim*sizeof(double))
 *     if node.mid_ax is NULL:
 */
  __pyx_v_node->max_ax = __pyx_v_max_ax;

  /* "fmsne_implem.pyx":1453
 *     node.min_ax = min_ax
 *     node.max_ax = max_ax
 *     node.mid_ax = <double*> PyMem_Malloc(dim*sizeof(double))             # <<<<<<<<<<<<<<
 *     if node.mid_ax is NULL:
 *         PyMem_Free(node)
 */
  __pyx_v_node->mid_ax = ((double *)PyMem_Malloc((__pyx_v_dim * (sizeof(double)))));

  /* "fmsne_implem.pyx":1454
 *     node.max_ax = max_ax
 *     node.mid_ax = <double*> PyMem_Malloc(dim*sizeof(double))
 *     if node.mid_ax is NULL:             # <<<<<<<<<<<<<<
 *         PyMem_Free(node)
 *         printf("Out of memory in cinit_SpNode")
 */
  __pyx_t_1 = ((__pyx_v_node->mid_ax == NULL) != 0);
  if (__pyx_t_1) {

    /* "fmsne_implem.pyx":1455
 *     node.mid_ax = <double*> PyMem_Malloc(dim*sizeof(double))
 *     if node.mid_ax is NULL:
 *         PyMem_Free(node)             # <<<<<<<<<<<<<<
 *         printf("Out of memory in cinit_SpNode")
 *         exit(EXIT_FAILURE)
 */
    PyMem_Free(__pyx_v_node);

    /* "fmsne_implem.pyx":1456
 *     if node.mid_ax is NULL:
 *         PyMem_Free(node)
 *         printf("Out of memory in cinit_SpNode")             # <<<<<<<<<<<<<<
 *         exit(EXIT_FAILURE)
 *     cdef Py_ssize_t i
 */
    (void)(printf(((char const *)"Out of memory in cinit_SpNode")));

    /* "fmsne_implem.pyx":1457
 *         PyMem_Free(node)
 *         printf("Out of memory in cinit_SpNode")
 *         exit(EXIT_FAILURE)             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t i
 *     cdef double diff
 */
    exit(EXIT_FAILURE);

    /* "fmsne_implem.pyx":1454
 *     node.max_ax = max_ax
 *     node.mid_ax = <double*> PyMem_Malloc(dim*sizeof(double))
 *     if node.mid_ax is NULL:             # <<<<<<<<<<<<<<
 *         PyMem_Free(node)
 *         printf("Out of memory in cinit_SpNode")
 */
  }

  /* "fmsne_implem.pyx":1460
 *     cdef Py_ssize_t i
 *     cdef double diff
 *     node.radius = 0.0             # <<<<<<<<<<<<<<
 *     node.n_childs = 1
 *     for i in range(dim):
 */
  __pyx_v_node->radius = 0.0;

  /* "fmsne_implem.pyx":1461
 *     cdef double diff
 *     node.radius = 0.0
 *     node.n_childs = 1             # <<<<<<<<<<<<<<
 *     for i in range(dim):
 *         node.n_childs *= 2
 */
  __pyx_v_node->n_childs = 1;

  /* "fmsne_implem.pyx":1462
 *     node.radius = 0.0
 *     node.n_childs = 1
 *     for i in range(dim):             # <<<<<<<<<<<<<<
 *         node.n_childs *= 2
 *         node.mid_ax[i] = 0.5*(min_ax[i] + max_ax[i])
 */
  __pyx_t_2 = __pyx_v_dim;
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "fmsne_implem.pyx":1463
 *     node.n_childs = 1
 *     for i in range(dim):
 *         node.n_childs *= 2             # <<<<<<<<<<<<<<
 *         node.mid_ax[i] = 0.5*(min_ax[i] + max_ax[i])
 *         diff = max_ax[i] - min_ax[i]
 */
    __pyx_v_node->n_childs = (__pyx_v_node->n_childs * 2);

    /* "fmsne_implem.pyx":1464
 *     for i in range(dim):
 *         node.n_childs *= 2
 *         node.mid_ax[i] = 0.5*(min_ax[i] + max_ax[i])             # <<<<<<<<<<<<<<
 *         diff = max_ax[i] - min_ax[i]
 *         node.radius += diff*diff
 */
    (__pyx_v_node->mid_ax[__pyx_v_i]) = (0.5 * ((__pyx_v_min_ax[__pyx_v_i]) + (__pyx_v_max_ax[__pyx_v_i])));

    /* "fmsne_implem.pyx":1465
 *         node.n_childs *= 2
 *         node.mid_ax[i] = 0.5*(min_ax[i] + max_ax[i])
 *         diff = max_ax[i] - min_ax[i]             # <<<<<<<<<<<<<<
 *         node.radius += diff*diff
 *     # Space-partitioning trees are working with squared Euclidean distance, squared radius and squared threshold theta. This is why node.radius = sqrt(node.radius) is not performed.
 */
    __pyx_v_diff = ((__pyx_v_max_ax[__pyx_v_i]) - (__pyx_v_min_ax[__pyx_v_i]));

    /* "fmsne_implem.pyx":1466
 *         node.mid_ax[i] = 0.5*(min_ax[i] + max_ax[i])
 *         diff = max_ax[i] - min_ax[i]
 *         node.radius += diff*diff             # <<<<<<<<<<<<<<
 *     # Space-partitioning trees are working with squared Euclidean distance, squared radius and squared threshold theta. This is why node.radius = sqrt(node.radius) is not performed.
 *     node.has_sa = has_sa
 */
    __pyx_v_node->radius = (__pyx_v_node->radius + (__pyx_v_diff * __pyx_v_diff));
  }

  /* "fmsne_implem.pyx":1468
 *         node.radius += diff*diff
 *     # Space-partitioning trees are working with squared Euclidean distance, squared radius and squared threshold theta. This is why node.radius = sqrt(node.radius) is not performed.
 *     node.has_sa = has_sa             # <<<<<<<<<<<<<<
 *     if has_sa:
 *         node.suppl_attr = <double*> suppl_attr
 */
  __pyx_v_node->has_sa = __pyx_v_has_sa;

  /* "fmsne_implem.pyx":1469
 *     # Space-partitioning trees are working with squared Euclidean distance, squared radius and squared threshold theta. This is why node.radius = sqrt(node.radius) is not performed.
 *     node.has_sa = has_sa
 *     if has_sa:             # <<<<<<<<<<<<<<
 *         node.suppl_attr = <double*> suppl_attr
 *     node.n_sa = n_sa
 */
  __pyx_t_1 = (__pyx_v_has_sa != 0);
  if (__pyx_t_1) {

    /* "fmsne_implem.pyx":1470
 *     node.has_sa = has_sa
 *     if has_sa:
 *         node.suppl_attr = <double*> suppl_attr             # <<<<<<<<<<<<<<
 *     node.n_sa = n_sa
 *     node.copy_up_sa = True
 */
    __pyx_v_node->suppl_attr = ((double *)__pyx_v_suppl_attr);

    /* "fmsne_implem.pyx":1469
 *     # Space-partitioning trees are working with squared Euclidean distance, squared radius and squared threshold theta. This is why node.radius = sqrt(node.radius) is not performed.
 *     node.has_sa = has_sa
 *     if has_sa:             # <<<<<<<<<<<<<<
 *         node.suppl_attr = <double*> suppl_attr
 *     node.n_sa = n_sa
 */
  }

  /* "fmsne_implem.pyx":1471
 *     if has_sa:
 *         node.suppl_attr = <double*> suppl_attr
 *     node.n_sa = n_sa             # <<<<<<<<<<<<<<
 *     node.copy_up_sa = True
 *     node.is_leaf = True
 */
  __pyx_v_node->n_sa = __pyx_v_n_sa;

  /* "fmsne_implem.pyx":1472
 *         node.suppl_attr = <double*> suppl_attr
 *     node.n_sa = n_sa
 *     node.copy_up_sa = True             # <<<<<<<<<<<<<<
 *     node.is_leaf = True
 *     return node
 */
  __pyx_v_node->copy_up_sa = 1;

  /* "fmsne_implem.pyx":1473
 *     node.n_sa = n_sa
 *     node.copy_up_sa = True
 *     node.is_leaf = True             # <<<<<<<<<<<<<<
 *     return node
 * 
 */
  __pyx_v_node->is_leaf = 1;

  /* "fmsne_implem.pyx":1474
 *     node.copy_up_sa = True
 *     node.is_leaf = True
 *     return node             # <<<<<<<<<<<<<<
 * 
 * cdef inline void addPnt_SpNode(SpNode* node, const double* x, const double* new_suppl_attr):
 */
  __pyx_r = __pyx_v_node;
  goto __pyx_L0;

  /* "fmsne_implem.pyx":1438
 *     bint* has_child
 * 
 * cdef inline SpNode* cinit_SpNode(const double* x, Py_ssize_t dim, const double* min_ax, const double* max_ax, bint has_sa, const double* suppl_attr, Py_ssize_t n_sa):             # <<<<<<<<<<<<<<
 *     """
 *     Initialize a node of a space partitioning tree
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "fmsne_implem.pyx":1476
 *     return node
 * 
 * cdef inline void addPnt_SpNode(SpNode* node, const double* x, const double* new_suppl_attr):             # <<<<<<<<<<<<<<
 *     """
 *     """
 */

static CYTHON_INLINE void __pyx_f_12fmsne_implem_addPnt_SpNode(struct __pyx_t_12fmsne_implem_SpNode *__pyx_v_node, double const *__pyx_v_x, double const *__pyx_v_new_suppl_attr) {
  double *__pyx_v_pcm;
  double *__pyx_v_psa;
  size_t __pyx_v_sdimd;
  size_t __pyx_v_snsad;
  int __pyx_v_new_npt;
  double __pyx_v_nnpt_d;
  Py_ssize_t __pyx_v_i;
  int __pyx_v_dig;
  Py_ssize_t __pyx_v_ic;
  Py_ssize_t __pyx_v_nc;
  double *__pyx_v_min_ax_c;
  double *__pyx_v_max_ax_c;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  double *__pyx_t_2;
  Py_ssize_t __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  __Pyx_RefNannySetupContext("addPnt_SpNode", 0);

  /* "fmsne_implem.pyx":1482
 *     cdef double* pcm
 *     cdef double* psa
 *     cdef size_t sdimd = node.dim*sizeof(double)             # <<<<<<<<<<<<<<
 *     cdef size_t snsad
 *     if node.has_sa:
 */
  __pyx_v_sdimd = (__pyx_v_node->dim * (sizeof(double)));

  /* "fmsne_implem.pyx":1484
 *     cdef size_t sdimd = node.dim*sizeof(double)
 *     cdef size_t snsad
 *     if node.has_sa:             # <<<<<<<<<<<<<<
 *         snsad = node.n_sa*sizeof(double)
 *     if node.is_leaf:
 */
  __pyx_t_1 = (__pyx_v_node->has_sa != 0);
  if (__pyx_t_1) {

    /* "fmsne_implem.pyx":1485
 *     cdef size_t snsad
 *     if node.has_sa:
 *         snsad = node.n_sa*sizeof(double)             # <<<<<<<<<<<<<<
 *     if node.is_leaf:
 *         if node.npt == 1:
 */
    __pyx_v_snsad = (__pyx_v_node->n_sa * (sizeof(double)));

    /* "fmsne_implem.pyx":1484
 *     cdef size_t sdimd = node.dim*sizeof(double)
 *     cdef size_t snsad
 *     if node.has_sa:             # <<<<<<<<<<<<<<
 *         snsad = node.n_sa*sizeof(double)
 *     if node.is_leaf:
 */
  }

  /* "fmsne_implem.pyx":1486
 *     if node.has_sa:
 *         snsad = node.n_sa*sizeof(double)
 *     if node.is_leaf:             # <<<<<<<<<<<<<<
 *         if node.npt == 1:
 *             # Keeping track of the original data
 */
  __pyx_t_1 = (__pyx_v_node->is_leaf != 0);
  if (__pyx_t_1) {

    /* "fmsne_implem.pyx":1487
 *         snsad = node.n_sa*sizeof(double)
 *     if node.is_leaf:
 *         if node.npt == 1:             # <<<<<<<<<<<<<<
 *             # Keeping track of the original data
 *             pcm = node.cm
 */
    __pyx_t_1 = ((__pyx_v_node->npt == 1) != 0);
    if (__pyx_t_1) {

      /* "fmsne_implem.pyx":1489
 *         if node.npt == 1:
 *             # Keeping track of the original data
 *             pcm = node.cm             # <<<<<<<<<<<<<<
 *             # Avoiding to modify the original data
 *             node.cm = <double*> PyMem_Malloc(sdimd)
 */
      __pyx_t_2 = __pyx_v_node->cm;
      __pyx_v_pcm = __pyx_t_2;

      /* "fmsne_implem.pyx":1491
 *             pcm = node.cm
 *             # Avoiding to modify the original data
 *             node.cm = <double*> PyMem_Malloc(sdimd)             # <<<<<<<<<<<<<<
 *             if node.cm is NULL:
 *                 printf("Out of memory in addPnt_SpNode")
 */
      __pyx_v_node->cm = ((double *)PyMem_Malloc(__pyx_v_sdimd));

      /* "fmsne_implem.pyx":1492
 *             # Avoiding to modify the original data
 *             node.cm = <double*> PyMem_Malloc(sdimd)
 *             if node.cm is NULL:             # <<<<<<<<<<<<<<
 *                 printf("Out of memory in addPnt_SpNode")
 *                 exit(EXIT_FAILURE)
 */
      __pyx_t_1 = ((__pyx_v_node->cm == NULL) != 0);
      if (__pyx_t_1) {

        /* "fmsne_implem.pyx":1493
 *             node.cm = <double*> PyMem_Malloc(sdimd)
 *             if node.cm is NULL:
 *                 printf("Out of memory in addPnt_SpNode")             # <<<<<<<<<<<<<<
 *                 exit(EXIT_FAILURE)
 *             memcpy(node.cm, pcm, sdimd)
 */
        (void)(printf(((char const *)"Out of memory in addPnt_SpNode")));

        /* "fmsne_implem.pyx":1494
 *             if node.cm is NULL:
 *                 printf("Out of memory in addPnt_SpNode")
 *                 exit(EXIT_FAILURE)             # <<<<<<<<<<<<<<
 *             memcpy(node.cm, pcm, sdimd)
 *             if node.has_sa:
 */
        exit(EXIT_FAILURE);

        /* "fmsne_implem.pyx":1492
 *             # Avoiding to modify the original data
 *             node.cm = <double*> PyMem_Malloc(sdimd)
 *             if node.cm is NULL:             # <<<<<<<<<<<<<<
 *                 printf("Out of memory in addPnt_SpNode")
 *                 exit(EXIT_FAILURE)
 */
      }

      /* "fmsne_implem.pyx":1495
 *                 printf("Out of memory in addPnt_SpNode")
 *                 exit(EXIT_FAILURE)
 *             memcpy(node.cm, pcm, sdimd)             # <<<<<<<<<<<<<<
 *             if node.has_sa:
 *                 psa = node.suppl_attr
 */
      (void)(memcpy(__pyx_v_node->cm, __pyx_v_pcm, __pyx_v_sdimd));

      /* "fmsne_implem.pyx":1496
 *                 exit(EXIT_FAILURE)
 *             memcpy(node.cm, pcm, sdimd)
 *             if node.has_sa:             # <<<<<<<<<<<<<<
 *                 psa = node.suppl_attr
 *                 node.suppl_attr = <double*> PyMem_Malloc(snsad)
 */
      __pyx_t_1 = (__pyx_v_node->has_sa != 0);
      if (__pyx_t_1) {

        /* "fmsne_implem.pyx":1497
 *             memcpy(node.cm, pcm, sdimd)
 *             if node.has_sa:
 *                 psa = node.suppl_attr             # <<<<<<<<<<<<<<
 *                 node.suppl_attr = <double*> PyMem_Malloc(snsad)
 *                 if node.suppl_attr is NULL:
 */
        __pyx_t_2 = __pyx_v_node->suppl_attr;
        __pyx_v_psa = __pyx_t_2;

        /* "fmsne_implem.pyx":1498
 *             if node.has_sa:
 *                 psa = node.suppl_attr
 *                 node.suppl_attr = <double*> PyMem_Malloc(snsad)             # <<<<<<<<<<<<<<
 *                 if node.suppl_attr is NULL:
 *                     PyMem_Free(node.cm)
 */
        __pyx_v_node->suppl_attr = ((double *)PyMem_Malloc(__pyx_v_snsad));

        /* "fmsne_implem.pyx":1499
 *                 psa = node.suppl_attr
 *                 node.suppl_attr = <double*> PyMem_Malloc(snsad)
 *                 if node.suppl_attr is NULL:             # <<<<<<<<<<<<<<
 *                     PyMem_Free(node.cm)
 *                     printf("Out of memory in addPnt_SpNode")
 */
        __pyx_t_1 = ((__pyx_v_node->suppl_attr == NULL) != 0);
        if (__pyx_t_1) {

          /* "fmsne_implem.pyx":1500
 *                 node.suppl_attr = <double*> PyMem_Malloc(snsad)
 *                 if node.suppl_attr is NULL:
 *                     PyMem_Free(node.cm)             # <<<<<<<<<<<<<<
 *                     printf("Out of memory in addPnt_SpNode")
 *                     exit(EXIT_FAILURE)
 */
          PyMem_Free(__pyx_v_node->cm);

          /* "fmsne_implem.pyx":1501
 *                 if node.suppl_attr is NULL:
 *                     PyMem_Free(node.cm)
 *                     printf("Out of memory in addPnt_SpNode")             # <<<<<<<<<<<<<<
 *                     exit(EXIT_FAILURE)
 *                 memcpy(node.suppl_attr, psa, snsad)
 */
          (void)(printf(((char const *)"Out of memory in addPnt_SpNode")));

          /* "fmsne_implem.pyx":1502
 *                     PyMem_Free(node.cm)
 *                     printf("Out of memory in addPnt_SpNode")
 *                     exit(EXIT_FAILURE)             # <<<<<<<<<<<<<<
 *                 memcpy(node.suppl_attr, psa, snsad)
 *             else:
 */
          exit(EXIT_FAILURE);

          /* "fmsne_implem.pyx":1499
 *                 psa = node.suppl_attr
 *                 node.suppl_attr = <double*> PyMem_Malloc(snsad)
 *                 if node.suppl_attr is NULL:             # <<<<<<<<<<<<<<
 *                     PyMem_Free(node.cm)
 *                     printf("Out of memory in addPnt_SpNode")
 */
        }

        /* "fmsne_implem.pyx":1503
 *                     printf("Out of memory in addPnt_SpNode")
 *                     exit(EXIT_FAILURE)
 *                 memcpy(node.suppl_attr, psa, snsad)             # <<<<<<<<<<<<<<
 *             else:
 *                 psa = NULL
 */
        (void)(memcpy(__pyx_v_node->suppl_attr, __pyx_v_psa, __pyx_v_snsad));

        /* "fmsne_implem.pyx":1496
 *                 exit(EXIT_FAILURE)
 *             memcpy(node.cm, pcm, sdimd)
 *             if node.has_sa:             # <<<<<<<<<<<<<<
 *                 psa = node.suppl_attr
 *                 node.suppl_attr = <double*> PyMem_Malloc(snsad)
 */
        goto __pyx_L7;
      }

      /* "fmsne_implem.pyx":1505
 *                 memcpy(node.suppl_attr, psa, snsad)
 *             else:
 *                 psa = NULL             # <<<<<<<<<<<<<<
 *         else:
 *             pcm = <double*> PyMem_Malloc(sdimd)
 */
      /*else*/ {
        __pyx_v_psa = NULL;
      }
      __pyx_L7:;

      /* "fmsne_implem.pyx":1487
 *         snsad = node.n_sa*sizeof(double)
 *     if node.is_leaf:
 *         if node.npt == 1:             # <<<<<<<<<<<<<<
 *             # Keeping track of the original data
 *             pcm = node.cm
 */
      goto __pyx_L5;
    }

    /* "fmsne_implem.pyx":1507
 *                 psa = NULL
 *         else:
 *             pcm = <double*> PyMem_Malloc(sdimd)             # <<<<<<<<<<<<<<
 *             if pcm is NULL:
 *                 printf("Out of memory in addPnt_SpNode")
 */
    /*else*/ {
      __pyx_v_pcm = ((double *)PyMem_Malloc(__pyx_v_sdimd));

      /* "fmsne_implem.pyx":1508
 *         else:
 *             pcm = <double*> PyMem_Malloc(sdimd)
 *             if pcm is NULL:             # <<<<<<<<<<<<<<
 *                 printf("Out of memory in addPnt_SpNode")
 *                 exit(EXIT_FAILURE)
 */
      __pyx_t_1 = ((__pyx_v_pcm == NULL) != 0);
      if (__pyx_t_1) {

        /* "fmsne_implem.pyx":1509
 *             pcm = <double*> PyMem_Malloc(sdimd)
 *             if pcm is NULL:
 *                 printf("Out of memory in addPnt_SpNode")             # <<<<<<<<<<<<<<
 *                 exit(EXIT_FAILURE)
 *             memcpy(pcm, node.cm, sdimd)
 */
        (void)(printf(((char const *)"Out of memory in addPnt_SpNode")));

        /* "fmsne_implem.pyx":1510
 *             if pcm is NULL:
 *                 printf("Out of memory in addPnt_SpNode")
 *                 exit(EXIT_FAILURE)             # <<<<<<<<<<<<<<
 *             memcpy(pcm, node.cm, sdimd)
 *             if node.has_sa:
 */
        exit(EXIT_FAILURE);

        /* "fmsne_implem.pyx":1508
 *         else:
 *             pcm = <double*> PyMem_Malloc(sdimd)
 *             if pcm is NULL:             # <<<<<<<<<<<<<<
 *                 printf("Out of memory in addPnt_SpNode")
 *                 exit(EXIT_FAILURE)
 */
      }

      /* "fmsne_implem.pyx":1511
 *                 printf("Out of memory in addPnt_SpNode")
 *                 exit(EXIT_FAILURE)
 *             memcpy(pcm, node.cm, sdimd)             # <<<<<<<<<<<<<<
 *             if node.has_sa:
 *                 psa = <double*> PyMem_Malloc(snsad)
 */
      (void)(memcpy(__pyx_v_pcm, __pyx_v_node->cm, __pyx_v_sdimd));

      /* "fmsne_implem.pyx":1512
 *                 exit(EXIT_FAILURE)
 *             memcpy(pcm, node.cm, sdimd)
 *             if node.has_sa:             # <<<<<<<<<<<<<<
 *                 psa = <double*> PyMem_Malloc(snsad)
 *                 if psa is NULL:
 */
      __pyx_t_1 = (__pyx_v_node->has_sa != 0);
      if (__pyx_t_1) {

        /* "fmsne_implem.pyx":1513
 *             memcpy(pcm, node.cm, sdimd)
 *             if node.has_sa:
 *                 psa = <double*> PyMem_Malloc(snsad)             # <<<<<<<<<<<<<<
 *                 if psa is NULL:
 *                     PyMem_Free(pcm)
 */
        __pyx_v_psa = ((double *)PyMem_Malloc(__pyx_v_snsad));

        /* "fmsne_implem.pyx":1514
 *             if node.has_sa:
 *                 psa = <double*> PyMem_Malloc(snsad)
 *                 if psa is NULL:             # <<<<<<<<<<<<<<
 *                     PyMem_Free(pcm)
 *                     printf('Out of memory in addPnt_SpNode')
 */
        __pyx_t_1 = ((__pyx_v_psa == NULL) != 0);
        if (__pyx_t_1) {

          /* "fmsne_implem.pyx":1515
 *                 psa = <double*> PyMem_Malloc(snsad)
 *                 if psa is NULL:
 *                     PyMem_Free(pcm)             # <<<<<<<<<<<<<<
 *                     printf('Out of memory in addPnt_SpNode')
 *                     exit(EXIT_FAILURE)
 */
          PyMem_Free(__pyx_v_pcm);

          /* "fmsne_implem.pyx":1516
 *                 if psa is NULL:
 *                     PyMem_Free(pcm)
 *                     printf('Out of memory in addPnt_SpNode')             # <<<<<<<<<<<<<<
 *                     exit(EXIT_FAILURE)
 *                 memcpy(psa, node.suppl_attr, snsad)
 */
          (void)(printf(((char const *)"Out of memory in addPnt_SpNode")));

          /* "fmsne_implem.pyx":1517
 *                     PyMem_Free(pcm)
 *                     printf('Out of memory in addPnt_SpNode')
 *                     exit(EXIT_FAILURE)             # <<<<<<<<<<<<<<
 *                 memcpy(psa, node.suppl_attr, snsad)
 *             else:
 */
          exit(EXIT_FAILURE);

          /* "fmsne_implem.pyx":1514
 *             if node.has_sa:
 *                 psa = <double*> PyMem_Malloc(snsad)
 *                 if psa is NULL:             # <<<<<<<<<<<<<<
 *                     PyMem_Free(pcm)
 *                     printf('Out of memory in addPnt_SpNode')
 */
        }

        /* "fmsne_implem.pyx":1518
 *                     printf('Out of memory in addPnt_SpNode')
 *                     exit(EXIT_FAILURE)
 *                 memcpy(psa, node.suppl_attr, snsad)             # <<<<<<<<<<<<<<
 *             else:
 *                 psa = NULL
 */
        (void)(memcpy(__pyx_v_psa, __pyx_v_node->suppl_attr, __pyx_v_snsad));

        /* "fmsne_implem.pyx":1512
 *                 exit(EXIT_FAILURE)
 *             memcpy(pcm, node.cm, sdimd)
 *             if node.has_sa:             # <<<<<<<<<<<<<<
 *                 psa = <double*> PyMem_Malloc(snsad)
 *                 if psa is NULL:
 */
        goto __pyx_L10;
      }

      /* "fmsne_implem.pyx":1520
 *                 memcpy(psa, node.suppl_attr, snsad)
 *             else:
 *                 psa = NULL             # <<<<<<<<<<<<<<
 *     # Updating the center of mass of the current cell
 *     cdef int new_npt = node.npt + 1
 */
      /*else*/ {
        __pyx_v_psa = NULL;
      }
      __pyx_L10:;
    }
    __pyx_L5:;

    /* "fmsne_implem.pyx":1486
 *     if node.has_sa:
 *         snsad = node.n_sa*sizeof(double)
 *     if node.is_leaf:             # <<<<<<<<<<<<<<
 *         if node.npt == 1:
 *             # Keeping track of the original data
 */
  }

  /* "fmsne_implem.pyx":1522
 *                 psa = NULL
 *     # Updating the center of mass of the current cell
 *     cdef int new_npt = node.npt + 1             # <<<<<<<<<<<<<<
 *     cdef double nnpt_d = <double> new_npt
 *     cdef Py_ssize_t i
 */
  __pyx_v_new_npt = (__pyx_v_node->npt + 1);

  /* "fmsne_implem.pyx":1523
 *     # Updating the center of mass of the current cell
 *     cdef int new_npt = node.npt + 1
 *     cdef double nnpt_d = <double> new_npt             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t i
 *     for i in range(node.dim):
 */
  __pyx_v_nnpt_d = ((double)__pyx_v_new_npt);

  /* "fmsne_implem.pyx":1525
 *     cdef double nnpt_d = <double> new_npt
 *     cdef Py_ssize_t i
 *     for i in range(node.dim):             # <<<<<<<<<<<<<<
 *         node.cm[i] = (node.cm[i]*node.npt + x[i])/nnpt_d
 *     # Updating the supplementary attributes of the current cell
 */
  __pyx_t_3 = __pyx_v_node->dim;
  __pyx_t_4 = __pyx_t_3;
  for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
    __pyx_v_i = __pyx_t_5;

    /* "fmsne_implem.pyx":1526
 *     cdef Py_ssize_t i
 *     for i in range(node.dim):
 *         node.cm[i] = (node.cm[i]*node.npt + x[i])/nnpt_d             # <<<<<<<<<<<<<<
 *     # Updating the supplementary attributes of the current cell
 *     if node.has_sa:
 */
    (__pyx_v_node->cm[__pyx_v_i]) = ((((__pyx_v_node->cm[__pyx_v_i]) * __pyx_v_node->npt) + (__pyx_v_x[__pyx_v_i])) / __pyx_v_nnpt_d);
  }

  /* "fmsne_implem.pyx":1528
 *         node.cm[i] = (node.cm[i]*node.npt + x[i])/nnpt_d
 *     # Updating the supplementary attributes of the current cell
 *     if node.has_sa:             # <<<<<<<<<<<<<<
 *         for i in range(node.n_sa):
 *             node.suppl_attr[i] = (node.suppl_attr[i]*node.npt + new_suppl_attr[i])/nnpt_d
 */
  __pyx_t_1 = (__pyx_v_node->has_sa != 0);
  if (__pyx_t_1) {

    /* "fmsne_implem.pyx":1529
 *     # Updating the supplementary attributes of the current cell
 *     if node.has_sa:
 *         for i in range(node.n_sa):             # <<<<<<<<<<<<<<
 *             node.suppl_attr[i] = (node.suppl_attr[i]*node.npt + new_suppl_attr[i])/nnpt_d
 *     # Updating the number of data points that the current cell contains
 */
    __pyx_t_3 = __pyx_v_node->n_sa;
    __pyx_t_4 = __pyx_t_3;
    for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
      __pyx_v_i = __pyx_t_5;

      /* "fmsne_implem.pyx":1530
 *     if node.has_sa:
 *         for i in range(node.n_sa):
 *             node.suppl_attr[i] = (node.suppl_attr[i]*node.npt + new_suppl_attr[i])/nnpt_d             # <<<<<<<<<<<<<<
 *     # Updating the number of data points that the current cell contains
 *     node.npt = new_npt
 */
      (__pyx_v_node->suppl_attr[__pyx_v_i]) = ((((__pyx_v_node->suppl_attr[__pyx_v_i]) * __pyx_v_node->npt) + (__pyx_v_new_suppl_attr[__pyx_v_i])) / __pyx_v_nnpt_d);
    }

    /* "fmsne_implem.pyx":1528
 *         node.cm[i] = (node.cm[i]*node.npt + x[i])/nnpt_d
 *     # Updating the supplementary attributes of the current cell
 *     if node.has_sa:             # <<<<<<<<<<<<<<
 *         for i in range(node.n_sa):
 *             node.suppl_attr[i] = (node.suppl_attr[i]*node.npt + new_suppl_attr[i])/nnpt_d
 */
  }

  /* "fmsne_implem.pyx":1532
 *             node.suppl_attr[i] = (node.suppl_attr[i]*node.npt + new_suppl_attr[i])/nnpt_d
 *     # Updating the number of data points that the current cell contains
 *     node.npt = new_npt             # <<<<<<<<<<<<<<
 * 
 *     # A boolean value indicating whether or not we should further dig in the tree to insert x
 */
  __pyx_v_node->npt = __pyx_v_new_npt;

  /* "fmsne_implem.pyx":1535
 * 
 *     # A boolean value indicating whether or not we should further dig in the tree to insert x
 *     cdef bint dig = True             # <<<<<<<<<<<<<<
 * 
 *     #### Updating the child nodes
 */
  __pyx_v_dig = 1;

  /* "fmsne_implem.pyx":1543
 *     cdef double* min_ax_c
 *     cdef double* max_ax_c
 *     if node.is_leaf:             # <<<<<<<<<<<<<<
 *         # As the current node is a leaf, the cell should be further divided, unless x and the previous center of mass of the cell (pcm) are too close from each other, as it would be nearly impossible to separate x from the other data points of the leaf, since they are all very close to pcm.
 *         if inf_dist_ptr(pcm, x, node.dim) >= EPSILON_DBL:
 */
  __pyx_t_1 = (__pyx_v_node->is_leaf != 0);
  if (__pyx_t_1) {

    /* "fmsne_implem.pyx":1545
 *     if node.is_leaf:
 *         # As the current node is a leaf, the cell should be further divided, unless x and the previous center of mass of the cell (pcm) are too close from each other, as it would be nearly impossible to separate x from the other data points of the leaf, since they are all very close to pcm.
 *         if inf_dist_ptr(pcm, x, node.dim) >= EPSILON_DBL:             # <<<<<<<<<<<<<<
 *             # Mark the node as a non-leaf
 *             node.is_leaf = False
 */
    __pyx_t_1 = ((__pyx_f_12fmsne_implem_inf_dist_ptr(__pyx_v_pcm, __pyx_v_x, __pyx_v_node->dim) >= __pyx_v_12fmsne_implem_EPSILON_DBL) != 0);
    if (__pyx_t_1) {

      /* "fmsne_implem.pyx":1547
 *         if inf_dist_ptr(pcm, x, node.dim) >= EPSILON_DBL:
 *             # Mark the node as a non-leaf
 *             node.is_leaf = False             # <<<<<<<<<<<<<<
 *             # Allocating space for the childs
 *             node.childs = <SpNode**> PyMem_Malloc(node.n_childs*sizeof(SpNode*))
 */
      __pyx_v_node->is_leaf = 0;

      /* "fmsne_implem.pyx":1549
 *             node.is_leaf = False
 *             # Allocating space for the childs
 *             node.childs = <SpNode**> PyMem_Malloc(node.n_childs*sizeof(SpNode*))             # <<<<<<<<<<<<<<
 *             if node.childs is NULL:
 *                 printf("Out of memory in addPnt_SpNode")
 */
      __pyx_v_node->childs = ((struct __pyx_t_12fmsne_implem_SpNode **)PyMem_Malloc((__pyx_v_node->n_childs * (sizeof(struct __pyx_t_12fmsne_implem_SpNode *)))));

      /* "fmsne_implem.pyx":1550
 *             # Allocating space for the childs
 *             node.childs = <SpNode**> PyMem_Malloc(node.n_childs*sizeof(SpNode*))
 *             if node.childs is NULL:             # <<<<<<<<<<<<<<
 *                 printf("Out of memory in addPnt_SpNode")
 *                 exit(EXIT_FAILURE)
 */
      __pyx_t_1 = ((__pyx_v_node->childs == NULL) != 0);
      if (__pyx_t_1) {

        /* "fmsne_implem.pyx":1551
 *             node.childs = <SpNode**> PyMem_Malloc(node.n_childs*sizeof(SpNode*))
 *             if node.childs is NULL:
 *                 printf("Out of memory in addPnt_SpNode")             # <<<<<<<<<<<<<<
 *                 exit(EXIT_FAILURE)
 *             snsad = node.n_childs*sizeof(bint)
 */
        (void)(printf(((char const *)"Out of memory in addPnt_SpNode")));

        /* "fmsne_implem.pyx":1552
 *             if node.childs is NULL:
 *                 printf("Out of memory in addPnt_SpNode")
 *                 exit(EXIT_FAILURE)             # <<<<<<<<<<<<<<
 *             snsad = node.n_childs*sizeof(bint)
 *             node.has_child = <bint*> PyMem_Malloc(snsad)
 */
        exit(EXIT_FAILURE);

        /* "fmsne_implem.pyx":1550
 *             # Allocating space for the childs
 *             node.childs = <SpNode**> PyMem_Malloc(node.n_childs*sizeof(SpNode*))
 *             if node.childs is NULL:             # <<<<<<<<<<<<<<
 *                 printf("Out of memory in addPnt_SpNode")
 *                 exit(EXIT_FAILURE)
 */
      }

      /* "fmsne_implem.pyx":1553
 *                 printf("Out of memory in addPnt_SpNode")
 *                 exit(EXIT_FAILURE)
 *             snsad = node.n_childs*sizeof(bint)             # <<<<<<<<<<<<<<
 *             node.has_child = <bint*> PyMem_Malloc(snsad)
 *             if node.has_child is NULL:
 */
      __pyx_v_snsad = (__pyx_v_node->n_childs * (sizeof(int)));

      /* "fmsne_implem.pyx":1554
 *                 exit(EXIT_FAILURE)
 *             snsad = node.n_childs*sizeof(bint)
 *             node.has_child = <bint*> PyMem_Malloc(snsad)             # <<<<<<<<<<<<<<
 *             if node.has_child is NULL:
 *                 PyMem_Free(node.childs)
 */
      __pyx_v_node->has_child = ((int *)PyMem_Malloc(__pyx_v_snsad));

      /* "fmsne_implem.pyx":1555
 *             snsad = node.n_childs*sizeof(bint)
 *             node.has_child = <bint*> PyMem_Malloc(snsad)
 *             if node.has_child is NULL:             # <<<<<<<<<<<<<<
 *                 PyMem_Free(node.childs)
 *                 printf("Out of memory in addPnt_SpNode")
 */
      __pyx_t_1 = ((__pyx_v_node->has_child == NULL) != 0);
      if (__pyx_t_1) {

        /* "fmsne_implem.pyx":1556
 *             node.has_child = <bint*> PyMem_Malloc(snsad)
 *             if node.has_child is NULL:
 *                 PyMem_Free(node.childs)             # <<<<<<<<<<<<<<
 *                 printf("Out of memory in addPnt_SpNode")
 *                 exit(EXIT_FAILURE)
 */
        PyMem_Free(__pyx_v_node->childs);

        /* "fmsne_implem.pyx":1557
 *             if node.has_child is NULL:
 *                 PyMem_Free(node.childs)
 *                 printf("Out of memory in addPnt_SpNode")             # <<<<<<<<<<<<<<
 *                 exit(EXIT_FAILURE)
 *             memset(node.has_child, False, snsad)
 */
        (void)(printf(((char const *)"Out of memory in addPnt_SpNode")));

        /* "fmsne_implem.pyx":1558
 *                 PyMem_Free(node.childs)
 *                 printf("Out of memory in addPnt_SpNode")
 *                 exit(EXIT_FAILURE)             # <<<<<<<<<<<<<<
 *             memset(node.has_child, False, snsad)
 *             # Determining the index of the child to process and allocating memory for its underlying data structures
 */
        exit(EXIT_FAILURE);

        /* "fmsne_implem.pyx":1555
 *             snsad = node.n_childs*sizeof(bint)
 *             node.has_child = <bint*> PyMem_Malloc(snsad)
 *             if node.has_child is NULL:             # <<<<<<<<<<<<<<
 *                 PyMem_Free(node.childs)
 *                 printf("Out of memory in addPnt_SpNode")
 */
      }

      /* "fmsne_implem.pyx":1559
 *                 printf("Out of memory in addPnt_SpNode")
 *                 exit(EXIT_FAILURE)
 *             memset(node.has_child, False, snsad)             # <<<<<<<<<<<<<<
 *             # Determining the index of the child to process and allocating memory for its underlying data structures
 *             ic = 0
 */
      (void)(memset(__pyx_v_node->has_child, 0, __pyx_v_snsad));

      /* "fmsne_implem.pyx":1561
 *             memset(node.has_child, False, snsad)
 *             # Determining the index of the child to process and allocating memory for its underlying data structures
 *             ic = 0             # <<<<<<<<<<<<<<
 *             nc = 1
 *             min_ax_c = <double*> PyMem_Malloc(sdimd)
 */
      __pyx_v_ic = 0;

      /* "fmsne_implem.pyx":1562
 *             # Determining the index of the child to process and allocating memory for its underlying data structures
 *             ic = 0
 *             nc = 1             # <<<<<<<<<<<<<<
 *             min_ax_c = <double*> PyMem_Malloc(sdimd)
 *             if min_ax_c is NULL:
 */
      __pyx_v_nc = 1;

      /* "fmsne_implem.pyx":1563
 *             ic = 0
 *             nc = 1
 *             min_ax_c = <double*> PyMem_Malloc(sdimd)             # <<<<<<<<<<<<<<
 *             if min_ax_c is NULL:
 *                 PyMem_Free(node.childs)
 */
      __pyx_v_min_ax_c = ((double *)PyMem_Malloc(__pyx_v_sdimd));

      /* "fmsne_implem.pyx":1564
 *             nc = 1
 *             min_ax_c = <double*> PyMem_Malloc(sdimd)
 *             if min_ax_c is NULL:             # <<<<<<<<<<<<<<
 *                 PyMem_Free(node.childs)
 *                 PyMem_Free(node.has_child)
 */
      __pyx_t_1 = ((__pyx_v_min_ax_c == NULL) != 0);
      if (__pyx_t_1) {

        /* "fmsne_implem.pyx":1565
 *             min_ax_c = <double*> PyMem_Malloc(sdimd)
 *             if min_ax_c is NULL:
 *                 PyMem_Free(node.childs)             # <<<<<<<<<<<<<<
 *                 PyMem_Free(node.has_child)
 *                 printf('Out of memory in addPnt_SpNode')
 */
        PyMem_Free(__pyx_v_node->childs);

        /* "fmsne_implem.pyx":1566
 *             if min_ax_c is NULL:
 *                 PyMem_Free(node.childs)
 *                 PyMem_Free(node.has_child)             # <<<<<<<<<<<<<<
 *                 printf('Out of memory in addPnt_SpNode')
 *                 exit(EXIT_FAILURE)
 */
        PyMem_Free(__pyx_v_node->has_child);

        /* "fmsne_implem.pyx":1567
 *                 PyMem_Free(node.childs)
 *                 PyMem_Free(node.has_child)
 *                 printf('Out of memory in addPnt_SpNode')             # <<<<<<<<<<<<<<
 *                 exit(EXIT_FAILURE)
 *             max_ax_c = <double*> PyMem_Malloc(sdimd)
 */
        (void)(printf(((char const *)"Out of memory in addPnt_SpNode")));

        /* "fmsne_implem.pyx":1568
 *                 PyMem_Free(node.has_child)
 *                 printf('Out of memory in addPnt_SpNode')
 *                 exit(EXIT_FAILURE)             # <<<<<<<<<<<<<<
 *             max_ax_c = <double*> PyMem_Malloc(sdimd)
 *             if max_ax_c is NULL:
 */
        exit(EXIT_FAILURE);

        /* "fmsne_implem.pyx":1564
 *             nc = 1
 *             min_ax_c = <double*> PyMem_Malloc(sdimd)
 *             if min_ax_c is NULL:             # <<<<<<<<<<<<<<
 *                 PyMem_Free(node.childs)
 *                 PyMem_Free(node.has_child)
 */
      }

      /* "fmsne_implem.pyx":1569
 *                 printf('Out of memory in addPnt_SpNode')
 *                 exit(EXIT_FAILURE)
 *             max_ax_c = <double*> PyMem_Malloc(sdimd)             # <<<<<<<<<<<<<<
 *             if max_ax_c is NULL:
 *                 PyMem_Free(node.childs)
 */
      __pyx_v_max_ax_c = ((double *)PyMem_Malloc(__pyx_v_sdimd));

      /* "fmsne_implem.pyx":1570
 *                 exit(EXIT_FAILURE)
 *             max_ax_c = <double*> PyMem_Malloc(sdimd)
 *             if max_ax_c is NULL:             # <<<<<<<<<<<<<<
 *                 PyMem_Free(node.childs)
 *                 PyMem_Free(node.has_child)
 */
      __pyx_t_1 = ((__pyx_v_max_ax_c == NULL) != 0);
      if (__pyx_t_1) {

        /* "fmsne_implem.pyx":1571
 *             max_ax_c = <double*> PyMem_Malloc(sdimd)
 *             if max_ax_c is NULL:
 *                 PyMem_Free(node.childs)             # <<<<<<<<<<<<<<
 *                 PyMem_Free(node.has_child)
 *                 PyMem_Free(min_ax_c)
 */
        PyMem_Free(__pyx_v_node->childs);

        /* "fmsne_implem.pyx":1572
 *             if max_ax_c is NULL:
 *                 PyMem_Free(node.childs)
 *                 PyMem_Free(node.has_child)             # <<<<<<<<<<<<<<
 *                 PyMem_Free(min_ax_c)
 *                 printf('Out of memory in addPnt_SpNode')
 */
        PyMem_Free(__pyx_v_node->has_child);

        /* "fmsne_implem.pyx":1573
 *                 PyMem_Free(node.childs)
 *                 PyMem_Free(node.has_child)
 *                 PyMem_Free(min_ax_c)             # <<<<<<<<<<<<<<
 *                 printf('Out of memory in addPnt_SpNode')
 *                 exit(EXIT_FAILURE)
 */
        PyMem_Free(__pyx_v_min_ax_c);

        /* "fmsne_implem.pyx":1574
 *                 PyMem_Free(node.has_child)
 *                 PyMem_Free(min_ax_c)
 *                 printf('Out of memory in addPnt_SpNode')             # <<<<<<<<<<<<<<
 *                 exit(EXIT_FAILURE)
 *             for i in range(node.dim):
 */
        (void)(printf(((char const *)"Out of memory in addPnt_SpNode")));

        /* "fmsne_implem.pyx":1575
 *                 PyMem_Free(min_ax_c)
 *                 printf('Out of memory in addPnt_SpNode')
 *                 exit(EXIT_FAILURE)             # <<<<<<<<<<<<<<
 *             for i in range(node.dim):
 *                 if pcm[i] >= node.mid_ax[i]:
 */
        exit(EXIT_FAILURE);

        /* "fmsne_implem.pyx":1570
 *                 exit(EXIT_FAILURE)
 *             max_ax_c = <double*> PyMem_Malloc(sdimd)
 *             if max_ax_c is NULL:             # <<<<<<<<<<<<<<
 *                 PyMem_Free(node.childs)
 *                 PyMem_Free(node.has_child)
 */
      }

      /* "fmsne_implem.pyx":1576
 *                 printf('Out of memory in addPnt_SpNode')
 *                 exit(EXIT_FAILURE)
 *             for i in range(node.dim):             # <<<<<<<<<<<<<<
 *                 if pcm[i] >= node.mid_ax[i]:
 *                     ic += nc
 */
      __pyx_t_3 = __pyx_v_node->dim;
      __pyx_t_4 = __pyx_t_3;
      for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
        __pyx_v_i = __pyx_t_5;

        /* "fmsne_implem.pyx":1577
 *                 exit(EXIT_FAILURE)
 *             for i in range(node.dim):
 *                 if pcm[i] >= node.mid_ax[i]:             # <<<<<<<<<<<<<<
 *                     ic += nc
 *                     min_ax_c[i] = node.mid_ax[i]
 */
        __pyx_t_1 = (((__pyx_v_pcm[__pyx_v_i]) >= (__pyx_v_node->mid_ax[__pyx_v_i])) != 0);
        if (__pyx_t_1) {

          /* "fmsne_implem.pyx":1578
 *             for i in range(node.dim):
 *                 if pcm[i] >= node.mid_ax[i]:
 *                     ic += nc             # <<<<<<<<<<<<<<
 *                     min_ax_c[i] = node.mid_ax[i]
 *                     max_ax_c[i] = node.max_ax[i]
 */
          __pyx_v_ic = (__pyx_v_ic + __pyx_v_nc);

          /* "fmsne_implem.pyx":1579
 *                 if pcm[i] >= node.mid_ax[i]:
 *                     ic += nc
 *                     min_ax_c[i] = node.mid_ax[i]             # <<<<<<<<<<<<<<
 *                     max_ax_c[i] = node.max_ax[i]
 *                 else:
 */
          (__pyx_v_min_ax_c[__pyx_v_i]) = (__pyx_v_node->mid_ax[__pyx_v_i]);

          /* "fmsne_implem.pyx":1580
 *                     ic += nc
 *                     min_ax_c[i] = node.mid_ax[i]
 *                     max_ax_c[i] = node.max_ax[i]             # <<<<<<<<<<<<<<
 *                 else:
 *                     min_ax_c[i] = node.min_ax[i]
 */
          (__pyx_v_max_ax_c[__pyx_v_i]) = (__pyx_v_node->max_ax[__pyx_v_i]);

          /* "fmsne_implem.pyx":1577
 *                 exit(EXIT_FAILURE)
 *             for i in range(node.dim):
 *                 if pcm[i] >= node.mid_ax[i]:             # <<<<<<<<<<<<<<
 *                     ic += nc
 *                     min_ax_c[i] = node.mid_ax[i]
 */
          goto __pyx_L25;
        }

        /* "fmsne_implem.pyx":1582
 *                     max_ax_c[i] = node.max_ax[i]
 *                 else:
 *                     min_ax_c[i] = node.min_ax[i]             # <<<<<<<<<<<<<<
 *                     max_ax_c[i] = node.mid_ax[i]
 *                 nc *= 2
 */
        /*else*/ {
          (__pyx_v_min_ax_c[__pyx_v_i]) = (__pyx_v_node->min_ax[__pyx_v_i]);

          /* "fmsne_implem.pyx":1583
 *                 else:
 *                     min_ax_c[i] = node.min_ax[i]
 *                     max_ax_c[i] = node.mid_ax[i]             # <<<<<<<<<<<<<<
 *                 nc *= 2
 *             # Initializing the identified children
 */
          (__pyx_v_max_ax_c[__pyx_v_i]) = (__pyx_v_node->mid_ax[__pyx_v_i]);
        }
        __pyx_L25:;

        /* "fmsne_implem.pyx":1584
 *                     min_ax_c[i] = node.min_ax[i]
 *                     max_ax_c[i] = node.mid_ax[i]
 *                 nc *= 2             # <<<<<<<<<<<<<<
 *             # Initializing the identified children
 *             node.has_child[ic] = True
 */
        __pyx_v_nc = (__pyx_v_nc * 2);
      }

      /* "fmsne_implem.pyx":1586
 *                 nc *= 2
 *             # Initializing the identified children
 *             node.has_child[ic] = True             # <<<<<<<<<<<<<<
 *             node.childs[ic] = cinit_SpNode(pcm, node.dim, min_ax_c, max_ax_c, node.has_sa, psa, node.n_sa)
 *             node.childs[ic].npt = node.npt-1
 */
      (__pyx_v_node->has_child[__pyx_v_ic]) = 1;

      /* "fmsne_implem.pyx":1587
 *             # Initializing the identified children
 *             node.has_child[ic] = True
 *             node.childs[ic] = cinit_SpNode(pcm, node.dim, min_ax_c, max_ax_c, node.has_sa, psa, node.n_sa)             # <<<<<<<<<<<<<<
 *             node.childs[ic].npt = node.npt-1
 *         else:
 */
      (__pyx_v_node->childs[__pyx_v_ic]) = __pyx_f_12fmsne_implem_cinit_SpNode(__pyx_v_pcm, __pyx_v_node->dim, __pyx_v_min_ax_c, __pyx_v_max_ax_c, __pyx_v_node->has_sa, __pyx_v_psa, __pyx_v_node->n_sa);

      /* "fmsne_implem.pyx":1588
 *             node.has_child[ic] = True
 *             node.childs[ic] = cinit_SpNode(pcm, node.dim, min_ax_c, max_ax_c, node.has_sa, psa, node.n_sa)
 *             node.childs[ic].npt = node.npt-1             # <<<<<<<<<<<<<<
 *         else:
 *             # The previous center of mass and x are too close: stop digging the tree.
 */
      (__pyx_v_node->childs[__pyx_v_ic])->npt = (__pyx_v_node->npt - 1);

      /* "fmsne_implem.pyx":1545
 *     if node.is_leaf:
 *         # As the current node is a leaf, the cell should be further divided, unless x and the previous center of mass of the cell (pcm) are too close from each other, as it would be nearly impossible to separate x from the other data points of the leaf, since they are all very close to pcm.
 *         if inf_dist_ptr(pcm, x, node.dim) >= EPSILON_DBL:             # <<<<<<<<<<<<<<
 *             # Mark the node as a non-leaf
 *             node.is_leaf = False
 */
      goto __pyx_L18;
    }

    /* "fmsne_implem.pyx":1591
 *         else:
 *             # The previous center of mass and x are too close: stop digging the tree.
 *             dig = False             # <<<<<<<<<<<<<<
 *             if new_npt > 2:
 *                 # Avoiding a Memory leak
 */
    /*else*/ {
      __pyx_v_dig = 0;

      /* "fmsne_implem.pyx":1592
 *             # The previous center of mass and x are too close: stop digging the tree.
 *             dig = False
 *             if new_npt > 2:             # <<<<<<<<<<<<<<
 *                 # Avoiding a Memory leak
 *                 PyMem_Free(pcm)
 */
      __pyx_t_1 = ((__pyx_v_new_npt > 2) != 0);
      if (__pyx_t_1) {

        /* "fmsne_implem.pyx":1594
 *             if new_npt > 2:
 *                 # Avoiding a Memory leak
 *                 PyMem_Free(pcm)             # <<<<<<<<<<<<<<
 *                 if node.has_sa:
 *                     PyMem_Free(psa)
 */
        PyMem_Free(__pyx_v_pcm);

        /* "fmsne_implem.pyx":1595
 *                 # Avoiding a Memory leak
 *                 PyMem_Free(pcm)
 *                 if node.has_sa:             # <<<<<<<<<<<<<<
 *                     PyMem_Free(psa)
 * 
 */
        __pyx_t_1 = (__pyx_v_node->has_sa != 0);
        if (__pyx_t_1) {

          /* "fmsne_implem.pyx":1596
 *                 PyMem_Free(pcm)
 *                 if node.has_sa:
 *                     PyMem_Free(psa)             # <<<<<<<<<<<<<<
 * 
 *     # Digging the tree to insert x
 */
          PyMem_Free(__pyx_v_psa);

          /* "fmsne_implem.pyx":1595
 *                 # Avoiding a Memory leak
 *                 PyMem_Free(pcm)
 *                 if node.has_sa:             # <<<<<<<<<<<<<<
 *                     PyMem_Free(psa)
 * 
 */
        }

        /* "fmsne_implem.pyx":1592
 *             # The previous center of mass and x are too close: stop digging the tree.
 *             dig = False
 *             if new_npt > 2:             # <<<<<<<<<<<<<<
 *                 # Avoiding a Memory leak
 *                 PyMem_Free(pcm)
 */
      }
    }
    __pyx_L18:;

    /* "fmsne_implem.pyx":1543
 *     cdef double* min_ax_c
 *     cdef double* max_ax_c
 *     if node.is_leaf:             # <<<<<<<<<<<<<<
 *         # As the current node is a leaf, the cell should be further divided, unless x and the previous center of mass of the cell (pcm) are too close from each other, as it would be nearly impossible to separate x from the other data points of the leaf, since they are all very close to pcm.
 *         if inf_dist_ptr(pcm, x, node.dim) >= EPSILON_DBL:
 */
  }

  /* "fmsne_implem.pyx":1599
 * 
 *     # Digging the tree to insert x
 *     if dig:             # <<<<<<<<<<<<<<
 *         # Determining the index of the child to process
 *         ic = 0
 */
  __pyx_t_1 = (__pyx_v_dig != 0);
  if (__pyx_t_1) {

    /* "fmsne_implem.pyx":1601
 *     if dig:
 *         # Determining the index of the child to process
 *         ic = 0             # <<<<<<<<<<<<<<
 *         nc = 1
 *         for i in range(node.dim):
 */
    __pyx_v_ic = 0;

    /* "fmsne_implem.pyx":1602
 *         # Determining the index of the child to process
 *         ic = 0
 *         nc = 1             # <<<<<<<<<<<<<<
 *         for i in range(node.dim):
 *             if x[i] >= node.mid_ax[i]:
 */
    __pyx_v_nc = 1;

    /* "fmsne_implem.pyx":1603
 *         ic = 0
 *         nc = 1
 *         for i in range(node.dim):             # <<<<<<<<<<<<<<
 *             if x[i] >= node.mid_ax[i]:
 *                 ic += nc
 */
    __pyx_t_3 = __pyx_v_node->dim;
    __pyx_t_4 = __pyx_t_3;
    for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
      __pyx_v_i = __pyx_t_5;

      /* "fmsne_implem.pyx":1604
 *         nc = 1
 *         for i in range(node.dim):
 *             if x[i] >= node.mid_ax[i]:             # <<<<<<<<<<<<<<
 *                 ic += nc
 *             nc *= 2
 */
      __pyx_t_1 = (((__pyx_v_x[__pyx_v_i]) >= (__pyx_v_node->mid_ax[__pyx_v_i])) != 0);
      if (__pyx_t_1) {

        /* "fmsne_implem.pyx":1605
 *         for i in range(node.dim):
 *             if x[i] >= node.mid_ax[i]:
 *                 ic += nc             # <<<<<<<<<<<<<<
 *             nc *= 2
 *         # Testing whether the current child already exists or not
 */
        __pyx_v_ic = (__pyx_v_ic + __pyx_v_nc);

        /* "fmsne_implem.pyx":1604
 *         nc = 1
 *         for i in range(node.dim):
 *             if x[i] >= node.mid_ax[i]:             # <<<<<<<<<<<<<<
 *                 ic += nc
 *             nc *= 2
 */
      }

      /* "fmsne_implem.pyx":1606
 *             if x[i] >= node.mid_ax[i]:
 *                 ic += nc
 *             nc *= 2             # <<<<<<<<<<<<<<
 *         # Testing whether the current child already exists or not
 *         if node.has_child[ic]:
 */
      __pyx_v_nc = (__pyx_v_nc * 2);
    }

    /* "fmsne_implem.pyx":1608
 *             nc *= 2
 *         # Testing whether the current child already exists or not
 *         if node.has_child[ic]:             # <<<<<<<<<<<<<<
 *             # Updating the current child
 *             addPnt_SpNode(node.childs[ic], x, new_suppl_attr)
 */
    __pyx_t_1 = ((__pyx_v_node->has_child[__pyx_v_ic]) != 0);
    if (__pyx_t_1) {

      /* "fmsne_implem.pyx":1610
 *         if node.has_child[ic]:
 *             # Updating the current child
 *             addPnt_SpNode(node.childs[ic], x, new_suppl_attr)             # <<<<<<<<<<<<<<
 *         else:
 *             # Allocating memory for the data structures of the child
 */
      __pyx_f_12fmsne_implem_addPnt_SpNode((__pyx_v_node->childs[__pyx_v_ic]), __pyx_v_x, __pyx_v_new_suppl_attr);

      /* "fmsne_implem.pyx":1608
 *             nc *= 2
 *         # Testing whether the current child already exists or not
 *         if node.has_child[ic]:             # <<<<<<<<<<<<<<
 *             # Updating the current child
 *             addPnt_SpNode(node.childs[ic], x, new_suppl_attr)
 */
      goto __pyx_L32;
    }

    /* "fmsne_implem.pyx":1613
 *         else:
 *             # Allocating memory for the data structures of the child
 *             min_ax_c = <double*> PyMem_Malloc(sdimd)             # <<<<<<<<<<<<<<
 *             if min_ax_c is NULL:
 *                 printf("Out of memory in addPnt_SpNode")
 */
    /*else*/ {
      __pyx_v_min_ax_c = ((double *)PyMem_Malloc(__pyx_v_sdimd));

      /* "fmsne_implem.pyx":1614
 *             # Allocating memory for the data structures of the child
 *             min_ax_c = <double*> PyMem_Malloc(sdimd)
 *             if min_ax_c is NULL:             # <<<<<<<<<<<<<<
 *                 printf("Out of memory in addPnt_SpNode")
 *                 exit(EXIT_FAILURE)
 */
      __pyx_t_1 = ((__pyx_v_min_ax_c == NULL) != 0);
      if (__pyx_t_1) {

        /* "fmsne_implem.pyx":1615
 *             min_ax_c = <double*> PyMem_Malloc(sdimd)
 *             if min_ax_c is NULL:
 *                 printf("Out of memory in addPnt_SpNode")             # <<<<<<<<<<<<<<
 *                 exit(EXIT_FAILURE)
 *             max_ax_c = <double*> PyMem_Malloc(sdimd)
 */
        (void)(printf(((char const *)"Out of memory in addPnt_SpNode")));

        /* "fmsne_implem.pyx":1616
 *             if min_ax_c is NULL:
 *                 printf("Out of memory in addPnt_SpNode")
 *                 exit(EXIT_FAILURE)             # <<<<<<<<<<<<<<
 *             max_ax_c = <double*> PyMem_Malloc(sdimd)
 *             if max_ax_c is NULL:
 */
        exit(EXIT_FAILURE);

        /* "fmsne_implem.pyx":1614
 *             # Allocating memory for the data structures of the child
 *             min_ax_c = <double*> PyMem_Malloc(sdimd)
 *             if min_ax_c is NULL:             # <<<<<<<<<<<<<<
 *                 printf("Out of memory in addPnt_SpNode")
 *                 exit(EXIT_FAILURE)
 */
      }

      /* "fmsne_implem.pyx":1617
 *                 printf("Out of memory in addPnt_SpNode")
 *                 exit(EXIT_FAILURE)
 *             max_ax_c = <double*> PyMem_Malloc(sdimd)             # <<<<<<<<<<<<<<
 *             if max_ax_c is NULL:
 *                 PyMem_Free(min_ax_c)
 */
      __pyx_v_max_ax_c = ((double *)PyMem_Malloc(__pyx_v_sdimd));

      /* "fmsne_implem.pyx":1618
 *                 exit(EXIT_FAILURE)
 *             max_ax_c = <double*> PyMem_Malloc(sdimd)
 *             if max_ax_c is NULL:             # <<<<<<<<<<<<<<
 *                 PyMem_Free(min_ax_c)
 *                 printf("Out of memory in addPnt_SpNode")
 */
      __pyx_t_1 = ((__pyx_v_max_ax_c == NULL) != 0);
      if (__pyx_t_1) {

        /* "fmsne_implem.pyx":1619
 *             max_ax_c = <double*> PyMem_Malloc(sdimd)
 *             if max_ax_c is NULL:
 *                 PyMem_Free(min_ax_c)             # <<<<<<<<<<<<<<
 *                 printf("Out of memory in addPnt_SpNode")
 *                 exit(EXIT_FAILURE)
 */
        PyMem_Free(__pyx_v_min_ax_c);

        /* "fmsne_implem.pyx":1620
 *             if max_ax_c is NULL:
 *                 PyMem_Free(min_ax_c)
 *                 printf("Out of memory in addPnt_SpNode")             # <<<<<<<<<<<<<<
 *                 exit(EXIT_FAILURE)
 *             for i in range(node.dim):
 */
        (void)(printf(((char const *)"Out of memory in addPnt_SpNode")));

        /* "fmsne_implem.pyx":1621
 *                 PyMem_Free(min_ax_c)
 *                 printf("Out of memory in addPnt_SpNode")
 *                 exit(EXIT_FAILURE)             # <<<<<<<<<<<<<<
 *             for i in range(node.dim):
 *                 if x[i] >= node.mid_ax[i]:
 */
        exit(EXIT_FAILURE);

        /* "fmsne_implem.pyx":1618
 *                 exit(EXIT_FAILURE)
 *             max_ax_c = <double*> PyMem_Malloc(sdimd)
 *             if max_ax_c is NULL:             # <<<<<<<<<<<<<<
 *                 PyMem_Free(min_ax_c)
 *                 printf("Out of memory in addPnt_SpNode")
 */
      }

      /* "fmsne_implem.pyx":1622
 *                 printf("Out of memory in addPnt_SpNode")
 *                 exit(EXIT_FAILURE)
 *             for i in range(node.dim):             # <<<<<<<<<<<<<<
 *                 if x[i] >= node.mid_ax[i]:
 *                     min_ax_c[i] = node.mid_ax[i]
 */
      __pyx_t_3 = __pyx_v_node->dim;
      __pyx_t_4 = __pyx_t_3;
      for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
        __pyx_v_i = __pyx_t_5;

        /* "fmsne_implem.pyx":1623
 *                 exit(EXIT_FAILURE)
 *             for i in range(node.dim):
 *                 if x[i] >= node.mid_ax[i]:             # <<<<<<<<<<<<<<
 *                     min_ax_c[i] = node.mid_ax[i]
 *                     max_ax_c[i] = node.max_ax[i]
 */
        __pyx_t_1 = (((__pyx_v_x[__pyx_v_i]) >= (__pyx_v_node->mid_ax[__pyx_v_i])) != 0);
        if (__pyx_t_1) {

          /* "fmsne_implem.pyx":1624
 *             for i in range(node.dim):
 *                 if x[i] >= node.mid_ax[i]:
 *                     min_ax_c[i] = node.mid_ax[i]             # <<<<<<<<<<<<<<
 *                     max_ax_c[i] = node.max_ax[i]
 *                 else:
 */
          (__pyx_v_min_ax_c[__pyx_v_i]) = (__pyx_v_node->mid_ax[__pyx_v_i]);

          /* "fmsne_implem.pyx":1625
 *                 if x[i] >= node.mid_ax[i]:
 *                     min_ax_c[i] = node.mid_ax[i]
 *                     max_ax_c[i] = node.max_ax[i]             # <<<<<<<<<<<<<<
 *                 else:
 *                     min_ax_c[i] = node.min_ax[i]
 */
          (__pyx_v_max_ax_c[__pyx_v_i]) = (__pyx_v_node->max_ax[__pyx_v_i]);

          /* "fmsne_implem.pyx":1623
 *                 exit(EXIT_FAILURE)
 *             for i in range(node.dim):
 *                 if x[i] >= node.mid_ax[i]:             # <<<<<<<<<<<<<<
 *                     min_ax_c[i] = node.mid_ax[i]
 *                     max_ax_c[i] = node.max_ax[i]
 */
          goto __pyx_L37;
        }

        /* "fmsne_implem.pyx":1627
 *                     max_ax_c[i] = node.max_ax[i]
 *                 else:
 *                     min_ax_c[i] = node.min_ax[i]             # <<<<<<<<<<<<<<
 *                     max_ax_c[i] = node.mid_ax[i]
 *             # Creating a new sub-cell containing x-axis
 */
        /*else*/ {
          (__pyx_v_min_ax_c[__pyx_v_i]) = (__pyx_v_node->min_ax[__pyx_v_i]);

          /* "fmsne_implem.pyx":1628
 *                 else:
 *                     min_ax_c[i] = node.min_ax[i]
 *                     max_ax_c[i] = node.mid_ax[i]             # <<<<<<<<<<<<<<
 *             # Creating a new sub-cell containing x-axis
 *             node.childs[ic] = cinit_SpNode(x, node.dim, min_ax_c, max_ax_c, node.has_sa, new_suppl_attr, node.n_sa)
 */
          (__pyx_v_max_ax_c[__pyx_v_i]) = (__pyx_v_node->mid_ax[__pyx_v_i]);
        }
        __pyx_L37:;
      }

      /* "fmsne_implem.pyx":1630
 *                     max_ax_c[i] = node.mid_ax[i]
 *             # Creating a new sub-cell containing x-axis
 *             node.childs[ic] = cinit_SpNode(x, node.dim, min_ax_c, max_ax_c, node.has_sa, new_suppl_attr, node.n_sa)             # <<<<<<<<<<<<<<
 *             # Indicating that the child is initialized
 *             node.has_child[ic] = True
 */
      (__pyx_v_node->childs[__pyx_v_ic]) = __pyx_f_12fmsne_implem_cinit_SpNode(__pyx_v_x, __pyx_v_node->dim, __pyx_v_min_ax_c, __pyx_v_max_ax_c, __pyx_v_node->has_sa, __pyx_v_new_suppl_attr, __pyx_v_node->n_sa);

      /* "fmsne_implem.pyx":1632
 *             node.childs[ic] = cinit_SpNode(x, node.dim, min_ax_c, max_ax_c, node.has_sa, new_suppl_attr, node.n_sa)
 *             # Indicating that the child is initialized
 *             node.has_child[ic] = True             # <<<<<<<<<<<<<<
 * 
 * cdef inline double approxInteractions_SpNode(const SpNode* node, const double* q, double theta, double acc, double* acc_v, double** acc_vv, double*** acc_vvv, int inter_fct, const double* t_h, double** t_h_v, double* qdiff, Py_ssize_t n_v, Py_ssize_t n_vv) nogil:
 */
      (__pyx_v_node->has_child[__pyx_v_ic]) = 1;
    }
    __pyx_L32:;

    /* "fmsne_implem.pyx":1599
 * 
 *     # Digging the tree to insert x
 *     if dig:             # <<<<<<<<<<<<<<
 *         # Determining the index of the child to process
 *         ic = 0
 */
  }

  /* "fmsne_implem.pyx":1476
 *     return node
 * 
 * cdef inline void addPnt_SpNode(SpNode* node, const double* x, const double* new_suppl_attr):             # <<<<<<<<<<<<<<
 *     """
 *     """
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "fmsne_implem.pyx":1634
 *             node.has_child[ic] = True
 * 
 * cdef inline double approxInteractions_SpNode(const SpNode* node, const double* q, double theta, double acc, double* acc_v, double** acc_vv, double*** acc_vvv, int inter_fct, const double* t_h, double** t_h_v, double* qdiff, Py_ssize_t n_v, Py_ssize_t n_vv) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     theta must be to the square
 */

static CYTHON_INLINE double __pyx_f_12fmsne_implem_approxInteractions_SpNode(struct __pyx_t_12fmsne_implem_SpNode const *__pyx_v_node, double const *__pyx_v_q, double __pyx_v_theta, double __pyx_v_acc, double *__pyx_v_acc_v, double **__pyx_v_acc_vv, double ***__pyx_v_acc_vvv, int __pyx_v_inter_fct, double const *__pyx_v_t_h, double **__pyx_v_t_h_v, double *__pyx_v_qdiff, Py_ssize_t __pyx_v_n_v, Py_ssize_t __pyx_v_n_vv) {
  int __pyx_v_cm_eq_q;
  Py_ssize_t __pyx_v_i;
  Py_ssize_t __pyx_v_j;
  Py_ssize_t __pyx_v_k;
  int __pyx_v_nptm;
  double __pyx_v_sqd;
  double __pyx_v_z;
  double __pyx_r;
  int __pyx_t_1;
  int __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  Py_ssize_t __pyx_t_7;
  Py_ssize_t __pyx_t_8;
  Py_ssize_t __pyx_t_9;
  Py_ssize_t __pyx_t_10;
  Py_ssize_t __pyx_t_11;
  Py_ssize_t __pyx_t_12;
  Py_ssize_t __pyx_t_13;
  Py_ssize_t __pyx_t_14;

  /* "fmsne_implem.pyx":1646
 *     # Double storing the opposite of the squared Euclidean distance between node.cm and q, and double storing intermediate computations
 *     cdef double sqd, z
 *     sqd = sqeucl_dist_ptr(node.cm, q, node.dim)             # <<<<<<<<<<<<<<
 *     # Testing whether the approximation condition is met or not
 *     if node.is_leaf or (node.radius < theta * sqd):
 */
  __pyx_v_sqd = __pyx_f_12fmsne_implem_sqeucl_dist_ptr(__pyx_v_node->cm, __pyx_v_q, __pyx_v_node->dim);

  /* "fmsne_implem.pyx":1648
 *     sqd = sqeucl_dist_ptr(node.cm, q, node.dim)
 *     # Testing whether the approximation condition is met or not
 *     if node.is_leaf or (node.radius < theta * sqd):             # <<<<<<<<<<<<<<
 *         cm_eq_q = (inf_dist_ptr(node.cm, q, node.dim) < EPSILON_DBL)
 *         # Computing sqd, qdiff and nptm
 */
  __pyx_t_2 = (__pyx_v_node->is_leaf != 0);
  if (!__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = ((__pyx_v_node->radius < (__pyx_v_theta * __pyx_v_sqd)) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "fmsne_implem.pyx":1649
 *     # Testing whether the approximation condition is met or not
 *     if node.is_leaf or (node.radius < theta * sqd):
 *         cm_eq_q = (inf_dist_ptr(node.cm, q, node.dim) < EPSILON_DBL)             # <<<<<<<<<<<<<<
 *         # Computing sqd, qdiff and nptm
 *         if cm_eq_q:
 */
    __pyx_v_cm_eq_q = (__pyx_f_12fmsne_implem_inf_dist_ptr(__pyx_v_node->cm, __pyx_v_q, __pyx_v_node->dim) < __pyx_v_12fmsne_implem_EPSILON_DBL);

    /* "fmsne_implem.pyx":1651
 *         cm_eq_q = (inf_dist_ptr(node.cm, q, node.dim) < EPSILON_DBL)
 *         # Computing sqd, qdiff and nptm
 *         if cm_eq_q:             # <<<<<<<<<<<<<<
 *             nptm = node.npt-1
 *         else:
 */
    __pyx_t_1 = (__pyx_v_cm_eq_q != 0);
    if (__pyx_t_1) {

      /* "fmsne_implem.pyx":1652
 *         # Computing sqd, qdiff and nptm
 *         if cm_eq_q:
 *             nptm = node.npt-1             # <<<<<<<<<<<<<<
 *         else:
 *             sqd = -sqd
 */
      __pyx_v_nptm = (__pyx_v_node->npt - 1);

      /* "fmsne_implem.pyx":1651
 *         cm_eq_q = (inf_dist_ptr(node.cm, q, node.dim) < EPSILON_DBL)
 *         # Computing sqd, qdiff and nptm
 *         if cm_eq_q:             # <<<<<<<<<<<<<<
 *             nptm = node.npt-1
 *         else:
 */
      goto __pyx_L6;
    }

    /* "fmsne_implem.pyx":1654
 *             nptm = node.npt-1
 *         else:
 *             sqd = -sqd             # <<<<<<<<<<<<<<
 *             for k in range(node.dim):
 *                 qdiff[k] = q[k] - node.cm[k]
 */
    /*else*/ {
      __pyx_v_sqd = (-__pyx_v_sqd);

      /* "fmsne_implem.pyx":1655
 *         else:
 *             sqd = -sqd
 *             for k in range(node.dim):             # <<<<<<<<<<<<<<
 *                 qdiff[k] = q[k] - node.cm[k]
 *         if inter_fct == 6:
 */
      __pyx_t_3 = __pyx_v_node->dim;
      __pyx_t_4 = __pyx_t_3;
      for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
        __pyx_v_k = __pyx_t_5;

        /* "fmsne_implem.pyx":1656
 *             sqd = -sqd
 *             for k in range(node.dim):
 *                 qdiff[k] = q[k] - node.cm[k]             # <<<<<<<<<<<<<<
 *         if inter_fct == 6:
 *             # In this case, if q is not on the current center of mass, acc_v is updated and t_h_v and node.suppl_attr are considered.
 */
        (__pyx_v_qdiff[__pyx_v_k]) = ((__pyx_v_q[__pyx_v_k]) - (__pyx_v_node->cm[__pyx_v_k]));
      }
    }
    __pyx_L6:;

    /* "fmsne_implem.pyx":1657
 *             for k in range(node.dim):
 *                 qdiff[k] = q[k] - node.cm[k]
 *         if inter_fct == 6:             # <<<<<<<<<<<<<<
 *             # In this case, if q is not on the current center of mass, acc_v is updated and t_h_v and node.suppl_attr are considered.
 *             if not cm_eq_q:
 */
    switch (__pyx_v_inter_fct) {
      case 6:

      /* "fmsne_implem.pyx":1659
 *         if inter_fct == 6:
 *             # In this case, if q is not on the current center of mass, acc_v is updated and t_h_v and node.suppl_attr are considered.
 *             if not cm_eq_q:             # <<<<<<<<<<<<<<
 *                 z = 0.0
 *                 for i in range(n_v):
 */
      __pyx_t_1 = ((!(__pyx_v_cm_eq_q != 0)) != 0);
      if (__pyx_t_1) {

        /* "fmsne_implem.pyx":1660
 *             # In this case, if q is not on the current center of mass, acc_v is updated and t_h_v and node.suppl_attr are considered.
 *             if not cm_eq_q:
 *                 z = 0.0             # <<<<<<<<<<<<<<
 *                 for i in range(n_v):
 *                     z += exp(sqd/t_h_v[i][n_vv]) * node.suppl_attr[i]
 */
        __pyx_v_z = 0.0;

        /* "fmsne_implem.pyx":1661
 *             if not cm_eq_q:
 *                 z = 0.0
 *                 for i in range(n_v):             # <<<<<<<<<<<<<<
 *                     z += exp(sqd/t_h_v[i][n_vv]) * node.suppl_attr[i]
 *                 z *= node.npt
 */
        __pyx_t_3 = __pyx_v_n_v;
        __pyx_t_4 = __pyx_t_3;
        for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
          __pyx_v_i = __pyx_t_5;

          /* "fmsne_implem.pyx":1662
 *                 z = 0.0
 *                 for i in range(n_v):
 *                     z += exp(sqd/t_h_v[i][n_vv]) * node.suppl_attr[i]             # <<<<<<<<<<<<<<
 *                 z *= node.npt
 *                 for k in range(node.dim):
 */
          __pyx_v_z = (__pyx_v_z + (exp((__pyx_v_sqd / ((__pyx_v_t_h_v[__pyx_v_i])[__pyx_v_n_vv]))) * (__pyx_v_node->suppl_attr[__pyx_v_i])));
        }

        /* "fmsne_implem.pyx":1663
 *                 for i in range(n_v):
 *                     z += exp(sqd/t_h_v[i][n_vv]) * node.suppl_attr[i]
 *                 z *= node.npt             # <<<<<<<<<<<<<<
 *                 for k in range(node.dim):
 *                     acc_v[k] -= z*qdiff[k]
 */
        __pyx_v_z = (__pyx_v_z * __pyx_v_node->npt);

        /* "fmsne_implem.pyx":1664
 *                     z += exp(sqd/t_h_v[i][n_vv]) * node.suppl_attr[i]
 *                 z *= node.npt
 *                 for k in range(node.dim):             # <<<<<<<<<<<<<<
 *                     acc_v[k] -= z*qdiff[k]
 *         elif inter_fct == 1:
 */
        __pyx_t_3 = __pyx_v_node->dim;
        __pyx_t_4 = __pyx_t_3;
        for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
          __pyx_v_k = __pyx_t_5;

          /* "fmsne_implem.pyx":1665
 *                 z *= node.npt
 *                 for k in range(node.dim):
 *                     acc_v[k] -= z*qdiff[k]             # <<<<<<<<<<<<<<
 *         elif inter_fct == 1:
 *             # In this case, acc_vv and acc_vvv are updated, and t_h_v is used.
 */
          __pyx_t_6 = __pyx_v_k;
          (__pyx_v_acc_v[__pyx_t_6]) = ((__pyx_v_acc_v[__pyx_t_6]) - (__pyx_v_z * (__pyx_v_qdiff[__pyx_v_k])));
        }

        /* "fmsne_implem.pyx":1659
 *         if inter_fct == 6:
 *             # In this case, if q is not on the current center of mass, acc_v is updated and t_h_v and node.suppl_attr are considered.
 *             if not cm_eq_q:             # <<<<<<<<<<<<<<
 *                 z = 0.0
 *                 for i in range(n_v):
 */
      }

      /* "fmsne_implem.pyx":1657
 *             for k in range(node.dim):
 *                 qdiff[k] = q[k] - node.cm[k]
 *         if inter_fct == 6:             # <<<<<<<<<<<<<<
 *             # In this case, if q is not on the current center of mass, acc_v is updated and t_h_v and node.suppl_attr are considered.
 *             if not cm_eq_q:
 */
      break;
      case 1:

      /* "fmsne_implem.pyx":1669
 *             # In this case, acc_vv and acc_vvv are updated, and t_h_v is used.
 *             # Testing whether q is on the current center of mass or not
 *             if cm_eq_q:             # <<<<<<<<<<<<<<
 *                 # As q is on node.cm, only acc_vv must be updated
 *                 for i in range(n_v):
 */
      __pyx_t_1 = (__pyx_v_cm_eq_q != 0);
      if (__pyx_t_1) {

        /* "fmsne_implem.pyx":1671
 *             if cm_eq_q:
 *                 # As q is on node.cm, only acc_vv must be updated
 *                 for i in range(n_v):             # <<<<<<<<<<<<<<
 *                     for j in range(n_vv):
 *                         acc_vv[i][j] += nptm
 */
        __pyx_t_3 = __pyx_v_n_v;
        __pyx_t_4 = __pyx_t_3;
        for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
          __pyx_v_i = __pyx_t_5;

          /* "fmsne_implem.pyx":1672
 *                 # As q is on node.cm, only acc_vv must be updated
 *                 for i in range(n_v):
 *                     for j in range(n_vv):             # <<<<<<<<<<<<<<
 *                         acc_vv[i][j] += nptm
 *             else:
 */
          __pyx_t_6 = __pyx_v_n_vv;
          __pyx_t_7 = __pyx_t_6;
          for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_7; __pyx_t_8+=1) {
            __pyx_v_j = __pyx_t_8;

            /* "fmsne_implem.pyx":1673
 *                 for i in range(n_v):
 *                     for j in range(n_vv):
 *                         acc_vv[i][j] += nptm             # <<<<<<<<<<<<<<
 *             else:
 *                 # Updating acc_vv
 */
            __pyx_t_9 = __pyx_v_i;
            __pyx_t_10 = __pyx_v_j;
            ((__pyx_v_acc_vv[__pyx_t_9])[__pyx_t_10]) = (((__pyx_v_acc_vv[__pyx_t_9])[__pyx_t_10]) + __pyx_v_nptm);
          }
        }

        /* "fmsne_implem.pyx":1669
 *             # In this case, acc_vv and acc_vvv are updated, and t_h_v is used.
 *             # Testing whether q is on the current center of mass or not
 *             if cm_eq_q:             # <<<<<<<<<<<<<<
 *                 # As q is on node.cm, only acc_vv must be updated
 *                 for i in range(n_v):
 */
        goto __pyx_L14;
      }

      /* "fmsne_implem.pyx":1676
 *             else:
 *                 # Updating acc_vv
 *                 for i in range(n_v):             # <<<<<<<<<<<<<<
 *                     for j in range(n_vv):
 *                         z = node.npt * exp(sqd/t_h_v[i][j])
 */
      /*else*/ {
        __pyx_t_3 = __pyx_v_n_v;
        __pyx_t_4 = __pyx_t_3;
        for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
          __pyx_v_i = __pyx_t_5;

          /* "fmsne_implem.pyx":1677
 *                 # Updating acc_vv
 *                 for i in range(n_v):
 *                     for j in range(n_vv):             # <<<<<<<<<<<<<<
 *                         z = node.npt * exp(sqd/t_h_v[i][j])
 *                         acc_vv[i][j] += z
 */
          __pyx_t_6 = __pyx_v_n_vv;
          __pyx_t_7 = __pyx_t_6;
          for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_7; __pyx_t_8+=1) {
            __pyx_v_j = __pyx_t_8;

            /* "fmsne_implem.pyx":1678
 *                 for i in range(n_v):
 *                     for j in range(n_vv):
 *                         z = node.npt * exp(sqd/t_h_v[i][j])             # <<<<<<<<<<<<<<
 *                         acc_vv[i][j] += z
 *                         # Updating acc_vvv
 */
            __pyx_v_z = (__pyx_v_node->npt * exp((__pyx_v_sqd / ((__pyx_v_t_h_v[__pyx_v_i])[__pyx_v_j]))));

            /* "fmsne_implem.pyx":1679
 *                     for j in range(n_vv):
 *                         z = node.npt * exp(sqd/t_h_v[i][j])
 *                         acc_vv[i][j] += z             # <<<<<<<<<<<<<<
 *                         # Updating acc_vvv
 *                         for k in range(node.dim):
 */
            __pyx_t_9 = __pyx_v_i;
            __pyx_t_10 = __pyx_v_j;
            ((__pyx_v_acc_vv[__pyx_t_9])[__pyx_t_10]) = (((__pyx_v_acc_vv[__pyx_t_9])[__pyx_t_10]) + __pyx_v_z);

            /* "fmsne_implem.pyx":1681
 *                         acc_vv[i][j] += z
 *                         # Updating acc_vvv
 *                         for k in range(node.dim):             # <<<<<<<<<<<<<<
 *                             acc_vvv[i][j][k] += z*qdiff[k]
 *         elif inter_fct == 7:
 */
            __pyx_t_9 = __pyx_v_node->dim;
            __pyx_t_10 = __pyx_t_9;
            for (__pyx_t_11 = 0; __pyx_t_11 < __pyx_t_10; __pyx_t_11+=1) {
              __pyx_v_k = __pyx_t_11;

              /* "fmsne_implem.pyx":1682
 *                         # Updating acc_vvv
 *                         for k in range(node.dim):
 *                             acc_vvv[i][j][k] += z*qdiff[k]             # <<<<<<<<<<<<<<
 *         elif inter_fct == 7:
 *             # In this case, acc and acc_v are updated
 */
              __pyx_t_12 = __pyx_v_i;
              __pyx_t_13 = __pyx_v_j;
              __pyx_t_14 = __pyx_v_k;
              (((__pyx_v_acc_vvv[__pyx_t_12])[__pyx_t_13])[__pyx_t_14]) = ((((__pyx_v_acc_vvv[__pyx_t_12])[__pyx_t_13])[__pyx_t_14]) + (__pyx_v_z * (__pyx_v_qdiff[__pyx_v_k])));
            }
          }
        }
      }
      __pyx_L14:;

      /* "fmsne_implem.pyx":1666
 *                 for k in range(node.dim):
 *                     acc_v[k] -= z*qdiff[k]
 *         elif inter_fct == 1:             # <<<<<<<<<<<<<<
 *             # In this case, acc_vv and acc_vvv are updated, and t_h_v is used.
 *             # Testing whether q is on the current center of mass or not
 */
      break;
      case 7:

      /* "fmsne_implem.pyx":1686
 *             # In this case, acc and acc_v are updated
 *             # Testing whether q is on the current center of mass or not
 *             if cm_eq_q:             # <<<<<<<<<<<<<<
 *                 acc += nptm
 *             else:
 */
      __pyx_t_1 = (__pyx_v_cm_eq_q != 0);
      if (__pyx_t_1) {

        /* "fmsne_implem.pyx":1687
 *             # Testing whether q is on the current center of mass or not
 *             if cm_eq_q:
 *                 acc += nptm             # <<<<<<<<<<<<<<
 *             else:
 *                 z = 1.0/(1.0 - sqd)
 */
        __pyx_v_acc = (__pyx_v_acc + __pyx_v_nptm);

        /* "fmsne_implem.pyx":1686
 *             # In this case, acc and acc_v are updated
 *             # Testing whether q is on the current center of mass or not
 *             if cm_eq_q:             # <<<<<<<<<<<<<<
 *                 acc += nptm
 *             else:
 */
        goto __pyx_L25;
      }

      /* "fmsne_implem.pyx":1689
 *                 acc += nptm
 *             else:
 *                 z = 1.0/(1.0 - sqd)             # <<<<<<<<<<<<<<
 *                 sqd = node.npt * z
 *                 acc += sqd
 */
      /*else*/ {
        __pyx_v_z = (1.0 / (1.0 - __pyx_v_sqd));

        /* "fmsne_implem.pyx":1690
 *             else:
 *                 z = 1.0/(1.0 - sqd)
 *                 sqd = node.npt * z             # <<<<<<<<<<<<<<
 *                 acc += sqd
 *                 z *= sqd
 */
        __pyx_v_sqd = (__pyx_v_node->npt * __pyx_v_z);

        /* "fmsne_implem.pyx":1691
 *                 z = 1.0/(1.0 - sqd)
 *                 sqd = node.npt * z
 *                 acc += sqd             # <<<<<<<<<<<<<<
 *                 z *= sqd
 *                 for k in range(n_v):
 */
        __pyx_v_acc = (__pyx_v_acc + __pyx_v_sqd);

        /* "fmsne_implem.pyx":1692
 *                 sqd = node.npt * z
 *                 acc += sqd
 *                 z *= sqd             # <<<<<<<<<<<<<<
 *                 for k in range(n_v):
 *                     acc_v[k] -= z*qdiff[k]
 */
        __pyx_v_z = (__pyx_v_z * __pyx_v_sqd);

        /* "fmsne_implem.pyx":1693
 *                 acc += sqd
 *                 z *= sqd
 *                 for k in range(n_v):             # <<<<<<<<<<<<<<
 *                     acc_v[k] -= z*qdiff[k]
 *         elif inter_fct == 5:
 */
        __pyx_t_3 = __pyx_v_n_v;
        __pyx_t_4 = __pyx_t_3;
        for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
          __pyx_v_k = __pyx_t_5;

          /* "fmsne_implem.pyx":1694
 *                 z *= sqd
 *                 for k in range(n_v):
 *                     acc_v[k] -= z*qdiff[k]             # <<<<<<<<<<<<<<
 *         elif inter_fct == 5:
 *             # In this case, if q is not on the current center of mass, acc_v is updated and t_h and node.suppl_attr are considered.
 */
          __pyx_t_6 = __pyx_v_k;
          (__pyx_v_acc_v[__pyx_t_6]) = ((__pyx_v_acc_v[__pyx_t_6]) - (__pyx_v_z * (__pyx_v_qdiff[__pyx_v_k])));
        }
      }
      __pyx_L25:;

      /* "fmsne_implem.pyx":1683
 *                         for k in range(node.dim):
 *                             acc_vvv[i][j][k] += z*qdiff[k]
 *         elif inter_fct == 7:             # <<<<<<<<<<<<<<
 *             # In this case, acc and acc_v are updated
 *             # Testing whether q is on the current center of mass or not
 */
      break;
      case 5:

      /* "fmsne_implem.pyx":1697
 *         elif inter_fct == 5:
 *             # In this case, if q is not on the current center of mass, acc_v is updated and t_h and node.suppl_attr are considered.
 *             if not cm_eq_q:             # <<<<<<<<<<<<<<
 *                 z = 0.0
 *                 for i in range(n_v):
 */
      __pyx_t_1 = ((!(__pyx_v_cm_eq_q != 0)) != 0);
      if (__pyx_t_1) {

        /* "fmsne_implem.pyx":1698
 *             # In this case, if q is not on the current center of mass, acc_v is updated and t_h and node.suppl_attr are considered.
 *             if not cm_eq_q:
 *                 z = 0.0             # <<<<<<<<<<<<<<
 *                 for i in range(n_v):
 *                     z += exp(sqd/t_h[i]) * node.suppl_attr[i]
 */
        __pyx_v_z = 0.0;

        /* "fmsne_implem.pyx":1699
 *             if not cm_eq_q:
 *                 z = 0.0
 *                 for i in range(n_v):             # <<<<<<<<<<<<<<
 *                     z += exp(sqd/t_h[i]) * node.suppl_attr[i]
 *                 z *= node.npt
 */
        __pyx_t_3 = __pyx_v_n_v;
        __pyx_t_4 = __pyx_t_3;
        for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
          __pyx_v_i = __pyx_t_5;

          /* "fmsne_implem.pyx":1700
 *                 z = 0.0
 *                 for i in range(n_v):
 *                     z += exp(sqd/t_h[i]) * node.suppl_attr[i]             # <<<<<<<<<<<<<<
 *                 z *= node.npt
 *                 for k in range(node.dim):
 */
          __pyx_v_z = (__pyx_v_z + (exp((__pyx_v_sqd / ((double)(__pyx_v_t_h[__pyx_v_i])))) * (__pyx_v_node->suppl_attr[__pyx_v_i])));
        }

        /* "fmsne_implem.pyx":1701
 *                 for i in range(n_v):
 *                     z += exp(sqd/t_h[i]) * node.suppl_attr[i]
 *                 z *= node.npt             # <<<<<<<<<<<<<<
 *                 for k in range(node.dim):
 *                     acc_v[k] -= z*qdiff[k]
 */
        __pyx_v_z = (__pyx_v_z * __pyx_v_node->npt);

        /* "fmsne_implem.pyx":1702
 *                     z += exp(sqd/t_h[i]) * node.suppl_attr[i]
 *                 z *= node.npt
 *                 for k in range(node.dim):             # <<<<<<<<<<<<<<
 *                     acc_v[k] -= z*qdiff[k]
 *         elif inter_fct == 0:
 */
        __pyx_t_3 = __pyx_v_node->dim;
        __pyx_t_4 = __pyx_t_3;
        for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
          __pyx_v_k = __pyx_t_5;

          /* "fmsne_implem.pyx":1703
 *                 z *= node.npt
 *                 for k in range(node.dim):
 *                     acc_v[k] -= z*qdiff[k]             # <<<<<<<<<<<<<<
 *         elif inter_fct == 0:
 *             # In this case, acc_v and acc_vv are updated, and t_h is used.
 */
          __pyx_t_6 = __pyx_v_k;
          (__pyx_v_acc_v[__pyx_t_6]) = ((__pyx_v_acc_v[__pyx_t_6]) - (__pyx_v_z * (__pyx_v_qdiff[__pyx_v_k])));
        }

        /* "fmsne_implem.pyx":1697
 *         elif inter_fct == 5:
 *             # In this case, if q is not on the current center of mass, acc_v is updated and t_h and node.suppl_attr are considered.
 *             if not cm_eq_q:             # <<<<<<<<<<<<<<
 *                 z = 0.0
 *                 for i in range(n_v):
 */
      }

      /* "fmsne_implem.pyx":1695
 *                 for k in range(n_v):
 *                     acc_v[k] -= z*qdiff[k]
 *         elif inter_fct == 5:             # <<<<<<<<<<<<<<
 *             # In this case, if q is not on the current center of mass, acc_v is updated and t_h and node.suppl_attr are considered.
 *             if not cm_eq_q:
 */
      break;
      case 0:

      /* "fmsne_implem.pyx":1707
 *             # In this case, acc_v and acc_vv are updated, and t_h is used.
 *             # Testing whether q is on the current center of mass or not
 *             if cm_eq_q:             # <<<<<<<<<<<<<<
 *                 # As q is on node.cm, only acc_v must be updated
 *                 for i in range(n_v):
 */
      __pyx_t_1 = (__pyx_v_cm_eq_q != 0);
      if (__pyx_t_1) {

        /* "fmsne_implem.pyx":1709
 *             if cm_eq_q:
 *                 # As q is on node.cm, only acc_v must be updated
 *                 for i in range(n_v):             # <<<<<<<<<<<<<<
 *                     acc_v[i] += nptm
 *             else:
 */
        __pyx_t_3 = __pyx_v_n_v;
        __pyx_t_4 = __pyx_t_3;
        for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
          __pyx_v_i = __pyx_t_5;

          /* "fmsne_implem.pyx":1710
 *                 # As q is on node.cm, only acc_v must be updated
 *                 for i in range(n_v):
 *                     acc_v[i] += nptm             # <<<<<<<<<<<<<<
 *             else:
 *                 # Updating acc_v
 */
          __pyx_t_6 = __pyx_v_i;
          (__pyx_v_acc_v[__pyx_t_6]) = ((__pyx_v_acc_v[__pyx_t_6]) + __pyx_v_nptm);
        }

        /* "fmsne_implem.pyx":1707
 *             # In this case, acc_v and acc_vv are updated, and t_h is used.
 *             # Testing whether q is on the current center of mass or not
 *             if cm_eq_q:             # <<<<<<<<<<<<<<
 *                 # As q is on node.cm, only acc_v must be updated
 *                 for i in range(n_v):
 */
        goto __pyx_L33;
      }

      /* "fmsne_implem.pyx":1713
 *             else:
 *                 # Updating acc_v
 *                 for i in range(n_v):             # <<<<<<<<<<<<<<
 *                     z = node.npt * exp(sqd/t_h[i])
 *                     acc_v[i] += z
 */
      /*else*/ {
        __pyx_t_3 = __pyx_v_n_v;
        __pyx_t_4 = __pyx_t_3;
        for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
          __pyx_v_i = __pyx_t_5;

          /* "fmsne_implem.pyx":1714
 *                 # Updating acc_v
 *                 for i in range(n_v):
 *                     z = node.npt * exp(sqd/t_h[i])             # <<<<<<<<<<<<<<
 *                     acc_v[i] += z
 *                     # Updating acc_vv
 */
          __pyx_v_z = (__pyx_v_node->npt * exp((__pyx_v_sqd / ((double)(__pyx_v_t_h[__pyx_v_i])))));

          /* "fmsne_implem.pyx":1715
 *                 for i in range(n_v):
 *                     z = node.npt * exp(sqd/t_h[i])
 *                     acc_v[i] += z             # <<<<<<<<<<<<<<
 *                     # Updating acc_vv
 *                     for k in range(node.dim):
 */
          __pyx_t_6 = __pyx_v_i;
          (__pyx_v_acc_v[__pyx_t_6]) = ((__pyx_v_acc_v[__pyx_t_6]) + __pyx_v_z);

          /* "fmsne_implem.pyx":1717
 *                     acc_v[i] += z
 *                     # Updating acc_vv
 *                     for k in range(node.dim):             # <<<<<<<<<<<<<<
 *                         acc_vv[i][k] += z*qdiff[k]
 *         elif inter_fct == 2:
 */
          __pyx_t_6 = __pyx_v_node->dim;
          __pyx_t_7 = __pyx_t_6;
          for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_7; __pyx_t_8+=1) {
            __pyx_v_k = __pyx_t_8;

            /* "fmsne_implem.pyx":1718
 *                     # Updating acc_vv
 *                     for k in range(node.dim):
 *                         acc_vv[i][k] += z*qdiff[k]             # <<<<<<<<<<<<<<
 *         elif inter_fct == 2:
 *             # In this case, if q is not on the current center of mass, acc_v is updated and t_h and node.suppl_attr are considered.
 */
            __pyx_t_9 = __pyx_v_i;
            __pyx_t_10 = __pyx_v_k;
            ((__pyx_v_acc_vv[__pyx_t_9])[__pyx_t_10]) = (((__pyx_v_acc_vv[__pyx_t_9])[__pyx_t_10]) + (__pyx_v_z * (__pyx_v_qdiff[__pyx_v_k])));
          }
        }
      }
      __pyx_L33:;

      /* "fmsne_implem.pyx":1704
 *                 for k in range(node.dim):
 *                     acc_v[k] -= z*qdiff[k]
 *         elif inter_fct == 0:             # <<<<<<<<<<<<<<
 *             # In this case, acc_v and acc_vv are updated, and t_h is used.
 *             # Testing whether q is on the current center of mass or not
 */
      break;
      case 2:

      /* "fmsne_implem.pyx":1721
 *         elif inter_fct == 2:
 *             # In this case, if q is not on the current center of mass, acc_v is updated and t_h and node.suppl_attr are considered.
 *             if not cm_eq_q:             # <<<<<<<<<<<<<<
 *                 z = 0.0
 *                 for i in range(n_v):
 */
      __pyx_t_1 = ((!(__pyx_v_cm_eq_q != 0)) != 0);
      if (__pyx_t_1) {

        /* "fmsne_implem.pyx":1722
 *             # In this case, if q is not on the current center of mass, acc_v is updated and t_h and node.suppl_attr are considered.
 *             if not cm_eq_q:
 *                 z = 0.0             # <<<<<<<<<<<<<<
 *                 for i in range(n_v):
 *                     z += exp(sqd/t_h[i]) * node.suppl_attr[i]
 */
        __pyx_v_z = 0.0;

        /* "fmsne_implem.pyx":1723
 *             if not cm_eq_q:
 *                 z = 0.0
 *                 for i in range(n_v):             # <<<<<<<<<<<<<<
 *                     z += exp(sqd/t_h[i]) * node.suppl_attr[i]
 *                 z *= node.npt
 */
        __pyx_t_3 = __pyx_v_n_v;
        __pyx_t_4 = __pyx_t_3;
        for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
          __pyx_v_i = __pyx_t_5;

          /* "fmsne_implem.pyx":1724
 *                 z = 0.0
 *                 for i in range(n_v):
 *                     z += exp(sqd/t_h[i]) * node.suppl_attr[i]             # <<<<<<<<<<<<<<
 *                 z *= node.npt
 *                 for k in range(node.dim):
 */
          __pyx_v_z = (__pyx_v_z + (exp((__pyx_v_sqd / ((double)(__pyx_v_t_h[__pyx_v_i])))) * (__pyx_v_node->suppl_attr[__pyx_v_i])));
        }

        /* "fmsne_implem.pyx":1725
 *                 for i in range(n_v):
 *                     z += exp(sqd/t_h[i]) * node.suppl_attr[i]
 *                 z *= node.npt             # <<<<<<<<<<<<<<
 *                 for k in range(node.dim):
 *                     acc_v[k] += z*qdiff[k]
 */
        __pyx_v_z = (__pyx_v_z * __pyx_v_node->npt);

        /* "fmsne_implem.pyx":1726
 *                     z += exp(sqd/t_h[i]) * node.suppl_attr[i]
 *                 z *= node.npt
 *                 for k in range(node.dim):             # <<<<<<<<<<<<<<
 *                     acc_v[k] += z*qdiff[k]
 *         elif inter_fct == 3:
 */
        __pyx_t_3 = __pyx_v_node->dim;
        __pyx_t_4 = __pyx_t_3;
        for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
          __pyx_v_k = __pyx_t_5;

          /* "fmsne_implem.pyx":1727
 *                 z *= node.npt
 *                 for k in range(node.dim):
 *                     acc_v[k] += z*qdiff[k]             # <<<<<<<<<<<<<<
 *         elif inter_fct == 3:
 *             # In this case, acc_v is updated, and t_h is used.
 */
          __pyx_t_6 = __pyx_v_k;
          (__pyx_v_acc_v[__pyx_t_6]) = ((__pyx_v_acc_v[__pyx_t_6]) + (__pyx_v_z * (__pyx_v_qdiff[__pyx_v_k])));
        }

        /* "fmsne_implem.pyx":1721
 *         elif inter_fct == 2:
 *             # In this case, if q is not on the current center of mass, acc_v is updated and t_h and node.suppl_attr are considered.
 *             if not cm_eq_q:             # <<<<<<<<<<<<<<
 *                 z = 0.0
 *                 for i in range(n_v):
 */
      }

      /* "fmsne_implem.pyx":1719
 *                     for k in range(node.dim):
 *                         acc_vv[i][k] += z*qdiff[k]
 *         elif inter_fct == 2:             # <<<<<<<<<<<<<<
 *             # In this case, if q is not on the current center of mass, acc_v is updated and t_h and node.suppl_attr are considered.
 *             if not cm_eq_q:
 */
      break;
      case 3:

      /* "fmsne_implem.pyx":1731
 *             # In this case, acc_v is updated, and t_h is used.
 *             # Testing whether q is on the current center of mass or not
 *             if cm_eq_q:             # <<<<<<<<<<<<<<
 *                 # As q is on node.cm, only acc_v must be updated
 *                 for i in range(n_v):
 */
      __pyx_t_1 = (__pyx_v_cm_eq_q != 0);
      if (__pyx_t_1) {

        /* "fmsne_implem.pyx":1733
 *             if cm_eq_q:
 *                 # As q is on node.cm, only acc_v must be updated
 *                 for i in range(n_v):             # <<<<<<<<<<<<<<
 *                     acc_v[i] += nptm
 *             else:
 */
        __pyx_t_3 = __pyx_v_n_v;
        __pyx_t_4 = __pyx_t_3;
        for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
          __pyx_v_i = __pyx_t_5;

          /* "fmsne_implem.pyx":1734
 *                 # As q is on node.cm, only acc_v must be updated
 *                 for i in range(n_v):
 *                     acc_v[i] += nptm             # <<<<<<<<<<<<<<
 *             else:
 *                 # Updating acc_v
 */
          __pyx_t_6 = __pyx_v_i;
          (__pyx_v_acc_v[__pyx_t_6]) = ((__pyx_v_acc_v[__pyx_t_6]) + __pyx_v_nptm);
        }

        /* "fmsne_implem.pyx":1731
 *             # In this case, acc_v is updated, and t_h is used.
 *             # Testing whether q is on the current center of mass or not
 *             if cm_eq_q:             # <<<<<<<<<<<<<<
 *                 # As q is on node.cm, only acc_v must be updated
 *                 for i in range(n_v):
 */
        goto __pyx_L45;
      }

      /* "fmsne_implem.pyx":1737
 *             else:
 *                 # Updating acc_v
 *                 for i in range(n_v):             # <<<<<<<<<<<<<<
 *                     acc_v[i] += node.npt * exp(sqd/t_h[i])
 *         elif inter_fct == 4:
 */
      /*else*/ {
        __pyx_t_3 = __pyx_v_n_v;
        __pyx_t_4 = __pyx_t_3;
        for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
          __pyx_v_i = __pyx_t_5;

          /* "fmsne_implem.pyx":1738
 *                 # Updating acc_v
 *                 for i in range(n_v):
 *                     acc_v[i] += node.npt * exp(sqd/t_h[i])             # <<<<<<<<<<<<<<
 *         elif inter_fct == 4:
 *             # In this case, acc_vv is updated, and t_h_v is used.
 */
          __pyx_t_6 = __pyx_v_i;
          (__pyx_v_acc_v[__pyx_t_6]) = ((__pyx_v_acc_v[__pyx_t_6]) + (__pyx_v_node->npt * exp((__pyx_v_sqd / ((double)(__pyx_v_t_h[__pyx_v_i]))))));
        }
      }
      __pyx_L45:;

      /* "fmsne_implem.pyx":1728
 *                 for k in range(node.dim):
 *                     acc_v[k] += z*qdiff[k]
 *         elif inter_fct == 3:             # <<<<<<<<<<<<<<
 *             # In this case, acc_v is updated, and t_h is used.
 *             # Testing whether q is on the current center of mass or not
 */
      break;
      case 4:

      /* "fmsne_implem.pyx":1742
 *             # In this case, acc_vv is updated, and t_h_v is used.
 *             # Testing whether q is on the current center of mass or not
 *             if cm_eq_q:             # <<<<<<<<<<<<<<
 *                 # As q is on node.cm, only acc_vv must be updated
 *                 for i in range(n_v):
 */
      __pyx_t_1 = (__pyx_v_cm_eq_q != 0);
      if (__pyx_t_1) {

        /* "fmsne_implem.pyx":1744
 *             if cm_eq_q:
 *                 # As q is on node.cm, only acc_vv must be updated
 *                 for i in range(n_v):             # <<<<<<<<<<<<<<
 *                     for j in range(n_vv):
 *                         acc_vv[i][j] += nptm
 */
        __pyx_t_3 = __pyx_v_n_v;
        __pyx_t_4 = __pyx_t_3;
        for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
          __pyx_v_i = __pyx_t_5;

          /* "fmsne_implem.pyx":1745
 *                 # As q is on node.cm, only acc_vv must be updated
 *                 for i in range(n_v):
 *                     for j in range(n_vv):             # <<<<<<<<<<<<<<
 *                         acc_vv[i][j] += nptm
 *             else:
 */
          __pyx_t_6 = __pyx_v_n_vv;
          __pyx_t_7 = __pyx_t_6;
          for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_7; __pyx_t_8+=1) {
            __pyx_v_j = __pyx_t_8;

            /* "fmsne_implem.pyx":1746
 *                 for i in range(n_v):
 *                     for j in range(n_vv):
 *                         acc_vv[i][j] += nptm             # <<<<<<<<<<<<<<
 *             else:
 *                 # Updating acc_vv
 */
            __pyx_t_9 = __pyx_v_i;
            __pyx_t_10 = __pyx_v_j;
            ((__pyx_v_acc_vv[__pyx_t_9])[__pyx_t_10]) = (((__pyx_v_acc_vv[__pyx_t_9])[__pyx_t_10]) + __pyx_v_nptm);
          }
        }

        /* "fmsne_implem.pyx":1742
 *             # In this case, acc_vv is updated, and t_h_v is used.
 *             # Testing whether q is on the current center of mass or not
 *             if cm_eq_q:             # <<<<<<<<<<<<<<
 *                 # As q is on node.cm, only acc_vv must be updated
 *                 for i in range(n_v):
 */
        goto __pyx_L50;
      }

      /* "fmsne_implem.pyx":1749
 *             else:
 *                 # Updating acc_vv
 *                 for i in range(n_v):             # <<<<<<<<<<<<<<
 *                     for j in range(n_vv):
 *                         acc_vv[i][j] += node.npt * exp(sqd/t_h_v[i][j])
 */
      /*else*/ {
        __pyx_t_3 = __pyx_v_n_v;
        __pyx_t_4 = __pyx_t_3;
        for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
          __pyx_v_i = __pyx_t_5;

          /* "fmsne_implem.pyx":1750
 *                 # Updating acc_vv
 *                 for i in range(n_v):
 *                     for j in range(n_vv):             # <<<<<<<<<<<<<<
 *                         acc_vv[i][j] += node.npt * exp(sqd/t_h_v[i][j])
 *     else:
 */
          __pyx_t_6 = __pyx_v_n_vv;
          __pyx_t_7 = __pyx_t_6;
          for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_7; __pyx_t_8+=1) {
            __pyx_v_j = __pyx_t_8;

            /* "fmsne_implem.pyx":1751
 *                 for i in range(n_v):
 *                     for j in range(n_vv):
 *                         acc_vv[i][j] += node.npt * exp(sqd/t_h_v[i][j])             # <<<<<<<<<<<<<<
 *     else:
 *         for i in range(node.n_childs):
 */
            __pyx_t_9 = __pyx_v_i;
            __pyx_t_10 = __pyx_v_j;
            ((__pyx_v_acc_vv[__pyx_t_9])[__pyx_t_10]) = (((__pyx_v_acc_vv[__pyx_t_9])[__pyx_t_10]) + (__pyx_v_node->npt * exp((__pyx_v_sqd / ((__pyx_v_t_h_v[__pyx_v_i])[__pyx_v_j])))));
          }
        }
      }
      __pyx_L50:;

      /* "fmsne_implem.pyx":1739
 *                 for i in range(n_v):
 *                     acc_v[i] += node.npt * exp(sqd/t_h[i])
 *         elif inter_fct == 4:             # <<<<<<<<<<<<<<
 *             # In this case, acc_vv is updated, and t_h_v is used.
 *             # Testing whether q is on the current center of mass or not
 */
      break;
      default: break;
    }

    /* "fmsne_implem.pyx":1648
 *     sqd = sqeucl_dist_ptr(node.cm, q, node.dim)
 *     # Testing whether the approximation condition is met or not
 *     if node.is_leaf or (node.radius < theta * sqd):             # <<<<<<<<<<<<<<
 *         cm_eq_q = (inf_dist_ptr(node.cm, q, node.dim) < EPSILON_DBL)
 *         # Computing sqd, qdiff and nptm
 */
    goto __pyx_L3;
  }

  /* "fmsne_implem.pyx":1753
 *                         acc_vv[i][j] += node.npt * exp(sqd/t_h_v[i][j])
 *     else:
 *         for i in range(node.n_childs):             # <<<<<<<<<<<<<<
 *             if node.has_child[i]:
 *                 acc = approxInteractions_SpNode(node.childs[i], q, theta, acc, acc_v, acc_vv, acc_vvv, inter_fct, t_h, t_h_v, qdiff, n_v, n_vv)
 */
  /*else*/ {
    __pyx_t_3 = __pyx_v_node->n_childs;
    __pyx_t_4 = __pyx_t_3;
    for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
      __pyx_v_i = __pyx_t_5;

      /* "fmsne_implem.pyx":1754
 *     else:
 *         for i in range(node.n_childs):
 *             if node.has_child[i]:             # <<<<<<<<<<<<<<
 *                 acc = approxInteractions_SpNode(node.childs[i], q, theta, acc, acc_v, acc_vv, acc_vvv, inter_fct, t_h, t_h_v, qdiff, n_v, n_vv)
 *     return acc
 */
      __pyx_t_1 = ((__pyx_v_node->has_child[__pyx_v_i]) != 0);
      if (__pyx_t_1) {

        /* "fmsne_implem.pyx":1755
 *         for i in range(node.n_childs):
 *             if node.has_child[i]:
 *                 acc = approxInteractions_SpNode(node.childs[i], q, theta, acc, acc_v, acc_vv, acc_vvv, inter_fct, t_h, t_h_v, qdiff, n_v, n_vv)             # <<<<<<<<<<<<<<
 *     return acc
 * 
 */
        __pyx_v_acc = __pyx_f_12fmsne_implem_approxInteractions_SpNode((__pyx_v_node->childs[__pyx_v_i]), __pyx_v_q, __pyx_v_theta, __pyx_v_acc, __pyx_v_acc_v, __pyx_v_acc_vv, __pyx_v_acc_vvv, __pyx_v_inter_fct, __pyx_v_t_h, __pyx_v_t_h_v, __pyx_v_qdiff, __pyx_v_n_v, __pyx_v_n_vv);

        /* "fmsne_implem.pyx":1754
 *     else:
 *         for i in range(node.n_childs):
 *             if node.has_child[i]:             # <<<<<<<<<<<<<<
 *                 acc = approxInteractions_SpNode(node.childs[i], q, theta, acc, acc_v, acc_vv, acc_vvv, inter_fct, t_h, t_h_v, qdiff, n_v, n_vv)
 *     return acc
 */
      }
    }
  }
  __pyx_L3:;

  /* "fmsne_implem.pyx":1756
 *             if node.has_child[i]:
 *                 acc = approxInteractions_SpNode(node.childs[i], q, theta, acc, acc_v, acc_vv, acc_vvv, inter_fct, t_h, t_h_v, qdiff, n_v, n_vv)
 *     return acc             # <<<<<<<<<<<<<<
 * 
 * cdef inline void reset_sa_SpNode(SpNode* node):
 */
  __pyx_r = __pyx_v_acc;
  goto __pyx_L0;

  /* "fmsne_implem.pyx":1634
 *             node.has_child[ic] = True
 * 
 * cdef inline double approxInteractions_SpNode(const SpNode* node, const double* q, double theta, double acc, double* acc_v, double** acc_vv, double*** acc_vvv, int inter_fct, const double* t_h, double** t_h_v, double* qdiff, Py_ssize_t n_v, Py_ssize_t n_vv) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     theta must be to the square
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "fmsne_implem.pyx":1758
 *     return acc
 * 
 * cdef inline void reset_sa_SpNode(SpNode* node):             # <<<<<<<<<<<<<<
 *     """
 *     Reset the supplementary attributes in the cells where there are more than one data point
 */

static CYTHON_INLINE void __pyx_f_12fmsne_implem_reset_sa_SpNode(struct __pyx_t_12fmsne_implem_SpNode *__pyx_v_node) {
  Py_ssize_t __pyx_v_i;
  size_t __pyx_v_snsad;
  double *__pyx_v_tmp;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  double *__pyx_t_3;
  Py_ssize_t __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  __Pyx_RefNannySetupContext("reset_sa_SpNode", 0);

  /* "fmsne_implem.pyx":1764
 *     # Resetting the supplementary attribute
 *     cdef Py_ssize_t i
 *     cdef size_t snsad = node.n_sa*sizeof(double)             # <<<<<<<<<<<<<<
 *     cdef double* tmp
 *     if node.npt == 1:
 */
  __pyx_v_snsad = (__pyx_v_node->n_sa * (sizeof(double)));

  /* "fmsne_implem.pyx":1766
 *     cdef size_t snsad = node.n_sa*sizeof(double)
 *     cdef double* tmp
 *     if node.npt == 1:             # <<<<<<<<<<<<<<
 *         # Need to copy to avoid modifying the original data
 *         if node.copy_up_sa and node.is_leaf:
 */
  __pyx_t_1 = ((__pyx_v_node->npt == 1) != 0);
  if (__pyx_t_1) {

    /* "fmsne_implem.pyx":1768
 *     if node.npt == 1:
 *         # Need to copy to avoid modifying the original data
 *         if node.copy_up_sa and node.is_leaf:             # <<<<<<<<<<<<<<
 *             tmp = node.suppl_attr
 *             node.suppl_attr = <double*> PyMem_Malloc(snsad)
 */
    __pyx_t_2 = (__pyx_v_node->copy_up_sa != 0);
    if (__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L5_bool_binop_done;
    }
    __pyx_t_2 = (__pyx_v_node->is_leaf != 0);
    __pyx_t_1 = __pyx_t_2;
    __pyx_L5_bool_binop_done:;
    if (__pyx_t_1) {

      /* "fmsne_implem.pyx":1769
 *         # Need to copy to avoid modifying the original data
 *         if node.copy_up_sa and node.is_leaf:
 *             tmp = node.suppl_attr             # <<<<<<<<<<<<<<
 *             node.suppl_attr = <double*> PyMem_Malloc(snsad)
 *             if node.suppl_attr is NULL:
 */
      __pyx_t_3 = __pyx_v_node->suppl_attr;
      __pyx_v_tmp = __pyx_t_3;

      /* "fmsne_implem.pyx":1770
 *         if node.copy_up_sa and node.is_leaf:
 *             tmp = node.suppl_attr
 *             node.suppl_attr = <double*> PyMem_Malloc(snsad)             # <<<<<<<<<<<<<<
 *             if node.suppl_attr is NULL:
 *                 printf("Out of memory in reset_sa_SpNode")
 */
      __pyx_v_node->suppl_attr = ((double *)PyMem_Malloc(__pyx_v_snsad));

      /* "fmsne_implem.pyx":1771
 *             tmp = node.suppl_attr
 *             node.suppl_attr = <double*> PyMem_Malloc(snsad)
 *             if node.suppl_attr is NULL:             # <<<<<<<<<<<<<<
 *                 printf("Out of memory in reset_sa_SpNode")
 *                 exit(EXIT_FAILURE)
 */
      __pyx_t_1 = ((__pyx_v_node->suppl_attr == NULL) != 0);
      if (__pyx_t_1) {

        /* "fmsne_implem.pyx":1772
 *             node.suppl_attr = <double*> PyMem_Malloc(snsad)
 *             if node.suppl_attr is NULL:
 *                 printf("Out of memory in reset_sa_SpNode")             # <<<<<<<<<<<<<<
 *                 exit(EXIT_FAILURE)
 *             memcpy(node.suppl_attr, tmp, snsad)
 */
        (void)(printf(((char const *)"Out of memory in reset_sa_SpNode")));

        /* "fmsne_implem.pyx":1773
 *             if node.suppl_attr is NULL:
 *                 printf("Out of memory in reset_sa_SpNode")
 *                 exit(EXIT_FAILURE)             # <<<<<<<<<<<<<<
 *             memcpy(node.suppl_attr, tmp, snsad)
 *             # Setting node.copy_up_sa avoids repeatedly copying node.suppl_attr whereas it does not anymore refer to original data
 */
        exit(EXIT_FAILURE);

        /* "fmsne_implem.pyx":1771
 *             tmp = node.suppl_attr
 *             node.suppl_attr = <double*> PyMem_Malloc(snsad)
 *             if node.suppl_attr is NULL:             # <<<<<<<<<<<<<<
 *                 printf("Out of memory in reset_sa_SpNode")
 *                 exit(EXIT_FAILURE)
 */
      }

      /* "fmsne_implem.pyx":1774
 *                 printf("Out of memory in reset_sa_SpNode")
 *                 exit(EXIT_FAILURE)
 *             memcpy(node.suppl_attr, tmp, snsad)             # <<<<<<<<<<<<<<
 *             # Setting node.copy_up_sa avoids repeatedly copying node.suppl_attr whereas it does not anymore refer to original data
 *             node.copy_up_sa = False
 */
      (void)(memcpy(__pyx_v_node->suppl_attr, __pyx_v_tmp, __pyx_v_snsad));

      /* "fmsne_implem.pyx":1776
 *             memcpy(node.suppl_attr, tmp, snsad)
 *             # Setting node.copy_up_sa avoids repeatedly copying node.suppl_attr whereas it does not anymore refer to original data
 *             node.copy_up_sa = False             # <<<<<<<<<<<<<<
 *     else:
 *         memset(node.suppl_attr, 0, snsad)
 */
      __pyx_v_node->copy_up_sa = 0;

      /* "fmsne_implem.pyx":1768
 *     if node.npt == 1:
 *         # Need to copy to avoid modifying the original data
 *         if node.copy_up_sa and node.is_leaf:             # <<<<<<<<<<<<<<
 *             tmp = node.suppl_attr
 *             node.suppl_attr = <double*> PyMem_Malloc(snsad)
 */
    }

    /* "fmsne_implem.pyx":1766
 *     cdef size_t snsad = node.n_sa*sizeof(double)
 *     cdef double* tmp
 *     if node.npt == 1:             # <<<<<<<<<<<<<<
 *         # Need to copy to avoid modifying the original data
 *         if node.copy_up_sa and node.is_leaf:
 */
    goto __pyx_L3;
  }

  /* "fmsne_implem.pyx":1778
 *             node.copy_up_sa = False
 *     else:
 *         memset(node.suppl_attr, 0, snsad)             # <<<<<<<<<<<<<<
 *     # Resetting the childrens
 *     if not node.is_leaf:
 */
  /*else*/ {
    (void)(memset(__pyx_v_node->suppl_attr, 0, __pyx_v_snsad));
  }
  __pyx_L3:;

  /* "fmsne_implem.pyx":1780
 *         memset(node.suppl_attr, 0, snsad)
 *     # Resetting the childrens
 *     if not node.is_leaf:             # <<<<<<<<<<<<<<
 *         for i in range(node.n_childs):
 *             if node.has_child[i]:
 */
  __pyx_t_1 = ((!(__pyx_v_node->is_leaf != 0)) != 0);
  if (__pyx_t_1) {

    /* "fmsne_implem.pyx":1781
 *     # Resetting the childrens
 *     if not node.is_leaf:
 *         for i in range(node.n_childs):             # <<<<<<<<<<<<<<
 *             if node.has_child[i]:
 *                 reset_sa_SpNode(node.childs[i])
 */
    __pyx_t_4 = __pyx_v_node->n_childs;
    __pyx_t_5 = __pyx_t_4;
    for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
      __pyx_v_i = __pyx_t_6;

      /* "fmsne_implem.pyx":1782
 *     if not node.is_leaf:
 *         for i in range(node.n_childs):
 *             if node.has_child[i]:             # <<<<<<<<<<<<<<
 *                 reset_sa_SpNode(node.childs[i])
 * 
 */
      __pyx_t_1 = ((__pyx_v_node->has_child[__pyx_v_i]) != 0);
      if (__pyx_t_1) {

        /* "fmsne_implem.pyx":1783
 *         for i in range(node.n_childs):
 *             if node.has_child[i]:
 *                 reset_sa_SpNode(node.childs[i])             # <<<<<<<<<<<<<<
 * 
 * cdef inline void update_sa_SpNode(SpNode* node, const double* x, const double* sa, Py_ssize_t n_sa):
 */
        __pyx_f_12fmsne_implem_reset_sa_SpNode((__pyx_v_node->childs[__pyx_v_i]));

        /* "fmsne_implem.pyx":1782
 *     if not node.is_leaf:
 *         for i in range(node.n_childs):
 *             if node.has_child[i]:             # <<<<<<<<<<<<<<
 *                 reset_sa_SpNode(node.childs[i])
 * 
 */
      }
    }

    /* "fmsne_implem.pyx":1780
 *         memset(node.suppl_attr, 0, snsad)
 *     # Resetting the childrens
 *     if not node.is_leaf:             # <<<<<<<<<<<<<<
 *         for i in range(node.n_childs):
 *             if node.has_child[i]:
 */
  }

  /* "fmsne_implem.pyx":1758
 *     return acc
 * 
 * cdef inline void reset_sa_SpNode(SpNode* node):             # <<<<<<<<<<<<<<
 *     """
 *     Reset the supplementary attributes in the cells where there are more than one data point
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "fmsne_implem.pyx":1785
 *                 reset_sa_SpNode(node.childs[i])
 * 
 * cdef inline void update_sa_SpNode(SpNode* node, const double* x, const double* sa, Py_ssize_t n_sa):             # <<<<<<<<<<<<<<
 *     """
 *     Recursively update the supplementary attributes
 */

static CYTHON_INLINE void __pyx_f_12fmsne_implem_update_sa_SpNode(struct __pyx_t_12fmsne_implem_SpNode *__pyx_v_node, double const *__pyx_v_x, double const *__pyx_v_sa, Py_ssize_t __pyx_v_n_sa) {
  double __pyx_v_nptd;
  size_t __pyx_v_snsad;
  Py_ssize_t __pyx_v_i;
  int __pyx_v_one_dp;
  Py_ssize_t __pyx_v_ic;
  Py_ssize_t __pyx_v_nc;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  __Pyx_RefNannySetupContext("update_sa_SpNode", 0);

  /* "fmsne_implem.pyx":1791
 *     # Updating the supplementary attributes of the current node
 *     cdef double nptd
 *     cdef size_t snsad = n_sa*sizeof(double)             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t i
 *     cdef bint one_dp = (node.npt == 1)
 */
  __pyx_v_snsad = (__pyx_v_n_sa * (sizeof(double)));

  /* "fmsne_implem.pyx":1793
 *     cdef size_t snsad = n_sa*sizeof(double)
 *     cdef Py_ssize_t i
 *     cdef bint one_dp = (node.npt == 1)             # <<<<<<<<<<<<<<
 *     if not one_dp:
 *         nptd = <double> node.npt
 */
  __pyx_v_one_dp = (__pyx_v_node->npt == 1);

  /* "fmsne_implem.pyx":1794
 *     cdef Py_ssize_t i
 *     cdef bint one_dp = (node.npt == 1)
 *     if not one_dp:             # <<<<<<<<<<<<<<
 *         nptd = <double> node.npt
 *     if node.has_sa:
 */
  __pyx_t_1 = ((!(__pyx_v_one_dp != 0)) != 0);
  if (__pyx_t_1) {

    /* "fmsne_implem.pyx":1795
 *     cdef bint one_dp = (node.npt == 1)
 *     if not one_dp:
 *         nptd = <double> node.npt             # <<<<<<<<<<<<<<
 *     if node.has_sa:
 *         if one_dp:
 */
    __pyx_v_nptd = ((double)__pyx_v_node->npt);

    /* "fmsne_implem.pyx":1794
 *     cdef Py_ssize_t i
 *     cdef bint one_dp = (node.npt == 1)
 *     if not one_dp:             # <<<<<<<<<<<<<<
 *         nptd = <double> node.npt
 *     if node.has_sa:
 */
  }

  /* "fmsne_implem.pyx":1796
 *     if not one_dp:
 *         nptd = <double> node.npt
 *     if node.has_sa:             # <<<<<<<<<<<<<<
 *         if one_dp:
 *             memcpy(node.suppl_attr, sa, snsad)
 */
  __pyx_t_1 = (__pyx_v_node->has_sa != 0);
  if (__pyx_t_1) {

    /* "fmsne_implem.pyx":1797
 *         nptd = <double> node.npt
 *     if node.has_sa:
 *         if one_dp:             # <<<<<<<<<<<<<<
 *             memcpy(node.suppl_attr, sa, snsad)
 *         else:
 */
    __pyx_t_1 = (__pyx_v_one_dp != 0);
    if (__pyx_t_1) {

      /* "fmsne_implem.pyx":1798
 *     if node.has_sa:
 *         if one_dp:
 *             memcpy(node.suppl_attr, sa, snsad)             # <<<<<<<<<<<<<<
 *         else:
 *             for i in range(n_sa):
 */
      (void)(memcpy(__pyx_v_node->suppl_attr, __pyx_v_sa, __pyx_v_snsad));

      /* "fmsne_implem.pyx":1797
 *         nptd = <double> node.npt
 *     if node.has_sa:
 *         if one_dp:             # <<<<<<<<<<<<<<
 *             memcpy(node.suppl_attr, sa, snsad)
 *         else:
 */
      goto __pyx_L5;
    }

    /* "fmsne_implem.pyx":1800
 *             memcpy(node.suppl_attr, sa, snsad)
 *         else:
 *             for i in range(n_sa):             # <<<<<<<<<<<<<<
 *                 node.suppl_attr[i] += sa[i]/nptd
 *     else:
 */
    /*else*/ {
      __pyx_t_2 = __pyx_v_n_sa;
      __pyx_t_3 = __pyx_t_2;
      for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
        __pyx_v_i = __pyx_t_4;

        /* "fmsne_implem.pyx":1801
 *         else:
 *             for i in range(n_sa):
 *                 node.suppl_attr[i] += sa[i]/nptd             # <<<<<<<<<<<<<<
 *     else:
 *         node.has_sa = True
 */
        __pyx_t_5 = __pyx_v_i;
        (__pyx_v_node->suppl_attr[__pyx_t_5]) = ((__pyx_v_node->suppl_attr[__pyx_t_5]) + (((double)(__pyx_v_sa[__pyx_v_i])) / __pyx_v_nptd));
      }
    }
    __pyx_L5:;

    /* "fmsne_implem.pyx":1796
 *     if not one_dp:
 *         nptd = <double> node.npt
 *     if node.has_sa:             # <<<<<<<<<<<<<<
 *         if one_dp:
 *             memcpy(node.suppl_attr, sa, snsad)
 */
    goto __pyx_L4;
  }

  /* "fmsne_implem.pyx":1803
 *                 node.suppl_attr[i] += sa[i]/nptd
 *     else:
 *         node.has_sa = True             # <<<<<<<<<<<<<<
 *         node.n_sa = n_sa
 *         if one_dp:
 */
  /*else*/ {
    __pyx_v_node->has_sa = 1;

    /* "fmsne_implem.pyx":1804
 *     else:
 *         node.has_sa = True
 *         node.n_sa = n_sa             # <<<<<<<<<<<<<<
 *         if one_dp:
 *             if node.is_leaf:
 */
    __pyx_v_node->n_sa = __pyx_v_n_sa;

    /* "fmsne_implem.pyx":1805
 *         node.has_sa = True
 *         node.n_sa = n_sa
 *         if one_dp:             # <<<<<<<<<<<<<<
 *             if node.is_leaf:
 *                 # Caution: remember that a cell may be a leaf while still containing more than one data point (i.e. when they have the same position).
 */
    __pyx_t_1 = (__pyx_v_one_dp != 0);
    if (__pyx_t_1) {

      /* "fmsne_implem.pyx":1806
 *         node.n_sa = n_sa
 *         if one_dp:
 *             if node.is_leaf:             # <<<<<<<<<<<<<<
 *                 # Caution: remember that a cell may be a leaf while still containing more than one data point (i.e. when they have the same position).
 *                 # No need to copy in this case as this supplementary attribute will not be modified
 */
      __pyx_t_1 = (__pyx_v_node->is_leaf != 0);
      if (__pyx_t_1) {

        /* "fmsne_implem.pyx":1809
 *                 # Caution: remember that a cell may be a leaf while still containing more than one data point (i.e. when they have the same position).
 *                 # No need to copy in this case as this supplementary attribute will not be modified
 *                 node.suppl_attr = <double*> sa             # <<<<<<<<<<<<<<
 *             else:
 *                 # This part should never be reached
 */
        __pyx_v_node->suppl_attr = ((double *)__pyx_v_sa);

        /* "fmsne_implem.pyx":1806
 *         node.n_sa = n_sa
 *         if one_dp:
 *             if node.is_leaf:             # <<<<<<<<<<<<<<
 *                 # Caution: remember that a cell may be a leaf while still containing more than one data point (i.e. when they have the same position).
 *                 # No need to copy in this case as this supplementary attribute will not be modified
 */
        goto __pyx_L9;
      }

      /* "fmsne_implem.pyx":1812
 *             else:
 *                 # This part should never be reached
 *                 node.suppl_attr = <double*> PyMem_Malloc(snsad)             # <<<<<<<<<<<<<<
 *                 if node.suppl_attr is NULL:
 *                     printf("Out of memory in function update_sa_SpNode.")
 */
      /*else*/ {
        __pyx_v_node->suppl_attr = ((double *)PyMem_Malloc(__pyx_v_snsad));

        /* "fmsne_implem.pyx":1813
 *                 # This part should never be reached
 *                 node.suppl_attr = <double*> PyMem_Malloc(snsad)
 *                 if node.suppl_attr is NULL:             # <<<<<<<<<<<<<<
 *                     printf("Out of memory in function update_sa_SpNode.")
 *                     exit(EXIT_FAILURE)
 */
        __pyx_t_1 = ((__pyx_v_node->suppl_attr == NULL) != 0);
        if (__pyx_t_1) {

          /* "fmsne_implem.pyx":1814
 *                 node.suppl_attr = <double*> PyMem_Malloc(snsad)
 *                 if node.suppl_attr is NULL:
 *                     printf("Out of memory in function update_sa_SpNode.")             # <<<<<<<<<<<<<<
 *                     exit(EXIT_FAILURE)
 *                 memcpy(node.suppl_attr, sa, snsad)
 */
          (void)(printf(((char const *)"Out of memory in function update_sa_SpNode.")));

          /* "fmsne_implem.pyx":1815
 *                 if node.suppl_attr is NULL:
 *                     printf("Out of memory in function update_sa_SpNode.")
 *                     exit(EXIT_FAILURE)             # <<<<<<<<<<<<<<
 *                 memcpy(node.suppl_attr, sa, snsad)
 *         else:
 */
          exit(EXIT_FAILURE);

          /* "fmsne_implem.pyx":1813
 *                 # This part should never be reached
 *                 node.suppl_attr = <double*> PyMem_Malloc(snsad)
 *                 if node.suppl_attr is NULL:             # <<<<<<<<<<<<<<
 *                     printf("Out of memory in function update_sa_SpNode.")
 *                     exit(EXIT_FAILURE)
 */
        }

        /* "fmsne_implem.pyx":1816
 *                     printf("Out of memory in function update_sa_SpNode.")
 *                     exit(EXIT_FAILURE)
 *                 memcpy(node.suppl_attr, sa, snsad)             # <<<<<<<<<<<<<<
 *         else:
 *             node.suppl_attr = <double*> PyMem_Malloc(snsad)
 */
        (void)(memcpy(__pyx_v_node->suppl_attr, __pyx_v_sa, __pyx_v_snsad));
      }
      __pyx_L9:;

      /* "fmsne_implem.pyx":1805
 *         node.has_sa = True
 *         node.n_sa = n_sa
 *         if one_dp:             # <<<<<<<<<<<<<<
 *             if node.is_leaf:
 *                 # Caution: remember that a cell may be a leaf while still containing more than one data point (i.e. when they have the same position).
 */
      goto __pyx_L8;
    }

    /* "fmsne_implem.pyx":1818
 *                 memcpy(node.suppl_attr, sa, snsad)
 *         else:
 *             node.suppl_attr = <double*> PyMem_Malloc(snsad)             # <<<<<<<<<<<<<<
 *             if node.suppl_attr is NULL:
 *                 printf("Out of memory in function update_sa_SpNode.")
 */
    /*else*/ {
      __pyx_v_node->suppl_attr = ((double *)PyMem_Malloc(__pyx_v_snsad));

      /* "fmsne_implem.pyx":1819
 *         else:
 *             node.suppl_attr = <double*> PyMem_Malloc(snsad)
 *             if node.suppl_attr is NULL:             # <<<<<<<<<<<<<<
 *                 printf("Out of memory in function update_sa_SpNode.")
 *                 exit(EXIT_FAILURE)
 */
      __pyx_t_1 = ((__pyx_v_node->suppl_attr == NULL) != 0);
      if (__pyx_t_1) {

        /* "fmsne_implem.pyx":1820
 *             node.suppl_attr = <double*> PyMem_Malloc(snsad)
 *             if node.suppl_attr is NULL:
 *                 printf("Out of memory in function update_sa_SpNode.")             # <<<<<<<<<<<<<<
 *                 exit(EXIT_FAILURE)
 *             memcpy(node.suppl_attr, sa, snsad)
 */
        (void)(printf(((char const *)"Out of memory in function update_sa_SpNode.")));

        /* "fmsne_implem.pyx":1821
 *             if node.suppl_attr is NULL:
 *                 printf("Out of memory in function update_sa_SpNode.")
 *                 exit(EXIT_FAILURE)             # <<<<<<<<<<<<<<
 *             memcpy(node.suppl_attr, sa, snsad)
 *             for i in range(n_sa):
 */
        exit(EXIT_FAILURE);

        /* "fmsne_implem.pyx":1819
 *         else:
 *             node.suppl_attr = <double*> PyMem_Malloc(snsad)
 *             if node.suppl_attr is NULL:             # <<<<<<<<<<<<<<
 *                 printf("Out of memory in function update_sa_SpNode.")
 *                 exit(EXIT_FAILURE)
 */
      }

      /* "fmsne_implem.pyx":1822
 *                 printf("Out of memory in function update_sa_SpNode.")
 *                 exit(EXIT_FAILURE)
 *             memcpy(node.suppl_attr, sa, snsad)             # <<<<<<<<<<<<<<
 *             for i in range(n_sa):
 *                 node.suppl_attr[i] /= nptd
 */
      (void)(memcpy(__pyx_v_node->suppl_attr, __pyx_v_sa, __pyx_v_snsad));

      /* "fmsne_implem.pyx":1823
 *                 exit(EXIT_FAILURE)
 *             memcpy(node.suppl_attr, sa, snsad)
 *             for i in range(n_sa):             # <<<<<<<<<<<<<<
 *                 node.suppl_attr[i] /= nptd
 *     # Updating the supplementary attributes of the appropriate children
 */
      __pyx_t_2 = __pyx_v_n_sa;
      __pyx_t_3 = __pyx_t_2;
      for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
        __pyx_v_i = __pyx_t_4;

        /* "fmsne_implem.pyx":1824
 *             memcpy(node.suppl_attr, sa, snsad)
 *             for i in range(n_sa):
 *                 node.suppl_attr[i] /= nptd             # <<<<<<<<<<<<<<
 *     # Updating the supplementary attributes of the appropriate children
 *     cdef Py_ssize_t ic, nc
 */
        __pyx_t_5 = __pyx_v_i;
        (__pyx_v_node->suppl_attr[__pyx_t_5]) = ((__pyx_v_node->suppl_attr[__pyx_t_5]) / __pyx_v_nptd);
      }
    }
    __pyx_L8:;
  }
  __pyx_L4:;

  /* "fmsne_implem.pyx":1827
 *     # Updating the supplementary attributes of the appropriate children
 *     cdef Py_ssize_t ic, nc
 *     if not node.is_leaf:             # <<<<<<<<<<<<<<
 *         # Determining the relevant children
 *         ic = 0
 */
  __pyx_t_1 = ((!(__pyx_v_node->is_leaf != 0)) != 0);
  if (__pyx_t_1) {

    /* "fmsne_implem.pyx":1829
 *     if not node.is_leaf:
 *         # Determining the relevant children
 *         ic = 0             # <<<<<<<<<<<<<<
 *         nc = 1
 *         for i in range(node.dim):
 */
    __pyx_v_ic = 0;

    /* "fmsne_implem.pyx":1830
 *         # Determining the relevant children
 *         ic = 0
 *         nc = 1             # <<<<<<<<<<<<<<
 *         for i in range(node.dim):
 *             if x[i] >= node.mid_ax[i]:
 */
    __pyx_v_nc = 1;

    /* "fmsne_implem.pyx":1831
 *         ic = 0
 *         nc = 1
 *         for i in range(node.dim):             # <<<<<<<<<<<<<<
 *             if x[i] >= node.mid_ax[i]:
 *                 ic += nc
 */
    __pyx_t_2 = __pyx_v_node->dim;
    __pyx_t_3 = __pyx_t_2;
    for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
      __pyx_v_i = __pyx_t_4;

      /* "fmsne_implem.pyx":1832
 *         nc = 1
 *         for i in range(node.dim):
 *             if x[i] >= node.mid_ax[i]:             # <<<<<<<<<<<<<<
 *                 ic += nc
 *             nc *= 2
 */
      __pyx_t_1 = (((__pyx_v_x[__pyx_v_i]) >= (__pyx_v_node->mid_ax[__pyx_v_i])) != 0);
      if (__pyx_t_1) {

        /* "fmsne_implem.pyx":1833
 *         for i in range(node.dim):
 *             if x[i] >= node.mid_ax[i]:
 *                 ic += nc             # <<<<<<<<<<<<<<
 *             nc *= 2
 *         if node.has_child[ic]:
 */
        __pyx_v_ic = (__pyx_v_ic + __pyx_v_nc);

        /* "fmsne_implem.pyx":1832
 *         nc = 1
 *         for i in range(node.dim):
 *             if x[i] >= node.mid_ax[i]:             # <<<<<<<<<<<<<<
 *                 ic += nc
 *             nc *= 2
 */
      }

      /* "fmsne_implem.pyx":1834
 *             if x[i] >= node.mid_ax[i]:
 *                 ic += nc
 *             nc *= 2             # <<<<<<<<<<<<<<
 *         if node.has_child[ic]:
 *             update_sa_SpNode(node.childs[ic], x, sa, n_sa)
 */
      __pyx_v_nc = (__pyx_v_nc * 2);
    }

    /* "fmsne_implem.pyx":1835
 *                 ic += nc
 *             nc *= 2
 *         if node.has_child[ic]:             # <<<<<<<<<<<<<<
 *             update_sa_SpNode(node.childs[ic], x, sa, n_sa)
 * 
 */
    __pyx_t_1 = ((__pyx_v_node->has_child[__pyx_v_ic]) != 0);
    if (__pyx_t_1) {

      /* "fmsne_implem.pyx":1836
 *             nc *= 2
 *         if node.has_child[ic]:
 *             update_sa_SpNode(node.childs[ic], x, sa, n_sa)             # <<<<<<<<<<<<<<
 * 
 * cdef inline void free_SpNode(SpNode* node):
 */
      __pyx_f_12fmsne_implem_update_sa_SpNode((__pyx_v_node->childs[__pyx_v_ic]), __pyx_v_x, __pyx_v_sa, __pyx_v_n_sa);

      /* "fmsne_implem.pyx":1835
 *                 ic += nc
 *             nc *= 2
 *         if node.has_child[ic]:             # <<<<<<<<<<<<<<
 *             update_sa_SpNode(node.childs[ic], x, sa, n_sa)
 * 
 */
    }

    /* "fmsne_implem.pyx":1827
 *     # Updating the supplementary attributes of the appropriate children
 *     cdef Py_ssize_t ic, nc
 *     if not node.is_leaf:             # <<<<<<<<<<<<<<
 *         # Determining the relevant children
 *         ic = 0
 */
  }

  /* "fmsne_implem.pyx":1785
 *                 reset_sa_SpNode(node.childs[i])
 * 
 * cdef inline void update_sa_SpNode(SpNode* node, const double* x, const double* sa, Py_ssize_t n_sa):             # <<<<<<<<<<<<<<
 *     """
 *     Recursively update the supplementary attributes
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "fmsne_implem.pyx":1838
 *             update_sa_SpNode(node.childs[ic], x, sa, n_sa)
 * 
 * cdef inline void free_SpNode(SpNode* node):             # <<<<<<<<<<<<<<
 *     """
 *     Recursively free
 */

static CYTHON_INLINE void __pyx_f_12fmsne_implem_free_SpNode(struct __pyx_t_12fmsne_implem_SpNode *__pyx_v_node) {
  Py_ssize_t __pyx_v_i;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  __Pyx_RefNannySetupContext("free_SpNode", 0);

  /* "fmsne_implem.pyx":1842
 *     Recursively free
 *     """
 *     PyMem_Free(<void*> node.min_ax)             # <<<<<<<<<<<<<<
 *     PyMem_Free(node.mid_ax)
 *     PyMem_Free(<void*> node.max_ax)
 */
  PyMem_Free(((void *)__pyx_v_node->min_ax));

  /* "fmsne_implem.pyx":1843
 *     """
 *     PyMem_Free(<void*> node.min_ax)
 *     PyMem_Free(node.mid_ax)             # <<<<<<<<<<<<<<
 *     PyMem_Free(<void*> node.max_ax)
 *     cdef Py_ssize_t i
 */
  PyMem_Free(__pyx_v_node->mid_ax);

  /* "fmsne_implem.pyx":1844
 *     PyMem_Free(<void*> node.min_ax)
 *     PyMem_Free(node.mid_ax)
 *     PyMem_Free(<void*> node.max_ax)             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t i
 *     if node.is_leaf:
 */
  PyMem_Free(((void *)__pyx_v_node->max_ax));

  /* "fmsne_implem.pyx":1846
 *     PyMem_Free(<void*> node.max_ax)
 *     cdef Py_ssize_t i
 *     if node.is_leaf:             # <<<<<<<<<<<<<<
 *         if node.npt == 1:
 *             if node.has_sa and (not node.copy_up_sa):
 */
  __pyx_t_1 = (__pyx_v_node->is_leaf != 0);
  if (__pyx_t_1) {

    /* "fmsne_implem.pyx":1847
 *     cdef Py_ssize_t i
 *     if node.is_leaf:
 *         if node.npt == 1:             # <<<<<<<<<<<<<<
 *             if node.has_sa and (not node.copy_up_sa):
 *                 PyMem_Free(node.suppl_attr)
 */
    __pyx_t_1 = ((__pyx_v_node->npt == 1) != 0);
    if (__pyx_t_1) {

      /* "fmsne_implem.pyx":1848
 *     if node.is_leaf:
 *         if node.npt == 1:
 *             if node.has_sa and (not node.copy_up_sa):             # <<<<<<<<<<<<<<
 *                 PyMem_Free(node.suppl_attr)
 *         else:
 */
      __pyx_t_2 = (__pyx_v_node->has_sa != 0);
      if (__pyx_t_2) {
      } else {
        __pyx_t_1 = __pyx_t_2;
        goto __pyx_L6_bool_binop_done;
      }
      __pyx_t_2 = ((!(__pyx_v_node->copy_up_sa != 0)) != 0);
      __pyx_t_1 = __pyx_t_2;
      __pyx_L6_bool_binop_done:;
      if (__pyx_t_1) {

        /* "fmsne_implem.pyx":1849
 *         if node.npt == 1:
 *             if node.has_sa and (not node.copy_up_sa):
 *                 PyMem_Free(node.suppl_attr)             # <<<<<<<<<<<<<<
 *         else:
 *             PyMem_Free(node.cm)
 */
        PyMem_Free(__pyx_v_node->suppl_attr);

        /* "fmsne_implem.pyx":1848
 *     if node.is_leaf:
 *         if node.npt == 1:
 *             if node.has_sa and (not node.copy_up_sa):             # <<<<<<<<<<<<<<
 *                 PyMem_Free(node.suppl_attr)
 *         else:
 */
      }

      /* "fmsne_implem.pyx":1847
 *     cdef Py_ssize_t i
 *     if node.is_leaf:
 *         if node.npt == 1:             # <<<<<<<<<<<<<<
 *             if node.has_sa and (not node.copy_up_sa):
 *                 PyMem_Free(node.suppl_attr)
 */
      goto __pyx_L4;
    }

    /* "fmsne_implem.pyx":1851
 *                 PyMem_Free(node.suppl_attr)
 *         else:
 *             PyMem_Free(node.cm)             # <<<<<<<<<<<<<<
 *             if node.has_sa:
 *                 PyMem_Free(node.suppl_attr)
 */
    /*else*/ {
      PyMem_Free(__pyx_v_node->cm);

      /* "fmsne_implem.pyx":1852
 *         else:
 *             PyMem_Free(node.cm)
 *             if node.has_sa:             # <<<<<<<<<<<<<<
 *                 PyMem_Free(node.suppl_attr)
 *         # Otherwise do not free original data!
 */
      __pyx_t_1 = (__pyx_v_node->has_sa != 0);
      if (__pyx_t_1) {

        /* "fmsne_implem.pyx":1853
 *             PyMem_Free(node.cm)
 *             if node.has_sa:
 *                 PyMem_Free(node.suppl_attr)             # <<<<<<<<<<<<<<
 *         # Otherwise do not free original data!
 *     else:
 */
        PyMem_Free(__pyx_v_node->suppl_attr);

        /* "fmsne_implem.pyx":1852
 *         else:
 *             PyMem_Free(node.cm)
 *             if node.has_sa:             # <<<<<<<<<<<<<<
 *                 PyMem_Free(node.suppl_attr)
 *         # Otherwise do not free original data!
 */
      }
    }
    __pyx_L4:;

    /* "fmsne_implem.pyx":1846
 *     PyMem_Free(<void*> node.max_ax)
 *     cdef Py_ssize_t i
 *     if node.is_leaf:             # <<<<<<<<<<<<<<
 *         if node.npt == 1:
 *             if node.has_sa and (not node.copy_up_sa):
 */
    goto __pyx_L3;
  }

  /* "fmsne_implem.pyx":1856
 *         # Otherwise do not free original data!
 *     else:
 *         for i in range(node.n_childs):             # <<<<<<<<<<<<<<
 *             if node.has_child[i]:
 *                 free_SpNode(node.childs[i])
 */
  /*else*/ {
    __pyx_t_3 = __pyx_v_node->n_childs;
    __pyx_t_4 = __pyx_t_3;
    for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
      __pyx_v_i = __pyx_t_5;

      /* "fmsne_implem.pyx":1857
 *     else:
 *         for i in range(node.n_childs):
 *             if node.has_child[i]:             # <<<<<<<<<<<<<<
 *                 free_SpNode(node.childs[i])
 *         PyMem_Free(node.childs)
 */
      __pyx_t_1 = ((__pyx_v_node->has_child[__pyx_v_i]) != 0);
      if (__pyx_t_1) {

        /* "fmsne_implem.pyx":1858
 *         for i in range(node.n_childs):
 *             if node.has_child[i]:
 *                 free_SpNode(node.childs[i])             # <<<<<<<<<<<<<<
 *         PyMem_Free(node.childs)
 *         PyMem_Free(node.has_child)
 */
        __pyx_f_12fmsne_implem_free_SpNode((__pyx_v_node->childs[__pyx_v_i]));

        /* "fmsne_implem.pyx":1857
 *     else:
 *         for i in range(node.n_childs):
 *             if node.has_child[i]:             # <<<<<<<<<<<<<<
 *                 free_SpNode(node.childs[i])
 *         PyMem_Free(node.childs)
 */
      }
    }

    /* "fmsne_implem.pyx":1859
 *             if node.has_child[i]:
 *                 free_SpNode(node.childs[i])
 *         PyMem_Free(node.childs)             # <<<<<<<<<<<<<<
 *         PyMem_Free(node.has_child)
 *         PyMem_Free(node.cm)
 */
    PyMem_Free(__pyx_v_node->childs);

    /* "fmsne_implem.pyx":1860
 *                 free_SpNode(node.childs[i])
 *         PyMem_Free(node.childs)
 *         PyMem_Free(node.has_child)             # <<<<<<<<<<<<<<
 *         PyMem_Free(node.cm)
 *         if node.has_sa:
 */
    PyMem_Free(__pyx_v_node->has_child);

    /* "fmsne_implem.pyx":1861
 *         PyMem_Free(node.childs)
 *         PyMem_Free(node.has_child)
 *         PyMem_Free(node.cm)             # <<<<<<<<<<<<<<
 *         if node.has_sa:
 *             PyMem_Free(node.suppl_attr)
 */
    PyMem_Free(__pyx_v_node->cm);

    /* "fmsne_implem.pyx":1862
 *         PyMem_Free(node.has_child)
 *         PyMem_Free(node.cm)
 *         if node.has_sa:             # <<<<<<<<<<<<<<
 *             PyMem_Free(node.suppl_attr)
 *     PyMem_Free(node)
 */
    __pyx_t_1 = (__pyx_v_node->has_sa != 0);
    if (__pyx_t_1) {

      /* "fmsne_implem.pyx":1863
 *         PyMem_Free(node.cm)
 *         if node.has_sa:
 *             PyMem_Free(node.suppl_attr)             # <<<<<<<<<<<<<<
 *     PyMem_Free(node)
 * 
 */
      PyMem_Free(__pyx_v_node->suppl_attr);

      /* "fmsne_implem.pyx":1862
 *         PyMem_Free(node.has_child)
 *         PyMem_Free(node.cm)
 *         if node.has_sa:             # <<<<<<<<<<<<<<
 *             PyMem_Free(node.suppl_attr)
 *     PyMem_Free(node)
 */
    }
  }
  __pyx_L3:;

  /* "fmsne_implem.pyx":1864
 *         if node.has_sa:
 *             PyMem_Free(node.suppl_attr)
 *     PyMem_Free(node)             # <<<<<<<<<<<<<<
 * 
 * cdef struct SpTree:
 */
  PyMem_Free(__pyx_v_node);

  /* "fmsne_implem.pyx":1838
 *             update_sa_SpNode(node.childs[ic], x, sa, n_sa)
 * 
 * cdef inline void free_SpNode(SpNode* node):             # <<<<<<<<<<<<<<
 *     """
 *     Recursively free
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "fmsne_implem.pyx":1874
 *     Py_ssize_t N
 * 
 * cdef inline SpTree* cinit_SpTree(const double* X, Py_ssize_t N, Py_ssize_t dim, bint has_sa, const double* suppl_attrs, Py_ssize_t n_sa, int inter_fct):             # <<<<<<<<<<<<<<
 *     """
 *     Initialize a space-partitioning tree.
 */

static CYTHON_INLINE struct __pyx_t_12fmsne_implem_SpTree *__pyx_f_12fmsne_implem_cinit_SpTree(double const *__pyx_v_X, Py_ssize_t __pyx_v_N, Py_ssize_t __pyx_v_dim, int __pyx_v_has_sa, double const *__pyx_v_suppl_attrs, Py_ssize_t __pyx_v_n_sa, int __pyx_v_inter_fct) {
  struct __pyx_t_12fmsne_implem_SpTree *__pyx_v_tree;
  double const *__pyx_v_sa;
  double __pyx_v_sm_shift;
  size_t __pyx_v_sdimd;
  double *__pyx_v_min_ax;
  double *__pyx_v_max_ax;
  Py_ssize_t __pyx_v_i;
  Py_ssize_t __pyx_v_m;
  Py_ssize_t __pyx_v_j;
  struct __pyx_t_12fmsne_implem_SpTree *__pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  __Pyx_RefNannySetupContext("cinit_SpTree", 0);

  /* "fmsne_implem.pyx":1879
 *     The data set is stored as a one-dimensional array. There are N data points of dimension dim. The coordinates of the ith data point are stored at &X[i*D].
 *     """
 *     cdef SpTree* tree = <SpTree*> PyMem_Malloc(sizeof(SpTree))             # <<<<<<<<<<<<<<
 *     if tree is NULL:
 *         printf("Out of memory in cinit_SpTree")
 */
  __pyx_v_tree = ((struct __pyx_t_12fmsne_implem_SpTree *)PyMem_Malloc((sizeof(struct __pyx_t_12fmsne_implem_SpTree))));

  /* "fmsne_implem.pyx":1880
 *     """
 *     cdef SpTree* tree = <SpTree*> PyMem_Malloc(sizeof(SpTree))
 *     if tree is NULL:             # <<<<<<<<<<<<<<
 *         printf("Out of memory in cinit_SpTree")
 *         exit(EXIT_FAILURE)
 */
  __pyx_t_1 = ((__pyx_v_tree == NULL) != 0);
  if (__pyx_t_1) {

    /* "fmsne_implem.pyx":1881
 *     cdef SpTree* tree = <SpTree*> PyMem_Malloc(sizeof(SpTree))
 *     if tree is NULL:
 *         printf("Out of memory in cinit_SpTree")             # <<<<<<<<<<<<<<
 *         exit(EXIT_FAILURE)
 *     tree.N = N
 */
    (void)(printf(((char const *)"Out of memory in cinit_SpTree")));

    /* "fmsne_implem.pyx":1882
 *     if tree is NULL:
 *         printf("Out of memory in cinit_SpTree")
 *         exit(EXIT_FAILURE)             # <<<<<<<<<<<<<<
 *     tree.N = N
 *     tree.inter_fct = inter_fct
 */
    exit(EXIT_FAILURE);

    /* "fmsne_implem.pyx":1880
 *     """
 *     cdef SpTree* tree = <SpTree*> PyMem_Malloc(sizeof(SpTree))
 *     if tree is NULL:             # <<<<<<<<<<<<<<
 *         printf("Out of memory in cinit_SpTree")
 *         exit(EXIT_FAILURE)
 */
  }

  /* "fmsne_implem.pyx":1883
 *         printf("Out of memory in cinit_SpTree")
 *         exit(EXIT_FAILURE)
 *     tree.N = N             # <<<<<<<<<<<<<<
 *     tree.inter_fct = inter_fct
 *     # Managing supplementary attributes. Allocation is necessary even when has_sa is False, to avoid segmentation fault. Avoid None to avoid python interactions.
 */
  __pyx_v_tree->N = __pyx_v_N;

  /* "fmsne_implem.pyx":1884
 *         exit(EXIT_FAILURE)
 *     tree.N = N
 *     tree.inter_fct = inter_fct             # <<<<<<<<<<<<<<
 *     # Managing supplementary attributes. Allocation is necessary even when has_sa is False, to avoid segmentation fault. Avoid None to avoid python interactions.
 *     cdef const double* sa = suppl_attrs
 */
  __pyx_v_tree->inter_fct = __pyx_v_inter_fct;

  /* "fmsne_implem.pyx":1886
 *     tree.inter_fct = inter_fct
 *     # Managing supplementary attributes. Allocation is necessary even when has_sa is False, to avoid segmentation fault. Avoid None to avoid python interactions.
 *     cdef const double* sa = suppl_attrs             # <<<<<<<<<<<<<<
 *     # Small shift so that the quadtree box striclty contain all the data points
 *     cdef double sm_shift = 1e-8
 */
  __pyx_v_sa = __pyx_v_suppl_attrs;

  /* "fmsne_implem.pyx":1888
 *     cdef const double* sa = suppl_attrs
 *     # Small shift so that the quadtree box striclty contain all the data points
 *     cdef double sm_shift = 1e-8             # <<<<<<<<<<<<<<
 *     # Allocating memory for the data structures for the root of the tree
 *     cdef size_t sdimd = dim*sizeof(double)
 */
  __pyx_v_sm_shift = 1e-8;

  /* "fmsne_implem.pyx":1890
 *     cdef double sm_shift = 1e-8
 *     # Allocating memory for the data structures for the root of the tree
 *     cdef size_t sdimd = dim*sizeof(double)             # <<<<<<<<<<<<<<
 *     cdef double* min_ax = <double*> PyMem_Malloc(sdimd)
 *     if min_ax is NULL:
 */
  __pyx_v_sdimd = (__pyx_v_dim * (sizeof(double)));

  /* "fmsne_implem.pyx":1891
 *     # Allocating memory for the data structures for the root of the tree
 *     cdef size_t sdimd = dim*sizeof(double)
 *     cdef double* min_ax = <double*> PyMem_Malloc(sdimd)             # <<<<<<<<<<<<<<
 *     if min_ax is NULL:
 *         PyMem_Free(tree)
 */
  __pyx_v_min_ax = ((double *)PyMem_Malloc(__pyx_v_sdimd));

  /* "fmsne_implem.pyx":1892
 *     cdef size_t sdimd = dim*sizeof(double)
 *     cdef double* min_ax = <double*> PyMem_Malloc(sdimd)
 *     if min_ax is NULL:             # <<<<<<<<<<<<<<
 *         PyMem_Free(tree)
 *         printf("Out of memory in cinit_SpTree")
 */
  __pyx_t_1 = ((__pyx_v_min_ax == NULL) != 0);
  if (__pyx_t_1) {

    /* "fmsne_implem.pyx":1893
 *     cdef double* min_ax = <double*> PyMem_Malloc(sdimd)
 *     if min_ax is NULL:
 *         PyMem_Free(tree)             # <<<<<<<<<<<<<<
 *         printf("Out of memory in cinit_SpTree")
 *         exit(EXIT_FAILURE)
 */
    PyMem_Free(__pyx_v_tree);

    /* "fmsne_implem.pyx":1894
 *     if min_ax is NULL:
 *         PyMem_Free(tree)
 *         printf("Out of memory in cinit_SpTree")             # <<<<<<<<<<<<<<
 *         exit(EXIT_FAILURE)
 *     cdef double* max_ax = <double*> PyMem_Malloc(sdimd)
 */
    (void)(printf(((char const *)"Out of memory in cinit_SpTree")));

    /* "fmsne_implem.pyx":1895
 *         PyMem_Free(tree)
 *         printf("Out of memory in cinit_SpTree")
 *         exit(EXIT_FAILURE)             # <<<<<<<<<<<<<<
 *     cdef double* max_ax = <double*> PyMem_Malloc(sdimd)
 *     if max_ax is NULL:
 */
    exit(EXIT_FAILURE);

    /* "fmsne_implem.pyx":1892
 *     cdef size_t sdimd = dim*sizeof(double)
 *     cdef double* min_ax = <double*> PyMem_Malloc(sdimd)
 *     if min_ax is NULL:             # <<<<<<<<<<<<<<
 *         PyMem_Free(tree)
 *         printf("Out of memory in cinit_SpTree")
 */
  }

  /* "fmsne_implem.pyx":1896
 *         printf("Out of memory in cinit_SpTree")
 *         exit(EXIT_FAILURE)
 *     cdef double* max_ax = <double*> PyMem_Malloc(sdimd)             # <<<<<<<<<<<<<<
 *     if max_ax is NULL:
 *         PyMem_Free(tree)
 */
  __pyx_v_max_ax = ((double *)PyMem_Malloc(__pyx_v_sdimd));

  /* "fmsne_implem.pyx":1897
 *         exit(EXIT_FAILURE)
 *     cdef double* max_ax = <double*> PyMem_Malloc(sdimd)
 *     if max_ax is NULL:             # <<<<<<<<<<<<<<
 *         PyMem_Free(tree)
 *         PyMem_Free(min_ax)
 */
  __pyx_t_1 = ((__pyx_v_max_ax == NULL) != 0);
  if (__pyx_t_1) {

    /* "fmsne_implem.pyx":1898
 *     cdef double* max_ax = <double*> PyMem_Malloc(sdimd)
 *     if max_ax is NULL:
 *         PyMem_Free(tree)             # <<<<<<<<<<<<<<
 *         PyMem_Free(min_ax)
 *         printf("Out of memory in cinit_SpTree")
 */
    PyMem_Free(__pyx_v_tree);

    /* "fmsne_implem.pyx":1899
 *     if max_ax is NULL:
 *         PyMem_Free(tree)
 *         PyMem_Free(min_ax)             # <<<<<<<<<<<<<<
 *         printf("Out of memory in cinit_SpTree")
 *         exit(EXIT_FAILURE)
 */
    PyMem_Free(__pyx_v_min_ax);

    /* "fmsne_implem.pyx":1900
 *         PyMem_Free(tree)
 *         PyMem_Free(min_ax)
 *         printf("Out of memory in cinit_SpTree")             # <<<<<<<<<<<<<<
 *         exit(EXIT_FAILURE)
 *     cdef Py_ssize_t i
 */
    (void)(printf(((char const *)"Out of memory in cinit_SpTree")));

    /* "fmsne_implem.pyx":1901
 *         PyMem_Free(min_ax)
 *         printf("Out of memory in cinit_SpTree")
 *         exit(EXIT_FAILURE)             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t i
 *     cdef Py_ssize_t m = N*dim
 */
    exit(EXIT_FAILURE);

    /* "fmsne_implem.pyx":1897
 *         exit(EXIT_FAILURE)
 *     cdef double* max_ax = <double*> PyMem_Malloc(sdimd)
 *     if max_ax is NULL:             # <<<<<<<<<<<<<<
 *         PyMem_Free(tree)
 *         PyMem_Free(min_ax)
 */
  }

  /* "fmsne_implem.pyx":1903
 *         exit(EXIT_FAILURE)
 *     cdef Py_ssize_t i
 *     cdef Py_ssize_t m = N*dim             # <<<<<<<<<<<<<<
 *     for i in range(dim):
 *         min_ax[i] = min_arr_ptr_step(X, m, i, dim) - sm_shift
 */
  __pyx_v_m = (__pyx_v_N * __pyx_v_dim);

  /* "fmsne_implem.pyx":1904
 *     cdef Py_ssize_t i
 *     cdef Py_ssize_t m = N*dim
 *     for i in range(dim):             # <<<<<<<<<<<<<<
 *         min_ax[i] = min_arr_ptr_step(X, m, i, dim) - sm_shift
 *         max_ax[i] = max_arr_ptr_step(X, m, i, dim) + sm_shift
 */
  __pyx_t_2 = __pyx_v_dim;
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "fmsne_implem.pyx":1905
 *     cdef Py_ssize_t m = N*dim
 *     for i in range(dim):
 *         min_ax[i] = min_arr_ptr_step(X, m, i, dim) - sm_shift             # <<<<<<<<<<<<<<
 *         max_ax[i] = max_arr_ptr_step(X, m, i, dim) + sm_shift
 *     # Initializing the root of the tree
 */
    (__pyx_v_min_ax[__pyx_v_i]) = (__pyx_f_12fmsne_implem_min_arr_ptr_step(__pyx_v_X, __pyx_v_m, __pyx_v_i, __pyx_v_dim) - __pyx_v_sm_shift);

    /* "fmsne_implem.pyx":1906
 *     for i in range(dim):
 *         min_ax[i] = min_arr_ptr_step(X, m, i, dim) - sm_shift
 *         max_ax[i] = max_arr_ptr_step(X, m, i, dim) + sm_shift             # <<<<<<<<<<<<<<
 *     # Initializing the root of the tree
 *     tree.root = cinit_SpNode(X, dim, min_ax, max_ax, has_sa, sa, n_sa)
 */
    (__pyx_v_max_ax[__pyx_v_i]) = (__pyx_f_12fmsne_implem_max_arr_ptr_step(__pyx_v_X, __pyx_v_m, __pyx_v_i, __pyx_v_dim) + __pyx_v_sm_shift);
  }

  /* "fmsne_implem.pyx":1908
 *         max_ax[i] = max_arr_ptr_step(X, m, i, dim) + sm_shift
 *     # Initializing the root of the tree
 *     tree.root = cinit_SpNode(X, dim, min_ax, max_ax, has_sa, sa, n_sa)             # <<<<<<<<<<<<<<
 *     # Inserting each data point
 *     i = dim
 */
  __pyx_v_tree->root = __pyx_f_12fmsne_implem_cinit_SpNode(__pyx_v_X, __pyx_v_dim, __pyx_v_min_ax, __pyx_v_max_ax, __pyx_v_has_sa, __pyx_v_sa, __pyx_v_n_sa);

  /* "fmsne_implem.pyx":1910
 *     tree.root = cinit_SpNode(X, dim, min_ax, max_ax, has_sa, sa, n_sa)
 *     # Inserting each data point
 *     i = dim             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t j
 *     if has_sa:
 */
  __pyx_v_i = __pyx_v_dim;

  /* "fmsne_implem.pyx":1912
 *     i = dim
 *     cdef Py_ssize_t j
 *     if has_sa:             # <<<<<<<<<<<<<<
 *         j = n_sa
 *     while i < m:
 */
  __pyx_t_1 = (__pyx_v_has_sa != 0);
  if (__pyx_t_1) {

    /* "fmsne_implem.pyx":1913
 *     cdef Py_ssize_t j
 *     if has_sa:
 *         j = n_sa             # <<<<<<<<<<<<<<
 *     while i < m:
 *         if has_sa:
 */
    __pyx_v_j = __pyx_v_n_sa;

    /* "fmsne_implem.pyx":1912
 *     i = dim
 *     cdef Py_ssize_t j
 *     if has_sa:             # <<<<<<<<<<<<<<
 *         j = n_sa
 *     while i < m:
 */
  }

  /* "fmsne_implem.pyx":1914
 *     if has_sa:
 *         j = n_sa
 *     while i < m:             # <<<<<<<<<<<<<<
 *         if has_sa:
 *             sa = &suppl_attrs[j]
 */
  while (1) {
    __pyx_t_1 = ((__pyx_v_i < __pyx_v_m) != 0);
    if (!__pyx_t_1) break;

    /* "fmsne_implem.pyx":1915
 *         j = n_sa
 *     while i < m:
 *         if has_sa:             # <<<<<<<<<<<<<<
 *             sa = &suppl_attrs[j]
 *             j += n_sa
 */
    __pyx_t_1 = (__pyx_v_has_sa != 0);
    if (__pyx_t_1) {

      /* "fmsne_implem.pyx":1916
 *     while i < m:
 *         if has_sa:
 *             sa = &suppl_attrs[j]             # <<<<<<<<<<<<<<
 *             j += n_sa
 *         addPnt_SpNode(tree.root, &X[i], sa)
 */
      __pyx_v_sa = (&(__pyx_v_suppl_attrs[__pyx_v_j]));

      /* "fmsne_implem.pyx":1917
 *         if has_sa:
 *             sa = &suppl_attrs[j]
 *             j += n_sa             # <<<<<<<<<<<<<<
 *         addPnt_SpNode(tree.root, &X[i], sa)
 *         i += dim
 */
      __pyx_v_j = (__pyx_v_j + __pyx_v_n_sa);

      /* "fmsne_implem.pyx":1915
 *         j = n_sa
 *     while i < m:
 *         if has_sa:             # <<<<<<<<<<<<<<
 *             sa = &suppl_attrs[j]
 *             j += n_sa
 */
    }

    /* "fmsne_implem.pyx":1918
 *             sa = &suppl_attrs[j]
 *             j += n_sa
 *         addPnt_SpNode(tree.root, &X[i], sa)             # <<<<<<<<<<<<<<
 *         i += dim
 *     # Returning
 */
    __pyx_f_12fmsne_implem_addPnt_SpNode(__pyx_v_tree->root, (&(__pyx_v_X[__pyx_v_i])), __pyx_v_sa);

    /* "fmsne_implem.pyx":1919
 *             j += n_sa
 *         addPnt_SpNode(tree.root, &X[i], sa)
 *         i += dim             # <<<<<<<<<<<<<<
 *     # Returning
 *     return tree
 */
    __pyx_v_i = (__pyx_v_i + __pyx_v_dim);
  }

  /* "fmsne_implem.pyx":1921
 *         i += dim
 *     # Returning
 *     return tree             # <<<<<<<<<<<<<<
 * 
 * cdef inline double approxInteractions_SpTree(const SpTree* tree, const double* q, double theta, double* acc_v, double** acc_vv, double*** acc_vvv, const double* t_h, double** t_h_v, double* qdiff, Py_ssize_t n_v, Py_ssize_t n_vv) nogil:
 */
  __pyx_r = __pyx_v_tree;
  goto __pyx_L0;

  /* "fmsne_implem.pyx":1874
 *     Py_ssize_t N
 * 
 * cdef inline SpTree* cinit_SpTree(const double* X, Py_ssize_t N, Py_ssize_t dim, bint has_sa, const double* suppl_attrs, Py_ssize_t n_sa, int inter_fct):             # <<<<<<<<<<<<<<
 *     """
 *     Initialize a space-partitioning tree.
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "fmsne_implem.pyx":1923
 *     return tree
 * 
 * cdef inline double approxInteractions_SpTree(const SpTree* tree, const double* q, double theta, double* acc_v, double** acc_vv, double*** acc_vvv, const double* t_h, double** t_h_v, double* qdiff, Py_ssize_t n_v, Py_ssize_t n_vv) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     t_h = parameter for functions.
 */

static CYTHON_INLINE double __pyx_f_12fmsne_implem_approxInteractions_SpTree(struct __pyx_t_12fmsne_implem_SpTree const *__pyx_v_tree, double const *__pyx_v_q, double __pyx_v_theta, double *__pyx_v_acc_v, double **__pyx_v_acc_vv, double ***__pyx_v_acc_vvv, double const *__pyx_v_t_h, double **__pyx_v_t_h_v, double *__pyx_v_qdiff, Py_ssize_t __pyx_v_n_v, Py_ssize_t __pyx_v_n_vv) {
  double __pyx_v_acc;
  Py_ssize_t __pyx_v_i;
  Py_ssize_t __pyx_v_j;
  size_t __pyx_v_sz;
  size_t __pyx_v_szsec;
  double __pyx_r;
  int __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  Py_ssize_t __pyx_t_7;

  /* "fmsne_implem.pyx":1947
 *     """
 *     # Initializing acc
 *     cdef double acc = 0.0             # <<<<<<<<<<<<<<
 *     # Index for loops over range(n_v), over range(n_vv) and over tree.dim. The values of n_v and n_vv depend on inter_fct.
 *     cdef Py_ssize_t i, j, k
 */
  __pyx_v_acc = 0.0;

  /* "fmsne_implem.pyx":1952
 *     cdef size_t sz, szsec
 *     # Initializing acc_v, acc_vv and acc_vvv to zero, except if the inter_fct is > 4
 *     if tree.inter_fct < 5:             # <<<<<<<<<<<<<<
 *         if tree.inter_fct == 1:
 *             sz = n_vv*sizeof(double)
 */
  __pyx_t_1 = ((__pyx_v_tree->inter_fct < 5) != 0);
  if (__pyx_t_1) {

    /* "fmsne_implem.pyx":1953
 *     # Initializing acc_v, acc_vv and acc_vvv to zero, except if the inter_fct is > 4
 *     if tree.inter_fct < 5:
 *         if tree.inter_fct == 1:             # <<<<<<<<<<<<<<
 *             sz = n_vv*sizeof(double)
 *             szsec = tree.root.dim*sizeof(double)
 */
    switch (__pyx_v_tree->inter_fct) {
      case 1:

      /* "fmsne_implem.pyx":1954
 *     if tree.inter_fct < 5:
 *         if tree.inter_fct == 1:
 *             sz = n_vv*sizeof(double)             # <<<<<<<<<<<<<<
 *             szsec = tree.root.dim*sizeof(double)
 *             for i in range(n_v):
 */
      __pyx_v_sz = (__pyx_v_n_vv * (sizeof(double)));

      /* "fmsne_implem.pyx":1955
 *         if tree.inter_fct == 1:
 *             sz = n_vv*sizeof(double)
 *             szsec = tree.root.dim*sizeof(double)             # <<<<<<<<<<<<<<
 *             for i in range(n_v):
 *                 memset(acc_vv[i], 0, sz)
 */
      __pyx_v_szsec = (__pyx_v_tree->root->dim * (sizeof(double)));

      /* "fmsne_implem.pyx":1956
 *             sz = n_vv*sizeof(double)
 *             szsec = tree.root.dim*sizeof(double)
 *             for i in range(n_v):             # <<<<<<<<<<<<<<
 *                 memset(acc_vv[i], 0, sz)
 *                 for j in range(n_vv):
 */
      __pyx_t_2 = __pyx_v_n_v;
      __pyx_t_3 = __pyx_t_2;
      for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
        __pyx_v_i = __pyx_t_4;

        /* "fmsne_implem.pyx":1957
 *             szsec = tree.root.dim*sizeof(double)
 *             for i in range(n_v):
 *                 memset(acc_vv[i], 0, sz)             # <<<<<<<<<<<<<<
 *                 for j in range(n_vv):
 *                     memset(acc_vvv[i][j], 0, szsec)
 */
        (void)(memset((__pyx_v_acc_vv[__pyx_v_i]), 0, __pyx_v_sz));

        /* "fmsne_implem.pyx":1958
 *             for i in range(n_v):
 *                 memset(acc_vv[i], 0, sz)
 *                 for j in range(n_vv):             # <<<<<<<<<<<<<<
 *                     memset(acc_vvv[i][j], 0, szsec)
 *         elif tree.inter_fct == 0:
 */
        __pyx_t_5 = __pyx_v_n_vv;
        __pyx_t_6 = __pyx_t_5;
        for (__pyx_t_7 = 0; __pyx_t_7 < __pyx_t_6; __pyx_t_7+=1) {
          __pyx_v_j = __pyx_t_7;

          /* "fmsne_implem.pyx":1959
 *                 memset(acc_vv[i], 0, sz)
 *                 for j in range(n_vv):
 *                     memset(acc_vvv[i][j], 0, szsec)             # <<<<<<<<<<<<<<
 *         elif tree.inter_fct == 0:
 *             memset(acc_v, 0, n_v*sizeof(double))
 */
          (void)(memset(((__pyx_v_acc_vvv[__pyx_v_i])[__pyx_v_j]), 0, __pyx_v_szsec));
        }
      }

      /* "fmsne_implem.pyx":1953
 *     # Initializing acc_v, acc_vv and acc_vvv to zero, except if the inter_fct is > 4
 *     if tree.inter_fct < 5:
 *         if tree.inter_fct == 1:             # <<<<<<<<<<<<<<
 *             sz = n_vv*sizeof(double)
 *             szsec = tree.root.dim*sizeof(double)
 */
      break;
      case 0:

      /* "fmsne_implem.pyx":1961
 *                     memset(acc_vvv[i][j], 0, szsec)
 *         elif tree.inter_fct == 0:
 *             memset(acc_v, 0, n_v*sizeof(double))             # <<<<<<<<<<<<<<
 *             sz = tree.root.dim*sizeof(double)
 *             for i in range(n_v):
 */
      (void)(memset(__pyx_v_acc_v, 0, (__pyx_v_n_v * (sizeof(double)))));

      /* "fmsne_implem.pyx":1962
 *         elif tree.inter_fct == 0:
 *             memset(acc_v, 0, n_v*sizeof(double))
 *             sz = tree.root.dim*sizeof(double)             # <<<<<<<<<<<<<<
 *             for i in range(n_v):
 *                 memset(acc_vv[i], 0, sz)
 */
      __pyx_v_sz = (__pyx_v_tree->root->dim * (sizeof(double)));

      /* "fmsne_implem.pyx":1963
 *             memset(acc_v, 0, n_v*sizeof(double))
 *             sz = tree.root.dim*sizeof(double)
 *             for i in range(n_v):             # <<<<<<<<<<<<<<
 *                 memset(acc_vv[i], 0, sz)
 *         elif tree.inter_fct == 2:
 */
      __pyx_t_2 = __pyx_v_n_v;
      __pyx_t_3 = __pyx_t_2;
      for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
        __pyx_v_i = __pyx_t_4;

        /* "fmsne_implem.pyx":1964
 *             sz = tree.root.dim*sizeof(double)
 *             for i in range(n_v):
 *                 memset(acc_vv[i], 0, sz)             # <<<<<<<<<<<<<<
 *         elif tree.inter_fct == 2:
 *             memset(acc_v, 0, tree.root.dim*sizeof(double))
 */
        (void)(memset((__pyx_v_acc_vv[__pyx_v_i]), 0, __pyx_v_sz));
      }

      /* "fmsne_implem.pyx":1960
 *                 for j in range(n_vv):
 *                     memset(acc_vvv[i][j], 0, szsec)
 *         elif tree.inter_fct == 0:             # <<<<<<<<<<<<<<
 *             memset(acc_v, 0, n_v*sizeof(double))
 *             sz = tree.root.dim*sizeof(double)
 */
      break;
      case 2:

      /* "fmsne_implem.pyx":1966
 *                 memset(acc_vv[i], 0, sz)
 *         elif tree.inter_fct == 2:
 *             memset(acc_v, 0, tree.root.dim*sizeof(double))             # <<<<<<<<<<<<<<
 *         elif tree.inter_fct == 3:
 *             memset(acc_v, 0, n_v*sizeof(double))
 */
      (void)(memset(__pyx_v_acc_v, 0, (__pyx_v_tree->root->dim * (sizeof(double)))));

      /* "fmsne_implem.pyx":1965
 *             for i in range(n_v):
 *                 memset(acc_vv[i], 0, sz)
 *         elif tree.inter_fct == 2:             # <<<<<<<<<<<<<<
 *             memset(acc_v, 0, tree.root.dim*sizeof(double))
 *         elif tree.inter_fct == 3:
 */
      break;
      case 3:

      /* "fmsne_implem.pyx":1968
 *             memset(acc_v, 0, tree.root.dim*sizeof(double))
 *         elif tree.inter_fct == 3:
 *             memset(acc_v, 0, n_v*sizeof(double))             # <<<<<<<<<<<<<<
 *         elif tree.inter_fct == 4:
 *             sz = n_vv*sizeof(double)
 */
      (void)(memset(__pyx_v_acc_v, 0, (__pyx_v_n_v * (sizeof(double)))));

      /* "fmsne_implem.pyx":1967
 *         elif tree.inter_fct == 2:
 *             memset(acc_v, 0, tree.root.dim*sizeof(double))
 *         elif tree.inter_fct == 3:             # <<<<<<<<<<<<<<
 *             memset(acc_v, 0, n_v*sizeof(double))
 *         elif tree.inter_fct == 4:
 */
      break;
      case 4:

      /* "fmsne_implem.pyx":1970
 *             memset(acc_v, 0, n_v*sizeof(double))
 *         elif tree.inter_fct == 4:
 *             sz = n_vv*sizeof(double)             # <<<<<<<<<<<<<<
 *             for i in range(n_v):
 *                 memset(acc_vv[i], 0, sz)
 */
      __pyx_v_sz = (__pyx_v_n_vv * (sizeof(double)));

      /* "fmsne_implem.pyx":1971
 *         elif tree.inter_fct == 4:
 *             sz = n_vv*sizeof(double)
 *             for i in range(n_v):             # <<<<<<<<<<<<<<
 *                 memset(acc_vv[i], 0, sz)
 *     return approxInteractions_SpNode(tree.root, q, theta, acc, acc_v, acc_vv, acc_vvv, tree.inter_fct, t_h, t_h_v, qdiff, n_v, n_vv)
 */
      __pyx_t_2 = __pyx_v_n_v;
      __pyx_t_3 = __pyx_t_2;
      for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
        __pyx_v_i = __pyx_t_4;

        /* "fmsne_implem.pyx":1972
 *             sz = n_vv*sizeof(double)
 *             for i in range(n_v):
 *                 memset(acc_vv[i], 0, sz)             # <<<<<<<<<<<<<<
 *     return approxInteractions_SpNode(tree.root, q, theta, acc, acc_v, acc_vv, acc_vvv, tree.inter_fct, t_h, t_h_v, qdiff, n_v, n_vv)
 * 
 */
        (void)(memset((__pyx_v_acc_vv[__pyx_v_i]), 0, __pyx_v_sz));
      }

      /* "fmsne_implem.pyx":1969
 *         elif tree.inter_fct == 3:
 *             memset(acc_v, 0, n_v*sizeof(double))
 *         elif tree.inter_fct == 4:             # <<<<<<<<<<<<<<
 *             sz = n_vv*sizeof(double)
 *             for i in range(n_v):
 */
      break;
      default: break;
    }

    /* "fmsne_implem.pyx":1952
 *     cdef size_t sz, szsec
 *     # Initializing acc_v, acc_vv and acc_vvv to zero, except if the inter_fct is > 4
 *     if tree.inter_fct < 5:             # <<<<<<<<<<<<<<
 *         if tree.inter_fct == 1:
 *             sz = n_vv*sizeof(double)
 */
  }

  /* "fmsne_implem.pyx":1973
 *             for i in range(n_v):
 *                 memset(acc_vv[i], 0, sz)
 *     return approxInteractions_SpNode(tree.root, q, theta, acc, acc_v, acc_vv, acc_vvv, tree.inter_fct, t_h, t_h_v, qdiff, n_v, n_vv)             # <<<<<<<<<<<<<<
 * 
 * cdef inline void update_sa_SpTree(SpTree* tree, const double* X, const double* sa, Py_ssize_t n_sa):
 */
  __pyx_r = __pyx_f_12fmsne_implem_approxInteractions_SpNode(__pyx_v_tree->root, __pyx_v_q, __pyx_v_theta, __pyx_v_acc, __pyx_v_acc_v, __pyx_v_acc_vv, __pyx_v_acc_vvv, __pyx_v_tree->inter_fct, __pyx_v_t_h, __pyx_v_t_h_v, __pyx_v_qdiff, __pyx_v_n_v, __pyx_v_n_vv);
  goto __pyx_L0;

  /* "fmsne_implem.pyx":1923
 *     return tree
 * 
 * cdef inline double approxInteractions_SpTree(const SpTree* tree, const double* q, double theta, double* acc_v, double** acc_vv, double*** acc_vvv, const double* t_h, double** t_h_v, double* qdiff, Py_ssize_t n_v, Py_ssize_t n_vv) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     t_h = parameter for functions.
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "fmsne_implem.pyx":1975
 *     return approxInteractions_SpNode(tree.root, q, theta, acc, acc_v, acc_vv, acc_vvv, tree.inter_fct, t_h, t_h_v, qdiff, n_v, n_vv)
 * 
 * cdef inline void update_sa_SpTree(SpTree* tree, const double* X, const double* sa, Py_ssize_t n_sa):             # <<<<<<<<<<<<<<
 *     """
 *     Update the supplementary attributes of the quadtree without building it from scratch.
 */

static CYTHON_INLINE void __pyx_f_12fmsne_implem_update_sa_SpTree(struct __pyx_t_12fmsne_implem_SpTree *__pyx_v_tree, double const *__pyx_v_X, double const *__pyx_v_sa, Py_ssize_t __pyx_v_n_sa) {
  Py_ssize_t __pyx_v_i;
  Py_ssize_t __pyx_v_j;
  Py_ssize_t __pyx_v_m;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("update_sa_SpTree", 0);

  /* "fmsne_implem.pyx":1982
 *     """
 *     # Reset the existing supplementary attributes, if any
 *     if tree.root.has_sa:             # <<<<<<<<<<<<<<
 *         reset_sa_SpNode(tree.root)
 *     # Updating the supplementary attributes of the tree
 */
  __pyx_t_1 = (__pyx_v_tree->root->has_sa != 0);
  if (__pyx_t_1) {

    /* "fmsne_implem.pyx":1983
 *     # Reset the existing supplementary attributes, if any
 *     if tree.root.has_sa:
 *         reset_sa_SpNode(tree.root)             # <<<<<<<<<<<<<<
 *     # Updating the supplementary attributes of the tree
 *     cdef Py_ssize_t i, j, m
 */
    __pyx_f_12fmsne_implem_reset_sa_SpNode(__pyx_v_tree->root);

    /* "fmsne_implem.pyx":1982
 *     """
 *     # Reset the existing supplementary attributes, if any
 *     if tree.root.has_sa:             # <<<<<<<<<<<<<<
 *         reset_sa_SpNode(tree.root)
 *     # Updating the supplementary attributes of the tree
 */
  }

  /* "fmsne_implem.pyx":1986
 *     # Updating the supplementary attributes of the tree
 *     cdef Py_ssize_t i, j, m
 *     i = 0             # <<<<<<<<<<<<<<
 *     j = 0
 *     m = tree.N*tree.root.dim
 */
  __pyx_v_i = 0;

  /* "fmsne_implem.pyx":1987
 *     cdef Py_ssize_t i, j, m
 *     i = 0
 *     j = 0             # <<<<<<<<<<<<<<
 *     m = tree.N*tree.root.dim
 *     while i < m:
 */
  __pyx_v_j = 0;

  /* "fmsne_implem.pyx":1988
 *     i = 0
 *     j = 0
 *     m = tree.N*tree.root.dim             # <<<<<<<<<<<<<<
 *     while i < m:
 *         update_sa_SpNode(tree.root, &X[i], &sa[j], n_sa)
 */
  __pyx_v_m = (__pyx_v_tree->N * __pyx_v_tree->root->dim);

  /* "fmsne_implem.pyx":1989
 *     j = 0
 *     m = tree.N*tree.root.dim
 *     while i < m:             # <<<<<<<<<<<<<<
 *         update_sa_SpNode(tree.root, &X[i], &sa[j], n_sa)
 *         j += n_sa
 */
  while (1) {
    __pyx_t_1 = ((__pyx_v_i < __pyx_v_m) != 0);
    if (!__pyx_t_1) break;

    /* "fmsne_implem.pyx":1990
 *     m = tree.N*tree.root.dim
 *     while i < m:
 *         update_sa_SpNode(tree.root, &X[i], &sa[j], n_sa)             # <<<<<<<<<<<<<<
 *         j += n_sa
 *         i += tree.root.dim
 */
    __pyx_f_12fmsne_implem_update_sa_SpNode(__pyx_v_tree->root, (&(__pyx_v_X[__pyx_v_i])), (&(__pyx_v_sa[__pyx_v_j])), __pyx_v_n_sa);

    /* "fmsne_implem.pyx":1991
 *     while i < m:
 *         update_sa_SpNode(tree.root, &X[i], &sa[j], n_sa)
 *         j += n_sa             # <<<<<<<<<<<<<<
 *         i += tree.root.dim
 * 
 */
    __pyx_v_j = (__pyx_v_j + __pyx_v_n_sa);

    /* "fmsne_implem.pyx":1992
 *         update_sa_SpNode(tree.root, &X[i], &sa[j], n_sa)
 *         j += n_sa
 *         i += tree.root.dim             # <<<<<<<<<<<<<<
 * 
 * cdef inline void free_SpTree(SpTree* tree):
 */
    __pyx_v_i = (__pyx_v_i + __pyx_v_tree->root->dim);
  }

  /* "fmsne_implem.pyx":1975
 *     return approxInteractions_SpNode(tree.root, q, theta, acc, acc_v, acc_vv, acc_vvv, tree.inter_fct, t_h, t_h_v, qdiff, n_v, n_vv)
 * 
 * cdef inline void update_sa_SpTree(SpTree* tree, const double* X, const double* sa, Py_ssize_t n_sa):             # <<<<<<<<<<<<<<
 *     """
 *     Update the supplementary attributes of the quadtree without building it from scratch.
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "fmsne_implem.pyx":1994
 *         i += tree.root.dim
 * 
 * cdef inline void free_SpTree(SpTree* tree):             # <<<<<<<<<<<<<<
 *     """
 *     Recursively free
 */

static CYTHON_INLINE void __pyx_f_12fmsne_implem_free_SpTree(struct __pyx_t_12fmsne_implem_SpTree *__pyx_v_tree) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("free_SpTree", 0);

  /* "fmsne_implem.pyx":1998
 *     Recursively free
 *     """
 *     free_SpNode(tree.root)             # <<<<<<<<<<<<<<
 *     PyMem_Free(tree)
 * 
 */
  __pyx_f_12fmsne_implem_free_SpNode(__pyx_v_tree->root);

  /* "fmsne_implem.pyx":1999
 *     """
 *     free_SpNode(tree.root)
 *     PyMem_Free(tree)             # <<<<<<<<<<<<<<
 * 
 * #######################################################
 */
  PyMem_Free(__pyx_v_tree);

  /* "fmsne_implem.pyx":1994
 *         i += tree.root.dim
 * 
 * cdef inline void free_SpTree(SpTree* tree):             # <<<<<<<<<<<<<<
 *     """
 *     Recursively free
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "fmsne_implem.pyx":2005
 * #######################################################
 * 
 * cdef inline int* f_def_n_ds_h(bint isLmin1, int N, int shift_L_min, double Nd, Py_ssize_t L):             # <<<<<<<<<<<<<<
 *     """
 *     """
 */

static CYTHON_INLINE int *__pyx_f_12fmsne_implem_f_def_n_ds_h(int __pyx_v_isLmin1, int __pyx_v_N, int __pyx_v_shift_L_min, double __pyx_v_Nd, Py_ssize_t __pyx_v_L) {
  int *__pyx_v_n_ds_h;
  double __pyx_v_mf;
  Py_ssize_t __pyx_v_h;
  int *__pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  __Pyx_RefNannySetupContext("f_def_n_ds_h", 0);

  /* "fmsne_implem.pyx":2008
 *     """
 *     """
 *     cdef int* n_ds_h = <int*> PyMem_Malloc(L*sizeof(int))             # <<<<<<<<<<<<<<
 *     if n_ds_h is NULL:
 *         return NULL
 */
  __pyx_v_n_ds_h = ((int *)PyMem_Malloc((__pyx_v_L * (sizeof(int)))));

  /* "fmsne_implem.pyx":2009
 *     """
 *     cdef int* n_ds_h = <int*> PyMem_Malloc(L*sizeof(int))
 *     if n_ds_h is NULL:             # <<<<<<<<<<<<<<
 *         return NULL
 *     # Multiplication factor to determine the elements of n_ds_h
 */
  __pyx_t_1 = ((__pyx_v_n_ds_h == NULL) != 0);
  if (__pyx_t_1) {

    /* "fmsne_implem.pyx":2010
 *     cdef int* n_ds_h = <int*> PyMem_Malloc(L*sizeof(int))
 *     if n_ds_h is NULL:
 *         return NULL             # <<<<<<<<<<<<<<
 *     # Multiplication factor to determine the elements of n_ds_h
 *     cdef double mf
 */
    __pyx_r = NULL;
    goto __pyx_L0;

    /* "fmsne_implem.pyx":2009
 *     """
 *     cdef int* n_ds_h = <int*> PyMem_Malloc(L*sizeof(int))
 *     if n_ds_h is NULL:             # <<<<<<<<<<<<<<
 *         return NULL
 *     # Multiplication factor to determine the elements of n_ds_h
 */
  }

  /* "fmsne_implem.pyx":2013
 *     # Multiplication factor to determine the elements of n_ds_h
 *     cdef double mf
 *     if isLmin1:             # <<<<<<<<<<<<<<
 *         mf = 1.0
 *         n_ds_h[0] = N
 */
  __pyx_t_1 = (__pyx_v_isLmin1 != 0);
  if (__pyx_t_1) {

    /* "fmsne_implem.pyx":2014
 *     cdef double mf
 *     if isLmin1:
 *         mf = 1.0             # <<<<<<<<<<<<<<
 *         n_ds_h[0] = N
 *     else:
 */
    __pyx_v_mf = 1.0;

    /* "fmsne_implem.pyx":2015
 *     if isLmin1:
 *         mf = 1.0
 *         n_ds_h[0] = N             # <<<<<<<<<<<<<<
 *     else:
 *         mf = 1.0/(<double> shift_L_min)
 */
    (__pyx_v_n_ds_h[0]) = __pyx_v_N;

    /* "fmsne_implem.pyx":2013
 *     # Multiplication factor to determine the elements of n_ds_h
 *     cdef double mf
 *     if isLmin1:             # <<<<<<<<<<<<<<
 *         mf = 1.0
 *         n_ds_h[0] = N
 */
    goto __pyx_L4;
  }

  /* "fmsne_implem.pyx":2017
 *         n_ds_h[0] = N
 *     else:
 *         mf = 1.0/(<double> shift_L_min)             # <<<<<<<<<<<<<<
 *         n_ds_h[0] = <int> round(Nd*mf)
 *     # Filling n_ds_h
 */
  /*else*/ {
    __pyx_v_mf = (1.0 / ((double)__pyx_v_shift_L_min));

    /* "fmsne_implem.pyx":2018
 *     else:
 *         mf = 1.0/(<double> shift_L_min)
 *         n_ds_h[0] = <int> round(Nd*mf)             # <<<<<<<<<<<<<<
 *     # Filling n_ds_h
 *     cdef Py_ssize_t h
 */
    (__pyx_v_n_ds_h[0]) = ((int)round((__pyx_v_Nd * __pyx_v_mf)));
  }
  __pyx_L4:;

  /* "fmsne_implem.pyx":2021
 *     # Filling n_ds_h
 *     cdef Py_ssize_t h
 *     for h in range(1, L, 1):             # <<<<<<<<<<<<<<
 *         mf *= 0.5
 *         n_ds_h[h] = <int> round(Nd*mf)
 */
  __pyx_t_2 = __pyx_v_L;
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 1; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_h = __pyx_t_4;

    /* "fmsne_implem.pyx":2022
 *     cdef Py_ssize_t h
 *     for h in range(1, L, 1):
 *         mf *= 0.5             # <<<<<<<<<<<<<<
 *         n_ds_h[h] = <int> round(Nd*mf)
 *     return n_ds_h
 */
    __pyx_v_mf = (__pyx_v_mf * 0.5);

    /* "fmsne_implem.pyx":2023
 *     for h in range(1, L, 1):
 *         mf *= 0.5
 *         n_ds_h[h] = <int> round(Nd*mf)             # <<<<<<<<<<<<<<
 *     return n_ds_h
 * 
 */
    (__pyx_v_n_ds_h[__pyx_v_h]) = ((int)round((__pyx_v_Nd * __pyx_v_mf)));
  }

  /* "fmsne_implem.pyx":2024
 *         mf *= 0.5
 *         n_ds_h[h] = <int> round(Nd*mf)
 *     return n_ds_h             # <<<<<<<<<<<<<<
 * 
 * cdef inline int* f_def_nnn_h(Py_ssize_t L, int* K_h, int* n_ds_h, bint cperp):
 */
  __pyx_r = __pyx_v_n_ds_h;
  goto __pyx_L0;

  /* "fmsne_implem.pyx":2005
 * #######################################################
 * 
 * cdef inline int* f_def_n_ds_h(bint isLmin1, int N, int shift_L_min, double Nd, Py_ssize_t L):             # <<<<<<<<<<<<<<
 *     """
 *     """
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "fmsne_implem.pyx":2026
 *     return n_ds_h
 * 
 * cdef inline int* f_def_nnn_h(Py_ssize_t L, int* K_h, int* n_ds_h, bint cperp):             # <<<<<<<<<<<<<<
 *     """
 *     """
 */

static CYTHON_INLINE int *__pyx_f_12fmsne_implem_f_def_nnn_h(Py_ssize_t __pyx_v_L, int *__pyx_v_K_h, int *__pyx_v_n_ds_h, int __pyx_v_cperp) {
  int *__pyx_v_nnn_h;
  Py_ssize_t __pyx_v_h;
  int *__pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  __Pyx_RefNannySetupContext("f_def_nnn_h", 0);

  /* "fmsne_implem.pyx":2029
 *     """
 *     """
 *     cdef int* nnn_h = <int*> PyMem_Malloc(L*sizeof(int))             # <<<<<<<<<<<<<<
 *     if nnn_h is NULL:
 *         return NULL
 */
  __pyx_v_nnn_h = ((int *)PyMem_Malloc((__pyx_v_L * (sizeof(int)))));

  /* "fmsne_implem.pyx":2030
 *     """
 *     cdef int* nnn_h = <int*> PyMem_Malloc(L*sizeof(int))
 *     if nnn_h is NULL:             # <<<<<<<<<<<<<<
 *         return NULL
 *     cdef Py_ssize_t h
 */
  __pyx_t_1 = ((__pyx_v_nnn_h == NULL) != 0);
  if (__pyx_t_1) {

    /* "fmsne_implem.pyx":2031
 *     cdef int* nnn_h = <int*> PyMem_Malloc(L*sizeof(int))
 *     if nnn_h is NULL:
 *         return NULL             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t h
 *     # Filling nnn_h
 */
    __pyx_r = NULL;
    goto __pyx_L0;

    /* "fmsne_implem.pyx":2030
 *     """
 *     cdef int* nnn_h = <int*> PyMem_Malloc(L*sizeof(int))
 *     if nnn_h is NULL:             # <<<<<<<<<<<<<<
 *         return NULL
 *     cdef Py_ssize_t h
 */
  }

  /* "fmsne_implem.pyx":2034
 *     cdef Py_ssize_t h
 *     # Filling nnn_h
 *     if cperp:             # <<<<<<<<<<<<<<
 *         nnn_h[0] = 3*K_h[0]
 *         if nnn_h[0] > n_ds_h[0]:
 */
  __pyx_t_1 = (__pyx_v_cperp != 0);
  if (__pyx_t_1) {

    /* "fmsne_implem.pyx":2035
 *     # Filling nnn_h
 *     if cperp:
 *         nnn_h[0] = 3*K_h[0]             # <<<<<<<<<<<<<<
 *         if nnn_h[0] > n_ds_h[0]:
 *             nnn_h[0] = n_ds_h[0]
 */
    (__pyx_v_nnn_h[0]) = (3 * (__pyx_v_K_h[0]));

    /* "fmsne_implem.pyx":2036
 *     if cperp:
 *         nnn_h[0] = 3*K_h[0]
 *         if nnn_h[0] > n_ds_h[0]:             # <<<<<<<<<<<<<<
 *             nnn_h[0] = n_ds_h[0]
 *         for h in range(1, L, 1):
 */
    __pyx_t_1 = (((__pyx_v_nnn_h[0]) > (__pyx_v_n_ds_h[0])) != 0);
    if (__pyx_t_1) {

      /* "fmsne_implem.pyx":2037
 *         nnn_h[0] = 3*K_h[0]
 *         if nnn_h[0] > n_ds_h[0]:
 *             nnn_h[0] = n_ds_h[0]             # <<<<<<<<<<<<<<
 *         for h in range(1, L, 1):
 *             if nnn_h[0] > n_ds_h[h]:
 */
      (__pyx_v_nnn_h[0]) = (__pyx_v_n_ds_h[0]);

      /* "fmsne_implem.pyx":2036
 *     if cperp:
 *         nnn_h[0] = 3*K_h[0]
 *         if nnn_h[0] > n_ds_h[0]:             # <<<<<<<<<<<<<<
 *             nnn_h[0] = n_ds_h[0]
 *         for h in range(1, L, 1):
 */
    }

    /* "fmsne_implem.pyx":2038
 *         if nnn_h[0] > n_ds_h[0]:
 *             nnn_h[0] = n_ds_h[0]
 *         for h in range(1, L, 1):             # <<<<<<<<<<<<<<
 *             if nnn_h[0] > n_ds_h[h]:
 *                 nnn_h[h] = n_ds_h[h]
 */
    __pyx_t_2 = __pyx_v_L;
    __pyx_t_3 = __pyx_t_2;
    for (__pyx_t_4 = 1; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
      __pyx_v_h = __pyx_t_4;

      /* "fmsne_implem.pyx":2039
 *             nnn_h[0] = n_ds_h[0]
 *         for h in range(1, L, 1):
 *             if nnn_h[0] > n_ds_h[h]:             # <<<<<<<<<<<<<<
 *                 nnn_h[h] = n_ds_h[h]
 *             else:
 */
      __pyx_t_1 = (((__pyx_v_nnn_h[0]) > (__pyx_v_n_ds_h[__pyx_v_h])) != 0);
      if (__pyx_t_1) {

        /* "fmsne_implem.pyx":2040
 *         for h in range(1, L, 1):
 *             if nnn_h[0] > n_ds_h[h]:
 *                 nnn_h[h] = n_ds_h[h]             # <<<<<<<<<<<<<<
 *             else:
 *                 nnn_h[h] = nnn_h[0]
 */
        (__pyx_v_nnn_h[__pyx_v_h]) = (__pyx_v_n_ds_h[__pyx_v_h]);

        /* "fmsne_implem.pyx":2039
 *             nnn_h[0] = n_ds_h[0]
 *         for h in range(1, L, 1):
 *             if nnn_h[0] > n_ds_h[h]:             # <<<<<<<<<<<<<<
 *                 nnn_h[h] = n_ds_h[h]
 *             else:
 */
        goto __pyx_L8;
      }

      /* "fmsne_implem.pyx":2042
 *                 nnn_h[h] = n_ds_h[h]
 *             else:
 *                 nnn_h[h] = nnn_h[0]             # <<<<<<<<<<<<<<
 *     else:
 *         for h in range(L):
 */
      /*else*/ {
        (__pyx_v_nnn_h[__pyx_v_h]) = (__pyx_v_nnn_h[0]);
      }
      __pyx_L8:;
    }

    /* "fmsne_implem.pyx":2034
 *     cdef Py_ssize_t h
 *     # Filling nnn_h
 *     if cperp:             # <<<<<<<<<<<<<<
 *         nnn_h[0] = 3*K_h[0]
 *         if nnn_h[0] > n_ds_h[0]:
 */
    goto __pyx_L4;
  }

  /* "fmsne_implem.pyx":2044
 *                 nnn_h[h] = nnn_h[0]
 *     else:
 *         for h in range(L):             # <<<<<<<<<<<<<<
 *             nnn_h[h] = 3*K_h[h]
 *             if nnn_h[h] > n_ds_h[h]:
 */
  /*else*/ {
    __pyx_t_2 = __pyx_v_L;
    __pyx_t_3 = __pyx_t_2;
    for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
      __pyx_v_h = __pyx_t_4;

      /* "fmsne_implem.pyx":2045
 *     else:
 *         for h in range(L):
 *             nnn_h[h] = 3*K_h[h]             # <<<<<<<<<<<<<<
 *             if nnn_h[h] > n_ds_h[h]:
 *                 nnn_h[h] = n_ds_h[h]
 */
      (__pyx_v_nnn_h[__pyx_v_h]) = (3 * (__pyx_v_K_h[__pyx_v_h]));

      /* "fmsne_implem.pyx":2046
 *         for h in range(L):
 *             nnn_h[h] = 3*K_h[h]
 *             if nnn_h[h] > n_ds_h[h]:             # <<<<<<<<<<<<<<
 *                 nnn_h[h] = n_ds_h[h]
 *     return nnn_h
 */
      __pyx_t_1 = (((__pyx_v_nnn_h[__pyx_v_h]) > (__pyx_v_n_ds_h[__pyx_v_h])) != 0);
      if (__pyx_t_1) {

        /* "fmsne_implem.pyx":2047
 *             nnn_h[h] = 3*K_h[h]
 *             if nnn_h[h] > n_ds_h[h]:
 *                 nnn_h[h] = n_ds_h[h]             # <<<<<<<<<<<<<<
 *     return nnn_h
 * 
 */
        (__pyx_v_nnn_h[__pyx_v_h]) = (__pyx_v_n_ds_h[__pyx_v_h]);

        /* "fmsne_implem.pyx":2046
 *         for h in range(L):
 *             nnn_h[h] = 3*K_h[h]
 *             if nnn_h[h] > n_ds_h[h]:             # <<<<<<<<<<<<<<
 *                 nnn_h[h] = n_ds_h[h]
 *     return nnn_h
 */
      }
    }
  }
  __pyx_L4:;

  /* "fmsne_implem.pyx":2048
 *             if nnn_h[h] > n_ds_h[h]:
 *                 nnn_h[h] = n_ds_h[h]
 *     return nnn_h             # <<<<<<<<<<<<<<
 * 
 * cdef inline int f_nnn_tot(int* nnn_h, Py_ssize_t L) nogil:
 */
  __pyx_r = __pyx_v_nnn_h;
  goto __pyx_L0;

  /* "fmsne_implem.pyx":2026
 *     return n_ds_h
 * 
 * cdef inline int* f_def_nnn_h(Py_ssize_t L, int* K_h, int* n_ds_h, bint cperp):             # <<<<<<<<<<<<<<
 *     """
 *     """
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "fmsne_implem.pyx":2050
 *     return nnn_h
 * 
 * cdef inline int f_nnn_tot(int* nnn_h, Py_ssize_t L) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     """
 */

static CYTHON_INLINE int __pyx_f_12fmsne_implem_f_nnn_tot(int *__pyx_v_nnn_h, Py_ssize_t __pyx_v_L) {
  int __pyx_v_nnn_tot;
  Py_ssize_t __pyx_v_h;
  int __pyx_r;
  Py_ssize_t __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;

  /* "fmsne_implem.pyx":2054
 *     """
 *     # Sum of the elements of nnn_h
 *     cdef int nnn_tot = 0             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t h
 *     for h in range(L):
 */
  __pyx_v_nnn_tot = 0;

  /* "fmsne_implem.pyx":2056
 *     cdef int nnn_tot = 0
 *     cdef Py_ssize_t h
 *     for h in range(L):             # <<<<<<<<<<<<<<
 *         nnn_tot += nnn_h[h]
 *     return nnn_tot
 */
  __pyx_t_1 = __pyx_v_L;
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_h = __pyx_t_3;

    /* "fmsne_implem.pyx":2057
 *     cdef Py_ssize_t h
 *     for h in range(L):
 *         nnn_tot += nnn_h[h]             # <<<<<<<<<<<<<<
 *     return nnn_tot
 * 
 */
    __pyx_v_nnn_tot = (__pyx_v_nnn_tot + (__pyx_v_nnn_h[__pyx_v_h]));
  }

  /* "fmsne_implem.pyx":2058
 *     for h in range(L):
 *         nnn_tot += nnn_h[h]
 *     return nnn_tot             # <<<<<<<<<<<<<<
 * 
 * cdef inline bint f_nn_ds_hdprec(int d_hds, int* K_h, int N, Py_ssize_t L, int* n_ds_h, int* all_ind, int* nnn_h, bint isLmin1, double* X_hds, Py_ssize_t n_rs, int*** arr_nn_i_rs, int** nnn_i_rs, double*** ds_nn_i_rs, double*** tau_h_i_rs, int nnn_tot, bint sym_nn_set):
 */
  __pyx_r = __pyx_v_nnn_tot;
  goto __pyx_L0;

  /* "fmsne_implem.pyx":2050
 *     return nnn_h
 * 
 * cdef inline int f_nnn_tot(int* nnn_h, Py_ssize_t L) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     """
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "fmsne_implem.pyx":2060
 *     return nnn_tot
 * 
 * cdef inline bint f_nn_ds_hdprec(int d_hds, int* K_h, int N, Py_ssize_t L, int* n_ds_h, int* all_ind, int* nnn_h, bint isLmin1, double* X_hds, Py_ssize_t n_rs, int*** arr_nn_i_rs, int** nnn_i_rs, double*** ds_nn_i_rs, double*** tau_h_i_rs, int nnn_tot, bint sym_nn_set):             # <<<<<<<<<<<<<<
 *     """
 *     Return False if everything is ok, True if memory problem.
 */

static CYTHON_INLINE int __pyx_f_12fmsne_implem_f_nn_ds_hdprec(int __pyx_v_d_hds, int *__pyx_v_K_h, int __pyx_v_N, Py_ssize_t __pyx_v_L, int *__pyx_v_n_ds_h, int *__pyx_v_all_ind, int *__pyx_v_nnn_h, int __pyx_v_isLmin1, double *__pyx_v_X_hds, Py_ssize_t __pyx_v_n_rs, int ***__pyx_v_arr_nn_i_rs, int **__pyx_v_nnn_i_rs, double ***__pyx_v_ds_nn_i_rs, double ***__pyx_v_tau_h_i_rs, int __pyx_v_nnn_tot, int __pyx_v_sym_nn_set) {
  Py_ssize_t __pyx_v_rs;
  Py_ssize_t __pyx_v_i;
  Py_ssize_t __pyx_v_j;
  Py_ssize_t __pyx_v_nsr;
  Py_ssize_t __pyx_v_isa;
  Py_ssize_t __pyx_v_k;
  Py_ssize_t __pyx_v_last;
  Py_ssize_t __pyx_v_h;
  Py_ssize_t __pyx_v_nrs_loop;
  VpTree *__pyx_v_vpt;
  int __pyx_v_build_vp;
  int __pyx_v_in_cur_ds;
  double *__pyx_v_Xhd_cur;
  double *__pyx_v_x;
  int *__pyx_v_i_sds;
  int __pyx_v_nnn;
  int __pyx_v_nnn_ub;
  int __pyx_v_nnn_cpy;
  size_t __pyx_v_shdp;
  double __pyx_v_log_perp;
  double __pyx_v_min_ds;
  int __pyx_v_clogp;
  int *__pyx_v_n_nnn;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  int __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  Py_ssize_t __pyx_t_7;
  Py_ssize_t __pyx_t_8;
  int __pyx_t_9;
  int __pyx_t_10;
  Py_ssize_t __pyx_t_11;
  int __pyx_t_12;
  int __pyx_t_13;
  Py_ssize_t __pyx_t_14;
  long __pyx_t_15;
  long __pyx_t_16;
  int __pyx_t_17;
  int __pyx_t_18;
  Py_ssize_t __pyx_t_19;
  Py_ssize_t __pyx_t_20;
  Py_ssize_t __pyx_t_21;
  __Pyx_RefNannySetupContext("f_nn_ds_hdprec", 0);

  /* "fmsne_implem.pyx":2073
 *     cdef int nnn, nnn_ub, nnn_cpy
 *     # Number of bytes of an HD data point
 *     cdef size_t shdp = d_hds*sizeof(double)             # <<<<<<<<<<<<<<
 *     # Logarithm of the considered perplexity and temporary variable
 *     cdef double log_perp, min_ds
 */
  __pyx_v_shdp = (__pyx_v_d_hds * (sizeof(double)));

  /* "fmsne_implem.pyx":2077
 *     cdef double log_perp, min_ds
 *     cdef bint clogp
 *     if K_h[0] == 2:             # <<<<<<<<<<<<<<
 *         log_perp = log(2.0)
 *         clogp = False
 */
  __pyx_t_1 = (((__pyx_v_K_h[0]) == 2) != 0);
  if (__pyx_t_1) {

    /* "fmsne_implem.pyx":2078
 *     cdef bint clogp
 *     if K_h[0] == 2:
 *         log_perp = log(2.0)             # <<<<<<<<<<<<<<
 *         clogp = False
 *     else:
 */
    __pyx_v_log_perp = log(2.0);

    /* "fmsne_implem.pyx":2079
 *     if K_h[0] == 2:
 *         log_perp = log(2.0)
 *         clogp = False             # <<<<<<<<<<<<<<
 *     else:
 *         clogp = True
 */
    __pyx_v_clogp = 0;

    /* "fmsne_implem.pyx":2077
 *     cdef double log_perp, min_ds
 *     cdef bint clogp
 *     if K_h[0] == 2:             # <<<<<<<<<<<<<<
 *         log_perp = log(2.0)
 *         clogp = False
 */
    goto __pyx_L3;
  }

  /* "fmsne_implem.pyx":2081
 *         clogp = False
 *     else:
 *         clogp = True             # <<<<<<<<<<<<<<
 *     # For each scale
 *     for h in range(L):
 */
  /*else*/ {
    __pyx_v_clogp = 1;
  }
  __pyx_L3:;

  /* "fmsne_implem.pyx":2083
 *         clogp = True
 *     # For each scale
 *     for h in range(L):             # <<<<<<<<<<<<<<
 *         nnn_ub = nnn_h[h]+1
 *         if nnn_ub > n_ds_h[h]:
 */
  __pyx_t_2 = __pyx_v_L;
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_h = __pyx_t_4;

    /* "fmsne_implem.pyx":2084
 *     # For each scale
 *     for h in range(L):
 *         nnn_ub = nnn_h[h]+1             # <<<<<<<<<<<<<<
 *         if nnn_ub > n_ds_h[h]:
 *             nnn_ub = n_ds_h[h]
 */
    __pyx_v_nnn_ub = ((__pyx_v_nnn_h[__pyx_v_h]) + 1);

    /* "fmsne_implem.pyx":2085
 *     for h in range(L):
 *         nnn_ub = nnn_h[h]+1
 *         if nnn_ub > n_ds_h[h]:             # <<<<<<<<<<<<<<
 *             nnn_ub = n_ds_h[h]
 *         if (h == 0) and isLmin1:
 */
    __pyx_t_1 = ((__pyx_v_nnn_ub > (__pyx_v_n_ds_h[__pyx_v_h])) != 0);
    if (__pyx_t_1) {

      /* "fmsne_implem.pyx":2086
 *         nnn_ub = nnn_h[h]+1
 *         if nnn_ub > n_ds_h[h]:
 *             nnn_ub = n_ds_h[h]             # <<<<<<<<<<<<<<
 *         if (h == 0) and isLmin1:
 *             # Vantage-point tree for the complete data set. No need to use the cython vantage-point tree class: we can directly call the C code! But a del statement (below) is necessary to avoid a memory leak.
 */
      __pyx_v_nnn_ub = (__pyx_v_n_ds_h[__pyx_v_h]);

      /* "fmsne_implem.pyx":2085
 *     for h in range(L):
 *         nnn_ub = nnn_h[h]+1
 *         if nnn_ub > n_ds_h[h]:             # <<<<<<<<<<<<<<
 *             nnn_ub = n_ds_h[h]
 *         if (h == 0) and isLmin1:
 */
    }

    /* "fmsne_implem.pyx":2087
 *         if nnn_ub > n_ds_h[h]:
 *             nnn_ub = n_ds_h[h]
 *         if (h == 0) and isLmin1:             # <<<<<<<<<<<<<<
 *             # Vantage-point tree for the complete data set. No need to use the cython vantage-point tree class: we can directly call the C code! But a del statement (below) is necessary to avoid a memory leak.
 *             vpt = new VpTree(X_hds, N, d_hds)
 */
    __pyx_t_5 = ((__pyx_v_h == 0) != 0);
    if (__pyx_t_5) {
    } else {
      __pyx_t_1 = __pyx_t_5;
      goto __pyx_L8_bool_binop_done;
    }
    __pyx_t_5 = (__pyx_v_isLmin1 != 0);
    __pyx_t_1 = __pyx_t_5;
    __pyx_L8_bool_binop_done:;
    if (__pyx_t_1) {

      /* "fmsne_implem.pyx":2089
 *         if (h == 0) and isLmin1:
 *             # Vantage-point tree for the complete data set. No need to use the cython vantage-point tree class: we can directly call the C code! But a del statement (below) is necessary to avoid a memory leak.
 *             vpt = new VpTree(X_hds, N, d_hds)             # <<<<<<<<<<<<<<
 *             # The vantage-point tree must not be build anymore
 *             build_vp = False
 */
      __pyx_v_vpt = new VpTree(__pyx_v_X_hds, __pyx_v_N, __pyx_v_d_hds);

      /* "fmsne_implem.pyx":2091
 *             vpt = new VpTree(X_hds, N, d_hds)
 *             # The vantage-point tree must not be build anymore
 *             build_vp = False             # <<<<<<<<<<<<<<
 *             # Indicates that the data point for which the neighbors are searched is in the currently considered subsampled data set
 *             in_cur_ds = True
 */
      __pyx_v_build_vp = 0;

      /* "fmsne_implem.pyx":2093
 *             build_vp = False
 *             # Indicates that the data point for which the neighbors are searched is in the currently considered subsampled data set
 *             in_cur_ds = True             # <<<<<<<<<<<<<<
 *             # Number of random samplings over which we need to iterate. Only 1 since, in this case, all the random samplings leads to the same results for the first scale.
 *             nrs_loop = 1
 */
      __pyx_v_in_cur_ds = 1;

      /* "fmsne_implem.pyx":2095
 *             in_cur_ds = True
 *             # Number of random samplings over which we need to iterate. Only 1 since, in this case, all the random samplings leads to the same results for the first scale.
 *             nrs_loop = 1             # <<<<<<<<<<<<<<
 *         else:
 *             # The vantage-point tree must be created
 */
      __pyx_v_nrs_loop = 1;

      /* "fmsne_implem.pyx":2087
 *         if nnn_ub > n_ds_h[h]:
 *             nnn_ub = n_ds_h[h]
 *         if (h == 0) and isLmin1:             # <<<<<<<<<<<<<<
 *             # Vantage-point tree for the complete data set. No need to use the cython vantage-point tree class: we can directly call the C code! But a del statement (below) is necessary to avoid a memory leak.
 *             vpt = new VpTree(X_hds, N, d_hds)
 */
      goto __pyx_L7;
    }

    /* "fmsne_implem.pyx":2098
 *         else:
 *             # The vantage-point tree must be created
 *             build_vp = True             # <<<<<<<<<<<<<<
 *             # Number of random samplings over which we need to iterate.
 *             nrs_loop = n_rs
 */
    /*else*/ {
      __pyx_v_build_vp = 1;

      /* "fmsne_implem.pyx":2100
 *             build_vp = True
 *             # Number of random samplings over which we need to iterate.
 *             nrs_loop = n_rs             # <<<<<<<<<<<<<<
 *             # Allocating memory for the subsampled data sets at scale h
 *             Xhd_cur = <double*> PyMem_Malloc(n_ds_h[h]*d_hds*sizeof(double))
 */
      __pyx_v_nrs_loop = __pyx_v_n_rs;

      /* "fmsne_implem.pyx":2102
 *             nrs_loop = n_rs
 *             # Allocating memory for the subsampled data sets at scale h
 *             Xhd_cur = <double*> PyMem_Malloc(n_ds_h[h]*d_hds*sizeof(double))             # <<<<<<<<<<<<<<
 *             if Xhd_cur is NULL:
 *                 return True
 */
      __pyx_v_Xhd_cur = ((double *)PyMem_Malloc((((__pyx_v_n_ds_h[__pyx_v_h]) * __pyx_v_d_hds) * (sizeof(double)))));

      /* "fmsne_implem.pyx":2103
 *             # Allocating memory for the subsampled data sets at scale h
 *             Xhd_cur = <double*> PyMem_Malloc(n_ds_h[h]*d_hds*sizeof(double))
 *             if Xhd_cur is NULL:             # <<<<<<<<<<<<<<
 *                 return True
 *             # Allocating memory to store the indexes of the data points in the subsampled data set
 */
      __pyx_t_1 = ((__pyx_v_Xhd_cur == NULL) != 0);
      if (__pyx_t_1) {

        /* "fmsne_implem.pyx":2104
 *             Xhd_cur = <double*> PyMem_Malloc(n_ds_h[h]*d_hds*sizeof(double))
 *             if Xhd_cur is NULL:
 *                 return True             # <<<<<<<<<<<<<<
 *             # Allocating memory to store the indexes of the data points in the subsampled data set
 *             i_sds = <int*> PyMem_Malloc(n_ds_h[h]*sizeof(int))
 */
        __pyx_r = 1;
        goto __pyx_L0;

        /* "fmsne_implem.pyx":2103
 *             # Allocating memory for the subsampled data sets at scale h
 *             Xhd_cur = <double*> PyMem_Malloc(n_ds_h[h]*d_hds*sizeof(double))
 *             if Xhd_cur is NULL:             # <<<<<<<<<<<<<<
 *                 return True
 *             # Allocating memory to store the indexes of the data points in the subsampled data set
 */
      }

      /* "fmsne_implem.pyx":2106
 *                 return True
 *             # Allocating memory to store the indexes of the data points in the subsampled data set
 *             i_sds = <int*> PyMem_Malloc(n_ds_h[h]*sizeof(int))             # <<<<<<<<<<<<<<
 *             if i_sds is NULL:
 *                 PyMem_Free(Xhd_cur)
 */
      __pyx_v_i_sds = ((int *)PyMem_Malloc(((__pyx_v_n_ds_h[__pyx_v_h]) * (sizeof(int)))));

      /* "fmsne_implem.pyx":2107
 *             # Allocating memory to store the indexes of the data points in the subsampled data set
 *             i_sds = <int*> PyMem_Malloc(n_ds_h[h]*sizeof(int))
 *             if i_sds is NULL:             # <<<<<<<<<<<<<<
 *                 PyMem_Free(Xhd_cur)
 *                 return True
 */
      __pyx_t_1 = ((__pyx_v_i_sds == NULL) != 0);
      if (__pyx_t_1) {

        /* "fmsne_implem.pyx":2108
 *             i_sds = <int*> PyMem_Malloc(n_ds_h[h]*sizeof(int))
 *             if i_sds is NULL:
 *                 PyMem_Free(Xhd_cur)             # <<<<<<<<<<<<<<
 *                 return True
 *         # For each random sampling
 */
        PyMem_Free(__pyx_v_Xhd_cur);

        /* "fmsne_implem.pyx":2109
 *             if i_sds is NULL:
 *                 PyMem_Free(Xhd_cur)
 *                 return True             # <<<<<<<<<<<<<<
 *         # For each random sampling
 *         for rs in range(nrs_loop):
 */
        __pyx_r = 1;
        goto __pyx_L0;

        /* "fmsne_implem.pyx":2107
 *             # Allocating memory to store the indexes of the data points in the subsampled data set
 *             i_sds = <int*> PyMem_Malloc(n_ds_h[h]*sizeof(int))
 *             if i_sds is NULL:             # <<<<<<<<<<<<<<
 *                 PyMem_Free(Xhd_cur)
 *                 return True
 */
      }
    }
    __pyx_L7:;

    /* "fmsne_implem.pyx":2111
 *                 return True
 *         # For each random sampling
 *         for rs in range(nrs_loop):             # <<<<<<<<<<<<<<
 *             # Subsampling the data set and building the vantage-point tree
 *             if build_vp:
 */
    __pyx_t_6 = __pyx_v_nrs_loop;
    __pyx_t_7 = __pyx_t_6;
    for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_7; __pyx_t_8+=1) {
      __pyx_v_rs = __pyx_t_8;

      /* "fmsne_implem.pyx":2113
 *         for rs in range(nrs_loop):
 *             # Subsampling the data set and building the vantage-point tree
 *             if build_vp:             # <<<<<<<<<<<<<<
 *                 # Subsampling the data set without replacement
 *                 nsr = N
 */
      __pyx_t_1 = (__pyx_v_build_vp != 0);
      if (__pyx_t_1) {

        /* "fmsne_implem.pyx":2115
 *             if build_vp:
 *                 # Subsampling the data set without replacement
 *                 nsr = N             # <<<<<<<<<<<<<<
 *                 j = 0
 *                 for i in range(n_ds_h[h]):
 */
        __pyx_v_nsr = __pyx_v_N;

        /* "fmsne_implem.pyx":2116
 *                 # Subsampling the data set without replacement
 *                 nsr = N
 *                 j = 0             # <<<<<<<<<<<<<<
 *                 for i in range(n_ds_h[h]):
 *                     isa = rand()%nsr
 */
        __pyx_v_j = 0;

        /* "fmsne_implem.pyx":2117
 *                 nsr = N
 *                 j = 0
 *                 for i in range(n_ds_h[h]):             # <<<<<<<<<<<<<<
 *                     isa = rand()%nsr
 *                     # Storing the sampled index
 */
        __pyx_t_9 = (__pyx_v_n_ds_h[__pyx_v_h]);
        __pyx_t_10 = __pyx_t_9;
        for (__pyx_t_11 = 0; __pyx_t_11 < __pyx_t_10; __pyx_t_11+=1) {
          __pyx_v_i = __pyx_t_11;

          /* "fmsne_implem.pyx":2118
 *                 j = 0
 *                 for i in range(n_ds_h[h]):
 *                     isa = rand()%nsr             # <<<<<<<<<<<<<<
 *                     # Storing the sampled index
 *                     i_sds[j] = all_ind[isa]
 */
          __pyx_v_isa = (rand() % __pyx_v_nsr);

          /* "fmsne_implem.pyx":2120
 *                     isa = rand()%nsr
 *                     # Storing the sampled index
 *                     i_sds[j] = all_ind[isa]             # <<<<<<<<<<<<<<
 *                     # Making sure that the further samplings will be made without replacement
 *                     nsr -= 1
 */
          (__pyx_v_i_sds[__pyx_v_j]) = (__pyx_v_all_ind[__pyx_v_isa]);

          /* "fmsne_implem.pyx":2122
 *                     i_sds[j] = all_ind[isa]
 *                     # Making sure that the further samplings will be made without replacement
 *                     nsr -= 1             # <<<<<<<<<<<<<<
 *                     if isa != nsr:
 *                         all_ind[isa] = all_ind[nsr]
 */
          __pyx_v_nsr = (__pyx_v_nsr - 1);

          /* "fmsne_implem.pyx":2123
 *                     # Making sure that the further samplings will be made without replacement
 *                     nsr -= 1
 *                     if isa != nsr:             # <<<<<<<<<<<<<<
 *                         all_ind[isa] = all_ind[nsr]
 *                         all_ind[nsr] = i_sds[j]
 */
          __pyx_t_1 = ((__pyx_v_isa != __pyx_v_nsr) != 0);
          if (__pyx_t_1) {

            /* "fmsne_implem.pyx":2124
 *                     nsr -= 1
 *                     if isa != nsr:
 *                         all_ind[isa] = all_ind[nsr]             # <<<<<<<<<<<<<<
 *                         all_ind[nsr] = i_sds[j]
 *                     j += 1
 */
            (__pyx_v_all_ind[__pyx_v_isa]) = (__pyx_v_all_ind[__pyx_v_nsr]);

            /* "fmsne_implem.pyx":2125
 *                     if isa != nsr:
 *                         all_ind[isa] = all_ind[nsr]
 *                         all_ind[nsr] = i_sds[j]             # <<<<<<<<<<<<<<
 *                     j += 1
 *                 # Sorting i_sds, to be able to check whether the considered data points lie in the subsampled data set
 */
            (__pyx_v_all_ind[__pyx_v_nsr]) = (__pyx_v_i_sds[__pyx_v_j]);

            /* "fmsne_implem.pyx":2123
 *                     # Making sure that the further samplings will be made without replacement
 *                     nsr -= 1
 *                     if isa != nsr:             # <<<<<<<<<<<<<<
 *                         all_ind[isa] = all_ind[nsr]
 *                         all_ind[nsr] = i_sds[j]
 */
          }

          /* "fmsne_implem.pyx":2126
 *                         all_ind[isa] = all_ind[nsr]
 *                         all_ind[nsr] = i_sds[j]
 *                     j += 1             # <<<<<<<<<<<<<<
 *                 # Sorting i_sds, to be able to check whether the considered data points lie in the subsampled data set
 *                 sort(i_sds, i_sds + n_ds_h[h])
 */
          __pyx_v_j = (__pyx_v_j + 1);
        }

        /* "fmsne_implem.pyx":2128
 *                     j += 1
 *                 # Sorting i_sds, to be able to check whether the considered data points lie in the subsampled data set
 *                 sort(i_sds, i_sds + n_ds_h[h])             # <<<<<<<<<<<<<<
 *                 # Constructing Xhd_cur
 *                 nsr = 0
 */
        std::sort<int *>(__pyx_v_i_sds, (__pyx_v_i_sds + (__pyx_v_n_ds_h[__pyx_v_h])));

        /* "fmsne_implem.pyx":2130
 *                 sort(i_sds, i_sds + n_ds_h[h])
 *                 # Constructing Xhd_cur
 *                 nsr = 0             # <<<<<<<<<<<<<<
 *                 for i in range(n_ds_h[h]):
 *                     isa = i_sds[i]*d_hds
 */
        __pyx_v_nsr = 0;

        /* "fmsne_implem.pyx":2131
 *                 # Constructing Xhd_cur
 *                 nsr = 0
 *                 for i in range(n_ds_h[h]):             # <<<<<<<<<<<<<<
 *                     isa = i_sds[i]*d_hds
 *                     memcpy(&Xhd_cur[nsr], &X_hds[isa], shdp)
 */
        __pyx_t_9 = (__pyx_v_n_ds_h[__pyx_v_h]);
        __pyx_t_10 = __pyx_t_9;
        for (__pyx_t_11 = 0; __pyx_t_11 < __pyx_t_10; __pyx_t_11+=1) {
          __pyx_v_i = __pyx_t_11;

          /* "fmsne_implem.pyx":2132
 *                 nsr = 0
 *                 for i in range(n_ds_h[h]):
 *                     isa = i_sds[i]*d_hds             # <<<<<<<<<<<<<<
 *                     memcpy(&Xhd_cur[nsr], &X_hds[isa], shdp)
 *                     nsr += d_hds
 */
          __pyx_v_isa = ((__pyx_v_i_sds[__pyx_v_i]) * __pyx_v_d_hds);

          /* "fmsne_implem.pyx":2133
 *                 for i in range(n_ds_h[h]):
 *                     isa = i_sds[i]*d_hds
 *                     memcpy(&Xhd_cur[nsr], &X_hds[isa], shdp)             # <<<<<<<<<<<<<<
 *                     nsr += d_hds
 *                 # Building the vantage-point tree for the subsampled data set. No need to call the cython vantage-point tree class: we can directly call the C code! But a del statement is necessary to avoid a memory leak.
 */
          (void)(memcpy((&(__pyx_v_Xhd_cur[__pyx_v_nsr])), (&(__pyx_v_X_hds[__pyx_v_isa])), __pyx_v_shdp));

          /* "fmsne_implem.pyx":2134
 *                     isa = i_sds[i]*d_hds
 *                     memcpy(&Xhd_cur[nsr], &X_hds[isa], shdp)
 *                     nsr += d_hds             # <<<<<<<<<<<<<<
 *                 # Building the vantage-point tree for the subsampled data set. No need to call the cython vantage-point tree class: we can directly call the C code! But a del statement is necessary to avoid a memory leak.
 *                 vpt = new VpTree(Xhd_cur, n_ds_h[h], d_hds)
 */
          __pyx_v_nsr = (__pyx_v_nsr + __pyx_v_d_hds);
        }

        /* "fmsne_implem.pyx":2136
 *                     nsr += d_hds
 *                 # Building the vantage-point tree for the subsampled data set. No need to call the cython vantage-point tree class: we can directly call the C code! But a del statement is necessary to avoid a memory leak.
 *                 vpt = new VpTree(Xhd_cur, n_ds_h[h], d_hds)             # <<<<<<<<<<<<<<
 *                 # Setting nsr back to 0 as it will be used to check whether the considered data point lie in the subsampled data set
 *                 nsr = 0
 */
        __pyx_v_vpt = new VpTree(__pyx_v_Xhd_cur, (__pyx_v_n_ds_h[__pyx_v_h]), __pyx_v_d_hds);

        /* "fmsne_implem.pyx":2138
 *                 vpt = new VpTree(Xhd_cur, n_ds_h[h], d_hds)
 *                 # Setting nsr back to 0 as it will be used to check whether the considered data point lie in the subsampled data set
 *                 nsr = 0             # <<<<<<<<<<<<<<
 *             # Searching the nearest neighbors of all data points in the subsampled data set
 *             for i in range(N):
 */
        __pyx_v_nsr = 0;

        /* "fmsne_implem.pyx":2113
 *         for rs in range(nrs_loop):
 *             # Subsampling the data set and building the vantage-point tree
 *             if build_vp:             # <<<<<<<<<<<<<<
 *                 # Subsampling the data set without replacement
 *                 nsr = N
 */
      }

      /* "fmsne_implem.pyx":2140
 *                 nsr = 0
 *             # Searching the nearest neighbors of all data points in the subsampled data set
 *             for i in range(N):             # <<<<<<<<<<<<<<
 *                 # Checking whether the considered data point is in the currently considered subsampled data set
 *                 if build_vp:
 */
      __pyx_t_9 = __pyx_v_N;
      __pyx_t_10 = __pyx_t_9;
      for (__pyx_t_11 = 0; __pyx_t_11 < __pyx_t_10; __pyx_t_11+=1) {
        __pyx_v_i = __pyx_t_11;

        /* "fmsne_implem.pyx":2142
 *             for i in range(N):
 *                 # Checking whether the considered data point is in the currently considered subsampled data set
 *                 if build_vp:             # <<<<<<<<<<<<<<
 *                     if (nsr < n_ds_h[h]) and (i == i_sds[nsr]):
 *                         nsr += 1
 */
        __pyx_t_1 = (__pyx_v_build_vp != 0);
        if (__pyx_t_1) {

          /* "fmsne_implem.pyx":2143
 *                 # Checking whether the considered data point is in the currently considered subsampled data set
 *                 if build_vp:
 *                     if (nsr < n_ds_h[h]) and (i == i_sds[nsr]):             # <<<<<<<<<<<<<<
 *                         nsr += 1
 *                         nnn = nnn_ub
 */
          __pyx_t_5 = ((__pyx_v_nsr < (__pyx_v_n_ds_h[__pyx_v_h])) != 0);
          if (__pyx_t_5) {
          } else {
            __pyx_t_1 = __pyx_t_5;
            goto __pyx_L24_bool_binop_done;
          }
          __pyx_t_5 = ((__pyx_v_i == (__pyx_v_i_sds[__pyx_v_nsr])) != 0);
          __pyx_t_1 = __pyx_t_5;
          __pyx_L24_bool_binop_done:;
          if (__pyx_t_1) {

            /* "fmsne_implem.pyx":2144
 *                 if build_vp:
 *                     if (nsr < n_ds_h[h]) and (i == i_sds[nsr]):
 *                         nsr += 1             # <<<<<<<<<<<<<<
 *                         nnn = nnn_ub
 *                         in_cur_ds = True
 */
            __pyx_v_nsr = (__pyx_v_nsr + 1);

            /* "fmsne_implem.pyx":2145
 *                     if (nsr < n_ds_h[h]) and (i == i_sds[nsr]):
 *                         nsr += 1
 *                         nnn = nnn_ub             # <<<<<<<<<<<<<<
 *                         in_cur_ds = True
 *                     else:
 */
            __pyx_v_nnn = __pyx_v_nnn_ub;

            /* "fmsne_implem.pyx":2146
 *                         nsr += 1
 *                         nnn = nnn_ub
 *                         in_cur_ds = True             # <<<<<<<<<<<<<<
 *                     else:
 *                         nnn = nnn_h[h]
 */
            __pyx_v_in_cur_ds = 1;

            /* "fmsne_implem.pyx":2143
 *                 # Checking whether the considered data point is in the currently considered subsampled data set
 *                 if build_vp:
 *                     if (nsr < n_ds_h[h]) and (i == i_sds[nsr]):             # <<<<<<<<<<<<<<
 *                         nsr += 1
 *                         nnn = nnn_ub
 */
            goto __pyx_L23;
          }

          /* "fmsne_implem.pyx":2148
 *                         in_cur_ds = True
 *                     else:
 *                         nnn = nnn_h[h]             # <<<<<<<<<<<<<<
 *                         in_cur_ds = False
 *                 else:
 */
          /*else*/ {
            __pyx_v_nnn = (__pyx_v_nnn_h[__pyx_v_h]);

            /* "fmsne_implem.pyx":2149
 *                     else:
 *                         nnn = nnn_h[h]
 *                         in_cur_ds = False             # <<<<<<<<<<<<<<
 *                 else:
 *                     # Number of neighbors to search in the vantage-point tree. Need to define it here because nnn is modified in the loop.
 */
            __pyx_v_in_cur_ds = 0;
          }
          __pyx_L23:;

          /* "fmsne_implem.pyx":2142
 *             for i in range(N):
 *                 # Checking whether the considered data point is in the currently considered subsampled data set
 *                 if build_vp:             # <<<<<<<<<<<<<<
 *                     if (nsr < n_ds_h[h]) and (i == i_sds[nsr]):
 *                         nsr += 1
 */
          goto __pyx_L22;
        }

        /* "fmsne_implem.pyx":2152
 *                 else:
 *                     # Number of neighbors to search in the vantage-point tree. Need to define it here because nnn is modified in the loop.
 *                     nnn = nnn_ub             # <<<<<<<<<<<<<<
 *                 isa = nnn_i_rs[rs][i]
 *                 # Searching the nnn nearest neighbors of i in vpt
 */
        /*else*/ {
          __pyx_v_nnn = __pyx_v_nnn_ub;
        }
        __pyx_L22:;

        /* "fmsne_implem.pyx":2153
 *                     # Number of neighbors to search in the vantage-point tree. Need to define it here because nnn is modified in the loop.
 *                     nnn = nnn_ub
 *                 isa = nnn_i_rs[rs][i]             # <<<<<<<<<<<<<<
 *                 # Searching the nnn nearest neighbors of i in vpt
 *                 x = &X_hds[i*d_hds]
 */
        __pyx_v_isa = ((__pyx_v_nnn_i_rs[__pyx_v_rs])[__pyx_v_i]);

        /* "fmsne_implem.pyx":2155
 *                 isa = nnn_i_rs[rs][i]
 *                 # Searching the nnn nearest neighbors of i in vpt
 *                 x = &X_hds[i*d_hds]             # <<<<<<<<<<<<<<
 *                 vpt.search(x, nnn, &arr_nn_i_rs[rs][i][isa])
 *                 # Converting the indexes in the range of the full data set instead of the subsampled one
 */
        __pyx_v_x = (&(__pyx_v_X_hds[(__pyx_v_i * __pyx_v_d_hds)]));

        /* "fmsne_implem.pyx":2156
 *                 # Searching the nnn nearest neighbors of i in vpt
 *                 x = &X_hds[i*d_hds]
 *                 vpt.search(x, nnn, &arr_nn_i_rs[rs][i][isa])             # <<<<<<<<<<<<<<
 *                 # Converting the indexes in the range of the full data set instead of the subsampled one
 *                 if build_vp:
 */
        __pyx_v_vpt->search(__pyx_v_x, __pyx_v_nnn, (&(((__pyx_v_arr_nn_i_rs[__pyx_v_rs])[__pyx_v_i])[__pyx_v_isa])));

        /* "fmsne_implem.pyx":2158
 *                 vpt.search(x, nnn, &arr_nn_i_rs[rs][i][isa])
 *                 # Converting the indexes in the range of the full data set instead of the subsampled one
 *                 if build_vp:             # <<<<<<<<<<<<<<
 *                     for j in range(nnn):
 *                         arr_nn_i_rs[rs][i][isa] = i_sds[arr_nn_i_rs[rs][i][isa]]
 */
        __pyx_t_1 = (__pyx_v_build_vp != 0);
        if (__pyx_t_1) {

          /* "fmsne_implem.pyx":2159
 *                 # Converting the indexes in the range of the full data set instead of the subsampled one
 *                 if build_vp:
 *                     for j in range(nnn):             # <<<<<<<<<<<<<<
 *                         arr_nn_i_rs[rs][i][isa] = i_sds[arr_nn_i_rs[rs][i][isa]]
 *                         isa += 1
 */
          __pyx_t_12 = __pyx_v_nnn;
          __pyx_t_13 = __pyx_t_12;
          for (__pyx_t_14 = 0; __pyx_t_14 < __pyx_t_13; __pyx_t_14+=1) {
            __pyx_v_j = __pyx_t_14;

            /* "fmsne_implem.pyx":2160
 *                 if build_vp:
 *                     for j in range(nnn):
 *                         arr_nn_i_rs[rs][i][isa] = i_sds[arr_nn_i_rs[rs][i][isa]]             # <<<<<<<<<<<<<<
 *                         isa += 1
 *                 # Removing the considered data point from its nearest neighbor if it belongs to the subsampled data set
 */
            (((__pyx_v_arr_nn_i_rs[__pyx_v_rs])[__pyx_v_i])[__pyx_v_isa]) = (__pyx_v_i_sds[(((__pyx_v_arr_nn_i_rs[__pyx_v_rs])[__pyx_v_i])[__pyx_v_isa])]);

            /* "fmsne_implem.pyx":2161
 *                     for j in range(nnn):
 *                         arr_nn_i_rs[rs][i][isa] = i_sds[arr_nn_i_rs[rs][i][isa]]
 *                         isa += 1             # <<<<<<<<<<<<<<
 *                 # Removing the considered data point from its nearest neighbor if it belongs to the subsampled data set
 *                 if in_cur_ds:
 */
            __pyx_v_isa = (__pyx_v_isa + 1);
          }

          /* "fmsne_implem.pyx":2158
 *                 vpt.search(x, nnn, &arr_nn_i_rs[rs][i][isa])
 *                 # Converting the indexes in the range of the full data set instead of the subsampled one
 *                 if build_vp:             # <<<<<<<<<<<<<<
 *                     for j in range(nnn):
 *                         arr_nn_i_rs[rs][i][isa] = i_sds[arr_nn_i_rs[rs][i][isa]]
 */
        }

        /* "fmsne_implem.pyx":2163
 *                         isa += 1
 *                 # Removing the considered data point from its nearest neighbor if it belongs to the subsampled data set
 *                 if in_cur_ds:             # <<<<<<<<<<<<<<
 *                     isa = nnn_i_rs[rs][i]
 *                     nnn -= 1
 */
        __pyx_t_1 = (__pyx_v_in_cur_ds != 0);
        if (__pyx_t_1) {

          /* "fmsne_implem.pyx":2164
 *                 # Removing the considered data point from its nearest neighbor if it belongs to the subsampled data set
 *                 if in_cur_ds:
 *                     isa = nnn_i_rs[rs][i]             # <<<<<<<<<<<<<<
 *                     nnn -= 1
 *                     for j in range(nnn):
 */
          __pyx_v_isa = ((__pyx_v_nnn_i_rs[__pyx_v_rs])[__pyx_v_i]);

          /* "fmsne_implem.pyx":2165
 *                 if in_cur_ds:
 *                     isa = nnn_i_rs[rs][i]
 *                     nnn -= 1             # <<<<<<<<<<<<<<
 *                     for j in range(nnn):
 *                         if arr_nn_i_rs[rs][i][isa] == i:
 */
          __pyx_v_nnn = (__pyx_v_nnn - 1);

          /* "fmsne_implem.pyx":2166
 *                     isa = nnn_i_rs[rs][i]
 *                     nnn -= 1
 *                     for j in range(nnn):             # <<<<<<<<<<<<<<
 *                         if arr_nn_i_rs[rs][i][isa] == i:
 *                             arr_nn_i_rs[rs][i][isa] = arr_nn_i_rs[rs][i][nnn_i_rs[rs][i]+nnn]
 */
          __pyx_t_12 = __pyx_v_nnn;
          __pyx_t_13 = __pyx_t_12;
          for (__pyx_t_14 = 0; __pyx_t_14 < __pyx_t_13; __pyx_t_14+=1) {
            __pyx_v_j = __pyx_t_14;

            /* "fmsne_implem.pyx":2167
 *                     nnn -= 1
 *                     for j in range(nnn):
 *                         if arr_nn_i_rs[rs][i][isa] == i:             # <<<<<<<<<<<<<<
 *                             arr_nn_i_rs[rs][i][isa] = arr_nn_i_rs[rs][i][nnn_i_rs[rs][i]+nnn]
 *                             break
 */
            __pyx_t_1 = (((((__pyx_v_arr_nn_i_rs[__pyx_v_rs])[__pyx_v_i])[__pyx_v_isa]) == __pyx_v_i) != 0);
            if (__pyx_t_1) {

              /* "fmsne_implem.pyx":2168
 *                     for j in range(nnn):
 *                         if arr_nn_i_rs[rs][i][isa] == i:
 *                             arr_nn_i_rs[rs][i][isa] = arr_nn_i_rs[rs][i][nnn_i_rs[rs][i]+nnn]             # <<<<<<<<<<<<<<
 *                             break
 *                         isa += 1
 */
              (((__pyx_v_arr_nn_i_rs[__pyx_v_rs])[__pyx_v_i])[__pyx_v_isa]) = (((__pyx_v_arr_nn_i_rs[__pyx_v_rs])[__pyx_v_i])[(((__pyx_v_nnn_i_rs[__pyx_v_rs])[__pyx_v_i]) + __pyx_v_nnn)]);

              /* "fmsne_implem.pyx":2169
 *                         if arr_nn_i_rs[rs][i][isa] == i:
 *                             arr_nn_i_rs[rs][i][isa] = arr_nn_i_rs[rs][i][nnn_i_rs[rs][i]+nnn]
 *                             break             # <<<<<<<<<<<<<<
 *                         isa += 1
 * 
 */
              goto __pyx_L31_break;

              /* "fmsne_implem.pyx":2167
 *                     nnn -= 1
 *                     for j in range(nnn):
 *                         if arr_nn_i_rs[rs][i][isa] == i:             # <<<<<<<<<<<<<<
 *                             arr_nn_i_rs[rs][i][isa] = arr_nn_i_rs[rs][i][nnn_i_rs[rs][i]+nnn]
 *                             break
 */
            }

            /* "fmsne_implem.pyx":2170
 *                             arr_nn_i_rs[rs][i][isa] = arr_nn_i_rs[rs][i][nnn_i_rs[rs][i]+nnn]
 *                             break
 *                         isa += 1             # <<<<<<<<<<<<<<
 * 
 *                 # Computing the squared euclidean distance between the considered data point and its nearest neighbors
 */
            __pyx_v_isa = (__pyx_v_isa + 1);
          }
          __pyx_L31_break:;

          /* "fmsne_implem.pyx":2163
 *                         isa += 1
 *                 # Removing the considered data point from its nearest neighbor if it belongs to the subsampled data set
 *                 if in_cur_ds:             # <<<<<<<<<<<<<<
 *                     isa = nnn_i_rs[rs][i]
 *                     nnn -= 1
 */
        }

        /* "fmsne_implem.pyx":2173
 * 
 *                 # Computing the squared euclidean distance between the considered data point and its nearest neighbors
 *                 isa = nnn_i_rs[rs][i]             # <<<<<<<<<<<<<<
 *                 min_ds = DBL_MAX
 *                 for j in range(nnn):
 */
        __pyx_v_isa = ((__pyx_v_nnn_i_rs[__pyx_v_rs])[__pyx_v_i]);

        /* "fmsne_implem.pyx":2174
 *                 # Computing the squared euclidean distance between the considered data point and its nearest neighbors
 *                 isa = nnn_i_rs[rs][i]
 *                 min_ds = DBL_MAX             # <<<<<<<<<<<<<<
 *                 for j in range(nnn):
 *                     ds_nn_i_rs[rs][i][isa] = sqeucl_dist_ptr(x, &X_hds[arr_nn_i_rs[rs][i][isa]*d_hds], d_hds)
 */
        __pyx_v_min_ds = DBL_MAX;

        /* "fmsne_implem.pyx":2175
 *                 isa = nnn_i_rs[rs][i]
 *                 min_ds = DBL_MAX
 *                 for j in range(nnn):             # <<<<<<<<<<<<<<
 *                     ds_nn_i_rs[rs][i][isa] = sqeucl_dist_ptr(x, &X_hds[arr_nn_i_rs[rs][i][isa]*d_hds], d_hds)
 *                     if min_ds > ds_nn_i_rs[rs][i][isa]:
 */
        __pyx_t_12 = __pyx_v_nnn;
        __pyx_t_13 = __pyx_t_12;
        for (__pyx_t_14 = 0; __pyx_t_14 < __pyx_t_13; __pyx_t_14+=1) {
          __pyx_v_j = __pyx_t_14;

          /* "fmsne_implem.pyx":2176
 *                 min_ds = DBL_MAX
 *                 for j in range(nnn):
 *                     ds_nn_i_rs[rs][i][isa] = sqeucl_dist_ptr(x, &X_hds[arr_nn_i_rs[rs][i][isa]*d_hds], d_hds)             # <<<<<<<<<<<<<<
 *                     if min_ds > ds_nn_i_rs[rs][i][isa]:
 *                         min_ds = ds_nn_i_rs[rs][i][isa]
 */
          (((__pyx_v_ds_nn_i_rs[__pyx_v_rs])[__pyx_v_i])[__pyx_v_isa]) = __pyx_f_12fmsne_implem_sqeucl_dist_ptr(__pyx_v_x, (&(__pyx_v_X_hds[((((__pyx_v_arr_nn_i_rs[__pyx_v_rs])[__pyx_v_i])[__pyx_v_isa]) * __pyx_v_d_hds)])), __pyx_v_d_hds);

          /* "fmsne_implem.pyx":2177
 *                 for j in range(nnn):
 *                     ds_nn_i_rs[rs][i][isa] = sqeucl_dist_ptr(x, &X_hds[arr_nn_i_rs[rs][i][isa]*d_hds], d_hds)
 *                     if min_ds > ds_nn_i_rs[rs][i][isa]:             # <<<<<<<<<<<<<<
 *                         min_ds = ds_nn_i_rs[rs][i][isa]
 *                     isa += 1
 */
          __pyx_t_1 = ((__pyx_v_min_ds > (((__pyx_v_ds_nn_i_rs[__pyx_v_rs])[__pyx_v_i])[__pyx_v_isa])) != 0);
          if (__pyx_t_1) {

            /* "fmsne_implem.pyx":2178
 *                     ds_nn_i_rs[rs][i][isa] = sqeucl_dist_ptr(x, &X_hds[arr_nn_i_rs[rs][i][isa]*d_hds], d_hds)
 *                     if min_ds > ds_nn_i_rs[rs][i][isa]:
 *                         min_ds = ds_nn_i_rs[rs][i][isa]             # <<<<<<<<<<<<<<
 *                     isa += 1
 * 
 */
            __pyx_v_min_ds = (((__pyx_v_ds_nn_i_rs[__pyx_v_rs])[__pyx_v_i])[__pyx_v_isa]);

            /* "fmsne_implem.pyx":2177
 *                 for j in range(nnn):
 *                     ds_nn_i_rs[rs][i][isa] = sqeucl_dist_ptr(x, &X_hds[arr_nn_i_rs[rs][i][isa]*d_hds], d_hds)
 *                     if min_ds > ds_nn_i_rs[rs][i][isa]:             # <<<<<<<<<<<<<<
 *                         min_ds = ds_nn_i_rs[rs][i][isa]
 *                     isa += 1
 */
          }

          /* "fmsne_implem.pyx":2179
 *                     if min_ds > ds_nn_i_rs[rs][i][isa]:
 *                         min_ds = ds_nn_i_rs[rs][i][isa]
 *                     isa += 1             # <<<<<<<<<<<<<<
 * 
 *                 # Substracting the minimum squared distance and changing the sign, to avoid to do it during the computation of the bandwidths
 */
          __pyx_v_isa = (__pyx_v_isa + 1);
        }

        /* "fmsne_implem.pyx":2182
 * 
 *                 # Substracting the minimum squared distance and changing the sign, to avoid to do it during the computation of the bandwidths
 *                 isa = nnn_i_rs[rs][i]             # <<<<<<<<<<<<<<
 *                 for j in range(nnn):
 *                     ds_nn_i_rs[rs][i][isa] = min_ds - ds_nn_i_rs[rs][i][isa]
 */
        __pyx_v_isa = ((__pyx_v_nnn_i_rs[__pyx_v_rs])[__pyx_v_i]);

        /* "fmsne_implem.pyx":2183
 *                 # Substracting the minimum squared distance and changing the sign, to avoid to do it during the computation of the bandwidths
 *                 isa = nnn_i_rs[rs][i]
 *                 for j in range(nnn):             # <<<<<<<<<<<<<<
 *                     ds_nn_i_rs[rs][i][isa] = min_ds - ds_nn_i_rs[rs][i][isa]
 *                     isa += 1
 */
        __pyx_t_12 = __pyx_v_nnn;
        __pyx_t_13 = __pyx_t_12;
        for (__pyx_t_14 = 0; __pyx_t_14 < __pyx_t_13; __pyx_t_14+=1) {
          __pyx_v_j = __pyx_t_14;

          /* "fmsne_implem.pyx":2184
 *                 isa = nnn_i_rs[rs][i]
 *                 for j in range(nnn):
 *                     ds_nn_i_rs[rs][i][isa] = min_ds - ds_nn_i_rs[rs][i][isa]             # <<<<<<<<<<<<<<
 *                     isa += 1
 * 
 */
          (((__pyx_v_ds_nn_i_rs[__pyx_v_rs])[__pyx_v_i])[__pyx_v_isa]) = (__pyx_v_min_ds - (((__pyx_v_ds_nn_i_rs[__pyx_v_rs])[__pyx_v_i])[__pyx_v_isa]));

          /* "fmsne_implem.pyx":2185
 *                 for j in range(nnn):
 *                     ds_nn_i_rs[rs][i][isa] = min_ds - ds_nn_i_rs[rs][i][isa]
 *                     isa += 1             # <<<<<<<<<<<<<<
 * 
 *                 # Logarithm of the current perplexity
 */
          __pyx_v_isa = (__pyx_v_isa + 1);
        }

        /* "fmsne_implem.pyx":2188
 * 
 *                 # Logarithm of the current perplexity
 *                 if clogp:             # <<<<<<<<<<<<<<
 *                     log_perp = log(<double> min(K_h[0], nnn - 1))
 * 
 */
        __pyx_t_1 = (__pyx_v_clogp != 0);
        if (__pyx_t_1) {

          /* "fmsne_implem.pyx":2189
 *                 # Logarithm of the current perplexity
 *                 if clogp:
 *                     log_perp = log(<double> min(K_h[0], nnn - 1))             # <<<<<<<<<<<<<<
 * 
 *                 # Computing the HD bandwith of the similarities at scale h, in random sampling rs and with respect to data point i
 */
          __pyx_t_15 = (__pyx_v_nnn - 1);
          __pyx_t_12 = (__pyx_v_K_h[0]);
          if (((__pyx_t_15 < __pyx_t_12) != 0)) {
            __pyx_t_16 = __pyx_t_15;
          } else {
            __pyx_t_16 = __pyx_t_12;
          }
          __pyx_v_log_perp = log(((double)__pyx_t_16));

          /* "fmsne_implem.pyx":2188
 * 
 *                 # Logarithm of the current perplexity
 *                 if clogp:             # <<<<<<<<<<<<<<
 *                     log_perp = log(<double> min(K_h[0], nnn - 1))
 * 
 */
        }

        /* "fmsne_implem.pyx":2192
 * 
 *                 # Computing the HD bandwith of the similarities at scale h, in random sampling rs and with respect to data point i
 *                 tau_h_i_rs[h][rs][i] = sne_binsearch_bandwidth_fit(&ds_nn_i_rs[rs][i][nnn_i_rs[rs][i]], nnn, log_perp, 1.0)             # <<<<<<<<<<<<<<
 * 
 *                 # Only adding the new neighbors to arr_nn_i_rs
 */
        (((__pyx_v_tau_h_i_rs[__pyx_v_h])[__pyx_v_rs])[__pyx_v_i]) = __pyx_f_12fmsne_implem_sne_binsearch_bandwidth_fit((&(((__pyx_v_ds_nn_i_rs[__pyx_v_rs])[__pyx_v_i])[((__pyx_v_nnn_i_rs[__pyx_v_rs])[__pyx_v_i])])), __pyx_v_nnn, __pyx_v_log_perp, 1.0);

        /* "fmsne_implem.pyx":2195
 * 
 *                 # Only adding the new neighbors to arr_nn_i_rs
 *                 k = nnn_i_rs[rs][i]             # <<<<<<<<<<<<<<
 *                 nnn_cpy = nnn
 *                 for j in range(nnn_cpy):
 */
        __pyx_v_k = ((__pyx_v_nnn_i_rs[__pyx_v_rs])[__pyx_v_i]);

        /* "fmsne_implem.pyx":2196
 *                 # Only adding the new neighbors to arr_nn_i_rs
 *                 k = nnn_i_rs[rs][i]
 *                 nnn_cpy = nnn             # <<<<<<<<<<<<<<
 *                 for j in range(nnn_cpy):
 *                     for isa in range(nnn_i_rs[rs][i]):
 */
        __pyx_v_nnn_cpy = __pyx_v_nnn;

        /* "fmsne_implem.pyx":2197
 *                 k = nnn_i_rs[rs][i]
 *                 nnn_cpy = nnn
 *                 for j in range(nnn_cpy):             # <<<<<<<<<<<<<<
 *                     for isa in range(nnn_i_rs[rs][i]):
 *                         if arr_nn_i_rs[rs][i][isa] == arr_nn_i_rs[rs][i][k]:
 */
        __pyx_t_12 = __pyx_v_nnn_cpy;
        __pyx_t_13 = __pyx_t_12;
        for (__pyx_t_14 = 0; __pyx_t_14 < __pyx_t_13; __pyx_t_14+=1) {
          __pyx_v_j = __pyx_t_14;

          /* "fmsne_implem.pyx":2198
 *                 nnn_cpy = nnn
 *                 for j in range(nnn_cpy):
 *                     for isa in range(nnn_i_rs[rs][i]):             # <<<<<<<<<<<<<<
 *                         if arr_nn_i_rs[rs][i][isa] == arr_nn_i_rs[rs][i][k]:
 *                             nnn -= 1
 */
          __pyx_t_17 = ((__pyx_v_nnn_i_rs[__pyx_v_rs])[__pyx_v_i]);
          __pyx_t_18 = __pyx_t_17;
          for (__pyx_t_19 = 0; __pyx_t_19 < __pyx_t_18; __pyx_t_19+=1) {
            __pyx_v_isa = __pyx_t_19;

            /* "fmsne_implem.pyx":2199
 *                 for j in range(nnn_cpy):
 *                     for isa in range(nnn_i_rs[rs][i]):
 *                         if arr_nn_i_rs[rs][i][isa] == arr_nn_i_rs[rs][i][k]:             # <<<<<<<<<<<<<<
 *                             nnn -= 1
 *                             last = nnn_i_rs[rs][i]+nnn
 */
            __pyx_t_1 = (((((__pyx_v_arr_nn_i_rs[__pyx_v_rs])[__pyx_v_i])[__pyx_v_isa]) == (((__pyx_v_arr_nn_i_rs[__pyx_v_rs])[__pyx_v_i])[__pyx_v_k])) != 0);
            if (__pyx_t_1) {

              /* "fmsne_implem.pyx":2200
 *                     for isa in range(nnn_i_rs[rs][i]):
 *                         if arr_nn_i_rs[rs][i][isa] == arr_nn_i_rs[rs][i][k]:
 *                             nnn -= 1             # <<<<<<<<<<<<<<
 *                             last = nnn_i_rs[rs][i]+nnn
 *                             if last > k:
 */
              __pyx_v_nnn = (__pyx_v_nnn - 1);

              /* "fmsne_implem.pyx":2201
 *                         if arr_nn_i_rs[rs][i][isa] == arr_nn_i_rs[rs][i][k]:
 *                             nnn -= 1
 *                             last = nnn_i_rs[rs][i]+nnn             # <<<<<<<<<<<<<<
 *                             if last > k:
 *                                 arr_nn_i_rs[rs][i][k] = arr_nn_i_rs[rs][i][last]
 */
              __pyx_v_last = (((__pyx_v_nnn_i_rs[__pyx_v_rs])[__pyx_v_i]) + __pyx_v_nnn);

              /* "fmsne_implem.pyx":2202
 *                             nnn -= 1
 *                             last = nnn_i_rs[rs][i]+nnn
 *                             if last > k:             # <<<<<<<<<<<<<<
 *                                 arr_nn_i_rs[rs][i][k] = arr_nn_i_rs[rs][i][last]
 *                                 ds_nn_i_rs[rs][i][k] = ds_nn_i_rs[rs][i][last]
 */
              __pyx_t_1 = ((__pyx_v_last > __pyx_v_k) != 0);
              if (__pyx_t_1) {

                /* "fmsne_implem.pyx":2203
 *                             last = nnn_i_rs[rs][i]+nnn
 *                             if last > k:
 *                                 arr_nn_i_rs[rs][i][k] = arr_nn_i_rs[rs][i][last]             # <<<<<<<<<<<<<<
 *                                 ds_nn_i_rs[rs][i][k] = ds_nn_i_rs[rs][i][last]
 *                             break
 */
                (((__pyx_v_arr_nn_i_rs[__pyx_v_rs])[__pyx_v_i])[__pyx_v_k]) = (((__pyx_v_arr_nn_i_rs[__pyx_v_rs])[__pyx_v_i])[__pyx_v_last]);

                /* "fmsne_implem.pyx":2204
 *                             if last > k:
 *                                 arr_nn_i_rs[rs][i][k] = arr_nn_i_rs[rs][i][last]
 *                                 ds_nn_i_rs[rs][i][k] = ds_nn_i_rs[rs][i][last]             # <<<<<<<<<<<<<<
 *                             break
 *                     else:
 */
                (((__pyx_v_ds_nn_i_rs[__pyx_v_rs])[__pyx_v_i])[__pyx_v_k]) = (((__pyx_v_ds_nn_i_rs[__pyx_v_rs])[__pyx_v_i])[__pyx_v_last]);

                /* "fmsne_implem.pyx":2202
 *                             nnn -= 1
 *                             last = nnn_i_rs[rs][i]+nnn
 *                             if last > k:             # <<<<<<<<<<<<<<
 *                                 arr_nn_i_rs[rs][i][k] = arr_nn_i_rs[rs][i][last]
 *                                 ds_nn_i_rs[rs][i][k] = ds_nn_i_rs[rs][i][last]
 */
              }

              /* "fmsne_implem.pyx":2205
 *                                 arr_nn_i_rs[rs][i][k] = arr_nn_i_rs[rs][i][last]
 *                                 ds_nn_i_rs[rs][i][k] = ds_nn_i_rs[rs][i][last]
 *                             break             # <<<<<<<<<<<<<<
 *                     else:
 *                         # If no break in inner loop, set the squared distance back to its value and increment k
 */
              goto __pyx_L42_break;

              /* "fmsne_implem.pyx":2199
 *                 for j in range(nnn_cpy):
 *                     for isa in range(nnn_i_rs[rs][i]):
 *                         if arr_nn_i_rs[rs][i][isa] == arr_nn_i_rs[rs][i][k]:             # <<<<<<<<<<<<<<
 *                             nnn -= 1
 *                             last = nnn_i_rs[rs][i]+nnn
 */
            }
          }
          /*else*/ {

            /* "fmsne_implem.pyx":2208
 *                     else:
 *                         # If no break in inner loop, set the squared distance back to its value and increment k
 *                         ds_nn_i_rs[rs][i][k] = min_ds - ds_nn_i_rs[rs][i][k]             # <<<<<<<<<<<<<<
 *                         k += 1
 *                 # Updating the number of considered neighbors
 */
            (((__pyx_v_ds_nn_i_rs[__pyx_v_rs])[__pyx_v_i])[__pyx_v_k]) = (__pyx_v_min_ds - (((__pyx_v_ds_nn_i_rs[__pyx_v_rs])[__pyx_v_i])[__pyx_v_k]));

            /* "fmsne_implem.pyx":2209
 *                         # If no break in inner loop, set the squared distance back to its value and increment k
 *                         ds_nn_i_rs[rs][i][k] = min_ds - ds_nn_i_rs[rs][i][k]
 *                         k += 1             # <<<<<<<<<<<<<<
 *                 # Updating the number of considered neighbors
 *                 nnn_i_rs[rs][i] += nnn
 */
            __pyx_v_k = (__pyx_v_k + 1);
          }
          __pyx_L42_break:;
        }

        /* "fmsne_implem.pyx":2211
 *                         k += 1
 *                 # Updating the number of considered neighbors
 *                 nnn_i_rs[rs][i] += nnn             # <<<<<<<<<<<<<<
 *                 # Updating for the other random samplings if they all use the same vantage-point tree at the first scale
 *                 if not build_vp:
 */
        __pyx_t_14 = __pyx_v_rs;
        __pyx_t_19 = __pyx_v_i;
        ((__pyx_v_nnn_i_rs[__pyx_t_14])[__pyx_t_19]) = (((__pyx_v_nnn_i_rs[__pyx_t_14])[__pyx_t_19]) + __pyx_v_nnn);

        /* "fmsne_implem.pyx":2213
 *                 nnn_i_rs[rs][i] += nnn
 *                 # Updating for the other random samplings if they all use the same vantage-point tree at the first scale
 *                 if not build_vp:             # <<<<<<<<<<<<<<
 *                     for isa in range(1, n_rs, 1):
 *                         tau_h_i_rs[h][isa][i] = tau_h_i_rs[h][rs][i]
 */
        __pyx_t_1 = ((!(__pyx_v_build_vp != 0)) != 0);
        if (__pyx_t_1) {

          /* "fmsne_implem.pyx":2214
 *                 # Updating for the other random samplings if they all use the same vantage-point tree at the first scale
 *                 if not build_vp:
 *                     for isa in range(1, n_rs, 1):             # <<<<<<<<<<<<<<
 *                         tau_h_i_rs[h][isa][i] = tau_h_i_rs[h][rs][i]
 *                         nnn_i_rs[isa][i] = nnn
 */
          __pyx_t_14 = __pyx_v_n_rs;
          __pyx_t_19 = __pyx_t_14;
          for (__pyx_t_20 = 1; __pyx_t_20 < __pyx_t_19; __pyx_t_20+=1) {
            __pyx_v_isa = __pyx_t_20;

            /* "fmsne_implem.pyx":2215
 *                 if not build_vp:
 *                     for isa in range(1, n_rs, 1):
 *                         tau_h_i_rs[h][isa][i] = tau_h_i_rs[h][rs][i]             # <<<<<<<<<<<<<<
 *                         nnn_i_rs[isa][i] = nnn
 *                         for j in range(nnn):
 */
            (((__pyx_v_tau_h_i_rs[__pyx_v_h])[__pyx_v_isa])[__pyx_v_i]) = (((__pyx_v_tau_h_i_rs[__pyx_v_h])[__pyx_v_rs])[__pyx_v_i]);

            /* "fmsne_implem.pyx":2216
 *                     for isa in range(1, n_rs, 1):
 *                         tau_h_i_rs[h][isa][i] = tau_h_i_rs[h][rs][i]
 *                         nnn_i_rs[isa][i] = nnn             # <<<<<<<<<<<<<<
 *                         for j in range(nnn):
 *                             arr_nn_i_rs[isa][i][j] = arr_nn_i_rs[rs][i][j]
 */
            ((__pyx_v_nnn_i_rs[__pyx_v_isa])[__pyx_v_i]) = __pyx_v_nnn;

            /* "fmsne_implem.pyx":2217
 *                         tau_h_i_rs[h][isa][i] = tau_h_i_rs[h][rs][i]
 *                         nnn_i_rs[isa][i] = nnn
 *                         for j in range(nnn):             # <<<<<<<<<<<<<<
 *                             arr_nn_i_rs[isa][i][j] = arr_nn_i_rs[rs][i][j]
 *                             ds_nn_i_rs[isa][i][j] = ds_nn_i_rs[rs][i][j]
 */
            __pyx_t_12 = __pyx_v_nnn;
            __pyx_t_13 = __pyx_t_12;
            for (__pyx_t_21 = 0; __pyx_t_21 < __pyx_t_13; __pyx_t_21+=1) {
              __pyx_v_j = __pyx_t_21;

              /* "fmsne_implem.pyx":2218
 *                         nnn_i_rs[isa][i] = nnn
 *                         for j in range(nnn):
 *                             arr_nn_i_rs[isa][i][j] = arr_nn_i_rs[rs][i][j]             # <<<<<<<<<<<<<<
 *                             ds_nn_i_rs[isa][i][j] = ds_nn_i_rs[rs][i][j]
 *             if build_vp:
 */
              (((__pyx_v_arr_nn_i_rs[__pyx_v_isa])[__pyx_v_i])[__pyx_v_j]) = (((__pyx_v_arr_nn_i_rs[__pyx_v_rs])[__pyx_v_i])[__pyx_v_j]);

              /* "fmsne_implem.pyx":2219
 *                         for j in range(nnn):
 *                             arr_nn_i_rs[isa][i][j] = arr_nn_i_rs[rs][i][j]
 *                             ds_nn_i_rs[isa][i][j] = ds_nn_i_rs[rs][i][j]             # <<<<<<<<<<<<<<
 *             if build_vp:
 *                 # Call the destructor of the tree and free the ressources allocated for the object
 */
              (((__pyx_v_ds_nn_i_rs[__pyx_v_isa])[__pyx_v_i])[__pyx_v_j]) = (((__pyx_v_ds_nn_i_rs[__pyx_v_rs])[__pyx_v_i])[__pyx_v_j]);
            }
          }

          /* "fmsne_implem.pyx":2213
 *                 nnn_i_rs[rs][i] += nnn
 *                 # Updating for the other random samplings if they all use the same vantage-point tree at the first scale
 *                 if not build_vp:             # <<<<<<<<<<<<<<
 *                     for isa in range(1, n_rs, 1):
 *                         tau_h_i_rs[h][isa][i] = tau_h_i_rs[h][rs][i]
 */
        }
      }

      /* "fmsne_implem.pyx":2220
 *                             arr_nn_i_rs[isa][i][j] = arr_nn_i_rs[rs][i][j]
 *                             ds_nn_i_rs[isa][i][j] = ds_nn_i_rs[rs][i][j]
 *             if build_vp:             # <<<<<<<<<<<<<<
 *                 # Call the destructor of the tree and free the ressources allocated for the object
 *                 del vpt
 */
      __pyx_t_1 = (__pyx_v_build_vp != 0);
      if (__pyx_t_1) {

        /* "fmsne_implem.pyx":2222
 *             if build_vp:
 *                 # Call the destructor of the tree and free the ressources allocated for the object
 *                 del vpt             # <<<<<<<<<<<<<<
 *         if build_vp:
 *             # Free the memory for the subsampled data set at the current scale
 */
        delete __pyx_v_vpt;

        /* "fmsne_implem.pyx":2220
 *                             arr_nn_i_rs[isa][i][j] = arr_nn_i_rs[rs][i][j]
 *                             ds_nn_i_rs[isa][i][j] = ds_nn_i_rs[rs][i][j]
 *             if build_vp:             # <<<<<<<<<<<<<<
 *                 # Call the destructor of the tree and free the ressources allocated for the object
 *                 del vpt
 */
      }
    }

    /* "fmsne_implem.pyx":2223
 *                 # Call the destructor of the tree and free the ressources allocated for the object
 *                 del vpt
 *         if build_vp:             # <<<<<<<<<<<<<<
 *             # Free the memory for the subsampled data set at the current scale
 *             PyMem_Free(Xhd_cur)
 */
    __pyx_t_1 = (__pyx_v_build_vp != 0);
    if (__pyx_t_1) {

      /* "fmsne_implem.pyx":2225
 *         if build_vp:
 *             # Free the memory for the subsampled data set at the current scale
 *             PyMem_Free(Xhd_cur)             # <<<<<<<<<<<<<<
 *             PyMem_Free(i_sds)
 *         else:
 */
      PyMem_Free(__pyx_v_Xhd_cur);

      /* "fmsne_implem.pyx":2226
 *             # Free the memory for the subsampled data set at the current scale
 *             PyMem_Free(Xhd_cur)
 *             PyMem_Free(i_sds)             # <<<<<<<<<<<<<<
 *         else:
 *             # Call the destructor of the tree and free the ressources allocated for the object
 */
      PyMem_Free(__pyx_v_i_sds);

      /* "fmsne_implem.pyx":2223
 *                 # Call the destructor of the tree and free the ressources allocated for the object
 *                 del vpt
 *         if build_vp:             # <<<<<<<<<<<<<<
 *             # Free the memory for the subsampled data set at the current scale
 *             PyMem_Free(Xhd_cur)
 */
      goto __pyx_L51;
    }

    /* "fmsne_implem.pyx":2229
 *         else:
 *             # Call the destructor of the tree and free the ressources allocated for the object
 *             del vpt             # <<<<<<<<<<<<<<
 *     cdef int* n_nnn
 *     if sym_nn_set:
 */
    /*else*/ {
      delete __pyx_v_vpt;
    }
    __pyx_L51:;
  }

  /* "fmsne_implem.pyx":2231
 *             del vpt
 *     cdef int* n_nnn
 *     if sym_nn_set:             # <<<<<<<<<<<<<<
 *         # Intermediate variable to store the new number of nearest neighbors for each data point
 *         shdp = N*sizeof(int)
 */
  __pyx_t_1 = (__pyx_v_sym_nn_set != 0);
  if (__pyx_t_1) {

    /* "fmsne_implem.pyx":2233
 *     if sym_nn_set:
 *         # Intermediate variable to store the new number of nearest neighbors for each data point
 *         shdp = N*sizeof(int)             # <<<<<<<<<<<<<<
 *         n_nnn = <int*> PyMem_Malloc(shdp)
 *         if n_nnn is NULL:
 */
    __pyx_v_shdp = (__pyx_v_N * (sizeof(int)));

    /* "fmsne_implem.pyx":2234
 *         # Intermediate variable to store the new number of nearest neighbors for each data point
 *         shdp = N*sizeof(int)
 *         n_nnn = <int*> PyMem_Malloc(shdp)             # <<<<<<<<<<<<<<
 *         if n_nnn is NULL:
 *             return True
 */
    __pyx_v_n_nnn = ((int *)PyMem_Malloc(__pyx_v_shdp));

    /* "fmsne_implem.pyx":2235
 *         shdp = N*sizeof(int)
 *         n_nnn = <int*> PyMem_Malloc(shdp)
 *         if n_nnn is NULL:             # <<<<<<<<<<<<<<
 *             return True
 *         # Symmetrizing the nearest neighbors sets
 */
    __pyx_t_1 = ((__pyx_v_n_nnn == NULL) != 0);
    if (__pyx_t_1) {

      /* "fmsne_implem.pyx":2236
 *         n_nnn = <int*> PyMem_Malloc(shdp)
 *         if n_nnn is NULL:
 *             return True             # <<<<<<<<<<<<<<
 *         # Symmetrizing the nearest neighbors sets
 *         for rs in range(n_rs):
 */
      __pyx_r = 1;
      goto __pyx_L0;

      /* "fmsne_implem.pyx":2235
 *         shdp = N*sizeof(int)
 *         n_nnn = <int*> PyMem_Malloc(shdp)
 *         if n_nnn is NULL:             # <<<<<<<<<<<<<<
 *             return True
 *         # Symmetrizing the nearest neighbors sets
 */
    }

    /* "fmsne_implem.pyx":2238
 *             return True
 *         # Symmetrizing the nearest neighbors sets
 *         for rs in range(n_rs):             # <<<<<<<<<<<<<<
 *             memcpy(n_nnn, nnn_i_rs[rs], shdp)
 *             # Computing the new number of neighbors to consider for each data point
 */
    __pyx_t_2 = __pyx_v_n_rs;
    __pyx_t_3 = __pyx_t_2;
    for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
      __pyx_v_rs = __pyx_t_4;

      /* "fmsne_implem.pyx":2239
 *         # Symmetrizing the nearest neighbors sets
 *         for rs in range(n_rs):
 *             memcpy(n_nnn, nnn_i_rs[rs], shdp)             # <<<<<<<<<<<<<<
 *             # Computing the new number of neighbors to consider for each data point
 *             for i in range(N):
 */
      (void)(memcpy(__pyx_v_n_nnn, (__pyx_v_nnn_i_rs[__pyx_v_rs]), __pyx_v_shdp));

      /* "fmsne_implem.pyx":2241
 *             memcpy(n_nnn, nnn_i_rs[rs], shdp)
 *             # Computing the new number of neighbors to consider for each data point
 *             for i in range(N):             # <<<<<<<<<<<<<<
 *                 for isa in range(nnn_i_rs[rs][i]):
 *                     j = arr_nn_i_rs[rs][i][isa]
 */
      __pyx_t_9 = __pyx_v_N;
      __pyx_t_10 = __pyx_t_9;
      for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_10; __pyx_t_6+=1) {
        __pyx_v_i = __pyx_t_6;

        /* "fmsne_implem.pyx":2242
 *             # Computing the new number of neighbors to consider for each data point
 *             for i in range(N):
 *                 for isa in range(nnn_i_rs[rs][i]):             # <<<<<<<<<<<<<<
 *                     j = arr_nn_i_rs[rs][i][isa]
 *                     for nsr in range(nnn_i_rs[rs][j]):
 */
        __pyx_t_12 = ((__pyx_v_nnn_i_rs[__pyx_v_rs])[__pyx_v_i]);
        __pyx_t_13 = __pyx_t_12;
        for (__pyx_t_7 = 0; __pyx_t_7 < __pyx_t_13; __pyx_t_7+=1) {
          __pyx_v_isa = __pyx_t_7;

          /* "fmsne_implem.pyx":2243
 *             for i in range(N):
 *                 for isa in range(nnn_i_rs[rs][i]):
 *                     j = arr_nn_i_rs[rs][i][isa]             # <<<<<<<<<<<<<<
 *                     for nsr in range(nnn_i_rs[rs][j]):
 *                         if arr_nn_i_rs[rs][j][nsr] == i:
 */
          __pyx_v_j = (((__pyx_v_arr_nn_i_rs[__pyx_v_rs])[__pyx_v_i])[__pyx_v_isa]);

          /* "fmsne_implem.pyx":2244
 *                 for isa in range(nnn_i_rs[rs][i]):
 *                     j = arr_nn_i_rs[rs][i][isa]
 *                     for nsr in range(nnn_i_rs[rs][j]):             # <<<<<<<<<<<<<<
 *                         if arr_nn_i_rs[rs][j][nsr] == i:
 *                             break
 */
          __pyx_t_17 = ((__pyx_v_nnn_i_rs[__pyx_v_rs])[__pyx_v_j]);
          __pyx_t_18 = __pyx_t_17;
          for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_18; __pyx_t_8+=1) {
            __pyx_v_nsr = __pyx_t_8;

            /* "fmsne_implem.pyx":2245
 *                     j = arr_nn_i_rs[rs][i][isa]
 *                     for nsr in range(nnn_i_rs[rs][j]):
 *                         if arr_nn_i_rs[rs][j][nsr] == i:             # <<<<<<<<<<<<<<
 *                             break
 *                     else:
 */
            __pyx_t_1 = (((((__pyx_v_arr_nn_i_rs[__pyx_v_rs])[__pyx_v_j])[__pyx_v_nsr]) == __pyx_v_i) != 0);
            if (__pyx_t_1) {

              /* "fmsne_implem.pyx":2246
 *                     for nsr in range(nnn_i_rs[rs][j]):
 *                         if arr_nn_i_rs[rs][j][nsr] == i:
 *                             break             # <<<<<<<<<<<<<<
 *                     else:
 *                         # i is not in the neighbors of j: we must add it
 */
              goto __pyx_L61_break;

              /* "fmsne_implem.pyx":2245
 *                     j = arr_nn_i_rs[rs][i][isa]
 *                     for nsr in range(nnn_i_rs[rs][j]):
 *                         if arr_nn_i_rs[rs][j][nsr] == i:             # <<<<<<<<<<<<<<
 *                             break
 *                     else:
 */
            }
          }
          /*else*/ {

            /* "fmsne_implem.pyx":2249
 *                     else:
 *                         # i is not in the neighbors of j: we must add it
 *                         n_nnn[j] += 1             # <<<<<<<<<<<<<<
 *             # Updating the memory allocated to arr_nn_i_rs and ds_nn_i_rs according to the new number of neighbors
 *             for i in range(N):
 */
            __pyx_t_8 = __pyx_v_j;
            (__pyx_v_n_nnn[__pyx_t_8]) = ((__pyx_v_n_nnn[__pyx_t_8]) + 1);
          }
          __pyx_L61_break:;
        }
      }

      /* "fmsne_implem.pyx":2251
 *                         n_nnn[j] += 1
 *             # Updating the memory allocated to arr_nn_i_rs and ds_nn_i_rs according to the new number of neighbors
 *             for i in range(N):             # <<<<<<<<<<<<<<
 *                 if n_nnn[i] < nnn_tot:
 *                     # Reallocating arr_nn_i_rs to the considered number of neighbors
 */
      __pyx_t_9 = __pyx_v_N;
      __pyx_t_10 = __pyx_t_9;
      for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_10; __pyx_t_6+=1) {
        __pyx_v_i = __pyx_t_6;

        /* "fmsne_implem.pyx":2252
 *             # Updating the memory allocated to arr_nn_i_rs and ds_nn_i_rs according to the new number of neighbors
 *             for i in range(N):
 *                 if n_nnn[i] < nnn_tot:             # <<<<<<<<<<<<<<
 *                     # Reallocating arr_nn_i_rs to the considered number of neighbors
 *                     i_sds = <int*> PyMem_Realloc(<void*> arr_nn_i_rs[rs][i], n_nnn[i]*sizeof(int))
 */
        __pyx_t_1 = (((__pyx_v_n_nnn[__pyx_v_i]) < __pyx_v_nnn_tot) != 0);
        if (__pyx_t_1) {

          /* "fmsne_implem.pyx":2254
 *                 if n_nnn[i] < nnn_tot:
 *                     # Reallocating arr_nn_i_rs to the considered number of neighbors
 *                     i_sds = <int*> PyMem_Realloc(<void*> arr_nn_i_rs[rs][i], n_nnn[i]*sizeof(int))             # <<<<<<<<<<<<<<
 *                     if i_sds is NULL:
 *                         PyMem_Free(n_nnn)
 */
          __pyx_v_i_sds = ((int *)PyMem_Realloc(((void *)((__pyx_v_arr_nn_i_rs[__pyx_v_rs])[__pyx_v_i])), ((__pyx_v_n_nnn[__pyx_v_i]) * (sizeof(int)))));

          /* "fmsne_implem.pyx":2255
 *                     # Reallocating arr_nn_i_rs to the considered number of neighbors
 *                     i_sds = <int*> PyMem_Realloc(<void*> arr_nn_i_rs[rs][i], n_nnn[i]*sizeof(int))
 *                     if i_sds is NULL:             # <<<<<<<<<<<<<<
 *                         PyMem_Free(n_nnn)
 *                         return True
 */
          __pyx_t_1 = ((__pyx_v_i_sds == NULL) != 0);
          if (__pyx_t_1) {

            /* "fmsne_implem.pyx":2256
 *                     i_sds = <int*> PyMem_Realloc(<void*> arr_nn_i_rs[rs][i], n_nnn[i]*sizeof(int))
 *                     if i_sds is NULL:
 *                         PyMem_Free(n_nnn)             # <<<<<<<<<<<<<<
 *                         return True
 *                     arr_nn_i_rs[rs][i] = i_sds
 */
            PyMem_Free(__pyx_v_n_nnn);

            /* "fmsne_implem.pyx":2257
 *                     if i_sds is NULL:
 *                         PyMem_Free(n_nnn)
 *                         return True             # <<<<<<<<<<<<<<
 *                     arr_nn_i_rs[rs][i] = i_sds
 *                     # Reallocating ds_nn_i_rs to the considered number of neighbors
 */
            __pyx_r = 1;
            goto __pyx_L0;

            /* "fmsne_implem.pyx":2255
 *                     # Reallocating arr_nn_i_rs to the considered number of neighbors
 *                     i_sds = <int*> PyMem_Realloc(<void*> arr_nn_i_rs[rs][i], n_nnn[i]*sizeof(int))
 *                     if i_sds is NULL:             # <<<<<<<<<<<<<<
 *                         PyMem_Free(n_nnn)
 *                         return True
 */
          }

          /* "fmsne_implem.pyx":2258
 *                         PyMem_Free(n_nnn)
 *                         return True
 *                     arr_nn_i_rs[rs][i] = i_sds             # <<<<<<<<<<<<<<
 *                     # Reallocating ds_nn_i_rs to the considered number of neighbors
 *                     Xhd_cur = <double*> PyMem_Realloc(<void*> ds_nn_i_rs[rs][i], n_nnn[i]*sizeof(double))
 */
          ((__pyx_v_arr_nn_i_rs[__pyx_v_rs])[__pyx_v_i]) = __pyx_v_i_sds;

          /* "fmsne_implem.pyx":2260
 *                     arr_nn_i_rs[rs][i] = i_sds
 *                     # Reallocating ds_nn_i_rs to the considered number of neighbors
 *                     Xhd_cur = <double*> PyMem_Realloc(<void*> ds_nn_i_rs[rs][i], n_nnn[i]*sizeof(double))             # <<<<<<<<<<<<<<
 *                     if Xhd_cur is NULL:
 *                         PyMem_Free(n_nnn)
 */
          __pyx_v_Xhd_cur = ((double *)PyMem_Realloc(((void *)((__pyx_v_ds_nn_i_rs[__pyx_v_rs])[__pyx_v_i])), ((__pyx_v_n_nnn[__pyx_v_i]) * (sizeof(double)))));

          /* "fmsne_implem.pyx":2261
 *                     # Reallocating ds_nn_i_rs to the considered number of neighbors
 *                     Xhd_cur = <double*> PyMem_Realloc(<void*> ds_nn_i_rs[rs][i], n_nnn[i]*sizeof(double))
 *                     if Xhd_cur is NULL:             # <<<<<<<<<<<<<<
 *                         PyMem_Free(n_nnn)
 *                         return True
 */
          __pyx_t_1 = ((__pyx_v_Xhd_cur == NULL) != 0);
          if (__pyx_t_1) {

            /* "fmsne_implem.pyx":2262
 *                     Xhd_cur = <double*> PyMem_Realloc(<void*> ds_nn_i_rs[rs][i], n_nnn[i]*sizeof(double))
 *                     if Xhd_cur is NULL:
 *                         PyMem_Free(n_nnn)             # <<<<<<<<<<<<<<
 *                         return True
 *                     ds_nn_i_rs[rs][i] = Xhd_cur
 */
            PyMem_Free(__pyx_v_n_nnn);

            /* "fmsne_implem.pyx":2263
 *                     if Xhd_cur is NULL:
 *                         PyMem_Free(n_nnn)
 *                         return True             # <<<<<<<<<<<<<<
 *                     ds_nn_i_rs[rs][i] = Xhd_cur
 *                 elif n_nnn[i] > nnn_tot:
 */
            __pyx_r = 1;
            goto __pyx_L0;

            /* "fmsne_implem.pyx":2261
 *                     # Reallocating ds_nn_i_rs to the considered number of neighbors
 *                     Xhd_cur = <double*> PyMem_Realloc(<void*> ds_nn_i_rs[rs][i], n_nnn[i]*sizeof(double))
 *                     if Xhd_cur is NULL:             # <<<<<<<<<<<<<<
 *                         PyMem_Free(n_nnn)
 *                         return True
 */
          }

          /* "fmsne_implem.pyx":2264
 *                         PyMem_Free(n_nnn)
 *                         return True
 *                     ds_nn_i_rs[rs][i] = Xhd_cur             # <<<<<<<<<<<<<<
 *                 elif n_nnn[i] > nnn_tot:
 *                     # Allocating some space to store the new number of neighbors
 */
          ((__pyx_v_ds_nn_i_rs[__pyx_v_rs])[__pyx_v_i]) = __pyx_v_Xhd_cur;

          /* "fmsne_implem.pyx":2252
 *             # Updating the memory allocated to arr_nn_i_rs and ds_nn_i_rs according to the new number of neighbors
 *             for i in range(N):
 *                 if n_nnn[i] < nnn_tot:             # <<<<<<<<<<<<<<
 *                     # Reallocating arr_nn_i_rs to the considered number of neighbors
 *                     i_sds = <int*> PyMem_Realloc(<void*> arr_nn_i_rs[rs][i], n_nnn[i]*sizeof(int))
 */
          goto __pyx_L65;
        }

        /* "fmsne_implem.pyx":2265
 *                         return True
 *                     ds_nn_i_rs[rs][i] = Xhd_cur
 *                 elif n_nnn[i] > nnn_tot:             # <<<<<<<<<<<<<<
 *                     # Allocating some space to store the new number of neighbors
 *                     i_sds = <int*> PyMem_Malloc(n_nnn[i]*sizeof(int))
 */
        __pyx_t_1 = (((__pyx_v_n_nnn[__pyx_v_i]) > __pyx_v_nnn_tot) != 0);
        if (__pyx_t_1) {

          /* "fmsne_implem.pyx":2267
 *                 elif n_nnn[i] > nnn_tot:
 *                     # Allocating some space to store the new number of neighbors
 *                     i_sds = <int*> PyMem_Malloc(n_nnn[i]*sizeof(int))             # <<<<<<<<<<<<<<
 *                     if i_sds is NULL:
 *                         PyMem_Free(n_nnn)
 */
          __pyx_v_i_sds = ((int *)PyMem_Malloc(((__pyx_v_n_nnn[__pyx_v_i]) * (sizeof(int)))));

          /* "fmsne_implem.pyx":2268
 *                     # Allocating some space to store the new number of neighbors
 *                     i_sds = <int*> PyMem_Malloc(n_nnn[i]*sizeof(int))
 *                     if i_sds is NULL:             # <<<<<<<<<<<<<<
 *                         PyMem_Free(n_nnn)
 *                         return True
 */
          __pyx_t_1 = ((__pyx_v_i_sds == NULL) != 0);
          if (__pyx_t_1) {

            /* "fmsne_implem.pyx":2269
 *                     i_sds = <int*> PyMem_Malloc(n_nnn[i]*sizeof(int))
 *                     if i_sds is NULL:
 *                         PyMem_Free(n_nnn)             # <<<<<<<<<<<<<<
 *                         return True
 *                     memcpy(i_sds, arr_nn_i_rs[rs][i], nnn_i_rs[rs][i]*sizeof(int))
 */
            PyMem_Free(__pyx_v_n_nnn);

            /* "fmsne_implem.pyx":2270
 *                     if i_sds is NULL:
 *                         PyMem_Free(n_nnn)
 *                         return True             # <<<<<<<<<<<<<<
 *                     memcpy(i_sds, arr_nn_i_rs[rs][i], nnn_i_rs[rs][i]*sizeof(int))
 *                     PyMem_Free(arr_nn_i_rs[rs][i])
 */
            __pyx_r = 1;
            goto __pyx_L0;

            /* "fmsne_implem.pyx":2268
 *                     # Allocating some space to store the new number of neighbors
 *                     i_sds = <int*> PyMem_Malloc(n_nnn[i]*sizeof(int))
 *                     if i_sds is NULL:             # <<<<<<<<<<<<<<
 *                         PyMem_Free(n_nnn)
 *                         return True
 */
          }

          /* "fmsne_implem.pyx":2271
 *                         PyMem_Free(n_nnn)
 *                         return True
 *                     memcpy(i_sds, arr_nn_i_rs[rs][i], nnn_i_rs[rs][i]*sizeof(int))             # <<<<<<<<<<<<<<
 *                     PyMem_Free(arr_nn_i_rs[rs][i])
 *                     arr_nn_i_rs[rs][i] = i_sds
 */
          (void)(memcpy(__pyx_v_i_sds, ((__pyx_v_arr_nn_i_rs[__pyx_v_rs])[__pyx_v_i]), (((__pyx_v_nnn_i_rs[__pyx_v_rs])[__pyx_v_i]) * (sizeof(int)))));

          /* "fmsne_implem.pyx":2272
 *                         return True
 *                     memcpy(i_sds, arr_nn_i_rs[rs][i], nnn_i_rs[rs][i]*sizeof(int))
 *                     PyMem_Free(arr_nn_i_rs[rs][i])             # <<<<<<<<<<<<<<
 *                     arr_nn_i_rs[rs][i] = i_sds
 *                     # Allocating some space to store the distances to the new number of neighbors
 */
          PyMem_Free(((__pyx_v_arr_nn_i_rs[__pyx_v_rs])[__pyx_v_i]));

          /* "fmsne_implem.pyx":2273
 *                     memcpy(i_sds, arr_nn_i_rs[rs][i], nnn_i_rs[rs][i]*sizeof(int))
 *                     PyMem_Free(arr_nn_i_rs[rs][i])
 *                     arr_nn_i_rs[rs][i] = i_sds             # <<<<<<<<<<<<<<
 *                     # Allocating some space to store the distances to the new number of neighbors
 *                     Xhd_cur = <double*> PyMem_Malloc(n_nnn[i]*sizeof(double))
 */
          ((__pyx_v_arr_nn_i_rs[__pyx_v_rs])[__pyx_v_i]) = __pyx_v_i_sds;

          /* "fmsne_implem.pyx":2275
 *                     arr_nn_i_rs[rs][i] = i_sds
 *                     # Allocating some space to store the distances to the new number of neighbors
 *                     Xhd_cur = <double*> PyMem_Malloc(n_nnn[i]*sizeof(double))             # <<<<<<<<<<<<<<
 *                     if Xhd_cur is NULL:
 *                         PyMem_Free(n_nnn)
 */
          __pyx_v_Xhd_cur = ((double *)PyMem_Malloc(((__pyx_v_n_nnn[__pyx_v_i]) * (sizeof(double)))));

          /* "fmsne_implem.pyx":2276
 *                     # Allocating some space to store the distances to the new number of neighbors
 *                     Xhd_cur = <double*> PyMem_Malloc(n_nnn[i]*sizeof(double))
 *                     if Xhd_cur is NULL:             # <<<<<<<<<<<<<<
 *                         PyMem_Free(n_nnn)
 *                         return True
 */
          __pyx_t_1 = ((__pyx_v_Xhd_cur == NULL) != 0);
          if (__pyx_t_1) {

            /* "fmsne_implem.pyx":2277
 *                     Xhd_cur = <double*> PyMem_Malloc(n_nnn[i]*sizeof(double))
 *                     if Xhd_cur is NULL:
 *                         PyMem_Free(n_nnn)             # <<<<<<<<<<<<<<
 *                         return True
 *                     memcpy(Xhd_cur, ds_nn_i_rs[rs][i], nnn_i_rs[rs][i]*sizeof(double))
 */
            PyMem_Free(__pyx_v_n_nnn);

            /* "fmsne_implem.pyx":2278
 *                     if Xhd_cur is NULL:
 *                         PyMem_Free(n_nnn)
 *                         return True             # <<<<<<<<<<<<<<
 *                     memcpy(Xhd_cur, ds_nn_i_rs[rs][i], nnn_i_rs[rs][i]*sizeof(double))
 *                     PyMem_Free(ds_nn_i_rs[rs][i])
 */
            __pyx_r = 1;
            goto __pyx_L0;

            /* "fmsne_implem.pyx":2276
 *                     # Allocating some space to store the distances to the new number of neighbors
 *                     Xhd_cur = <double*> PyMem_Malloc(n_nnn[i]*sizeof(double))
 *                     if Xhd_cur is NULL:             # <<<<<<<<<<<<<<
 *                         PyMem_Free(n_nnn)
 *                         return True
 */
          }

          /* "fmsne_implem.pyx":2279
 *                         PyMem_Free(n_nnn)
 *                         return True
 *                     memcpy(Xhd_cur, ds_nn_i_rs[rs][i], nnn_i_rs[rs][i]*sizeof(double))             # <<<<<<<<<<<<<<
 *                     PyMem_Free(ds_nn_i_rs[rs][i])
 *                     ds_nn_i_rs[rs][i] = Xhd_cur
 */
          (void)(memcpy(__pyx_v_Xhd_cur, ((__pyx_v_ds_nn_i_rs[__pyx_v_rs])[__pyx_v_i]), (((__pyx_v_nnn_i_rs[__pyx_v_rs])[__pyx_v_i]) * (sizeof(double)))));

          /* "fmsne_implem.pyx":2280
 *                         return True
 *                     memcpy(Xhd_cur, ds_nn_i_rs[rs][i], nnn_i_rs[rs][i]*sizeof(double))
 *                     PyMem_Free(ds_nn_i_rs[rs][i])             # <<<<<<<<<<<<<<
 *                     ds_nn_i_rs[rs][i] = Xhd_cur
 *             # Adding the new considered neighbors
 */
          PyMem_Free(((__pyx_v_ds_nn_i_rs[__pyx_v_rs])[__pyx_v_i]));

          /* "fmsne_implem.pyx":2281
 *                     memcpy(Xhd_cur, ds_nn_i_rs[rs][i], nnn_i_rs[rs][i]*sizeof(double))
 *                     PyMem_Free(ds_nn_i_rs[rs][i])
 *                     ds_nn_i_rs[rs][i] = Xhd_cur             # <<<<<<<<<<<<<<
 *             # Adding the new considered neighbors
 *             memcpy(n_nnn, nnn_i_rs[rs], shdp)
 */
          ((__pyx_v_ds_nn_i_rs[__pyx_v_rs])[__pyx_v_i]) = __pyx_v_Xhd_cur;

          /* "fmsne_implem.pyx":2265
 *                         return True
 *                     ds_nn_i_rs[rs][i] = Xhd_cur
 *                 elif n_nnn[i] > nnn_tot:             # <<<<<<<<<<<<<<
 *                     # Allocating some space to store the new number of neighbors
 *                     i_sds = <int*> PyMem_Malloc(n_nnn[i]*sizeof(int))
 */
        }
        __pyx_L65:;
      }

      /* "fmsne_implem.pyx":2283
 *                     ds_nn_i_rs[rs][i] = Xhd_cur
 *             # Adding the new considered neighbors
 *             memcpy(n_nnn, nnn_i_rs[rs], shdp)             # <<<<<<<<<<<<<<
 *             for i in range(N):
 *                 for isa in range(nnn_i_rs[rs][i]):
 */
      (void)(memcpy(__pyx_v_n_nnn, (__pyx_v_nnn_i_rs[__pyx_v_rs]), __pyx_v_shdp));

      /* "fmsne_implem.pyx":2284
 *             # Adding the new considered neighbors
 *             memcpy(n_nnn, nnn_i_rs[rs], shdp)
 *             for i in range(N):             # <<<<<<<<<<<<<<
 *                 for isa in range(nnn_i_rs[rs][i]):
 *                     j = arr_nn_i_rs[rs][i][isa]
 */
      __pyx_t_9 = __pyx_v_N;
      __pyx_t_10 = __pyx_t_9;
      for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_10; __pyx_t_6+=1) {
        __pyx_v_i = __pyx_t_6;

        /* "fmsne_implem.pyx":2285
 *             memcpy(n_nnn, nnn_i_rs[rs], shdp)
 *             for i in range(N):
 *                 for isa in range(nnn_i_rs[rs][i]):             # <<<<<<<<<<<<<<
 *                     j = arr_nn_i_rs[rs][i][isa]
 *                     for nsr in range(nnn_i_rs[rs][j]):
 */
        __pyx_t_12 = ((__pyx_v_nnn_i_rs[__pyx_v_rs])[__pyx_v_i]);
        __pyx_t_13 = __pyx_t_12;
        for (__pyx_t_7 = 0; __pyx_t_7 < __pyx_t_13; __pyx_t_7+=1) {
          __pyx_v_isa = __pyx_t_7;

          /* "fmsne_implem.pyx":2286
 *             for i in range(N):
 *                 for isa in range(nnn_i_rs[rs][i]):
 *                     j = arr_nn_i_rs[rs][i][isa]             # <<<<<<<<<<<<<<
 *                     for nsr in range(nnn_i_rs[rs][j]):
 *                         if arr_nn_i_rs[rs][j][nsr] == i:
 */
          __pyx_v_j = (((__pyx_v_arr_nn_i_rs[__pyx_v_rs])[__pyx_v_i])[__pyx_v_isa]);

          /* "fmsne_implem.pyx":2287
 *                 for isa in range(nnn_i_rs[rs][i]):
 *                     j = arr_nn_i_rs[rs][i][isa]
 *                     for nsr in range(nnn_i_rs[rs][j]):             # <<<<<<<<<<<<<<
 *                         if arr_nn_i_rs[rs][j][nsr] == i:
 *                             break
 */
          __pyx_t_17 = ((__pyx_v_nnn_i_rs[__pyx_v_rs])[__pyx_v_j]);
          __pyx_t_18 = __pyx_t_17;
          for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_18; __pyx_t_8+=1) {
            __pyx_v_nsr = __pyx_t_8;

            /* "fmsne_implem.pyx":2288
 *                     j = arr_nn_i_rs[rs][i][isa]
 *                     for nsr in range(nnn_i_rs[rs][j]):
 *                         if arr_nn_i_rs[rs][j][nsr] == i:             # <<<<<<<<<<<<<<
 *                             break
 *                     else:
 */
            __pyx_t_1 = (((((__pyx_v_arr_nn_i_rs[__pyx_v_rs])[__pyx_v_j])[__pyx_v_nsr]) == __pyx_v_i) != 0);
            if (__pyx_t_1) {

              /* "fmsne_implem.pyx":2289
 *                     for nsr in range(nnn_i_rs[rs][j]):
 *                         if arr_nn_i_rs[rs][j][nsr] == i:
 *                             break             # <<<<<<<<<<<<<<
 *                     else:
 *                         # i is not in the neighbors of j: we must add it
 */
              goto __pyx_L75_break;

              /* "fmsne_implem.pyx":2288
 *                     j = arr_nn_i_rs[rs][i][isa]
 *                     for nsr in range(nnn_i_rs[rs][j]):
 *                         if arr_nn_i_rs[rs][j][nsr] == i:             # <<<<<<<<<<<<<<
 *                             break
 *                     else:
 */
            }
          }
          /*else*/ {

            /* "fmsne_implem.pyx":2292
 *                     else:
 *                         # i is not in the neighbors of j: we must add it
 *                         arr_nn_i_rs[rs][j][n_nnn[j]] = <int> i             # <<<<<<<<<<<<<<
 *                         ds_nn_i_rs[rs][j][n_nnn[j]] = ds_nn_i_rs[rs][i][isa]
 *                         n_nnn[j] += 1
 */
            (((__pyx_v_arr_nn_i_rs[__pyx_v_rs])[__pyx_v_j])[(__pyx_v_n_nnn[__pyx_v_j])]) = ((int)__pyx_v_i);

            /* "fmsne_implem.pyx":2293
 *                         # i is not in the neighbors of j: we must add it
 *                         arr_nn_i_rs[rs][j][n_nnn[j]] = <int> i
 *                         ds_nn_i_rs[rs][j][n_nnn[j]] = ds_nn_i_rs[rs][i][isa]             # <<<<<<<<<<<<<<
 *                         n_nnn[j] += 1
 *             # Substracting the minimum from the squared distances and changing the sign, to avoid doing it when computing the similarities
 */
            (((__pyx_v_ds_nn_i_rs[__pyx_v_rs])[__pyx_v_j])[(__pyx_v_n_nnn[__pyx_v_j])]) = (((__pyx_v_ds_nn_i_rs[__pyx_v_rs])[__pyx_v_i])[__pyx_v_isa]);

            /* "fmsne_implem.pyx":2294
 *                         arr_nn_i_rs[rs][j][n_nnn[j]] = <int> i
 *                         ds_nn_i_rs[rs][j][n_nnn[j]] = ds_nn_i_rs[rs][i][isa]
 *                         n_nnn[j] += 1             # <<<<<<<<<<<<<<
 *             # Substracting the minimum from the squared distances and changing the sign, to avoid doing it when computing the similarities
 *             for i in range(N):
 */
            __pyx_t_8 = __pyx_v_j;
            (__pyx_v_n_nnn[__pyx_t_8]) = ((__pyx_v_n_nnn[__pyx_t_8]) + 1);
          }
          __pyx_L75_break:;
        }
      }

      /* "fmsne_implem.pyx":2296
 *                         n_nnn[j] += 1
 *             # Substracting the minimum from the squared distances and changing the sign, to avoid doing it when computing the similarities
 *             for i in range(N):             # <<<<<<<<<<<<<<
 *                 min_ds = min_arr_ptr(ds_nn_i_rs[rs][i], n_nnn[i])
 *                 for j in range(n_nnn[i]):
 */
      __pyx_t_9 = __pyx_v_N;
      __pyx_t_10 = __pyx_t_9;
      for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_10; __pyx_t_6+=1) {
        __pyx_v_i = __pyx_t_6;

        /* "fmsne_implem.pyx":2297
 *             # Substracting the minimum from the squared distances and changing the sign, to avoid doing it when computing the similarities
 *             for i in range(N):
 *                 min_ds = min_arr_ptr(ds_nn_i_rs[rs][i], n_nnn[i])             # <<<<<<<<<<<<<<
 *                 for j in range(n_nnn[i]):
 *                     ds_nn_i_rs[rs][i][j] = min_ds - ds_nn_i_rs[rs][i][j]
 */
        __pyx_v_min_ds = __pyx_f_12fmsne_implem_min_arr_ptr(((__pyx_v_ds_nn_i_rs[__pyx_v_rs])[__pyx_v_i]), (__pyx_v_n_nnn[__pyx_v_i]));

        /* "fmsne_implem.pyx":2298
 *             for i in range(N):
 *                 min_ds = min_arr_ptr(ds_nn_i_rs[rs][i], n_nnn[i])
 *                 for j in range(n_nnn[i]):             # <<<<<<<<<<<<<<
 *                     ds_nn_i_rs[rs][i][j] = min_ds - ds_nn_i_rs[rs][i][j]
 *             # Updating nnn_i_rs with the new number of neighbors
 */
        __pyx_t_12 = (__pyx_v_n_nnn[__pyx_v_i]);
        __pyx_t_13 = __pyx_t_12;
        for (__pyx_t_7 = 0; __pyx_t_7 < __pyx_t_13; __pyx_t_7+=1) {
          __pyx_v_j = __pyx_t_7;

          /* "fmsne_implem.pyx":2299
 *                 min_ds = min_arr_ptr(ds_nn_i_rs[rs][i], n_nnn[i])
 *                 for j in range(n_nnn[i]):
 *                     ds_nn_i_rs[rs][i][j] = min_ds - ds_nn_i_rs[rs][i][j]             # <<<<<<<<<<<<<<
 *             # Updating nnn_i_rs with the new number of neighbors
 *             memcpy(nnn_i_rs[rs], n_nnn, shdp)
 */
          (((__pyx_v_ds_nn_i_rs[__pyx_v_rs])[__pyx_v_i])[__pyx_v_j]) = (__pyx_v_min_ds - (((__pyx_v_ds_nn_i_rs[__pyx_v_rs])[__pyx_v_i])[__pyx_v_j]));
        }
      }

      /* "fmsne_implem.pyx":2301
 *                     ds_nn_i_rs[rs][i][j] = min_ds - ds_nn_i_rs[rs][i][j]
 *             # Updating nnn_i_rs with the new number of neighbors
 *             memcpy(nnn_i_rs[rs], n_nnn, shdp)             # <<<<<<<<<<<<<<
 *         PyMem_Free(n_nnn)
 *     else:
 */
      (void)(memcpy((__pyx_v_nnn_i_rs[__pyx_v_rs]), __pyx_v_n_nnn, __pyx_v_shdp));
    }

    /* "fmsne_implem.pyx":2302
 *             # Updating nnn_i_rs with the new number of neighbors
 *             memcpy(nnn_i_rs[rs], n_nnn, shdp)
 *         PyMem_Free(n_nnn)             # <<<<<<<<<<<<<<
 *     else:
 *         # Reallocating arr_nn_i_rs and ds_nn_i_rs to reserve the exact amount of memory which is needed, and removing the minimum squared distances and changing their signs, to avoid doing it when computing the HD similarities.
 */
    PyMem_Free(__pyx_v_n_nnn);

    /* "fmsne_implem.pyx":2231
 *             del vpt
 *     cdef int* n_nnn
 *     if sym_nn_set:             # <<<<<<<<<<<<<<
 *         # Intermediate variable to store the new number of nearest neighbors for each data point
 *         shdp = N*sizeof(int)
 */
    goto __pyx_L52;
  }

  /* "fmsne_implem.pyx":2305
 *     else:
 *         # Reallocating arr_nn_i_rs and ds_nn_i_rs to reserve the exact amount of memory which is needed, and removing the minimum squared distances and changing their signs, to avoid doing it when computing the HD similarities.
 *         for rs in range(n_rs):             # <<<<<<<<<<<<<<
 *             for i in range(N):
 *                 if nnn_i_rs[rs][i] < nnn_tot:
 */
  /*else*/ {
    __pyx_t_2 = __pyx_v_n_rs;
    __pyx_t_3 = __pyx_t_2;
    for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
      __pyx_v_rs = __pyx_t_4;

      /* "fmsne_implem.pyx":2306
 *         # Reallocating arr_nn_i_rs and ds_nn_i_rs to reserve the exact amount of memory which is needed, and removing the minimum squared distances and changing their signs, to avoid doing it when computing the HD similarities.
 *         for rs in range(n_rs):
 *             for i in range(N):             # <<<<<<<<<<<<<<
 *                 if nnn_i_rs[rs][i] < nnn_tot:
 *                     # Reallocating arr_nn_i_rs to the considered number of neighbors
 */
      __pyx_t_9 = __pyx_v_N;
      __pyx_t_10 = __pyx_t_9;
      for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_10; __pyx_t_6+=1) {
        __pyx_v_i = __pyx_t_6;

        /* "fmsne_implem.pyx":2307
 *         for rs in range(n_rs):
 *             for i in range(N):
 *                 if nnn_i_rs[rs][i] < nnn_tot:             # <<<<<<<<<<<<<<
 *                     # Reallocating arr_nn_i_rs to the considered number of neighbors
 *                     i_sds = <int*> PyMem_Realloc(<void*> arr_nn_i_rs[rs][i], nnn_i_rs[rs][i]*sizeof(int))
 */
        __pyx_t_1 = ((((__pyx_v_nnn_i_rs[__pyx_v_rs])[__pyx_v_i]) < __pyx_v_nnn_tot) != 0);
        if (__pyx_t_1) {

          /* "fmsne_implem.pyx":2309
 *                 if nnn_i_rs[rs][i] < nnn_tot:
 *                     # Reallocating arr_nn_i_rs to the considered number of neighbors
 *                     i_sds = <int*> PyMem_Realloc(<void*> arr_nn_i_rs[rs][i], nnn_i_rs[rs][i]*sizeof(int))             # <<<<<<<<<<<<<<
 *                     if i_sds is NULL:
 *                         return True
 */
          __pyx_v_i_sds = ((int *)PyMem_Realloc(((void *)((__pyx_v_arr_nn_i_rs[__pyx_v_rs])[__pyx_v_i])), (((__pyx_v_nnn_i_rs[__pyx_v_rs])[__pyx_v_i]) * (sizeof(int)))));

          /* "fmsne_implem.pyx":2310
 *                     # Reallocating arr_nn_i_rs to the considered number of neighbors
 *                     i_sds = <int*> PyMem_Realloc(<void*> arr_nn_i_rs[rs][i], nnn_i_rs[rs][i]*sizeof(int))
 *                     if i_sds is NULL:             # <<<<<<<<<<<<<<
 *                         return True
 *                     arr_nn_i_rs[rs][i] = i_sds
 */
          __pyx_t_1 = ((__pyx_v_i_sds == NULL) != 0);
          if (__pyx_t_1) {

            /* "fmsne_implem.pyx":2311
 *                     i_sds = <int*> PyMem_Realloc(<void*> arr_nn_i_rs[rs][i], nnn_i_rs[rs][i]*sizeof(int))
 *                     if i_sds is NULL:
 *                         return True             # <<<<<<<<<<<<<<
 *                     arr_nn_i_rs[rs][i] = i_sds
 *                     # Reallocating ds_nn_i_rs to the considered number of neighbors
 */
            __pyx_r = 1;
            goto __pyx_L0;

            /* "fmsne_implem.pyx":2310
 *                     # Reallocating arr_nn_i_rs to the considered number of neighbors
 *                     i_sds = <int*> PyMem_Realloc(<void*> arr_nn_i_rs[rs][i], nnn_i_rs[rs][i]*sizeof(int))
 *                     if i_sds is NULL:             # <<<<<<<<<<<<<<
 *                         return True
 *                     arr_nn_i_rs[rs][i] = i_sds
 */
          }

          /* "fmsne_implem.pyx":2312
 *                     if i_sds is NULL:
 *                         return True
 *                     arr_nn_i_rs[rs][i] = i_sds             # <<<<<<<<<<<<<<
 *                     # Reallocating ds_nn_i_rs to the considered number of neighbors
 *                     Xhd_cur = <double*> PyMem_Realloc(<void*> ds_nn_i_rs[rs][i], nnn_i_rs[rs][i]*sizeof(double))
 */
          ((__pyx_v_arr_nn_i_rs[__pyx_v_rs])[__pyx_v_i]) = __pyx_v_i_sds;

          /* "fmsne_implem.pyx":2314
 *                     arr_nn_i_rs[rs][i] = i_sds
 *                     # Reallocating ds_nn_i_rs to the considered number of neighbors
 *                     Xhd_cur = <double*> PyMem_Realloc(<void*> ds_nn_i_rs[rs][i], nnn_i_rs[rs][i]*sizeof(double))             # <<<<<<<<<<<<<<
 *                     if Xhd_cur is NULL:
 *                         return True
 */
          __pyx_v_Xhd_cur = ((double *)PyMem_Realloc(((void *)((__pyx_v_ds_nn_i_rs[__pyx_v_rs])[__pyx_v_i])), (((__pyx_v_nnn_i_rs[__pyx_v_rs])[__pyx_v_i]) * (sizeof(double)))));

          /* "fmsne_implem.pyx":2315
 *                     # Reallocating ds_nn_i_rs to the considered number of neighbors
 *                     Xhd_cur = <double*> PyMem_Realloc(<void*> ds_nn_i_rs[rs][i], nnn_i_rs[rs][i]*sizeof(double))
 *                     if Xhd_cur is NULL:             # <<<<<<<<<<<<<<
 *                         return True
 *                     ds_nn_i_rs[rs][i] = Xhd_cur
 */
          __pyx_t_1 = ((__pyx_v_Xhd_cur == NULL) != 0);
          if (__pyx_t_1) {

            /* "fmsne_implem.pyx":2316
 *                     Xhd_cur = <double*> PyMem_Realloc(<void*> ds_nn_i_rs[rs][i], nnn_i_rs[rs][i]*sizeof(double))
 *                     if Xhd_cur is NULL:
 *                         return True             # <<<<<<<<<<<<<<
 *                     ds_nn_i_rs[rs][i] = Xhd_cur
 *                 # Substracting the minimum from the squared distances and changing the sign, to avoid doing it when computing the similarities
 */
            __pyx_r = 1;
            goto __pyx_L0;

            /* "fmsne_implem.pyx":2315
 *                     # Reallocating ds_nn_i_rs to the considered number of neighbors
 *                     Xhd_cur = <double*> PyMem_Realloc(<void*> ds_nn_i_rs[rs][i], nnn_i_rs[rs][i]*sizeof(double))
 *                     if Xhd_cur is NULL:             # <<<<<<<<<<<<<<
 *                         return True
 *                     ds_nn_i_rs[rs][i] = Xhd_cur
 */
          }

          /* "fmsne_implem.pyx":2317
 *                     if Xhd_cur is NULL:
 *                         return True
 *                     ds_nn_i_rs[rs][i] = Xhd_cur             # <<<<<<<<<<<<<<
 *                 # Substracting the minimum from the squared distances and changing the sign, to avoid doing it when computing the similarities
 *                 min_ds = min_arr_ptr(ds_nn_i_rs[rs][i], nnn_i_rs[rs][i])
 */
          ((__pyx_v_ds_nn_i_rs[__pyx_v_rs])[__pyx_v_i]) = __pyx_v_Xhd_cur;

          /* "fmsne_implem.pyx":2307
 *         for rs in range(n_rs):
 *             for i in range(N):
 *                 if nnn_i_rs[rs][i] < nnn_tot:             # <<<<<<<<<<<<<<
 *                     # Reallocating arr_nn_i_rs to the considered number of neighbors
 *                     i_sds = <int*> PyMem_Realloc(<void*> arr_nn_i_rs[rs][i], nnn_i_rs[rs][i]*sizeof(int))
 */
        }

        /* "fmsne_implem.pyx":2319
 *                     ds_nn_i_rs[rs][i] = Xhd_cur
 *                 # Substracting the minimum from the squared distances and changing the sign, to avoid doing it when computing the similarities
 *                 min_ds = min_arr_ptr(ds_nn_i_rs[rs][i], nnn_i_rs[rs][i])             # <<<<<<<<<<<<<<
 *                 for j in range(nnn_i_rs[rs][i]):
 *                     ds_nn_i_rs[rs][i][j] = min_ds - ds_nn_i_rs[rs][i][j]
 */
        __pyx_v_min_ds = __pyx_f_12fmsne_implem_min_arr_ptr(((__pyx_v_ds_nn_i_rs[__pyx_v_rs])[__pyx_v_i]), ((__pyx_v_nnn_i_rs[__pyx_v_rs])[__pyx_v_i]));

        /* "fmsne_implem.pyx":2320
 *                 # Substracting the minimum from the squared distances and changing the sign, to avoid doing it when computing the similarities
 *                 min_ds = min_arr_ptr(ds_nn_i_rs[rs][i], nnn_i_rs[rs][i])
 *                 for j in range(nnn_i_rs[rs][i]):             # <<<<<<<<<<<<<<
 *                     ds_nn_i_rs[rs][i][j] = min_ds - ds_nn_i_rs[rs][i][j]
 *     # Everything ok -> return False
 */
        __pyx_t_12 = ((__pyx_v_nnn_i_rs[__pyx_v_rs])[__pyx_v_i]);
        __pyx_t_13 = __pyx_t_12;
        for (__pyx_t_7 = 0; __pyx_t_7 < __pyx_t_13; __pyx_t_7+=1) {
          __pyx_v_j = __pyx_t_7;

          /* "fmsne_implem.pyx":2321
 *                 min_ds = min_arr_ptr(ds_nn_i_rs[rs][i], nnn_i_rs[rs][i])
 *                 for j in range(nnn_i_rs[rs][i]):
 *                     ds_nn_i_rs[rs][i][j] = min_ds - ds_nn_i_rs[rs][i][j]             # <<<<<<<<<<<<<<
 *     # Everything ok -> return False
 *     return False
 */
          (((__pyx_v_ds_nn_i_rs[__pyx_v_rs])[__pyx_v_i])[__pyx_v_j]) = (__pyx_v_min_ds - (((__pyx_v_ds_nn_i_rs[__pyx_v_rs])[__pyx_v_i])[__pyx_v_j]));
        }
      }
    }
  }
  __pyx_L52:;

  /* "fmsne_implem.pyx":2323
 *                     ds_nn_i_rs[rs][i][j] = min_ds - ds_nn_i_rs[rs][i][j]
 *     # Everything ok -> return False
 *     return False             # <<<<<<<<<<<<<<
 * 
 * cdef inline Py_ssize_t** fms_nn_dld_match(Py_ssize_t*** nn_i_rs_id_dld, Py_ssize_t* ni_dld, size_t siz_ni_dld, Py_ssize_t n_rs, Py_ssize_t N_1, Py_ssize_t N, int** nnn_i_rs, int*** arr_nn_i_rs, bint sym_nn, Py_ssize_t n_components):
 */
  __pyx_r = 0;
  goto __pyx_L0;

  /* "fmsne_implem.pyx":2060
 *     return nnn_tot
 * 
 * cdef inline bint f_nn_ds_hdprec(int d_hds, int* K_h, int N, Py_ssize_t L, int* n_ds_h, int* all_ind, int* nnn_h, bint isLmin1, double* X_hds, Py_ssize_t n_rs, int*** arr_nn_i_rs, int** nnn_i_rs, double*** ds_nn_i_rs, double*** tau_h_i_rs, int nnn_tot, bint sym_nn_set):             # <<<<<<<<<<<<<<
 *     """
 *     Return False if everything is ok, True if memory problem.
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "fmsne_implem.pyx":2325
 *     return False
 * 
 * cdef inline Py_ssize_t** fms_nn_dld_match(Py_ssize_t*** nn_i_rs_id_dld, Py_ssize_t* ni_dld, size_t siz_ni_dld, Py_ssize_t n_rs, Py_ssize_t N_1, Py_ssize_t N, int** nnn_i_rs, int*** arr_nn_i_rs, bint sym_nn, Py_ssize_t n_components):             # <<<<<<<<<<<<<<
 *     """
 *     sym_nn is True if the neighbor sets are symmetric and False otherwise.
 */

static CYTHON_INLINE Py_ssize_t **__pyx_f_12fmsne_implem_fms_nn_dld_match(Py_ssize_t ***__pyx_v_nn_i_rs_id_dld, Py_ssize_t *__pyx_v_ni_dld, size_t __pyx_v_siz_ni_dld, Py_ssize_t __pyx_v_n_rs, Py_ssize_t __pyx_v_N_1, Py_ssize_t __pyx_v_N, int **__pyx_v_nnn_i_rs, int ***__pyx_v_arr_nn_i_rs, int __pyx_v_sym_nn, Py_ssize_t __pyx_v_n_components) {
  Py_ssize_t __pyx_v_i;
  Py_ssize_t __pyx_v_rs;
  Py_ssize_t __pyx_v_j;
  Py_ssize_t __pyx_v_idj;
  Py_ssize_t __pyx_v_Mij;
  Py_ssize_t __pyx_v_mij;
  Py_ssize_t *__pyx_v_tmp;
  Py_ssize_t **__pyx_v_ij_dld;
  Py_ssize_t **__pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  Py_ssize_t __pyx_t_7;
  int __pyx_t_8;
  int __pyx_t_9;
  Py_ssize_t __pyx_t_10;
  Py_ssize_t __pyx_t_11;
  Py_ssize_t __pyx_t_12;
  Py_ssize_t __pyx_t_13;
  __Pyx_RefNannySetupContext("fms_nn_dld_match", 0);

  /* "fmsne_implem.pyx":2329
 *     sym_nn is True if the neighbor sets are symmetric and False otherwise.
 *     """
 *     memset(ni_dld, 0, siz_ni_dld)             # <<<<<<<<<<<<<<
 *     # Index variables
 *     cdef Py_ssize_t i, rs, j, idj, Mij, mij
 */
  (void)(memset(__pyx_v_ni_dld, 0, __pyx_v_siz_ni_dld));

  /* "fmsne_implem.pyx":2333
 *     cdef Py_ssize_t i, rs, j, idj, Mij, mij
 *     # Storing an upperbound for the number of distances for each i in ni_dld
 *     if sym_nn:             # <<<<<<<<<<<<<<
 *         for rs in range(n_rs):
 *             for i in range(N_1):
 */
  __pyx_t_1 = (__pyx_v_sym_nn != 0);
  if (__pyx_t_1) {

    /* "fmsne_implem.pyx":2334
 *     # Storing an upperbound for the number of distances for each i in ni_dld
 *     if sym_nn:
 *         for rs in range(n_rs):             # <<<<<<<<<<<<<<
 *             for i in range(N_1):
 *                 for idj in range(nnn_i_rs[rs][i]):
 */
    __pyx_t_2 = __pyx_v_n_rs;
    __pyx_t_3 = __pyx_t_2;
    for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
      __pyx_v_rs = __pyx_t_4;

      /* "fmsne_implem.pyx":2335
 *     if sym_nn:
 *         for rs in range(n_rs):
 *             for i in range(N_1):             # <<<<<<<<<<<<<<
 *                 for idj in range(nnn_i_rs[rs][i]):
 *                     if i < arr_nn_i_rs[rs][i][idj]:
 */
      __pyx_t_5 = __pyx_v_N_1;
      __pyx_t_6 = __pyx_t_5;
      for (__pyx_t_7 = 0; __pyx_t_7 < __pyx_t_6; __pyx_t_7+=1) {
        __pyx_v_i = __pyx_t_7;

        /* "fmsne_implem.pyx":2336
 *         for rs in range(n_rs):
 *             for i in range(N_1):
 *                 for idj in range(nnn_i_rs[rs][i]):             # <<<<<<<<<<<<<<
 *                     if i < arr_nn_i_rs[rs][i][idj]:
 *                         ni_dld[i] += 1
 */
        __pyx_t_8 = ((__pyx_v_nnn_i_rs[__pyx_v_rs])[__pyx_v_i]);
        __pyx_t_9 = __pyx_t_8;
        for (__pyx_t_10 = 0; __pyx_t_10 < __pyx_t_9; __pyx_t_10+=1) {
          __pyx_v_idj = __pyx_t_10;

          /* "fmsne_implem.pyx":2337
 *             for i in range(N_1):
 *                 for idj in range(nnn_i_rs[rs][i]):
 *                     if i < arr_nn_i_rs[rs][i][idj]:             # <<<<<<<<<<<<<<
 *                         ni_dld[i] += 1
 *     else:
 */
          __pyx_t_1 = ((__pyx_v_i < (((__pyx_v_arr_nn_i_rs[__pyx_v_rs])[__pyx_v_i])[__pyx_v_idj])) != 0);
          if (__pyx_t_1) {

            /* "fmsne_implem.pyx":2338
 *                 for idj in range(nnn_i_rs[rs][i]):
 *                     if i < arr_nn_i_rs[rs][i][idj]:
 *                         ni_dld[i] += 1             # <<<<<<<<<<<<<<
 *     else:
 *         for rs in range(n_rs):
 */
            __pyx_t_11 = __pyx_v_i;
            (__pyx_v_ni_dld[__pyx_t_11]) = ((__pyx_v_ni_dld[__pyx_t_11]) + 1);

            /* "fmsne_implem.pyx":2337
 *             for i in range(N_1):
 *                 for idj in range(nnn_i_rs[rs][i]):
 *                     if i < arr_nn_i_rs[rs][i][idj]:             # <<<<<<<<<<<<<<
 *                         ni_dld[i] += 1
 *     else:
 */
          }
        }
      }
    }

    /* "fmsne_implem.pyx":2333
 *     cdef Py_ssize_t i, rs, j, idj, Mij, mij
 *     # Storing an upperbound for the number of distances for each i in ni_dld
 *     if sym_nn:             # <<<<<<<<<<<<<<
 *         for rs in range(n_rs):
 *             for i in range(N_1):
 */
    goto __pyx_L3;
  }

  /* "fmsne_implem.pyx":2340
 *                         ni_dld[i] += 1
 *     else:
 *         for rs in range(n_rs):             # <<<<<<<<<<<<<<
 *             for i in range(N):
 *                 for idj in range(nnn_i_rs[rs][i]):
 */
  /*else*/ {
    __pyx_t_2 = __pyx_v_n_rs;
    __pyx_t_3 = __pyx_t_2;
    for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
      __pyx_v_rs = __pyx_t_4;

      /* "fmsne_implem.pyx":2341
 *     else:
 *         for rs in range(n_rs):
 *             for i in range(N):             # <<<<<<<<<<<<<<
 *                 for idj in range(nnn_i_rs[rs][i]):
 *                     j = arr_nn_i_rs[rs][i][idj]
 */
      __pyx_t_5 = __pyx_v_N;
      __pyx_t_6 = __pyx_t_5;
      for (__pyx_t_7 = 0; __pyx_t_7 < __pyx_t_6; __pyx_t_7+=1) {
        __pyx_v_i = __pyx_t_7;

        /* "fmsne_implem.pyx":2342
 *         for rs in range(n_rs):
 *             for i in range(N):
 *                 for idj in range(nnn_i_rs[rs][i]):             # <<<<<<<<<<<<<<
 *                     j = arr_nn_i_rs[rs][i][idj]
 *                     if i < j:
 */
        __pyx_t_8 = ((__pyx_v_nnn_i_rs[__pyx_v_rs])[__pyx_v_i]);
        __pyx_t_9 = __pyx_t_8;
        for (__pyx_t_10 = 0; __pyx_t_10 < __pyx_t_9; __pyx_t_10+=1) {
          __pyx_v_idj = __pyx_t_10;

          /* "fmsne_implem.pyx":2343
 *             for i in range(N):
 *                 for idj in range(nnn_i_rs[rs][i]):
 *                     j = arr_nn_i_rs[rs][i][idj]             # <<<<<<<<<<<<<<
 *                     if i < j:
 *                         ni_dld[i] += 1
 */
          __pyx_v_j = (((__pyx_v_arr_nn_i_rs[__pyx_v_rs])[__pyx_v_i])[__pyx_v_idj]);

          /* "fmsne_implem.pyx":2344
 *                 for idj in range(nnn_i_rs[rs][i]):
 *                     j = arr_nn_i_rs[rs][i][idj]
 *                     if i < j:             # <<<<<<<<<<<<<<
 *                         ni_dld[i] += 1
 *                     else:
 */
          __pyx_t_1 = ((__pyx_v_i < __pyx_v_j) != 0);
          if (__pyx_t_1) {

            /* "fmsne_implem.pyx":2345
 *                     j = arr_nn_i_rs[rs][i][idj]
 *                     if i < j:
 *                         ni_dld[i] += 1             # <<<<<<<<<<<<<<
 *                     else:
 *                         ni_dld[j] += 1
 */
            __pyx_t_11 = __pyx_v_i;
            (__pyx_v_ni_dld[__pyx_t_11]) = ((__pyx_v_ni_dld[__pyx_t_11]) + 1);

            /* "fmsne_implem.pyx":2344
 *                 for idj in range(nnn_i_rs[rs][i]):
 *                     j = arr_nn_i_rs[rs][i][idj]
 *                     if i < j:             # <<<<<<<<<<<<<<
 *                         ni_dld[i] += 1
 *                     else:
 */
            goto __pyx_L17;
          }

          /* "fmsne_implem.pyx":2347
 *                         ni_dld[i] += 1
 *                     else:
 *                         ni_dld[j] += 1             # <<<<<<<<<<<<<<
 *     # Temporary variable
 *     cdef Py_ssize_t* tmp
 */
          /*else*/ {
            __pyx_t_11 = __pyx_v_j;
            (__pyx_v_ni_dld[__pyx_t_11]) = ((__pyx_v_ni_dld[__pyx_t_11]) + 1);
          }
          __pyx_L17:;
        }
      }
    }
  }
  __pyx_L3:;

  /* "fmsne_implem.pyx":2351
 *     cdef Py_ssize_t* tmp
 *     # Allocating space
 *     cdef Py_ssize_t** ij_dld = alloc_Pysst_2dmat_varN(N_1, ni_dld)             # <<<<<<<<<<<<<<
 *     if ij_dld is NULL:
 *         return NULL
 */
  __pyx_v_ij_dld = __pyx_f_12fmsne_implem_alloc_Pysst_2dmat_varN(__pyx_v_N_1, __pyx_v_ni_dld);

  /* "fmsne_implem.pyx":2352
 *     # Allocating space
 *     cdef Py_ssize_t** ij_dld = alloc_Pysst_2dmat_varN(N_1, ni_dld)
 *     if ij_dld is NULL:             # <<<<<<<<<<<<<<
 *         return NULL
 *     # Filling ij_dld
 */
  __pyx_t_1 = ((__pyx_v_ij_dld == NULL) != 0);
  if (__pyx_t_1) {

    /* "fmsne_implem.pyx":2353
 *     cdef Py_ssize_t** ij_dld = alloc_Pysst_2dmat_varN(N_1, ni_dld)
 *     if ij_dld is NULL:
 *         return NULL             # <<<<<<<<<<<<<<
 *     # Filling ij_dld
 *     if sym_nn:
 */
    __pyx_r = NULL;
    goto __pyx_L0;

    /* "fmsne_implem.pyx":2352
 *     # Allocating space
 *     cdef Py_ssize_t** ij_dld = alloc_Pysst_2dmat_varN(N_1, ni_dld)
 *     if ij_dld is NULL:             # <<<<<<<<<<<<<<
 *         return NULL
 *     # Filling ij_dld
 */
  }

  /* "fmsne_implem.pyx":2355
 *         return NULL
 *     # Filling ij_dld
 *     if sym_nn:             # <<<<<<<<<<<<<<
 *         for i in range(N_1):
 *             Mij = 0
 */
  __pyx_t_1 = (__pyx_v_sym_nn != 0);
  if (__pyx_t_1) {

    /* "fmsne_implem.pyx":2356
 *     # Filling ij_dld
 *     if sym_nn:
 *         for i in range(N_1):             # <<<<<<<<<<<<<<
 *             Mij = 0
 *             for rs in range(n_rs):
 */
    __pyx_t_2 = __pyx_v_N_1;
    __pyx_t_3 = __pyx_t_2;
    for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
      __pyx_v_i = __pyx_t_4;

      /* "fmsne_implem.pyx":2357
 *     if sym_nn:
 *         for i in range(N_1):
 *             Mij = 0             # <<<<<<<<<<<<<<
 *             for rs in range(n_rs):
 *                 for idj in range(nnn_i_rs[rs][i]):
 */
      __pyx_v_Mij = 0;

      /* "fmsne_implem.pyx":2358
 *         for i in range(N_1):
 *             Mij = 0
 *             for rs in range(n_rs):             # <<<<<<<<<<<<<<
 *                 for idj in range(nnn_i_rs[rs][i]):
 *                     j = arr_nn_i_rs[rs][i][idj]
 */
      __pyx_t_5 = __pyx_v_n_rs;
      __pyx_t_6 = __pyx_t_5;
      for (__pyx_t_7 = 0; __pyx_t_7 < __pyx_t_6; __pyx_t_7+=1) {
        __pyx_v_rs = __pyx_t_7;

        /* "fmsne_implem.pyx":2359
 *             Mij = 0
 *             for rs in range(n_rs):
 *                 for idj in range(nnn_i_rs[rs][i]):             # <<<<<<<<<<<<<<
 *                     j = arr_nn_i_rs[rs][i][idj]
 *                     if i<j:
 */
        __pyx_t_8 = ((__pyx_v_nnn_i_rs[__pyx_v_rs])[__pyx_v_i]);
        __pyx_t_9 = __pyx_t_8;
        for (__pyx_t_10 = 0; __pyx_t_10 < __pyx_t_9; __pyx_t_10+=1) {
          __pyx_v_idj = __pyx_t_10;

          /* "fmsne_implem.pyx":2360
 *             for rs in range(n_rs):
 *                 for idj in range(nnn_i_rs[rs][i]):
 *                     j = arr_nn_i_rs[rs][i][idj]             # <<<<<<<<<<<<<<
 *                     if i<j:
 *                         for mij in range(Mij):
 */
          __pyx_v_j = (((__pyx_v_arr_nn_i_rs[__pyx_v_rs])[__pyx_v_i])[__pyx_v_idj]);

          /* "fmsne_implem.pyx":2361
 *                 for idj in range(nnn_i_rs[rs][i]):
 *                     j = arr_nn_i_rs[rs][i][idj]
 *                     if i<j:             # <<<<<<<<<<<<<<
 *                         for mij in range(Mij):
 *                             if ij_dld[i][mij] == j:
 */
          __pyx_t_1 = ((__pyx_v_i < __pyx_v_j) != 0);
          if (__pyx_t_1) {

            /* "fmsne_implem.pyx":2362
 *                     j = arr_nn_i_rs[rs][i][idj]
 *                     if i<j:
 *                         for mij in range(Mij):             # <<<<<<<<<<<<<<
 *                             if ij_dld[i][mij] == j:
 *                                 nn_i_rs_id_dld[rs][i][idj] = mij
 */
            __pyx_t_11 = __pyx_v_Mij;
            __pyx_t_12 = __pyx_t_11;
            for (__pyx_t_13 = 0; __pyx_t_13 < __pyx_t_12; __pyx_t_13+=1) {
              __pyx_v_mij = __pyx_t_13;

              /* "fmsne_implem.pyx":2363
 *                     if i<j:
 *                         for mij in range(Mij):
 *                             if ij_dld[i][mij] == j:             # <<<<<<<<<<<<<<
 *                                 nn_i_rs_id_dld[rs][i][idj] = mij
 *                                 break
 */
              __pyx_t_1 = ((((__pyx_v_ij_dld[__pyx_v_i])[__pyx_v_mij]) == __pyx_v_j) != 0);
              if (__pyx_t_1) {

                /* "fmsne_implem.pyx":2364
 *                         for mij in range(Mij):
 *                             if ij_dld[i][mij] == j:
 *                                 nn_i_rs_id_dld[rs][i][idj] = mij             # <<<<<<<<<<<<<<
 *                                 break
 *                         else:
 */
                (((__pyx_v_nn_i_rs_id_dld[__pyx_v_rs])[__pyx_v_i])[__pyx_v_idj]) = __pyx_v_mij;

                /* "fmsne_implem.pyx":2365
 *                             if ij_dld[i][mij] == j:
 *                                 nn_i_rs_id_dld[rs][i][idj] = mij
 *                                 break             # <<<<<<<<<<<<<<
 *                         else:
 *                             nn_i_rs_id_dld[rs][i][idj] = Mij
 */
                goto __pyx_L28_break;

                /* "fmsne_implem.pyx":2363
 *                     if i<j:
 *                         for mij in range(Mij):
 *                             if ij_dld[i][mij] == j:             # <<<<<<<<<<<<<<
 *                                 nn_i_rs_id_dld[rs][i][idj] = mij
 *                                 break
 */
              }
            }
            /*else*/ {

              /* "fmsne_implem.pyx":2367
 *                                 break
 *                         else:
 *                             nn_i_rs_id_dld[rs][i][idj] = Mij             # <<<<<<<<<<<<<<
 *                             ij_dld[i][Mij] = j
 *                             Mij += 1
 */
              (((__pyx_v_nn_i_rs_id_dld[__pyx_v_rs])[__pyx_v_i])[__pyx_v_idj]) = __pyx_v_Mij;

              /* "fmsne_implem.pyx":2368
 *                         else:
 *                             nn_i_rs_id_dld[rs][i][idj] = Mij
 *                             ij_dld[i][Mij] = j             # <<<<<<<<<<<<<<
 *                             Mij += 1
 *                     else:
 */
              ((__pyx_v_ij_dld[__pyx_v_i])[__pyx_v_Mij]) = __pyx_v_j;

              /* "fmsne_implem.pyx":2369
 *                             nn_i_rs_id_dld[rs][i][idj] = Mij
 *                             ij_dld[i][Mij] = j
 *                             Mij += 1             # <<<<<<<<<<<<<<
 *                     else:
 *                         for mij in range(ni_dld[j]):
 */
              __pyx_v_Mij = (__pyx_v_Mij + 1);
            }
            __pyx_L28_break:;

            /* "fmsne_implem.pyx":2361
 *                 for idj in range(nnn_i_rs[rs][i]):
 *                     j = arr_nn_i_rs[rs][i][idj]
 *                     if i<j:             # <<<<<<<<<<<<<<
 *                         for mij in range(Mij):
 *                             if ij_dld[i][mij] == j:
 */
            goto __pyx_L26;
          }

          /* "fmsne_implem.pyx":2371
 *                             Mij += 1
 *                     else:
 *                         for mij in range(ni_dld[j]):             # <<<<<<<<<<<<<<
 *                             if ij_dld[j][mij] == i:
 *                                 nn_i_rs_id_dld[rs][i][idj] = mij
 */
          /*else*/ {
            __pyx_t_11 = (__pyx_v_ni_dld[__pyx_v_j]);
            __pyx_t_12 = __pyx_t_11;
            for (__pyx_t_13 = 0; __pyx_t_13 < __pyx_t_12; __pyx_t_13+=1) {
              __pyx_v_mij = __pyx_t_13;

              /* "fmsne_implem.pyx":2372
 *                     else:
 *                         for mij in range(ni_dld[j]):
 *                             if ij_dld[j][mij] == i:             # <<<<<<<<<<<<<<
 *                                 nn_i_rs_id_dld[rs][i][idj] = mij
 *                                 break
 */
              __pyx_t_1 = ((((__pyx_v_ij_dld[__pyx_v_j])[__pyx_v_mij]) == __pyx_v_i) != 0);
              if (__pyx_t_1) {

                /* "fmsne_implem.pyx":2373
 *                         for mij in range(ni_dld[j]):
 *                             if ij_dld[j][mij] == i:
 *                                 nn_i_rs_id_dld[rs][i][idj] = mij             # <<<<<<<<<<<<<<
 *                                 break
 *                         else:
 */
                (((__pyx_v_nn_i_rs_id_dld[__pyx_v_rs])[__pyx_v_i])[__pyx_v_idj]) = __pyx_v_mij;

                /* "fmsne_implem.pyx":2374
 *                             if ij_dld[j][mij] == i:
 *                                 nn_i_rs_id_dld[rs][i][idj] = mij
 *                                 break             # <<<<<<<<<<<<<<
 *                         else:
 *                             free_Pysst_2dmat(ij_dld, N_1)
 */
                goto __pyx_L31_break;

                /* "fmsne_implem.pyx":2372
 *                     else:
 *                         for mij in range(ni_dld[j]):
 *                             if ij_dld[j][mij] == i:             # <<<<<<<<<<<<<<
 *                                 nn_i_rs_id_dld[rs][i][idj] = mij
 *                                 break
 */
              }
            }
            /*else*/ {

              /* "fmsne_implem.pyx":2376
 *                                 break
 *                         else:
 *                             free_Pysst_2dmat(ij_dld, N_1)             # <<<<<<<<<<<<<<
 *                             return NULL
 *             if Mij < ni_dld[i]:
 */
              __pyx_f_12fmsne_implem_free_Pysst_2dmat(__pyx_v_ij_dld, __pyx_v_N_1);

              /* "fmsne_implem.pyx":2377
 *                         else:
 *                             free_Pysst_2dmat(ij_dld, N_1)
 *                             return NULL             # <<<<<<<<<<<<<<
 *             if Mij < ni_dld[i]:
 *                 ni_dld[i] = Mij
 */
              __pyx_r = NULL;
              goto __pyx_L0;
            }
            __pyx_L31_break:;
          }
          __pyx_L26:;
        }
      }

      /* "fmsne_implem.pyx":2378
 *                             free_Pysst_2dmat(ij_dld, N_1)
 *                             return NULL
 *             if Mij < ni_dld[i]:             # <<<<<<<<<<<<<<
 *                 ni_dld[i] = Mij
 *                 tmp = <Py_ssize_t*> PyMem_Realloc(<void*> ij_dld[i], Mij*sizeof(Py_ssize_t))
 */
      __pyx_t_1 = ((__pyx_v_Mij < (__pyx_v_ni_dld[__pyx_v_i])) != 0);
      if (__pyx_t_1) {

        /* "fmsne_implem.pyx":2379
 *                             return NULL
 *             if Mij < ni_dld[i]:
 *                 ni_dld[i] = Mij             # <<<<<<<<<<<<<<
 *                 tmp = <Py_ssize_t*> PyMem_Realloc(<void*> ij_dld[i], Mij*sizeof(Py_ssize_t))
 *                 if tmp is NULL:
 */
        (__pyx_v_ni_dld[__pyx_v_i]) = __pyx_v_Mij;

        /* "fmsne_implem.pyx":2380
 *             if Mij < ni_dld[i]:
 *                 ni_dld[i] = Mij
 *                 tmp = <Py_ssize_t*> PyMem_Realloc(<void*> ij_dld[i], Mij*sizeof(Py_ssize_t))             # <<<<<<<<<<<<<<
 *                 if tmp is NULL:
 *                     free_Pysst_2dmat(ij_dld, N_1)
 */
        __pyx_v_tmp = ((Py_ssize_t *)PyMem_Realloc(((void *)(__pyx_v_ij_dld[__pyx_v_i])), (__pyx_v_Mij * (sizeof(Py_ssize_t)))));

        /* "fmsne_implem.pyx":2381
 *                 ni_dld[i] = Mij
 *                 tmp = <Py_ssize_t*> PyMem_Realloc(<void*> ij_dld[i], Mij*sizeof(Py_ssize_t))
 *                 if tmp is NULL:             # <<<<<<<<<<<<<<
 *                     free_Pysst_2dmat(ij_dld, N_1)
 *                     return NULL
 */
        __pyx_t_1 = ((__pyx_v_tmp == NULL) != 0);
        if (__pyx_t_1) {

          /* "fmsne_implem.pyx":2382
 *                 tmp = <Py_ssize_t*> PyMem_Realloc(<void*> ij_dld[i], Mij*sizeof(Py_ssize_t))
 *                 if tmp is NULL:
 *                     free_Pysst_2dmat(ij_dld, N_1)             # <<<<<<<<<<<<<<
 *                     return NULL
 *                 ij_dld[i] = tmp
 */
          __pyx_f_12fmsne_implem_free_Pysst_2dmat(__pyx_v_ij_dld, __pyx_v_N_1);

          /* "fmsne_implem.pyx":2383
 *                 if tmp is NULL:
 *                     free_Pysst_2dmat(ij_dld, N_1)
 *                     return NULL             # <<<<<<<<<<<<<<
 *                 ij_dld[i] = tmp
 *         # Managing the i = N-1 in nn_i_rs_id_dld
 */
          __pyx_r = NULL;
          goto __pyx_L0;

          /* "fmsne_implem.pyx":2381
 *                 ni_dld[i] = Mij
 *                 tmp = <Py_ssize_t*> PyMem_Realloc(<void*> ij_dld[i], Mij*sizeof(Py_ssize_t))
 *                 if tmp is NULL:             # <<<<<<<<<<<<<<
 *                     free_Pysst_2dmat(ij_dld, N_1)
 *                     return NULL
 */
        }

        /* "fmsne_implem.pyx":2384
 *                     free_Pysst_2dmat(ij_dld, N_1)
 *                     return NULL
 *                 ij_dld[i] = tmp             # <<<<<<<<<<<<<<
 *         # Managing the i = N-1 in nn_i_rs_id_dld
 *         for rs in range(n_rs):
 */
        (__pyx_v_ij_dld[__pyx_v_i]) = __pyx_v_tmp;

        /* "fmsne_implem.pyx":2378
 *                             free_Pysst_2dmat(ij_dld, N_1)
 *                             return NULL
 *             if Mij < ni_dld[i]:             # <<<<<<<<<<<<<<
 *                 ni_dld[i] = Mij
 *                 tmp = <Py_ssize_t*> PyMem_Realloc(<void*> ij_dld[i], Mij*sizeof(Py_ssize_t))
 */
      }
    }

    /* "fmsne_implem.pyx":2386
 *                 ij_dld[i] = tmp
 *         # Managing the i = N-1 in nn_i_rs_id_dld
 *         for rs in range(n_rs):             # <<<<<<<<<<<<<<
 *             for idj in range(nnn_i_rs[rs][N_1]):
 *                 i = arr_nn_i_rs[rs][N_1][idj]
 */
    __pyx_t_2 = __pyx_v_n_rs;
    __pyx_t_3 = __pyx_t_2;
    for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
      __pyx_v_rs = __pyx_t_4;

      /* "fmsne_implem.pyx":2387
 *         # Managing the i = N-1 in nn_i_rs_id_dld
 *         for rs in range(n_rs):
 *             for idj in range(nnn_i_rs[rs][N_1]):             # <<<<<<<<<<<<<<
 *                 i = arr_nn_i_rs[rs][N_1][idj]
 *                 for j in range(ni_dld[i]):
 */
      __pyx_t_8 = ((__pyx_v_nnn_i_rs[__pyx_v_rs])[__pyx_v_N_1]);
      __pyx_t_9 = __pyx_t_8;
      for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_9; __pyx_t_5+=1) {
        __pyx_v_idj = __pyx_t_5;

        /* "fmsne_implem.pyx":2388
 *         for rs in range(n_rs):
 *             for idj in range(nnn_i_rs[rs][N_1]):
 *                 i = arr_nn_i_rs[rs][N_1][idj]             # <<<<<<<<<<<<<<
 *                 for j in range(ni_dld[i]):
 *                     if ij_dld[i][j] == N_1:
 */
        __pyx_v_i = (((__pyx_v_arr_nn_i_rs[__pyx_v_rs])[__pyx_v_N_1])[__pyx_v_idj]);

        /* "fmsne_implem.pyx":2389
 *             for idj in range(nnn_i_rs[rs][N_1]):
 *                 i = arr_nn_i_rs[rs][N_1][idj]
 *                 for j in range(ni_dld[i]):             # <<<<<<<<<<<<<<
 *                     if ij_dld[i][j] == N_1:
 *                         nn_i_rs_id_dld[rs][N_1][idj] = j
 */
        __pyx_t_6 = (__pyx_v_ni_dld[__pyx_v_i]);
        __pyx_t_7 = __pyx_t_6;
        for (__pyx_t_10 = 0; __pyx_t_10 < __pyx_t_7; __pyx_t_10+=1) {
          __pyx_v_j = __pyx_t_10;

          /* "fmsne_implem.pyx":2390
 *                 i = arr_nn_i_rs[rs][N_1][idj]
 *                 for j in range(ni_dld[i]):
 *                     if ij_dld[i][j] == N_1:             # <<<<<<<<<<<<<<
 *                         nn_i_rs_id_dld[rs][N_1][idj] = j
 *                         break
 */
          __pyx_t_1 = ((((__pyx_v_ij_dld[__pyx_v_i])[__pyx_v_j]) == __pyx_v_N_1) != 0);
          if (__pyx_t_1) {

            /* "fmsne_implem.pyx":2391
 *                 for j in range(ni_dld[i]):
 *                     if ij_dld[i][j] == N_1:
 *                         nn_i_rs_id_dld[rs][N_1][idj] = j             # <<<<<<<<<<<<<<
 *                         break
 *                 else:
 */
            (((__pyx_v_nn_i_rs_id_dld[__pyx_v_rs])[__pyx_v_N_1])[__pyx_v_idj]) = __pyx_v_j;

            /* "fmsne_implem.pyx":2392
 *                     if ij_dld[i][j] == N_1:
 *                         nn_i_rs_id_dld[rs][N_1][idj] = j
 *                         break             # <<<<<<<<<<<<<<
 *                 else:
 *                     free_Pysst_2dmat(ij_dld, N_1)
 */
            goto __pyx_L40_break;

            /* "fmsne_implem.pyx":2390
 *                 i = arr_nn_i_rs[rs][N_1][idj]
 *                 for j in range(ni_dld[i]):
 *                     if ij_dld[i][j] == N_1:             # <<<<<<<<<<<<<<
 *                         nn_i_rs_id_dld[rs][N_1][idj] = j
 *                         break
 */
          }
        }
        /*else*/ {

          /* "fmsne_implem.pyx":2394
 *                         break
 *                 else:
 *                     free_Pysst_2dmat(ij_dld, N_1)             # <<<<<<<<<<<<<<
 *                     return NULL
 *     else:
 */
          __pyx_f_12fmsne_implem_free_Pysst_2dmat(__pyx_v_ij_dld, __pyx_v_N_1);

          /* "fmsne_implem.pyx":2395
 *                 else:
 *                     free_Pysst_2dmat(ij_dld, N_1)
 *                     return NULL             # <<<<<<<<<<<<<<
 *     else:
 *         memset(ni_dld, 0, siz_ni_dld)
 */
          __pyx_r = NULL;
          goto __pyx_L0;
        }
        __pyx_L40_break:;
      }
    }

    /* "fmsne_implem.pyx":2355
 *         return NULL
 *     # Filling ij_dld
 *     if sym_nn:             # <<<<<<<<<<<<<<
 *         for i in range(N_1):
 *             Mij = 0
 */
    goto __pyx_L19;
  }

  /* "fmsne_implem.pyx":2397
 *                     return NULL
 *     else:
 *         memset(ni_dld, 0, siz_ni_dld)             # <<<<<<<<<<<<<<
 *         for rs in range(n_rs):
 *             # i must range to N since the neighbor sets are not symmetric
 */
  /*else*/ {
    (void)(memset(__pyx_v_ni_dld, 0, __pyx_v_siz_ni_dld));

    /* "fmsne_implem.pyx":2398
 *     else:
 *         memset(ni_dld, 0, siz_ni_dld)
 *         for rs in range(n_rs):             # <<<<<<<<<<<<<<
 *             # i must range to N since the neighbor sets are not symmetric
 *             for i in range(N):
 */
    __pyx_t_2 = __pyx_v_n_rs;
    __pyx_t_3 = __pyx_t_2;
    for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
      __pyx_v_rs = __pyx_t_4;

      /* "fmsne_implem.pyx":2400
 *         for rs in range(n_rs):
 *             # i must range to N since the neighbor sets are not symmetric
 *             for i in range(N):             # <<<<<<<<<<<<<<
 *                 for idj in range(nnn_i_rs[rs][i]):
 *                     j = arr_nn_i_rs[rs][i][idj]
 */
      __pyx_t_5 = __pyx_v_N;
      __pyx_t_6 = __pyx_t_5;
      for (__pyx_t_7 = 0; __pyx_t_7 < __pyx_t_6; __pyx_t_7+=1) {
        __pyx_v_i = __pyx_t_7;

        /* "fmsne_implem.pyx":2401
 *             # i must range to N since the neighbor sets are not symmetric
 *             for i in range(N):
 *                 for idj in range(nnn_i_rs[rs][i]):             # <<<<<<<<<<<<<<
 *                     j = arr_nn_i_rs[rs][i][idj]
 *                     if i<j:
 */
        __pyx_t_8 = ((__pyx_v_nnn_i_rs[__pyx_v_rs])[__pyx_v_i]);
        __pyx_t_9 = __pyx_t_8;
        for (__pyx_t_10 = 0; __pyx_t_10 < __pyx_t_9; __pyx_t_10+=1) {
          __pyx_v_idj = __pyx_t_10;

          /* "fmsne_implem.pyx":2402
 *             for i in range(N):
 *                 for idj in range(nnn_i_rs[rs][i]):
 *                     j = arr_nn_i_rs[rs][i][idj]             # <<<<<<<<<<<<<<
 *                     if i<j:
 *                         Mij = j
 */
          __pyx_v_j = (((__pyx_v_arr_nn_i_rs[__pyx_v_rs])[__pyx_v_i])[__pyx_v_idj]);

          /* "fmsne_implem.pyx":2403
 *                 for idj in range(nnn_i_rs[rs][i]):
 *                     j = arr_nn_i_rs[rs][i][idj]
 *                     if i<j:             # <<<<<<<<<<<<<<
 *                         Mij = j
 *                         mij = i
 */
          __pyx_t_1 = ((__pyx_v_i < __pyx_v_j) != 0);
          if (__pyx_t_1) {

            /* "fmsne_implem.pyx":2404
 *                     j = arr_nn_i_rs[rs][i][idj]
 *                     if i<j:
 *                         Mij = j             # <<<<<<<<<<<<<<
 *                         mij = i
 *                     else:
 */
            __pyx_v_Mij = __pyx_v_j;

            /* "fmsne_implem.pyx":2405
 *                     if i<j:
 *                         Mij = j
 *                         mij = i             # <<<<<<<<<<<<<<
 *                     else:
 *                         Mij = i
 */
            __pyx_v_mij = __pyx_v_i;

            /* "fmsne_implem.pyx":2403
 *                 for idj in range(nnn_i_rs[rs][i]):
 *                     j = arr_nn_i_rs[rs][i][idj]
 *                     if i<j:             # <<<<<<<<<<<<<<
 *                         Mij = j
 *                         mij = i
 */
            goto __pyx_L48;
          }

          /* "fmsne_implem.pyx":2407
 *                         mij = i
 *                     else:
 *                         Mij = i             # <<<<<<<<<<<<<<
 *                         mij = j
 *                     for j in range(ni_dld[mij]):
 */
          /*else*/ {
            __pyx_v_Mij = __pyx_v_i;

            /* "fmsne_implem.pyx":2408
 *                     else:
 *                         Mij = i
 *                         mij = j             # <<<<<<<<<<<<<<
 *                     for j in range(ni_dld[mij]):
 *                         if ij_dld[mij][j] == Mij:
 */
            __pyx_v_mij = __pyx_v_j;
          }
          __pyx_L48:;

          /* "fmsne_implem.pyx":2409
 *                         Mij = i
 *                         mij = j
 *                     for j in range(ni_dld[mij]):             # <<<<<<<<<<<<<<
 *                         if ij_dld[mij][j] == Mij:
 *                             nn_i_rs_id_dld[rs][i][idj] = j
 */
          __pyx_t_11 = (__pyx_v_ni_dld[__pyx_v_mij]);
          __pyx_t_12 = __pyx_t_11;
          for (__pyx_t_13 = 0; __pyx_t_13 < __pyx_t_12; __pyx_t_13+=1) {
            __pyx_v_j = __pyx_t_13;

            /* "fmsne_implem.pyx":2410
 *                         mij = j
 *                     for j in range(ni_dld[mij]):
 *                         if ij_dld[mij][j] == Mij:             # <<<<<<<<<<<<<<
 *                             nn_i_rs_id_dld[rs][i][idj] = j
 *                             break
 */
            __pyx_t_1 = ((((__pyx_v_ij_dld[__pyx_v_mij])[__pyx_v_j]) == __pyx_v_Mij) != 0);
            if (__pyx_t_1) {

              /* "fmsne_implem.pyx":2411
 *                     for j in range(ni_dld[mij]):
 *                         if ij_dld[mij][j] == Mij:
 *                             nn_i_rs_id_dld[rs][i][idj] = j             # <<<<<<<<<<<<<<
 *                             break
 *                     else:
 */
              (((__pyx_v_nn_i_rs_id_dld[__pyx_v_rs])[__pyx_v_i])[__pyx_v_idj]) = __pyx_v_j;

              /* "fmsne_implem.pyx":2412
 *                         if ij_dld[mij][j] == Mij:
 *                             nn_i_rs_id_dld[rs][i][idj] = j
 *                             break             # <<<<<<<<<<<<<<
 *                     else:
 *                         nn_i_rs_id_dld[rs][i][idj] = ni_dld[mij]
 */
              goto __pyx_L50_break;

              /* "fmsne_implem.pyx":2410
 *                         mij = j
 *                     for j in range(ni_dld[mij]):
 *                         if ij_dld[mij][j] == Mij:             # <<<<<<<<<<<<<<
 *                             nn_i_rs_id_dld[rs][i][idj] = j
 *                             break
 */
            }
          }
          /*else*/ {

            /* "fmsne_implem.pyx":2414
 *                             break
 *                     else:
 *                         nn_i_rs_id_dld[rs][i][idj] = ni_dld[mij]             # <<<<<<<<<<<<<<
 *                         ij_dld[mij][ni_dld[mij]] = Mij
 *                         ni_dld[mij] += 1
 */
            (((__pyx_v_nn_i_rs_id_dld[__pyx_v_rs])[__pyx_v_i])[__pyx_v_idj]) = (__pyx_v_ni_dld[__pyx_v_mij]);

            /* "fmsne_implem.pyx":2415
 *                     else:
 *                         nn_i_rs_id_dld[rs][i][idj] = ni_dld[mij]
 *                         ij_dld[mij][ni_dld[mij]] = Mij             # <<<<<<<<<<<<<<
 *                         ni_dld[mij] += 1
 *         # Reallocating
 */
            ((__pyx_v_ij_dld[__pyx_v_mij])[(__pyx_v_ni_dld[__pyx_v_mij])]) = __pyx_v_Mij;

            /* "fmsne_implem.pyx":2416
 *                         nn_i_rs_id_dld[rs][i][idj] = ni_dld[mij]
 *                         ij_dld[mij][ni_dld[mij]] = Mij
 *                         ni_dld[mij] += 1             # <<<<<<<<<<<<<<
 *         # Reallocating
 *         for i in range(N_1):
 */
            __pyx_t_13 = __pyx_v_mij;
            (__pyx_v_ni_dld[__pyx_t_13]) = ((__pyx_v_ni_dld[__pyx_t_13]) + 1);
          }
          __pyx_L50_break:;
        }
      }
    }

    /* "fmsne_implem.pyx":2418
 *                         ni_dld[mij] += 1
 *         # Reallocating
 *         for i in range(N_1):             # <<<<<<<<<<<<<<
 *             tmp = <Py_ssize_t*> PyMem_Realloc(<void*> ij_dld[i], ni_dld[i]*sizeof(Py_ssize_t))
 *             if tmp is NULL:
 */
    __pyx_t_2 = __pyx_v_N_1;
    __pyx_t_3 = __pyx_t_2;
    for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
      __pyx_v_i = __pyx_t_4;

      /* "fmsne_implem.pyx":2419
 *         # Reallocating
 *         for i in range(N_1):
 *             tmp = <Py_ssize_t*> PyMem_Realloc(<void*> ij_dld[i], ni_dld[i]*sizeof(Py_ssize_t))             # <<<<<<<<<<<<<<
 *             if tmp is NULL:
 *                 free_Pysst_2dmat(ij_dld, N_1)
 */
      __pyx_v_tmp = ((Py_ssize_t *)PyMem_Realloc(((void *)(__pyx_v_ij_dld[__pyx_v_i])), ((__pyx_v_ni_dld[__pyx_v_i]) * (sizeof(Py_ssize_t)))));

      /* "fmsne_implem.pyx":2420
 *         for i in range(N_1):
 *             tmp = <Py_ssize_t*> PyMem_Realloc(<void*> ij_dld[i], ni_dld[i]*sizeof(Py_ssize_t))
 *             if tmp is NULL:             # <<<<<<<<<<<<<<
 *                 free_Pysst_2dmat(ij_dld, N_1)
 *                 return NULL
 */
      __pyx_t_1 = ((__pyx_v_tmp == NULL) != 0);
      if (__pyx_t_1) {

        /* "fmsne_implem.pyx":2421
 *             tmp = <Py_ssize_t*> PyMem_Realloc(<void*> ij_dld[i], ni_dld[i]*sizeof(Py_ssize_t))
 *             if tmp is NULL:
 *                 free_Pysst_2dmat(ij_dld, N_1)             # <<<<<<<<<<<<<<
 *                 return NULL
 *             ij_dld[i] = tmp
 */
        __pyx_f_12fmsne_implem_free_Pysst_2dmat(__pyx_v_ij_dld, __pyx_v_N_1);

        /* "fmsne_implem.pyx":2422
 *             if tmp is NULL:
 *                 free_Pysst_2dmat(ij_dld, N_1)
 *                 return NULL             # <<<<<<<<<<<<<<
 *             ij_dld[i] = tmp
 *     # Multiplying the elements of ij_dld by n_components
 */
        __pyx_r = NULL;
        goto __pyx_L0;

        /* "fmsne_implem.pyx":2420
 *         for i in range(N_1):
 *             tmp = <Py_ssize_t*> PyMem_Realloc(<void*> ij_dld[i], ni_dld[i]*sizeof(Py_ssize_t))
 *             if tmp is NULL:             # <<<<<<<<<<<<<<
 *                 free_Pysst_2dmat(ij_dld, N_1)
 *                 return NULL
 */
      }

      /* "fmsne_implem.pyx":2423
 *                 free_Pysst_2dmat(ij_dld, N_1)
 *                 return NULL
 *             ij_dld[i] = tmp             # <<<<<<<<<<<<<<
 *     # Multiplying the elements of ij_dld by n_components
 *     for i in range(N_1):
 */
      (__pyx_v_ij_dld[__pyx_v_i]) = __pyx_v_tmp;
    }
  }
  __pyx_L19:;

  /* "fmsne_implem.pyx":2425
 *             ij_dld[i] = tmp
 *     # Multiplying the elements of ij_dld by n_components
 *     for i in range(N_1):             # <<<<<<<<<<<<<<
 *         for j in range(ni_dld[i]):
 *             ij_dld[i][j] *= n_components
 */
  __pyx_t_2 = __pyx_v_N_1;
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "fmsne_implem.pyx":2426
 *     # Multiplying the elements of ij_dld by n_components
 *     for i in range(N_1):
 *         for j in range(ni_dld[i]):             # <<<<<<<<<<<<<<
 *             ij_dld[i][j] *= n_components
 *     # Returning
 */
    __pyx_t_5 = (__pyx_v_ni_dld[__pyx_v_i]);
    __pyx_t_6 = __pyx_t_5;
    for (__pyx_t_7 = 0; __pyx_t_7 < __pyx_t_6; __pyx_t_7+=1) {
      __pyx_v_j = __pyx_t_7;

      /* "fmsne_implem.pyx":2427
 *     for i in range(N_1):
 *         for j in range(ni_dld[i]):
 *             ij_dld[i][j] *= n_components             # <<<<<<<<<<<<<<
 *     # Returning
 *     return ij_dld
 */
      __pyx_t_10 = __pyx_v_i;
      __pyx_t_11 = __pyx_v_j;
      ((__pyx_v_ij_dld[__pyx_t_10])[__pyx_t_11]) = (((__pyx_v_ij_dld[__pyx_t_10])[__pyx_t_11]) * __pyx_v_n_components);
    }
  }

  /* "fmsne_implem.pyx":2429
 *             ij_dld[i][j] *= n_components
 *     # Returning
 *     return ij_dld             # <<<<<<<<<<<<<<
 * 
 * cdef inline void f_ldprec(int n_components, double Nd, double* xlds, int prod_N_nc, bint fit_U, Py_ssize_t n_rs, Py_ssize_t L, Py_ssize_t N, double*** tau_h_i_rs, int* K_h, double** p_h_rs, double** t_h_rs, double* p_h, double* t_h, int N_1) nogil:
 */
  __pyx_r = __pyx_v_ij_dld;
  goto __pyx_L0;

  /* "fmsne_implem.pyx":2325
 *     return False
 * 
 * cdef inline Py_ssize_t** fms_nn_dld_match(Py_ssize_t*** nn_i_rs_id_dld, Py_ssize_t* ni_dld, size_t siz_ni_dld, Py_ssize_t n_rs, Py_ssize_t N_1, Py_ssize_t N, int** nnn_i_rs, int*** arr_nn_i_rs, bint sym_nn, Py_ssize_t n_components):             # <<<<<<<<<<<<<<
 *     """
 *     sym_nn is True if the neighbor sets are symmetric and False otherwise.
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "fmsne_implem.pyx":2431
 *     return ij_dld
 * 
 * cdef inline void f_ldprec(int n_components, double Nd, double* xlds, int prod_N_nc, bint fit_U, Py_ssize_t n_rs, Py_ssize_t L, Py_ssize_t N, double*** tau_h_i_rs, int* K_h, double** p_h_rs, double** t_h_rs, double* p_h, double* t_h, int N_1) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     """
 */

static CYTHON_INLINE void __pyx_f_12fmsne_implem_f_ldprec(int __pyx_v_n_components, double __pyx_v_Nd, double *__pyx_v_xlds, int __pyx_v_prod_N_nc, int __pyx_v_fit_U, Py_ssize_t __pyx_v_n_rs, Py_ssize_t __pyx_v_L, Py_ssize_t __pyx_v_N, double ***__pyx_v_tau_h_i_rs, int *__pyx_v_K_h, double **__pyx_v_p_h_rs, double **__pyx_v_t_h_rs, double *__pyx_v_p_h, double *__pyx_v_t_h, int __pyx_v_N_1) {
  int __pyx_v_isnc2;
  double __pyx_v_div2N;
  double __pyx_v_Dhmax;
  double __pyx_v_td;
  double __pyx_v_mf;
  double __pyx_v_ihncf;
  double __pyx_v_ihncfexp;
  double __pyx_v_n_c_f;
  double __pyx_v_mean_var_X_lds;
  Py_ssize_t __pyx_v_rs;
  Py_ssize_t __pyx_v_i;
  Py_ssize_t __pyx_v_k;
  Py_ssize_t __pyx_v_h;
  Py_ssize_t __pyx_v_L_1;
  int __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  Py_ssize_t __pyx_t_7;
  Py_ssize_t __pyx_t_8;
  Py_ssize_t __pyx_t_9;
  Py_ssize_t __pyx_t_10;

  /* "fmsne_implem.pyx":2434
 *     """
 *     """
 *     cdef bint isnc2 = n_components == 2             # <<<<<<<<<<<<<<
 *     cdef double div2N, Dhmax, td, mf, ihncf, ihncfexp, n_c_f, mean_var_X_lds
 *     n_c_f = <double> n_components
 */
  __pyx_v_isnc2 = (__pyx_v_n_components == 2);

  /* "fmsne_implem.pyx":2436
 *     cdef bint isnc2 = n_components == 2
 *     cdef double div2N, Dhmax, td, mf, ihncf, ihncfexp, n_c_f, mean_var_X_lds
 *     n_c_f = <double> n_components             # <<<<<<<<<<<<<<
 *     if isnc2:
 *         ihncf = 1.0
 */
  __pyx_v_n_c_f = ((double)__pyx_v_n_components);

  /* "fmsne_implem.pyx":2437
 *     cdef double div2N, Dhmax, td, mf, ihncf, ihncfexp, n_c_f, mean_var_X_lds
 *     n_c_f = <double> n_components
 *     if isnc2:             # <<<<<<<<<<<<<<
 *         ihncf = 1.0
 *         ihncfexp = 4.0
 */
  __pyx_t_1 = (__pyx_v_isnc2 != 0);
  if (__pyx_t_1) {

    /* "fmsne_implem.pyx":2438
 *     n_c_f = <double> n_components
 *     if isnc2:
 *         ihncf = 1.0             # <<<<<<<<<<<<<<
 *         ihncfexp = 4.0
 *     else:
 */
    __pyx_v_ihncf = 1.0;

    /* "fmsne_implem.pyx":2439
 *     if isnc2:
 *         ihncf = 1.0
 *         ihncfexp = 4.0             # <<<<<<<<<<<<<<
 *     else:
 *         ihncf = 2.0/n_c_f
 */
    __pyx_v_ihncfexp = 4.0;

    /* "fmsne_implem.pyx":2437
 *     cdef double div2N, Dhmax, td, mf, ihncf, ihncfexp, n_c_f, mean_var_X_lds
 *     n_c_f = <double> n_components
 *     if isnc2:             # <<<<<<<<<<<<<<
 *         ihncf = 1.0
 *         ihncfexp = 4.0
 */
    goto __pyx_L3;
  }

  /* "fmsne_implem.pyx":2441
 *         ihncfexp = 4.0
 *     else:
 *         ihncf = 2.0/n_c_f             # <<<<<<<<<<<<<<
 *         ihncfexp = pow(2.0, 1.0+ihncf)
 *     mean_var_X_lds = eval_mean_var_X_lds(Nd, n_components, xlds, prod_N_nc, n_c_f, <double> N_1)
 */
  /*else*/ {
    __pyx_v_ihncf = (2.0 / __pyx_v_n_c_f);

    /* "fmsne_implem.pyx":2442
 *     else:
 *         ihncf = 2.0/n_c_f
 *         ihncfexp = pow(2.0, 1.0+ihncf)             # <<<<<<<<<<<<<<
 *     mean_var_X_lds = eval_mean_var_X_lds(Nd, n_components, xlds, prod_N_nc, n_c_f, <double> N_1)
 *     cdef Py_ssize_t rs, i, k, h, L_1
 */
    __pyx_v_ihncfexp = pow(2.0, (1.0 + __pyx_v_ihncf));
  }
  __pyx_L3:;

  /* "fmsne_implem.pyx":2443
 *         ihncf = 2.0/n_c_f
 *         ihncfexp = pow(2.0, 1.0+ihncf)
 *     mean_var_X_lds = eval_mean_var_X_lds(Nd, n_components, xlds, prod_N_nc, n_c_f, <double> N_1)             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t rs, i, k, h, L_1
 *     if fit_U:
 */
  __pyx_v_mean_var_X_lds = __pyx_f_12fmsne_implem_eval_mean_var_X_lds(__pyx_v_Nd, __pyx_v_n_components, __pyx_v_xlds, __pyx_v_prod_N_nc, __pyx_v_n_c_f, ((double)__pyx_v_N_1));

  /* "fmsne_implem.pyx":2445
 *     mean_var_X_lds = eval_mean_var_X_lds(Nd, n_components, xlds, prod_N_nc, n_c_f, <double> N_1)
 *     cdef Py_ssize_t rs, i, k, h, L_1
 *     if fit_U:             # <<<<<<<<<<<<<<
 *         div2N = msld_def_div2N(isnc2, Nd, n_c_f)
 *         L_1 = L-1
 */
  __pyx_t_1 = (__pyx_v_fit_U != 0);
  if (__pyx_t_1) {

    /* "fmsne_implem.pyx":2446
 *     cdef Py_ssize_t rs, i, k, h, L_1
 *     if fit_U:
 *         div2N = msld_def_div2N(isnc2, Nd, n_c_f)             # <<<<<<<<<<<<<<
 *         L_1 = L-1
 *         for rs in range(n_rs):
 */
    __pyx_v_div2N = __pyx_f_12fmsne_implem_msld_def_div2N(__pyx_v_isnc2, __pyx_v_Nd, __pyx_v_n_c_f);

    /* "fmsne_implem.pyx":2447
 *     if fit_U:
 *         div2N = msld_def_div2N(isnc2, Nd, n_c_f)
 *         L_1 = L-1             # <<<<<<<<<<<<<<
 *         for rs in range(n_rs):
 *             # Computing the U and storing it in mf
 */
    __pyx_v_L_1 = (__pyx_v_L - 1);

    /* "fmsne_implem.pyx":2448
 *         div2N = msld_def_div2N(isnc2, Nd, n_c_f)
 *         L_1 = L-1
 *         for rs in range(n_rs):             # <<<<<<<<<<<<<<
 *             # Computing the U and storing it in mf
 *             Dhmax = -DBL_MAX
 */
    __pyx_t_2 = __pyx_v_n_rs;
    __pyx_t_3 = __pyx_t_2;
    for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
      __pyx_v_rs = __pyx_t_4;

      /* "fmsne_implem.pyx":2450
 *         for rs in range(n_rs):
 *             # Computing the U and storing it in mf
 *             Dhmax = -DBL_MAX             # <<<<<<<<<<<<<<
 *             for h in range(L_1):
 *                 mf = 0.0
 */
      __pyx_v_Dhmax = (-DBL_MAX);

      /* "fmsne_implem.pyx":2451
 *             # Computing the U and storing it in mf
 *             Dhmax = -DBL_MAX
 *             for h in range(L_1):             # <<<<<<<<<<<<<<
 *                 mf = 0.0
 *                 k = h+1
 */
      __pyx_t_5 = __pyx_v_L_1;
      __pyx_t_6 = __pyx_t_5;
      for (__pyx_t_7 = 0; __pyx_t_7 < __pyx_t_6; __pyx_t_7+=1) {
        __pyx_v_h = __pyx_t_7;

        /* "fmsne_implem.pyx":2452
 *             Dhmax = -DBL_MAX
 *             for h in range(L_1):
 *                 mf = 0.0             # <<<<<<<<<<<<<<
 *                 k = h+1
 *                 for i in range(N):
 */
        __pyx_v_mf = 0.0;

        /* "fmsne_implem.pyx":2453
 *             for h in range(L_1):
 *                 mf = 0.0
 *                 k = h+1             # <<<<<<<<<<<<<<
 *                 for i in range(N):
 *                     td = log2(tau_h_i_rs[k][rs][i]) - log2(tau_h_i_rs[h][rs][i])
 */
        __pyx_v_k = (__pyx_v_h + 1);

        /* "fmsne_implem.pyx":2454
 *                 mf = 0.0
 *                 k = h+1
 *                 for i in range(N):             # <<<<<<<<<<<<<<
 *                     td = log2(tau_h_i_rs[k][rs][i]) - log2(tau_h_i_rs[h][rs][i])
 *                     if td >= DBL_MIN:
 */
        __pyx_t_8 = __pyx_v_N;
        __pyx_t_9 = __pyx_t_8;
        for (__pyx_t_10 = 0; __pyx_t_10 < __pyx_t_9; __pyx_t_10+=1) {
          __pyx_v_i = __pyx_t_10;

          /* "fmsne_implem.pyx":2455
 *                 k = h+1
 *                 for i in range(N):
 *                     td = log2(tau_h_i_rs[k][rs][i]) - log2(tau_h_i_rs[h][rs][i])             # <<<<<<<<<<<<<<
 *                     if td >= DBL_MIN:
 *                         mf += 1.0/td
 */
          __pyx_v_td = (log2((((__pyx_v_tau_h_i_rs[__pyx_v_k])[__pyx_v_rs])[__pyx_v_i])) - log2((((__pyx_v_tau_h_i_rs[__pyx_v_h])[__pyx_v_rs])[__pyx_v_i])));

          /* "fmsne_implem.pyx":2456
 *                 for i in range(N):
 *                     td = log2(tau_h_i_rs[k][rs][i]) - log2(tau_h_i_rs[h][rs][i])
 *                     if td >= DBL_MIN:             # <<<<<<<<<<<<<<
 *                         mf += 1.0/td
 *                 if mf > Dhmax:
 */
          __pyx_t_1 = ((__pyx_v_td >= DBL_MIN) != 0);
          if (__pyx_t_1) {

            /* "fmsne_implem.pyx":2457
 *                     td = log2(tau_h_i_rs[k][rs][i]) - log2(tau_h_i_rs[h][rs][i])
 *                     if td >= DBL_MIN:
 *                         mf += 1.0/td             # <<<<<<<<<<<<<<
 *                 if mf > Dhmax:
 *                     Dhmax = mf
 */
            __pyx_v_mf = (__pyx_v_mf + (1.0 / __pyx_v_td));

            /* "fmsne_implem.pyx":2456
 *                 for i in range(N):
 *                     td = log2(tau_h_i_rs[k][rs][i]) - log2(tau_h_i_rs[h][rs][i])
 *                     if td >= DBL_MIN:             # <<<<<<<<<<<<<<
 *                         mf += 1.0/td
 *                 if mf > Dhmax:
 */
          }
        }

        /* "fmsne_implem.pyx":2458
 *                     if td >= DBL_MIN:
 *                         mf += 1.0/td
 *                 if mf > Dhmax:             # <<<<<<<<<<<<<<
 *                     Dhmax = mf
 *             mf = Dhmax*div2N
 */
        __pyx_t_1 = ((__pyx_v_mf > __pyx_v_Dhmax) != 0);
        if (__pyx_t_1) {

          /* "fmsne_implem.pyx":2459
 *                         mf += 1.0/td
 *                 if mf > Dhmax:
 *                     Dhmax = mf             # <<<<<<<<<<<<<<
 *             mf = Dhmax*div2N
 *             if mf < 1.0:
 */
          __pyx_v_Dhmax = __pyx_v_mf;

          /* "fmsne_implem.pyx":2458
 *                     if td >= DBL_MIN:
 *                         mf += 1.0/td
 *                 if mf > Dhmax:             # <<<<<<<<<<<<<<
 *                     Dhmax = mf
 *             mf = Dhmax*div2N
 */
        }
      }

      /* "fmsne_implem.pyx":2460
 *                 if mf > Dhmax:
 *                     Dhmax = mf
 *             mf = Dhmax*div2N             # <<<<<<<<<<<<<<
 *             if mf < 1.0:
 *                 mf = 1.0
 */
      __pyx_v_mf = (__pyx_v_Dhmax * __pyx_v_div2N);

      /* "fmsne_implem.pyx":2461
 *                     Dhmax = mf
 *             mf = Dhmax*div2N
 *             if mf < 1.0:             # <<<<<<<<<<<<<<
 *                 mf = 1.0
 *             elif mf > 2.0:
 */
      __pyx_t_1 = ((__pyx_v_mf < 1.0) != 0);
      if (__pyx_t_1) {

        /* "fmsne_implem.pyx":2462
 *             mf = Dhmax*div2N
 *             if mf < 1.0:
 *                 mf = 1.0             # <<<<<<<<<<<<<<
 *             elif mf > 2.0:
 *                 mf = 2.0
 */
        __pyx_v_mf = 1.0;

        /* "fmsne_implem.pyx":2461
 *                     Dhmax = mf
 *             mf = Dhmax*div2N
 *             if mf < 1.0:             # <<<<<<<<<<<<<<
 *                 mf = 1.0
 *             elif mf > 2.0:
 */
        goto __pyx_L13;
      }

      /* "fmsne_implem.pyx":2463
 *             if mf < 1.0:
 *                 mf = 1.0
 *             elif mf > 2.0:             # <<<<<<<<<<<<<<
 *                 mf = 2.0
 *             # Computing the LD precisions
 */
      __pyx_t_1 = ((__pyx_v_mf > 2.0) != 0);
      if (__pyx_t_1) {

        /* "fmsne_implem.pyx":2464
 *                 mf = 1.0
 *             elif mf > 2.0:
 *                 mf = 2.0             # <<<<<<<<<<<<<<
 *             # Computing the LD precisions
 *             if isnc2:
 */
        __pyx_v_mf = 2.0;

        /* "fmsne_implem.pyx":2463
 *             if mf < 1.0:
 *                 mf = 1.0
 *             elif mf > 2.0:             # <<<<<<<<<<<<<<
 *                 mf = 2.0
 *             # Computing the LD precisions
 */
      }
      __pyx_L13:;

      /* "fmsne_implem.pyx":2466
 *                 mf = 2.0
 *             # Computing the LD precisions
 *             if isnc2:             # <<<<<<<<<<<<<<
 *                 for h in range(L):
 *                     p_h_rs[h][rs] = pow(<double> K_h[h], mf)
 */
      __pyx_t_1 = (__pyx_v_isnc2 != 0);
      if (__pyx_t_1) {

        /* "fmsne_implem.pyx":2467
 *             # Computing the LD precisions
 *             if isnc2:
 *                 for h in range(L):             # <<<<<<<<<<<<<<
 *                     p_h_rs[h][rs] = pow(<double> K_h[h], mf)
 *             else:
 */
        __pyx_t_5 = __pyx_v_L;
        __pyx_t_6 = __pyx_t_5;
        for (__pyx_t_7 = 0; __pyx_t_7 < __pyx_t_6; __pyx_t_7+=1) {
          __pyx_v_h = __pyx_t_7;

          /* "fmsne_implem.pyx":2468
 *             if isnc2:
 *                 for h in range(L):
 *                     p_h_rs[h][rs] = pow(<double> K_h[h], mf)             # <<<<<<<<<<<<<<
 *             else:
 *                 for h in range(L):
 */
          ((__pyx_v_p_h_rs[__pyx_v_h])[__pyx_v_rs]) = pow(((double)(__pyx_v_K_h[__pyx_v_h])), __pyx_v_mf);
        }

        /* "fmsne_implem.pyx":2466
 *                 mf = 2.0
 *             # Computing the LD precisions
 *             if isnc2:             # <<<<<<<<<<<<<<
 *                 for h in range(L):
 *                     p_h_rs[h][rs] = pow(<double> K_h[h], mf)
 */
        goto __pyx_L14;
      }

      /* "fmsne_implem.pyx":2470
 *                     p_h_rs[h][rs] = pow(<double> K_h[h], mf)
 *             else:
 *                 for h in range(L):             # <<<<<<<<<<<<<<
 *                     p_h_rs[h][rs] = pow(<double> K_h[h], mf*ihncf)
 *             mf = max_arr2d_col(p_h_rs, L, rs)*ihncfexp
 */
      /*else*/ {
        __pyx_t_5 = __pyx_v_L;
        __pyx_t_6 = __pyx_t_5;
        for (__pyx_t_7 = 0; __pyx_t_7 < __pyx_t_6; __pyx_t_7+=1) {
          __pyx_v_h = __pyx_t_7;

          /* "fmsne_implem.pyx":2471
 *             else:
 *                 for h in range(L):
 *                     p_h_rs[h][rs] = pow(<double> K_h[h], mf*ihncf)             # <<<<<<<<<<<<<<
 *             mf = max_arr2d_col(p_h_rs, L, rs)*ihncfexp
 *             for h in range(L):
 */
          ((__pyx_v_p_h_rs[__pyx_v_h])[__pyx_v_rs]) = pow(((double)(__pyx_v_K_h[__pyx_v_h])), (__pyx_v_mf * __pyx_v_ihncf));
        }
      }
      __pyx_L14:;

      /* "fmsne_implem.pyx":2472
 *                 for h in range(L):
 *                     p_h_rs[h][rs] = pow(<double> K_h[h], mf*ihncf)
 *             mf = max_arr2d_col(p_h_rs, L, rs)*ihncfexp             # <<<<<<<<<<<<<<
 *             for h in range(L):
 *                 p_h_rs[h][rs] *= mean_var_X_lds
 */
      __pyx_v_mf = (__pyx_f_12fmsne_implem_max_arr2d_col(__pyx_v_p_h_rs, __pyx_v_L, __pyx_v_rs) * __pyx_v_ihncfexp);

      /* "fmsne_implem.pyx":2473
 *                     p_h_rs[h][rs] = pow(<double> K_h[h], mf*ihncf)
 *             mf = max_arr2d_col(p_h_rs, L, rs)*ihncfexp
 *             for h in range(L):             # <<<<<<<<<<<<<<
 *                 p_h_rs[h][rs] *= mean_var_X_lds
 *                 if p_h_rs[h][rs] < FLOAT64_EPS:
 */
      __pyx_t_5 = __pyx_v_L;
      __pyx_t_6 = __pyx_t_5;
      for (__pyx_t_7 = 0; __pyx_t_7 < __pyx_t_6; __pyx_t_7+=1) {
        __pyx_v_h = __pyx_t_7;

        /* "fmsne_implem.pyx":2474
 *             mf = max_arr2d_col(p_h_rs, L, rs)*ihncfexp
 *             for h in range(L):
 *                 p_h_rs[h][rs] *= mean_var_X_lds             # <<<<<<<<<<<<<<
 *                 if p_h_rs[h][rs] < FLOAT64_EPS:
 *                     p_h_rs[h][rs] = FLOAT64_EPS
 */
        __pyx_t_8 = __pyx_v_h;
        __pyx_t_9 = __pyx_v_rs;
        ((__pyx_v_p_h_rs[__pyx_t_8])[__pyx_t_9]) = (((__pyx_v_p_h_rs[__pyx_t_8])[__pyx_t_9]) * __pyx_v_mean_var_X_lds);

        /* "fmsne_implem.pyx":2475
 *             for h in range(L):
 *                 p_h_rs[h][rs] *= mean_var_X_lds
 *                 if p_h_rs[h][rs] < FLOAT64_EPS:             # <<<<<<<<<<<<<<
 *                     p_h_rs[h][rs] = FLOAT64_EPS
 *                 p_h_rs[h][rs] = mf/p_h_rs[h][rs]
 */
        __pyx_t_1 = ((((__pyx_v_p_h_rs[__pyx_v_h])[__pyx_v_rs]) < __pyx_v_12fmsne_implem_FLOAT64_EPS) != 0);
        if (__pyx_t_1) {

          /* "fmsne_implem.pyx":2476
 *                 p_h_rs[h][rs] *= mean_var_X_lds
 *                 if p_h_rs[h][rs] < FLOAT64_EPS:
 *                     p_h_rs[h][rs] = FLOAT64_EPS             # <<<<<<<<<<<<<<
 *                 p_h_rs[h][rs] = mf/p_h_rs[h][rs]
 *                 if p_h_rs[h][rs] < FLOAT64_EPS:
 */
          ((__pyx_v_p_h_rs[__pyx_v_h])[__pyx_v_rs]) = __pyx_v_12fmsne_implem_FLOAT64_EPS;

          /* "fmsne_implem.pyx":2475
 *             for h in range(L):
 *                 p_h_rs[h][rs] *= mean_var_X_lds
 *                 if p_h_rs[h][rs] < FLOAT64_EPS:             # <<<<<<<<<<<<<<
 *                     p_h_rs[h][rs] = FLOAT64_EPS
 *                 p_h_rs[h][rs] = mf/p_h_rs[h][rs]
 */
        }

        /* "fmsne_implem.pyx":2477
 *                 if p_h_rs[h][rs] < FLOAT64_EPS:
 *                     p_h_rs[h][rs] = FLOAT64_EPS
 *                 p_h_rs[h][rs] = mf/p_h_rs[h][rs]             # <<<<<<<<<<<<<<
 *                 if p_h_rs[h][rs] < FLOAT64_EPS:
 *                     t_h_rs[h][rs] = 2.0/FLOAT64_EPS
 */
        ((__pyx_v_p_h_rs[__pyx_v_h])[__pyx_v_rs]) = (__pyx_v_mf / ((__pyx_v_p_h_rs[__pyx_v_h])[__pyx_v_rs]));

        /* "fmsne_implem.pyx":2478
 *                     p_h_rs[h][rs] = FLOAT64_EPS
 *                 p_h_rs[h][rs] = mf/p_h_rs[h][rs]
 *                 if p_h_rs[h][rs] < FLOAT64_EPS:             # <<<<<<<<<<<<<<
 *                     t_h_rs[h][rs] = 2.0/FLOAT64_EPS
 *                 else:
 */
        __pyx_t_1 = ((((__pyx_v_p_h_rs[__pyx_v_h])[__pyx_v_rs]) < __pyx_v_12fmsne_implem_FLOAT64_EPS) != 0);
        if (__pyx_t_1) {

          /* "fmsne_implem.pyx":2479
 *                 p_h_rs[h][rs] = mf/p_h_rs[h][rs]
 *                 if p_h_rs[h][rs] < FLOAT64_EPS:
 *                     t_h_rs[h][rs] = 2.0/FLOAT64_EPS             # <<<<<<<<<<<<<<
 *                 else:
 *                     t_h_rs[h][rs] = 2.0/p_h_rs[h][rs]
 */
          ((__pyx_v_t_h_rs[__pyx_v_h])[__pyx_v_rs]) = (2.0 / __pyx_v_12fmsne_implem_FLOAT64_EPS);

          /* "fmsne_implem.pyx":2478
 *                     p_h_rs[h][rs] = FLOAT64_EPS
 *                 p_h_rs[h][rs] = mf/p_h_rs[h][rs]
 *                 if p_h_rs[h][rs] < FLOAT64_EPS:             # <<<<<<<<<<<<<<
 *                     t_h_rs[h][rs] = 2.0/FLOAT64_EPS
 *                 else:
 */
          goto __pyx_L22;
        }

        /* "fmsne_implem.pyx":2481
 *                     t_h_rs[h][rs] = 2.0/FLOAT64_EPS
 *                 else:
 *                     t_h_rs[h][rs] = 2.0/p_h_rs[h][rs]             # <<<<<<<<<<<<<<
 *                 if t_h_rs[h][rs] < FLOAT64_EPS:
 *                     t_h_rs[h][rs] = FLOAT64_EPS
 */
        /*else*/ {
          ((__pyx_v_t_h_rs[__pyx_v_h])[__pyx_v_rs]) = (2.0 / ((__pyx_v_p_h_rs[__pyx_v_h])[__pyx_v_rs]));
        }
        __pyx_L22:;

        /* "fmsne_implem.pyx":2482
 *                 else:
 *                     t_h_rs[h][rs] = 2.0/p_h_rs[h][rs]
 *                 if t_h_rs[h][rs] < FLOAT64_EPS:             # <<<<<<<<<<<<<<
 *                     t_h_rs[h][rs] = FLOAT64_EPS
 *     else:
 */
        __pyx_t_1 = ((((__pyx_v_t_h_rs[__pyx_v_h])[__pyx_v_rs]) < __pyx_v_12fmsne_implem_FLOAT64_EPS) != 0);
        if (__pyx_t_1) {

          /* "fmsne_implem.pyx":2483
 *                     t_h_rs[h][rs] = 2.0/p_h_rs[h][rs]
 *                 if t_h_rs[h][rs] < FLOAT64_EPS:
 *                     t_h_rs[h][rs] = FLOAT64_EPS             # <<<<<<<<<<<<<<
 *     else:
 *         ms_ldprec_nofitU(p_h, t_h, isnc2, L, K_h, ihncf, ihncfexp, mean_var_X_lds)
 */
          ((__pyx_v_t_h_rs[__pyx_v_h])[__pyx_v_rs]) = __pyx_v_12fmsne_implem_FLOAT64_EPS;

          /* "fmsne_implem.pyx":2482
 *                 else:
 *                     t_h_rs[h][rs] = 2.0/p_h_rs[h][rs]
 *                 if t_h_rs[h][rs] < FLOAT64_EPS:             # <<<<<<<<<<<<<<
 *                     t_h_rs[h][rs] = FLOAT64_EPS
 *     else:
 */
        }
      }
    }

    /* "fmsne_implem.pyx":2445
 *     mean_var_X_lds = eval_mean_var_X_lds(Nd, n_components, xlds, prod_N_nc, n_c_f, <double> N_1)
 *     cdef Py_ssize_t rs, i, k, h, L_1
 *     if fit_U:             # <<<<<<<<<<<<<<
 *         div2N = msld_def_div2N(isnc2, Nd, n_c_f)
 *         L_1 = L-1
 */
    goto __pyx_L4;
  }

  /* "fmsne_implem.pyx":2485
 *                     t_h_rs[h][rs] = FLOAT64_EPS
 *     else:
 *         ms_ldprec_nofitU(p_h, t_h, isnc2, L, K_h, ihncf, ihncfexp, mean_var_X_lds)             # <<<<<<<<<<<<<<
 * 
 * cdef inline double f_update_mso_step(Py_ssize_t k, Py_ssize_t h, Py_ssize_t n_rs, Py_ssize_t N, int** nnn_i_rs, double*** ds_nn_i_rs, double*** tau_h_i_rs, double*** simhd_ms_nn_i_rs, double*** simhd_h_nn_i_rs) nogil:
 */
  /*else*/ {
    __pyx_f_12fmsne_implem_ms_ldprec_nofitU(__pyx_v_p_h, __pyx_v_t_h, __pyx_v_isnc2, __pyx_v_L, __pyx_v_K_h, __pyx_v_ihncf, __pyx_v_ihncfexp, __pyx_v_mean_var_X_lds);
  }
  __pyx_L4:;

  /* "fmsne_implem.pyx":2431
 *     return ij_dld
 * 
 * cdef inline void f_ldprec(int n_components, double Nd, double* xlds, int prod_N_nc, bint fit_U, Py_ssize_t n_rs, Py_ssize_t L, Py_ssize_t N, double*** tau_h_i_rs, int* K_h, double** p_h_rs, double** t_h_rs, double* p_h, double* t_h, int N_1) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     """
 */

  /* function exit code */
}

/* "fmsne_implem.pyx":2487
 *         ms_ldprec_nofitU(p_h, t_h, isnc2, L, K_h, ihncf, ihncfexp, mean_var_X_lds)
 * 
 * cdef inline double f_update_mso_step(Py_ssize_t k, Py_ssize_t h, Py_ssize_t n_rs, Py_ssize_t N, int** nnn_i_rs, double*** ds_nn_i_rs, double*** tau_h_i_rs, double*** simhd_ms_nn_i_rs, double*** simhd_h_nn_i_rs) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     k refers to the number of currently considered scales, between 1 and the number of scales.
 */

static CYTHON_INLINE double __pyx_f_12fmsne_implem_f_update_mso_step(Py_ssize_t __pyx_v_k, Py_ssize_t __pyx_v_h, Py_ssize_t __pyx_v_n_rs, Py_ssize_t __pyx_v_N, int **__pyx_v_nnn_i_rs, double ***__pyx_v_ds_nn_i_rs, double ***__pyx_v_tau_h_i_rs, double ***__pyx_v_simhd_ms_nn_i_rs, double ***__pyx_v_simhd_h_nn_i_rs) {
  Py_ssize_t __pyx_v_rs;
  Py_ssize_t __pyx_v_i;
  Py_ssize_t __pyx_v_j;
  double __pyx_v_kd;
  double __pyx_v_ikd;
  double __pyx_r;
  int __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  Py_ssize_t __pyx_t_7;
  int __pyx_t_8;
  int __pyx_t_9;
  Py_ssize_t __pyx_t_10;

  /* "fmsne_implem.pyx":2495
 *     cdef double kd, ikd
 *     # Computing the multi-scale similarities for the current multi-scale optimization step
 *     if k == 1:             # <<<<<<<<<<<<<<
 *         # Computing the similarities at the last scale and storing them in simhd_ms_nn_i_rs
 *         for rs in range(n_rs):
 */
  __pyx_t_1 = ((__pyx_v_k == 1) != 0);
  if (__pyx_t_1) {

    /* "fmsne_implem.pyx":2497
 *     if k == 1:
 *         # Computing the similarities at the last scale and storing them in simhd_ms_nn_i_rs
 *         for rs in range(n_rs):             # <<<<<<<<<<<<<<
 *             for i in range(N):
 *                 sne_hdpinn_nolog(ds_nn_i_rs[rs][i], tau_h_i_rs[h][rs][i], nnn_i_rs[rs][i], simhd_ms_nn_i_rs[rs][i])
 */
    __pyx_t_2 = __pyx_v_n_rs;
    __pyx_t_3 = __pyx_t_2;
    for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
      __pyx_v_rs = __pyx_t_4;

      /* "fmsne_implem.pyx":2498
 *         # Computing the similarities at the last scale and storing them in simhd_ms_nn_i_rs
 *         for rs in range(n_rs):
 *             for i in range(N):             # <<<<<<<<<<<<<<
 *                 sne_hdpinn_nolog(ds_nn_i_rs[rs][i], tau_h_i_rs[h][rs][i], nnn_i_rs[rs][i], simhd_ms_nn_i_rs[rs][i])
 *         return 1.0
 */
      __pyx_t_5 = __pyx_v_N;
      __pyx_t_6 = __pyx_t_5;
      for (__pyx_t_7 = 0; __pyx_t_7 < __pyx_t_6; __pyx_t_7+=1) {
        __pyx_v_i = __pyx_t_7;

        /* "fmsne_implem.pyx":2499
 *         for rs in range(n_rs):
 *             for i in range(N):
 *                 sne_hdpinn_nolog(ds_nn_i_rs[rs][i], tau_h_i_rs[h][rs][i], nnn_i_rs[rs][i], simhd_ms_nn_i_rs[rs][i])             # <<<<<<<<<<<<<<
 *         return 1.0
 *     else:
 */
        __pyx_f_12fmsne_implem_sne_hdpinn_nolog(((__pyx_v_ds_nn_i_rs[__pyx_v_rs])[__pyx_v_i]), (((__pyx_v_tau_h_i_rs[__pyx_v_h])[__pyx_v_rs])[__pyx_v_i]), ((__pyx_v_nnn_i_rs[__pyx_v_rs])[__pyx_v_i]), ((__pyx_v_simhd_ms_nn_i_rs[__pyx_v_rs])[__pyx_v_i]));
      }
    }

    /* "fmsne_implem.pyx":2500
 *             for i in range(N):
 *                 sne_hdpinn_nolog(ds_nn_i_rs[rs][i], tau_h_i_rs[h][rs][i], nnn_i_rs[rs][i], simhd_ms_nn_i_rs[rs][i])
 *         return 1.0             # <<<<<<<<<<<<<<
 *     else:
 *         # Storing the current value of k, in double
 */
    __pyx_r = 1.0;
    goto __pyx_L0;

    /* "fmsne_implem.pyx":2495
 *     cdef double kd, ikd
 *     # Computing the multi-scale similarities for the current multi-scale optimization step
 *     if k == 1:             # <<<<<<<<<<<<<<
 *         # Computing the similarities at the last scale and storing them in simhd_ms_nn_i_rs
 *         for rs in range(n_rs):
 */
  }

  /* "fmsne_implem.pyx":2503
 *     else:
 *         # Storing the current value of k, in double
 *         kd = <double> k             # <<<<<<<<<<<<<<
 *         # Inverse of k
 *         ikd = 1.0/kd
 */
  /*else*/ {
    __pyx_v_kd = ((double)__pyx_v_k);

    /* "fmsne_implem.pyx":2505
 *         kd = <double> k
 *         # Inverse of k
 *         ikd = 1.0/kd             # <<<<<<<<<<<<<<
 *         # Value of kd at the previous step
 *         kd -= 1.0
 */
    __pyx_v_ikd = (1.0 / __pyx_v_kd);

    /* "fmsne_implem.pyx":2507
 *         ikd = 1.0/kd
 *         # Value of kd at the previous step
 *         kd -= 1.0             # <<<<<<<<<<<<<<
 *         # Computing the similarities at the current scale and updating simhd_ms_nn_i_rs
 *         for rs in range(n_rs):
 */
    __pyx_v_kd = (__pyx_v_kd - 1.0);

    /* "fmsne_implem.pyx":2509
 *         kd -= 1.0
 *         # Computing the similarities at the current scale and updating simhd_ms_nn_i_rs
 *         for rs in range(n_rs):             # <<<<<<<<<<<<<<
 *             for i in range(N):
 *                 sne_hdpinn_nolog(ds_nn_i_rs[rs][i], tau_h_i_rs[h][rs][i], nnn_i_rs[rs][i], simhd_h_nn_i_rs[rs][i])
 */
    __pyx_t_2 = __pyx_v_n_rs;
    __pyx_t_3 = __pyx_t_2;
    for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
      __pyx_v_rs = __pyx_t_4;

      /* "fmsne_implem.pyx":2510
 *         # Computing the similarities at the current scale and updating simhd_ms_nn_i_rs
 *         for rs in range(n_rs):
 *             for i in range(N):             # <<<<<<<<<<<<<<
 *                 sne_hdpinn_nolog(ds_nn_i_rs[rs][i], tau_h_i_rs[h][rs][i], nnn_i_rs[rs][i], simhd_h_nn_i_rs[rs][i])
 *                 for j in range(nnn_i_rs[rs][i]):
 */
      __pyx_t_5 = __pyx_v_N;
      __pyx_t_6 = __pyx_t_5;
      for (__pyx_t_7 = 0; __pyx_t_7 < __pyx_t_6; __pyx_t_7+=1) {
        __pyx_v_i = __pyx_t_7;

        /* "fmsne_implem.pyx":2511
 *         for rs in range(n_rs):
 *             for i in range(N):
 *                 sne_hdpinn_nolog(ds_nn_i_rs[rs][i], tau_h_i_rs[h][rs][i], nnn_i_rs[rs][i], simhd_h_nn_i_rs[rs][i])             # <<<<<<<<<<<<<<
 *                 for j in range(nnn_i_rs[rs][i]):
 *                     simhd_ms_nn_i_rs[rs][i][j] = (kd*simhd_ms_nn_i_rs[rs][i][j] + simhd_h_nn_i_rs[rs][i][j])*ikd
 */
        __pyx_f_12fmsne_implem_sne_hdpinn_nolog(((__pyx_v_ds_nn_i_rs[__pyx_v_rs])[__pyx_v_i]), (((__pyx_v_tau_h_i_rs[__pyx_v_h])[__pyx_v_rs])[__pyx_v_i]), ((__pyx_v_nnn_i_rs[__pyx_v_rs])[__pyx_v_i]), ((__pyx_v_simhd_h_nn_i_rs[__pyx_v_rs])[__pyx_v_i]));

        /* "fmsne_implem.pyx":2512
 *             for i in range(N):
 *                 sne_hdpinn_nolog(ds_nn_i_rs[rs][i], tau_h_i_rs[h][rs][i], nnn_i_rs[rs][i], simhd_h_nn_i_rs[rs][i])
 *                 for j in range(nnn_i_rs[rs][i]):             # <<<<<<<<<<<<<<
 *                     simhd_ms_nn_i_rs[rs][i][j] = (kd*simhd_ms_nn_i_rs[rs][i][j] + simhd_h_nn_i_rs[rs][i][j])*ikd
 *         return ikd
 */
        __pyx_t_8 = ((__pyx_v_nnn_i_rs[__pyx_v_rs])[__pyx_v_i]);
        __pyx_t_9 = __pyx_t_8;
        for (__pyx_t_10 = 0; __pyx_t_10 < __pyx_t_9; __pyx_t_10+=1) {
          __pyx_v_j = __pyx_t_10;

          /* "fmsne_implem.pyx":2513
 *                 sne_hdpinn_nolog(ds_nn_i_rs[rs][i], tau_h_i_rs[h][rs][i], nnn_i_rs[rs][i], simhd_h_nn_i_rs[rs][i])
 *                 for j in range(nnn_i_rs[rs][i]):
 *                     simhd_ms_nn_i_rs[rs][i][j] = (kd*simhd_ms_nn_i_rs[rs][i][j] + simhd_h_nn_i_rs[rs][i][j])*ikd             # <<<<<<<<<<<<<<
 *         return ikd
 * 
 */
          (((__pyx_v_simhd_ms_nn_i_rs[__pyx_v_rs])[__pyx_v_i])[__pyx_v_j]) = (((__pyx_v_kd * (((__pyx_v_simhd_ms_nn_i_rs[__pyx_v_rs])[__pyx_v_i])[__pyx_v_j])) + (((__pyx_v_simhd_h_nn_i_rs[__pyx_v_rs])[__pyx_v_i])[__pyx_v_j])) * __pyx_v_ikd);
        }
      }
    }

    /* "fmsne_implem.pyx":2514
 *                 for j in range(nnn_i_rs[rs][i]):
 *                     simhd_ms_nn_i_rs[rs][i][j] = (kd*simhd_ms_nn_i_rs[rs][i][j] + simhd_h_nn_i_rs[rs][i][j])*ikd
 *         return ikd             # <<<<<<<<<<<<<<
 * 
 * cdef struct Opfmssne:
 */
    __pyx_r = __pyx_v_ikd;
    goto __pyx_L0;
  }

  /* "fmsne_implem.pyx":2487
 *         ms_ldprec_nofitU(p_h, t_h, isnc2, L, K_h, ihncf, ihncfexp, mean_var_X_lds)
 * 
 * cdef inline double f_update_mso_step(Py_ssize_t k, Py_ssize_t h, Py_ssize_t n_rs, Py_ssize_t N, int** nnn_i_rs, double*** ds_nn_i_rs, double*** tau_h_i_rs, double*** simhd_ms_nn_i_rs, double*** simhd_h_nn_i_rs) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     k refers to the number of currently considered scales, between 1 and the number of scales.
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "fmsne_implem.pyx":2551
 *     Py_ssize_t*** nn_i_rs_id_dld    # Matching between the neighbors in arr_nn and the LD distances in dij_ld
 * 
 * cdef inline lbfgsfloatval_t fmssne_evaluate(void* instance, const lbfgsfloatval_t* x, lbfgsfloatval_t* g, const int n, const lbfgsfloatval_t step):             # <<<<<<<<<<<<<<
 *     """
 *     Computes cost function and gradient for the current LD coordinates.
 */

static CYTHON_INLINE lbfgsfloatval_t __pyx_f_12fmsne_implem_fmssne_evaluate(void *__pyx_v_instance, lbfgsfloatval_t const *__pyx_v_x, lbfgsfloatval_t *__pyx_v_g, int const __pyx_v_n, CYTHON_UNUSED lbfgsfloatval_t const __pyx_v_step) {
  struct __pyx_t_12fmsne_implem_Opfmssne *__pyx_v_popt;
  lbfgsfloatval_t __pyx_v_fx;
  Py_ssize_t __pyx_v_i;
  Py_ssize_t __pyx_v_rs;
  Py_ssize_t __pyx_v_j;
  Py_ssize_t __pyx_v_h;
  Py_ssize_t __pyx_v_k;
  Py_ssize_t __pyx_v_idx;
  Py_ssize_t __pyx_v_idxj;
  Py_ssize_t __pyx_v_idxsa;
  double const *__pyx_v_xi;
  double __pyx_v_sd;
  double __pyx_v_sij;
  double __pyx_v_spshij;
  double const *__pyx_v_xj;
  struct __pyx_t_12fmsne_implem_SpTree *__pyx_v_tree;
  lbfgsfloatval_t __pyx_r;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  int __pyx_t_7;
  Py_ssize_t __pyx_t_8;
  Py_ssize_t __pyx_t_9;
  Py_ssize_t __pyx_t_10;
  Py_ssize_t __pyx_t_11;
  Py_ssize_t __pyx_t_12;
  Py_ssize_t __pyx_t_13;
  Py_ssize_t __pyx_t_14;
  Py_ssize_t __pyx_t_15;
  Py_ssize_t __pyx_t_16;
  int __pyx_t_17;
  int __pyx_t_18;
  __Pyx_RefNannySetupContext("fmssne_evaluate", 0);

  /* "fmsne_implem.pyx":2557
 *     n stores the number of variables
 *     """
 *     cdef Opfmssne* popt = <Opfmssne*> instance             # <<<<<<<<<<<<<<
 *     # Cost function value to return
 *     cdef lbfgsfloatval_t fx = 0.0
 */
  __pyx_v_popt = ((struct __pyx_t_12fmsne_implem_Opfmssne *)__pyx_v_instance);

  /* "fmsne_implem.pyx":2559
 *     cdef Opfmssne* popt = <Opfmssne*> instance
 *     # Cost function value to return
 *     cdef lbfgsfloatval_t fx = 0.0             # <<<<<<<<<<<<<<
 *     # Initializing the gradient to 0
 *     memset(g, 0, popt.sstx)
 */
  __pyx_v_fx = 0.0;

  /* "fmsne_implem.pyx":2561
 *     cdef lbfgsfloatval_t fx = 0.0
 *     # Initializing the gradient to 0
 *     memset(g, 0, popt.sstx)             # <<<<<<<<<<<<<<
 *     # Index variables
 *     cdef Py_ssize_t i, rs, j, h, k, idx, idxj, idxsa
 */
  (void)(memset(__pyx_v_g, 0, __pyx_v_popt->sstx));

  /* "fmsne_implem.pyx":2565
 *     cdef Py_ssize_t i, rs, j, h, k, idx, idxj, idxsa
 *     # Initializing the supplementary attributes to 0
 *     for rs in range(popt.n_rs):             # <<<<<<<<<<<<<<
 *         memset(popt.sa[rs], 0, popt.sbsa)
 *     # Intermediate variable
 */
  __pyx_t_1 = __pyx_v_popt->n_rs;
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_rs = __pyx_t_3;

    /* "fmsne_implem.pyx":2566
 *     # Initializing the supplementary attributes to 0
 *     for rs in range(popt.n_rs):
 *         memset(popt.sa[rs], 0, popt.sbsa)             # <<<<<<<<<<<<<<
 *     # Intermediate variable
 *     cdef const double* xi
 */
    (void)(memset((__pyx_v_popt->sa[__pyx_v_rs]), 0, __pyx_v_popt->sbsa));
  }

  /* "fmsne_implem.pyx":2570
 *     cdef const double* xi
 *     # Computing the necessary LD distances
 *     idx = 0             # <<<<<<<<<<<<<<
 *     for i in range(popt.N_1):
 *         xi = &x[idx]
 */
  __pyx_v_idx = 0;

  /* "fmsne_implem.pyx":2571
 *     # Computing the necessary LD distances
 *     idx = 0
 *     for i in range(popt.N_1):             # <<<<<<<<<<<<<<
 *         xi = &x[idx]
 *         idx += popt.n_components
 */
  __pyx_t_1 = __pyx_v_popt->N_1;
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "fmsne_implem.pyx":2572
 *     idx = 0
 *     for i in range(popt.N_1):
 *         xi = &x[idx]             # <<<<<<<<<<<<<<
 *         idx += popt.n_components
 *         for j in range(popt.ni_dld[i]):
 */
    __pyx_v_xi = (&(__pyx_v_x[__pyx_v_idx]));

    /* "fmsne_implem.pyx":2573
 *     for i in range(popt.N_1):
 *         xi = &x[idx]
 *         idx += popt.n_components             # <<<<<<<<<<<<<<
 *         for j in range(popt.ni_dld[i]):
 *             popt.dij_ld[i][j] = -sqeucl_dist_ptr(xi, &x[popt.ij_dld[i][j]], popt.n_components)
 */
    __pyx_v_idx = (__pyx_v_idx + __pyx_v_popt->n_components);

    /* "fmsne_implem.pyx":2574
 *         xi = &x[idx]
 *         idx += popt.n_components
 *         for j in range(popt.ni_dld[i]):             # <<<<<<<<<<<<<<
 *             popt.dij_ld[i][j] = -sqeucl_dist_ptr(xi, &x[popt.ij_dld[i][j]], popt.n_components)
 *     # Intermediate variables
 */
    __pyx_t_4 = (__pyx_v_popt->ni_dld[__pyx_v_i]);
    __pyx_t_5 = __pyx_t_4;
    for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
      __pyx_v_j = __pyx_t_6;

      /* "fmsne_implem.pyx":2575
 *         idx += popt.n_components
 *         for j in range(popt.ni_dld[i]):
 *             popt.dij_ld[i][j] = -sqeucl_dist_ptr(xi, &x[popt.ij_dld[i][j]], popt.n_components)             # <<<<<<<<<<<<<<
 *     # Intermediate variables
 *     cdef double sd, sij, spshij
 */
      ((__pyx_v_popt->dij_ld[__pyx_v_i])[__pyx_v_j]) = (-__pyx_f_12fmsne_implem_sqeucl_dist_ptr(__pyx_v_xi, (&(__pyx_v_x[((__pyx_v_popt->ij_dld[__pyx_v_i])[__pyx_v_j])])), __pyx_v_popt->n_components));
    }
  }

  /* "fmsne_implem.pyx":2580
 *     cdef const double* xj
 *     # Creating the space-partitioning tree without supplementary attributes
 *     cdef SpTree* tree = cinit_SpTree(x, popt.N, popt.n_components, False, popt.sa[0], 0, popt.inter_fct_1)             # <<<<<<<<<<<<<<
 *     # Stores the index of the currently considered data point in x
 *     idx = 0
 */
  __pyx_v_tree = __pyx_f_12fmsne_implem_cinit_SpTree(__pyx_v_x, __pyx_v_popt->N, __pyx_v_popt->n_components, 0, (__pyx_v_popt->sa[0]), 0, __pyx_v_popt->inter_fct_1);

  /* "fmsne_implem.pyx":2582
 *     cdef SpTree* tree = cinit_SpTree(x, popt.N, popt.n_components, False, popt.sa[0], 0, popt.inter_fct_1)
 *     # Stores the index of the currently considered data point in x
 *     idx = 0             # <<<<<<<<<<<<<<
 *     idxsa = 0
 *     # For each data point
 */
  __pyx_v_idx = 0;

  /* "fmsne_implem.pyx":2583
 *     # Stores the index of the currently considered data point in x
 *     idx = 0
 *     idxsa = 0             # <<<<<<<<<<<<<<
 *     # For each data point
 *     for i in range(popt.N):
 */
  __pyx_v_idxsa = 0;

  /* "fmsne_implem.pyx":2585
 *     idxsa = 0
 *     # For each data point
 *     for i in range(popt.N):             # <<<<<<<<<<<<<<
 *         # Currently considered data point
 *         xi = &x[idx]
 */
  __pyx_t_1 = __pyx_v_popt->N;
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "fmsne_implem.pyx":2587
 *     for i in range(popt.N):
 *         # Currently considered data point
 *         xi = &x[idx]             # <<<<<<<<<<<<<<
 *         # Traversing the tree to estimate the denominators of the similarities with respect to i, at all scales and random samplings
 *         if popt.fit_U:
 */
    __pyx_v_xi = (&(__pyx_v_x[__pyx_v_idx]));

    /* "fmsne_implem.pyx":2589
 *         xi = &x[idx]
 *         # Traversing the tree to estimate the denominators of the similarities with respect to i, at all scales and random samplings
 *         if popt.fit_U:             # <<<<<<<<<<<<<<
 *             # popt.Z_rs, popt.sX_rs and popt.t_h_rs are used. popt.Z and popt.t_h are not used (and are set to NULL)
 *             approxInteractions_SpTree(tree, xi, popt.theta_s, popt.Z, popt.Z_rs, popt.sX_rs, popt.t_h, popt.t_h_rs, popt.qdiff, popt.ns, popt.n_rs)
 */
    __pyx_t_7 = (__pyx_v_popt->fit_U != 0);
    if (__pyx_t_7) {

      /* "fmsne_implem.pyx":2591
 *         if popt.fit_U:
 *             # popt.Z_rs, popt.sX_rs and popt.t_h_rs are used. popt.Z and popt.t_h are not used (and are set to NULL)
 *             approxInteractions_SpTree(tree, xi, popt.theta_s, popt.Z, popt.Z_rs, popt.sX_rs, popt.t_h, popt.t_h_rs, popt.qdiff, popt.ns, popt.n_rs)             # <<<<<<<<<<<<<<
 *             # Normalizing
 *             for h in range(popt.ns):
 */
      (void)(__pyx_f_12fmsne_implem_approxInteractions_SpTree(__pyx_v_tree, __pyx_v_xi, __pyx_v_popt->theta_s, __pyx_v_popt->Z, __pyx_v_popt->Z_rs, __pyx_v_popt->sX_rs, __pyx_v_popt->t_h, __pyx_v_popt->t_h_rs, __pyx_v_popt->qdiff, __pyx_v_popt->ns, __pyx_v_popt->n_rs));

      /* "fmsne_implem.pyx":2593
 *             approxInteractions_SpTree(tree, xi, popt.theta_s, popt.Z, popt.Z_rs, popt.sX_rs, popt.t_h, popt.t_h_rs, popt.qdiff, popt.ns, popt.n_rs)
 *             # Normalizing
 *             for h in range(popt.ns):             # <<<<<<<<<<<<<<
 *                 for rs in range(popt.n_rs):
 *                     if popt.Z_rs[h][rs] < FLOAT64_EPS:
 */
      __pyx_t_4 = __pyx_v_popt->ns;
      __pyx_t_5 = __pyx_t_4;
      for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
        __pyx_v_h = __pyx_t_6;

        /* "fmsne_implem.pyx":2594
 *             # Normalizing
 *             for h in range(popt.ns):
 *                 for rs in range(popt.n_rs):             # <<<<<<<<<<<<<<
 *                     if popt.Z_rs[h][rs] < FLOAT64_EPS:
 *                         popt.Z_rs[h][rs] = FLOAT64_EPS
 */
        __pyx_t_8 = __pyx_v_popt->n_rs;
        __pyx_t_9 = __pyx_t_8;
        for (__pyx_t_10 = 0; __pyx_t_10 < __pyx_t_9; __pyx_t_10+=1) {
          __pyx_v_rs = __pyx_t_10;

          /* "fmsne_implem.pyx":2595
 *             for h in range(popt.ns):
 *                 for rs in range(popt.n_rs):
 *                     if popt.Z_rs[h][rs] < FLOAT64_EPS:             # <<<<<<<<<<<<<<
 *                         popt.Z_rs[h][rs] = FLOAT64_EPS
 *                     for k in range(popt.n_components):
 */
          __pyx_t_7 = ((((__pyx_v_popt->Z_rs[__pyx_v_h])[__pyx_v_rs]) < __pyx_v_12fmsne_implem_FLOAT64_EPS) != 0);
          if (__pyx_t_7) {

            /* "fmsne_implem.pyx":2596
 *                 for rs in range(popt.n_rs):
 *                     if popt.Z_rs[h][rs] < FLOAT64_EPS:
 *                         popt.Z_rs[h][rs] = FLOAT64_EPS             # <<<<<<<<<<<<<<
 *                     for k in range(popt.n_components):
 *                         popt.sX_rs[h][rs][k] /= popt.Z_rs[h][rs]
 */
            ((__pyx_v_popt->Z_rs[__pyx_v_h])[__pyx_v_rs]) = __pyx_v_12fmsne_implem_FLOAT64_EPS;

            /* "fmsne_implem.pyx":2595
 *             for h in range(popt.ns):
 *                 for rs in range(popt.n_rs):
 *                     if popt.Z_rs[h][rs] < FLOAT64_EPS:             # <<<<<<<<<<<<<<
 *                         popt.Z_rs[h][rs] = FLOAT64_EPS
 *                     for k in range(popt.n_components):
 */
          }

          /* "fmsne_implem.pyx":2597
 *                     if popt.Z_rs[h][rs] < FLOAT64_EPS:
 *                         popt.Z_rs[h][rs] = FLOAT64_EPS
 *                     for k in range(popt.n_components):             # <<<<<<<<<<<<<<
 *                         popt.sX_rs[h][rs][k] /= popt.Z_rs[h][rs]
 *         else:
 */
          __pyx_t_11 = __pyx_v_popt->n_components;
          __pyx_t_12 = __pyx_t_11;
          for (__pyx_t_13 = 0; __pyx_t_13 < __pyx_t_12; __pyx_t_13+=1) {
            __pyx_v_k = __pyx_t_13;

            /* "fmsne_implem.pyx":2598
 *                         popt.Z_rs[h][rs] = FLOAT64_EPS
 *                     for k in range(popt.n_components):
 *                         popt.sX_rs[h][rs][k] /= popt.Z_rs[h][rs]             # <<<<<<<<<<<<<<
 *         else:
 *             # popt.Z, popt.sX and popt.t_h are used. popt.sX_rs and popt.t_h_rs are not used (and are set to NULL)
 */
            __pyx_t_14 = __pyx_v_h;
            __pyx_t_15 = __pyx_v_rs;
            __pyx_t_16 = __pyx_v_k;
            (((__pyx_v_popt->sX_rs[__pyx_t_14])[__pyx_t_15])[__pyx_t_16]) = ((((__pyx_v_popt->sX_rs[__pyx_t_14])[__pyx_t_15])[__pyx_t_16]) / ((__pyx_v_popt->Z_rs[__pyx_v_h])[__pyx_v_rs]));
          }
        }
      }

      /* "fmsne_implem.pyx":2589
 *         xi = &x[idx]
 *         # Traversing the tree to estimate the denominators of the similarities with respect to i, at all scales and random samplings
 *         if popt.fit_U:             # <<<<<<<<<<<<<<
 *             # popt.Z_rs, popt.sX_rs and popt.t_h_rs are used. popt.Z and popt.t_h are not used (and are set to NULL)
 *             approxInteractions_SpTree(tree, xi, popt.theta_s, popt.Z, popt.Z_rs, popt.sX_rs, popt.t_h, popt.t_h_rs, popt.qdiff, popt.ns, popt.n_rs)
 */
      goto __pyx_L11;
    }

    /* "fmsne_implem.pyx":2601
 *         else:
 *             # popt.Z, popt.sX and popt.t_h are used. popt.sX_rs and popt.t_h_rs are not used (and are set to NULL)
 *             approxInteractions_SpTree(tree, xi, popt.theta_s, popt.Z, popt.sX, popt.sX_rs, popt.t_h, popt.t_h_rs, popt.qdiff, popt.ns, 0)             # <<<<<<<<<<<<<<
 *             # Normalizing
 *             for h in range(popt.ns):
 */
    /*else*/ {
      (void)(__pyx_f_12fmsne_implem_approxInteractions_SpTree(__pyx_v_tree, __pyx_v_xi, __pyx_v_popt->theta_s, __pyx_v_popt->Z, __pyx_v_popt->sX, __pyx_v_popt->sX_rs, __pyx_v_popt->t_h, __pyx_v_popt->t_h_rs, __pyx_v_popt->qdiff, __pyx_v_popt->ns, 0));

      /* "fmsne_implem.pyx":2603
 *             approxInteractions_SpTree(tree, xi, popt.theta_s, popt.Z, popt.sX, popt.sX_rs, popt.t_h, popt.t_h_rs, popt.qdiff, popt.ns, 0)
 *             # Normalizing
 *             for h in range(popt.ns):             # <<<<<<<<<<<<<<
 *                 if popt.Z[h] < FLOAT64_EPS:
 *                     popt.Z[h] = FLOAT64_EPS
 */
      __pyx_t_4 = __pyx_v_popt->ns;
      __pyx_t_5 = __pyx_t_4;
      for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
        __pyx_v_h = __pyx_t_6;

        /* "fmsne_implem.pyx":2604
 *             # Normalizing
 *             for h in range(popt.ns):
 *                 if popt.Z[h] < FLOAT64_EPS:             # <<<<<<<<<<<<<<
 *                     popt.Z[h] = FLOAT64_EPS
 *                 for k in range(popt.n_components):
 */
        __pyx_t_7 = (((__pyx_v_popt->Z[__pyx_v_h]) < __pyx_v_12fmsne_implem_FLOAT64_EPS) != 0);
        if (__pyx_t_7) {

          /* "fmsne_implem.pyx":2605
 *             for h in range(popt.ns):
 *                 if popt.Z[h] < FLOAT64_EPS:
 *                     popt.Z[h] = FLOAT64_EPS             # <<<<<<<<<<<<<<
 *                 for k in range(popt.n_components):
 *                     popt.sX[h][k] /= popt.Z[h]
 */
          (__pyx_v_popt->Z[__pyx_v_h]) = __pyx_v_12fmsne_implem_FLOAT64_EPS;

          /* "fmsne_implem.pyx":2604
 *             # Normalizing
 *             for h in range(popt.ns):
 *                 if popt.Z[h] < FLOAT64_EPS:             # <<<<<<<<<<<<<<
 *                     popt.Z[h] = FLOAT64_EPS
 *                 for k in range(popt.n_components):
 */
        }

        /* "fmsne_implem.pyx":2606
 *                 if popt.Z[h] < FLOAT64_EPS:
 *                     popt.Z[h] = FLOAT64_EPS
 *                 for k in range(popt.n_components):             # <<<<<<<<<<<<<<
 *                     popt.sX[h][k] /= popt.Z[h]
 *         # For each random sampling
 */
        __pyx_t_8 = __pyx_v_popt->n_components;
        __pyx_t_9 = __pyx_t_8;
        for (__pyx_t_10 = 0; __pyx_t_10 < __pyx_t_9; __pyx_t_10+=1) {
          __pyx_v_k = __pyx_t_10;

          /* "fmsne_implem.pyx":2607
 *                     popt.Z[h] = FLOAT64_EPS
 *                 for k in range(popt.n_components):
 *                     popt.sX[h][k] /= popt.Z[h]             # <<<<<<<<<<<<<<
 *         # For each random sampling
 *         for rs in range(popt.n_rs):
 */
          __pyx_t_11 = __pyx_v_h;
          __pyx_t_12 = __pyx_v_k;
          ((__pyx_v_popt->sX[__pyx_t_11])[__pyx_t_12]) = (((__pyx_v_popt->sX[__pyx_t_11])[__pyx_t_12]) / (__pyx_v_popt->Z[__pyx_v_h]));
        }
      }
    }
    __pyx_L11:;

    /* "fmsne_implem.pyx":2609
 *                     popt.sX[h][k] /= popt.Z[h]
 *         # For each random sampling
 *         for rs in range(popt.n_rs):             # <<<<<<<<<<<<<<
 *             # For each considered neighbor of i
 *             for j in range(popt.nnn[rs][i]):
 */
    __pyx_t_4 = __pyx_v_popt->n_rs;
    __pyx_t_5 = __pyx_t_4;
    for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
      __pyx_v_rs = __pyx_t_6;

      /* "fmsne_implem.pyx":2611
 *         for rs in range(popt.n_rs):
 *             # For each considered neighbor of i
 *             for j in range(popt.nnn[rs][i]):             # <<<<<<<<<<<<<<
 *                 # Currently considered neighbor
 *                 k = popt.arr_nn[rs][i][j]
 */
      __pyx_t_17 = ((__pyx_v_popt->nnn[__pyx_v_rs])[__pyx_v_i]);
      __pyx_t_18 = __pyx_t_17;
      for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_18; __pyx_t_8+=1) {
        __pyx_v_j = __pyx_t_8;

        /* "fmsne_implem.pyx":2613
 *             for j in range(popt.nnn[rs][i]):
 *                 # Currently considered neighbor
 *                 k = popt.arr_nn[rs][i][j]             # <<<<<<<<<<<<<<
 *                 idxj = k*popt.n_components
 *                 xj = &x[idxj]
 */
        __pyx_v_k = (((__pyx_v_popt->arr_nn[__pyx_v_rs])[__pyx_v_i])[__pyx_v_j]);

        /* "fmsne_implem.pyx":2614
 *                 # Currently considered neighbor
 *                 k = popt.arr_nn[rs][i][j]
 *                 idxj = k*popt.n_components             # <<<<<<<<<<<<<<
 *                 xj = &x[idxj]
 *                 # Opposite of the squared LD distance between i and j
 */
        __pyx_v_idxj = (__pyx_v_k * __pyx_v_popt->n_components);

        /* "fmsne_implem.pyx":2615
 *                 k = popt.arr_nn[rs][i][j]
 *                 idxj = k*popt.n_components
 *                 xj = &x[idxj]             # <<<<<<<<<<<<<<
 *                 # Opposite of the squared LD distance between i and j
 *                 if i < k:
 */
        __pyx_v_xj = (&(__pyx_v_x[__pyx_v_idxj]));

        /* "fmsne_implem.pyx":2617
 *                 xj = &x[idxj]
 *                 # Opposite of the squared LD distance between i and j
 *                 if i < k:             # <<<<<<<<<<<<<<
 *                     sd = popt.dij_ld[i][popt.nn_i_rs_id_dld[rs][i][j]]
 *                 else:
 */
        __pyx_t_7 = ((__pyx_v_i < __pyx_v_k) != 0);
        if (__pyx_t_7) {

          /* "fmsne_implem.pyx":2618
 *                 # Opposite of the squared LD distance between i and j
 *                 if i < k:
 *                     sd = popt.dij_ld[i][popt.nn_i_rs_id_dld[rs][i][j]]             # <<<<<<<<<<<<<<
 *                 else:
 *                     sd = popt.dij_ld[k][popt.nn_i_rs_id_dld[rs][i][j]]
 */
          __pyx_v_sd = ((__pyx_v_popt->dij_ld[__pyx_v_i])[(((__pyx_v_popt->nn_i_rs_id_dld[__pyx_v_rs])[__pyx_v_i])[__pyx_v_j])]);

          /* "fmsne_implem.pyx":2617
 *                 xj = &x[idxj]
 *                 # Opposite of the squared LD distance between i and j
 *                 if i < k:             # <<<<<<<<<<<<<<
 *                     sd = popt.dij_ld[i][popt.nn_i_rs_id_dld[rs][i][j]]
 *                 else:
 */
          goto __pyx_L28;
        }

        /* "fmsne_implem.pyx":2620
 *                     sd = popt.dij_ld[i][popt.nn_i_rs_id_dld[rs][i][j]]
 *                 else:
 *                     sd = popt.dij_ld[k][popt.nn_i_rs_id_dld[rs][i][j]]             # <<<<<<<<<<<<<<
 *                 # Computing the multi-scale LD similarity between i and j
 *                 sij = 0.0
 */
        /*else*/ {
          __pyx_v_sd = ((__pyx_v_popt->dij_ld[__pyx_v_k])[(((__pyx_v_popt->nn_i_rs_id_dld[__pyx_v_rs])[__pyx_v_i])[__pyx_v_j])]);
        }
        __pyx_L28:;

        /* "fmsne_implem.pyx":2622
 *                     sd = popt.dij_ld[k][popt.nn_i_rs_id_dld[rs][i][j]]
 *                 # Computing the multi-scale LD similarity between i and j
 *                 sij = 0.0             # <<<<<<<<<<<<<<
 *                 spshij = 0.0
 *                 memset(popt.qdiff, 0, popt.sbqd)
 */
        __pyx_v_sij = 0.0;

        /* "fmsne_implem.pyx":2623
 *                 # Computing the multi-scale LD similarity between i and j
 *                 sij = 0.0
 *                 spshij = 0.0             # <<<<<<<<<<<<<<
 *                 memset(popt.qdiff, 0, popt.sbqd)
 *                 for h in range(popt.ns):
 */
        __pyx_v_spshij = 0.0;

        /* "fmsne_implem.pyx":2624
 *                 sij = 0.0
 *                 spshij = 0.0
 *                 memset(popt.qdiff, 0, popt.sbqd)             # <<<<<<<<<<<<<<
 *                 for h in range(popt.ns):
 *                     if popt.fit_U:
 */
        (void)(memset(__pyx_v_popt->qdiff, 0, __pyx_v_popt->sbqd));

        /* "fmsne_implem.pyx":2625
 *                 spshij = 0.0
 *                 memset(popt.qdiff, 0, popt.sbqd)
 *                 for h in range(popt.ns):             # <<<<<<<<<<<<<<
 *                     if popt.fit_U:
 *                         popt.sah[h] = exp(sd/popt.t_h_rs[h][rs])/popt.Z_rs[h][rs]
 */
        __pyx_t_9 = __pyx_v_popt->ns;
        __pyx_t_10 = __pyx_t_9;
        for (__pyx_t_11 = 0; __pyx_t_11 < __pyx_t_10; __pyx_t_11+=1) {
          __pyx_v_h = __pyx_t_11;

          /* "fmsne_implem.pyx":2626
 *                 memset(popt.qdiff, 0, popt.sbqd)
 *                 for h in range(popt.ns):
 *                     if popt.fit_U:             # <<<<<<<<<<<<<<
 *                         popt.sah[h] = exp(sd/popt.t_h_rs[h][rs])/popt.Z_rs[h][rs]
 *                         sij += popt.sah[h]
 */
          __pyx_t_7 = (__pyx_v_popt->fit_U != 0);
          if (__pyx_t_7) {

            /* "fmsne_implem.pyx":2627
 *                 for h in range(popt.ns):
 *                     if popt.fit_U:
 *                         popt.sah[h] = exp(sd/popt.t_h_rs[h][rs])/popt.Z_rs[h][rs]             # <<<<<<<<<<<<<<
 *                         sij += popt.sah[h]
 *                         popt.sah[h] *= popt.p_h_rs[h][rs]
 */
            (__pyx_v_popt->sah[__pyx_v_h]) = (exp((__pyx_v_sd / ((__pyx_v_popt->t_h_rs[__pyx_v_h])[__pyx_v_rs]))) / ((__pyx_v_popt->Z_rs[__pyx_v_h])[__pyx_v_rs]));

            /* "fmsne_implem.pyx":2628
 *                     if popt.fit_U:
 *                         popt.sah[h] = exp(sd/popt.t_h_rs[h][rs])/popt.Z_rs[h][rs]
 *                         sij += popt.sah[h]             # <<<<<<<<<<<<<<
 *                         popt.sah[h] *= popt.p_h_rs[h][rs]
 *                         for k in range(popt.n_components):
 */
            __pyx_v_sij = (__pyx_v_sij + (__pyx_v_popt->sah[__pyx_v_h]));

            /* "fmsne_implem.pyx":2629
 *                         popt.sah[h] = exp(sd/popt.t_h_rs[h][rs])/popt.Z_rs[h][rs]
 *                         sij += popt.sah[h]
 *                         popt.sah[h] *= popt.p_h_rs[h][rs]             # <<<<<<<<<<<<<<
 *                         for k in range(popt.n_components):
 *                             popt.qdiff[k] += popt.sah[h]*popt.sX_rs[h][rs][k]
 */
            __pyx_t_12 = __pyx_v_h;
            (__pyx_v_popt->sah[__pyx_t_12]) = ((__pyx_v_popt->sah[__pyx_t_12]) * ((__pyx_v_popt->p_h_rs[__pyx_v_h])[__pyx_v_rs]));

            /* "fmsne_implem.pyx":2630
 *                         sij += popt.sah[h]
 *                         popt.sah[h] *= popt.p_h_rs[h][rs]
 *                         for k in range(popt.n_components):             # <<<<<<<<<<<<<<
 *                             popt.qdiff[k] += popt.sah[h]*popt.sX_rs[h][rs][k]
 *                     else:
 */
            __pyx_t_12 = __pyx_v_popt->n_components;
            __pyx_t_13 = __pyx_t_12;
            for (__pyx_t_14 = 0; __pyx_t_14 < __pyx_t_13; __pyx_t_14+=1) {
              __pyx_v_k = __pyx_t_14;

              /* "fmsne_implem.pyx":2631
 *                         popt.sah[h] *= popt.p_h_rs[h][rs]
 *                         for k in range(popt.n_components):
 *                             popt.qdiff[k] += popt.sah[h]*popt.sX_rs[h][rs][k]             # <<<<<<<<<<<<<<
 *                     else:
 *                         popt.sah[h] = exp(sd/popt.t_h[h])/popt.Z[h]
 */
              __pyx_t_15 = __pyx_v_k;
              (__pyx_v_popt->qdiff[__pyx_t_15]) = ((__pyx_v_popt->qdiff[__pyx_t_15]) + ((__pyx_v_popt->sah[__pyx_v_h]) * (((__pyx_v_popt->sX_rs[__pyx_v_h])[__pyx_v_rs])[__pyx_v_k])));
            }

            /* "fmsne_implem.pyx":2626
 *                 memset(popt.qdiff, 0, popt.sbqd)
 *                 for h in range(popt.ns):
 *                     if popt.fit_U:             # <<<<<<<<<<<<<<
 *                         popt.sah[h] = exp(sd/popt.t_h_rs[h][rs])/popt.Z_rs[h][rs]
 *                         sij += popt.sah[h]
 */
            goto __pyx_L31;
          }

          /* "fmsne_implem.pyx":2633
 *                             popt.qdiff[k] += popt.sah[h]*popt.sX_rs[h][rs][k]
 *                     else:
 *                         popt.sah[h] = exp(sd/popt.t_h[h])/popt.Z[h]             # <<<<<<<<<<<<<<
 *                         sij += popt.sah[h]
 *                         popt.sah[h] *= popt.p_h[h]
 */
          /*else*/ {
            (__pyx_v_popt->sah[__pyx_v_h]) = (exp((__pyx_v_sd / (__pyx_v_popt->t_h[__pyx_v_h]))) / (__pyx_v_popt->Z[__pyx_v_h]));

            /* "fmsne_implem.pyx":2634
 *                     else:
 *                         popt.sah[h] = exp(sd/popt.t_h[h])/popt.Z[h]
 *                         sij += popt.sah[h]             # <<<<<<<<<<<<<<
 *                         popt.sah[h] *= popt.p_h[h]
 *                         for k in range(popt.n_components):
 */
            __pyx_v_sij = (__pyx_v_sij + (__pyx_v_popt->sah[__pyx_v_h]));

            /* "fmsne_implem.pyx":2635
 *                         popt.sah[h] = exp(sd/popt.t_h[h])/popt.Z[h]
 *                         sij += popt.sah[h]
 *                         popt.sah[h] *= popt.p_h[h]             # <<<<<<<<<<<<<<
 *                         for k in range(popt.n_components):
 *                             popt.qdiff[k] += popt.sah[h]*popt.sX[h][k]
 */
            __pyx_t_12 = __pyx_v_h;
            (__pyx_v_popt->sah[__pyx_t_12]) = ((__pyx_v_popt->sah[__pyx_t_12]) * (__pyx_v_popt->p_h[__pyx_v_h]));

            /* "fmsne_implem.pyx":2636
 *                         sij += popt.sah[h]
 *                         popt.sah[h] *= popt.p_h[h]
 *                         for k in range(popt.n_components):             # <<<<<<<<<<<<<<
 *                             popt.qdiff[k] += popt.sah[h]*popt.sX[h][k]
 *                     spshij += popt.sah[h]
 */
            __pyx_t_12 = __pyx_v_popt->n_components;
            __pyx_t_13 = __pyx_t_12;
            for (__pyx_t_14 = 0; __pyx_t_14 < __pyx_t_13; __pyx_t_14+=1) {
              __pyx_v_k = __pyx_t_14;

              /* "fmsne_implem.pyx":2637
 *                         popt.sah[h] *= popt.p_h[h]
 *                         for k in range(popt.n_components):
 *                             popt.qdiff[k] += popt.sah[h]*popt.sX[h][k]             # <<<<<<<<<<<<<<
 *                     spshij += popt.sah[h]
 *                 sij *= popt.inv_ns
 */
              __pyx_t_15 = __pyx_v_k;
              (__pyx_v_popt->qdiff[__pyx_t_15]) = ((__pyx_v_popt->qdiff[__pyx_t_15]) + ((__pyx_v_popt->sah[__pyx_v_h]) * ((__pyx_v_popt->sX[__pyx_v_h])[__pyx_v_k])));
            }
          }
          __pyx_L31:;

          /* "fmsne_implem.pyx":2638
 *                         for k in range(popt.n_components):
 *                             popt.qdiff[k] += popt.sah[h]*popt.sX[h][k]
 *                     spshij += popt.sah[h]             # <<<<<<<<<<<<<<
 *                 sij *= popt.inv_ns
 *                 if sij < FLOAT64_EPS:
 */
          __pyx_v_spshij = (__pyx_v_spshij + (__pyx_v_popt->sah[__pyx_v_h]));
        }

        /* "fmsne_implem.pyx":2639
 *                             popt.qdiff[k] += popt.sah[h]*popt.sX[h][k]
 *                     spshij += popt.sah[h]
 *                 sij *= popt.inv_ns             # <<<<<<<<<<<<<<
 *                 if sij < FLOAT64_EPS:
 *                     sij = FLOAT64_EPS
 */
        __pyx_v_sij = (__pyx_v_sij * __pyx_v_popt->inv_ns);

        /* "fmsne_implem.pyx":2640
 *                     spshij += popt.sah[h]
 *                 sij *= popt.inv_ns
 *                 if sij < FLOAT64_EPS:             # <<<<<<<<<<<<<<
 *                     sij = FLOAT64_EPS
 *                 # Updating the cost function
 */
        __pyx_t_7 = ((__pyx_v_sij < __pyx_v_12fmsne_implem_FLOAT64_EPS) != 0);
        if (__pyx_t_7) {

          /* "fmsne_implem.pyx":2641
 *                 sij *= popt.inv_ns
 *                 if sij < FLOAT64_EPS:
 *                     sij = FLOAT64_EPS             # <<<<<<<<<<<<<<
 *                 # Updating the cost function
 *                 fx -= popt.sim_hd_ms[rs][i][j]*log(sij)
 */
          __pyx_v_sij = __pyx_v_12fmsne_implem_FLOAT64_EPS;

          /* "fmsne_implem.pyx":2640
 *                     spshij += popt.sah[h]
 *                 sij *= popt.inv_ns
 *                 if sij < FLOAT64_EPS:             # <<<<<<<<<<<<<<
 *                     sij = FLOAT64_EPS
 *                 # Updating the cost function
 */
        }

        /* "fmsne_implem.pyx":2643
 *                     sij = FLOAT64_EPS
 *                 # Updating the cost function
 *                 fx -= popt.sim_hd_ms[rs][i][j]*log(sij)             # <<<<<<<<<<<<<<
 *                 # Updating the gradient. We use spshij and sd as intermediate variables to store computations.
 *                 sij = popt.sim_hd_ms[rs][i][j]/sij
 */
        __pyx_v_fx = (__pyx_v_fx - ((((__pyx_v_popt->sim_hd_ms[__pyx_v_rs])[__pyx_v_i])[__pyx_v_j]) * log(__pyx_v_sij)));

        /* "fmsne_implem.pyx":2645
 *                 fx -= popt.sim_hd_ms[rs][i][j]*log(sij)
 *                 # Updating the gradient. We use spshij and sd as intermediate variables to store computations.
 *                 sij = popt.sim_hd_ms[rs][i][j]/sij             # <<<<<<<<<<<<<<
 *                 spshij *= sij
 *                 for k in range(popt.n_components):
 */
        __pyx_v_sij = ((((__pyx_v_popt->sim_hd_ms[__pyx_v_rs])[__pyx_v_i])[__pyx_v_j]) / __pyx_v_sij);

        /* "fmsne_implem.pyx":2646
 *                 # Updating the gradient. We use spshij and sd as intermediate variables to store computations.
 *                 sij = popt.sim_hd_ms[rs][i][j]/sij
 *                 spshij *= sij             # <<<<<<<<<<<<<<
 *                 for k in range(popt.n_components):
 *                     sd = spshij*(xi[k]-xj[k])
 */
        __pyx_v_spshij = (__pyx_v_spshij * __pyx_v_sij);

        /* "fmsne_implem.pyx":2647
 *                 sij = popt.sim_hd_ms[rs][i][j]/sij
 *                 spshij *= sij
 *                 for k in range(popt.n_components):             # <<<<<<<<<<<<<<
 *                     sd = spshij*(xi[k]-xj[k])
 *                     g[idx+k] += (sd - sij*popt.qdiff[k])
 */
        __pyx_t_9 = __pyx_v_popt->n_components;
        __pyx_t_10 = __pyx_t_9;
        for (__pyx_t_11 = 0; __pyx_t_11 < __pyx_t_10; __pyx_t_11+=1) {
          __pyx_v_k = __pyx_t_11;

          /* "fmsne_implem.pyx":2648
 *                 spshij *= sij
 *                 for k in range(popt.n_components):
 *                     sd = spshij*(xi[k]-xj[k])             # <<<<<<<<<<<<<<
 *                     g[idx+k] += (sd - sij*popt.qdiff[k])
 *                     g[idxj] -= sd
 */
          __pyx_v_sd = (__pyx_v_spshij * ((__pyx_v_xi[__pyx_v_k]) - (__pyx_v_xj[__pyx_v_k])));

          /* "fmsne_implem.pyx":2649
 *                 for k in range(popt.n_components):
 *                     sd = spshij*(xi[k]-xj[k])
 *                     g[idx+k] += (sd - sij*popt.qdiff[k])             # <<<<<<<<<<<<<<
 *                     g[idxj] -= sd
 *                     idxj += 1
 */
          __pyx_t_12 = (__pyx_v_idx + __pyx_v_k);
          (__pyx_v_g[__pyx_t_12]) = ((__pyx_v_g[__pyx_t_12]) + (__pyx_v_sd - (__pyx_v_sij * (__pyx_v_popt->qdiff[__pyx_v_k]))));

          /* "fmsne_implem.pyx":2650
 *                     sd = spshij*(xi[k]-xj[k])
 *                     g[idx+k] += (sd - sij*popt.qdiff[k])
 *                     g[idxj] -= sd             # <<<<<<<<<<<<<<
 *                     idxj += 1
 *                 # Updating the supplementary attributes
 */
          __pyx_t_12 = __pyx_v_idxj;
          (__pyx_v_g[__pyx_t_12]) = ((__pyx_v_g[__pyx_t_12]) - __pyx_v_sd);

          /* "fmsne_implem.pyx":2651
 *                     g[idx+k] += (sd - sij*popt.qdiff[k])
 *                     g[idxj] -= sd
 *                     idxj += 1             # <<<<<<<<<<<<<<
 *                 # Updating the supplementary attributes
 *                 k = idxsa
 */
          __pyx_v_idxj = (__pyx_v_idxj + 1);
        }

        /* "fmsne_implem.pyx":2653
 *                     idxj += 1
 *                 # Updating the supplementary attributes
 *                 k = idxsa             # <<<<<<<<<<<<<<
 *                 for h in range(popt.ns):
 *                     popt.sa[rs][k] += popt.sah[h]*sij
 */
        __pyx_v_k = __pyx_v_idxsa;

        /* "fmsne_implem.pyx":2654
 *                 # Updating the supplementary attributes
 *                 k = idxsa
 *                 for h in range(popt.ns):             # <<<<<<<<<<<<<<
 *                     popt.sa[rs][k] += popt.sah[h]*sij
 *                     k += 1
 */
        __pyx_t_9 = __pyx_v_popt->ns;
        __pyx_t_10 = __pyx_t_9;
        for (__pyx_t_11 = 0; __pyx_t_11 < __pyx_t_10; __pyx_t_11+=1) {
          __pyx_v_h = __pyx_t_11;

          /* "fmsne_implem.pyx":2655
 *                 k = idxsa
 *                 for h in range(popt.ns):
 *                     popt.sa[rs][k] += popt.sah[h]*sij             # <<<<<<<<<<<<<<
 *                     k += 1
 *             # Normalizing the supplementary attributes by the denominator of the LD similarities at each scale
 */
          __pyx_t_12 = __pyx_v_rs;
          __pyx_t_13 = __pyx_v_k;
          ((__pyx_v_popt->sa[__pyx_t_12])[__pyx_t_13]) = (((__pyx_v_popt->sa[__pyx_t_12])[__pyx_t_13]) + ((__pyx_v_popt->sah[__pyx_v_h]) * __pyx_v_sij));

          /* "fmsne_implem.pyx":2656
 *                 for h in range(popt.ns):
 *                     popt.sa[rs][k] += popt.sah[h]*sij
 *                     k += 1             # <<<<<<<<<<<<<<
 *             # Normalizing the supplementary attributes by the denominator of the LD similarities at each scale
 *             k = idxsa
 */
          __pyx_v_k = (__pyx_v_k + 1);
        }
      }

      /* "fmsne_implem.pyx":2658
 *                     k += 1
 *             # Normalizing the supplementary attributes by the denominator of the LD similarities at each scale
 *             k = idxsa             # <<<<<<<<<<<<<<
 *             if popt.fit_U:
 *                 for h in range(popt.ns):
 */
      __pyx_v_k = __pyx_v_idxsa;

      /* "fmsne_implem.pyx":2659
 *             # Normalizing the supplementary attributes by the denominator of the LD similarities at each scale
 *             k = idxsa
 *             if popt.fit_U:             # <<<<<<<<<<<<<<
 *                 for h in range(popt.ns):
 *                     popt.sa[rs][k] /= popt.Z_rs[h][rs]
 */
      __pyx_t_7 = (__pyx_v_popt->fit_U != 0);
      if (__pyx_t_7) {

        /* "fmsne_implem.pyx":2660
 *             k = idxsa
 *             if popt.fit_U:
 *                 for h in range(popt.ns):             # <<<<<<<<<<<<<<
 *                     popt.sa[rs][k] /= popt.Z_rs[h][rs]
 *                     k += 1
 */
        __pyx_t_8 = __pyx_v_popt->ns;
        __pyx_t_9 = __pyx_t_8;
        for (__pyx_t_10 = 0; __pyx_t_10 < __pyx_t_9; __pyx_t_10+=1) {
          __pyx_v_h = __pyx_t_10;

          /* "fmsne_implem.pyx":2661
 *             if popt.fit_U:
 *                 for h in range(popt.ns):
 *                     popt.sa[rs][k] /= popt.Z_rs[h][rs]             # <<<<<<<<<<<<<<
 *                     k += 1
 *             else:
 */
          __pyx_t_11 = __pyx_v_rs;
          __pyx_t_12 = __pyx_v_k;
          ((__pyx_v_popt->sa[__pyx_t_11])[__pyx_t_12]) = (((__pyx_v_popt->sa[__pyx_t_11])[__pyx_t_12]) / ((__pyx_v_popt->Z_rs[__pyx_v_h])[__pyx_v_rs]));

          /* "fmsne_implem.pyx":2662
 *                 for h in range(popt.ns):
 *                     popt.sa[rs][k] /= popt.Z_rs[h][rs]
 *                     k += 1             # <<<<<<<<<<<<<<
 *             else:
 *                 for h in range(popt.ns):
 */
          __pyx_v_k = (__pyx_v_k + 1);
        }

        /* "fmsne_implem.pyx":2659
 *             # Normalizing the supplementary attributes by the denominator of the LD similarities at each scale
 *             k = idxsa
 *             if popt.fit_U:             # <<<<<<<<<<<<<<
 *                 for h in range(popt.ns):
 *                     popt.sa[rs][k] /= popt.Z_rs[h][rs]
 */
        goto __pyx_L41;
      }

      /* "fmsne_implem.pyx":2664
 *                     k += 1
 *             else:
 *                 for h in range(popt.ns):             # <<<<<<<<<<<<<<
 *                     popt.sa[rs][k] /= popt.Z[h]
 *                     k += 1
 */
      /*else*/ {
        __pyx_t_8 = __pyx_v_popt->ns;
        __pyx_t_9 = __pyx_t_8;
        for (__pyx_t_10 = 0; __pyx_t_10 < __pyx_t_9; __pyx_t_10+=1) {
          __pyx_v_h = __pyx_t_10;

          /* "fmsne_implem.pyx":2665
 *             else:
 *                 for h in range(popt.ns):
 *                     popt.sa[rs][k] /= popt.Z[h]             # <<<<<<<<<<<<<<
 *                     k += 1
 *         # Updating idx and idxsa
 */
          __pyx_t_11 = __pyx_v_rs;
          __pyx_t_12 = __pyx_v_k;
          ((__pyx_v_popt->sa[__pyx_t_11])[__pyx_t_12]) = (((__pyx_v_popt->sa[__pyx_t_11])[__pyx_t_12]) / (__pyx_v_popt->Z[__pyx_v_h]));

          /* "fmsne_implem.pyx":2666
 *                 for h in range(popt.ns):
 *                     popt.sa[rs][k] /= popt.Z[h]
 *                     k += 1             # <<<<<<<<<<<<<<
 *         # Updating idx and idxsa
 *         idx += popt.n_components
 */
          __pyx_v_k = (__pyx_v_k + 1);
        }
      }
      __pyx_L41:;
    }

    /* "fmsne_implem.pyx":2668
 *                     k += 1
 *         # Updating idx and idxsa
 *         idx += popt.n_components             # <<<<<<<<<<<<<<
 *         idxsa += popt.ns
 * 
 */
    __pyx_v_idx = (__pyx_v_idx + __pyx_v_popt->n_components);

    /* "fmsne_implem.pyx":2669
 *         # Updating idx and idxsa
 *         idx += popt.n_components
 *         idxsa += popt.ns             # <<<<<<<<<<<<<<
 * 
 *     # Updating the interaction function in the tree
 */
    __pyx_v_idxsa = (__pyx_v_idxsa + __pyx_v_popt->ns);
  }

  /* "fmsne_implem.pyx":2672
 * 
 *     # Updating the interaction function in the tree
 *     tree.inter_fct = popt.inter_fct_2             # <<<<<<<<<<<<<<
 * 
 *     # Finishing to update the gradient.
 */
  __pyx_t_17 = __pyx_v_popt->inter_fct_2;
  __pyx_v_tree->inter_fct = __pyx_t_17;

  /* "fmsne_implem.pyx":2675
 * 
 *     # Finishing to update the gradient.
 *     for rs in range(popt.n_rs):             # <<<<<<<<<<<<<<
 *         # Updating the supplementary attributes in the tree
 *         update_sa_SpTree(tree, x, popt.sa[rs], popt.ns)
 */
  __pyx_t_1 = __pyx_v_popt->n_rs;
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_rs = __pyx_t_3;

    /* "fmsne_implem.pyx":2677
 *     for rs in range(popt.n_rs):
 *         # Updating the supplementary attributes in the tree
 *         update_sa_SpTree(tree, x, popt.sa[rs], popt.ns)             # <<<<<<<<<<<<<<
 *         # For each data point
 *         idx = 0
 */
    __pyx_f_12fmsne_implem_update_sa_SpTree(__pyx_v_tree, __pyx_v_x, (__pyx_v_popt->sa[__pyx_v_rs]), __pyx_v_popt->ns);

    /* "fmsne_implem.pyx":2679
 *         update_sa_SpTree(tree, x, popt.sa[rs], popt.ns)
 *         # For each data point
 *         idx = 0             # <<<<<<<<<<<<<<
 *         for i in range(popt.N):
 *             # Updating the currently considered coordinates of the gradient directly
 */
    __pyx_v_idx = 0;

    /* "fmsne_implem.pyx":2680
 *         # For each data point
 *         idx = 0
 *         for i in range(popt.N):             # <<<<<<<<<<<<<<
 *             # Updating the currently considered coordinates of the gradient directly
 *             approxInteractions_SpTree(tree, &x[idx], popt.theta_s, &g[idx], popt.Z_rs, popt.sX_rs, popt.t_h, popt.t_h_rs, popt.qdiff, popt.ns, rs)
 */
    __pyx_t_4 = __pyx_v_popt->N;
    __pyx_t_5 = __pyx_t_4;
    for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
      __pyx_v_i = __pyx_t_6;

      /* "fmsne_implem.pyx":2682
 *         for i in range(popt.N):
 *             # Updating the currently considered coordinates of the gradient directly
 *             approxInteractions_SpTree(tree, &x[idx], popt.theta_s, &g[idx], popt.Z_rs, popt.sX_rs, popt.t_h, popt.t_h_rs, popt.qdiff, popt.ns, rs)             # <<<<<<<<<<<<<<
 *             # Updating idx
 *             idx += popt.n_components
 */
      (void)(__pyx_f_12fmsne_implem_approxInteractions_SpTree(__pyx_v_tree, (&(__pyx_v_x[__pyx_v_idx])), __pyx_v_popt->theta_s, (&(__pyx_v_g[__pyx_v_idx])), __pyx_v_popt->Z_rs, __pyx_v_popt->sX_rs, __pyx_v_popt->t_h, __pyx_v_popt->t_h_rs, __pyx_v_popt->qdiff, __pyx_v_popt->ns, __pyx_v_rs));

      /* "fmsne_implem.pyx":2684
 *             approxInteractions_SpTree(tree, &x[idx], popt.theta_s, &g[idx], popt.Z_rs, popt.sX_rs, popt.t_h, popt.t_h_rs, popt.qdiff, popt.ns, rs)
 *             # Updating idx
 *             idx += popt.n_components             # <<<<<<<<<<<<<<
 * 
 *     # Free the ressources allocated for the tree
 */
      __pyx_v_idx = (__pyx_v_idx + __pyx_v_popt->n_components);
    }
  }

  /* "fmsne_implem.pyx":2687
 * 
 *     # Free the ressources allocated for the tree
 *     free_SpTree(tree)             # <<<<<<<<<<<<<<
 * 
 *     # Normalizing the gradient
 */
  __pyx_f_12fmsne_implem_free_SpTree(__pyx_v_tree);

  /* "fmsne_implem.pyx":2690
 * 
 *     # Normalizing the gradient
 *     for i in range(n):             # <<<<<<<<<<<<<<
 *         g[i] *= popt.inv_nsrs
 * 
 */
  __pyx_t_17 = __pyx_v_n;
  __pyx_t_18 = __pyx_t_17;
  for (__pyx_t_1 = 0; __pyx_t_1 < __pyx_t_18; __pyx_t_1+=1) {
    __pyx_v_i = __pyx_t_1;

    /* "fmsne_implem.pyx":2691
 *     # Normalizing the gradient
 *     for i in range(n):
 *         g[i] *= popt.inv_nsrs             # <<<<<<<<<<<<<<
 * 
 *     # Returning the cost function value
 */
    __pyx_t_2 = __pyx_v_i;
    (__pyx_v_g[__pyx_t_2]) = ((__pyx_v_g[__pyx_t_2]) * __pyx_v_popt->inv_nsrs);
  }

  /* "fmsne_implem.pyx":2694
 * 
 *     # Returning the cost function value
 *     return fx*popt.inv_n_rs_f             # <<<<<<<<<<<<<<
 * 
 * cpdef inline void fmssne_implem(double[::1] X_hds, double[::1] X_lds, int N, int d_hds, int n_components, bint cperp, int n_rs, bint fit_U, double ms_thetha, int nit_max, double gtol, double ftol, int maxls, int maxcor, int L_min, int rseed, bint sym_nn):
 */
  __pyx_r = (__pyx_v_fx * __pyx_v_popt->inv_n_rs_f);
  goto __pyx_L0;

  /* "fmsne_implem.pyx":2551
 *     Py_ssize_t*** nn_i_rs_id_dld    # Matching between the neighbors in arr_nn and the LD distances in dij_ld
 * 
 * cdef inline lbfgsfloatval_t fmssne_evaluate(void* instance, const lbfgsfloatval_t* x, lbfgsfloatval_t* g, const int n, const lbfgsfloatval_t step):             # <<<<<<<<<<<<<<
 *     """
 *     Computes cost function and gradient for the current LD coordinates.
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "fmsne_implem.pyx":2696
 *     return fx*popt.inv_n_rs_f
 * 
 * cpdef inline void fmssne_implem(double[::1] X_hds, double[::1] X_lds, int N, int d_hds, int n_components, bint cperp, int n_rs, bint fit_U, double ms_thetha, int nit_max, double gtol, double ftol, int maxls, int maxcor, int L_min, int rseed, bint sym_nn):             # <<<<<<<<<<<<<<
 *     """
 *     Cython implementation of Fast Multi-scale SNE.
 */

static PyObject *__pyx_pw_12fmsne_implem_5fmssne_implem(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static CYTHON_INLINE void __pyx_f_12fmsne_implem_fmssne_implem(__Pyx_memviewslice __pyx_v_X_hds, __Pyx_memviewslice __pyx_v_X_lds, int __pyx_v_N, int __pyx_v_d_hds, int __pyx_v_n_components, int __pyx_v_cperp, int __pyx_v_n_rs, int __pyx_v_fit_U, double __pyx_v_ms_thetha, int __pyx_v_nit_max, double __pyx_v_gtol, double __pyx_v_ftol, int __pyx_v_maxls, int __pyx_v_maxcor, int __pyx_v_L_min, int __pyx_v_rseed, int __pyx_v_sym_nn, CYTHON_UNUSED int __pyx_skip_dispatch) {
  double __pyx_v_Nd;
  int __pyx_v_K_star;
  int __pyx_v_isLmin1;
  int __pyx_v_isnotLmin1;
  int __pyx_v_L;
  int __pyx_v_sLm_nt;
  int *__pyx_v_K_h;
  int *__pyx_v_n_ds_h;
  int *__pyx_v_all_ind;
  int *__pyx_v_nnn_h;
  int ***__pyx_v_arr_nn_i_rs;
  int **__pyx_v_nnn_i_rs;
  double ***__pyx_v_ds_nn_i_rs;
  double ***__pyx_v_tau_h_i_rs;
  Py_ssize_t ***__pyx_v_nn_i_rs_id_dld;
  size_t __pyx_v_shdp;
  Py_ssize_t *__pyx_v_ni_dld;
  Py_ssize_t **__pyx_v_ij_dld;
  double **__pyx_v_dij_ld;
  double *__pyx_v_p_h;
  double *__pyx_v_t_h;
  double **__pyx_v_p_h_rs;
  double **__pyx_v_t_h_rs;
  double *__pyx_v_xlds;
  int __pyx_v_prod_N_nc;
  double ***__pyx_v_simhd_ms_nn_i_rs;
  double ***__pyx_v_simhd_h_nn_i_rs;
  lbfgsfloatval_t *__pyx_v_xopt;
  struct __pyx_t_12fmsne_implem_Opfmssne *__pyx_v_popt;
  lbfgs_parameter_t __pyx_v_param;
  lbfgs_parameter_t *__pyx_v_pparam;
  Py_ssize_t __pyx_v_k;
  Py_ssize_t __pyx_v_h;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  long __pyx_t_3;
  long __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  __Pyx_RefNannySetupContext("fmssne_implem", 0);

  /* "fmsne_implem.pyx":2704
 *     """
 *     # Fix the random seed
 *     srand(rseed)             # <<<<<<<<<<<<<<
 *     # Number of data points in double
 *     cdef double Nd = <double> N
 */
  srand(__pyx_v_rseed);

  /* "fmsne_implem.pyx":2706
 *     srand(rseed)
 *     # Number of data points in double
 *     cdef double Nd = <double> N             # <<<<<<<<<<<<<<
 * 
 *     #####
 */
  __pyx_v_Nd = ((double)__pyx_v_N);

  /* "fmsne_implem.pyx":2712
 *     #####
 * 
 *     cdef int K_star = 2             # <<<<<<<<<<<<<<
 *     cdef bint isLmin1 = L_min == 1
 *     cdef bint isnotLmin1 = not isLmin1
 */
  __pyx_v_K_star = 2;

  /* "fmsne_implem.pyx":2713
 * 
 *     cdef int K_star = 2
 *     cdef bint isLmin1 = L_min == 1             # <<<<<<<<<<<<<<
 *     cdef bint isnotLmin1 = not isLmin1
 *     # Number of scales
 */
  __pyx_v_isLmin1 = (__pyx_v_L_min == 1);

  /* "fmsne_implem.pyx":2714
 *     cdef int K_star = 2
 *     cdef bint isLmin1 = L_min == 1
 *     cdef bint isnotLmin1 = not isLmin1             # <<<<<<<<<<<<<<
 *     # Number of scales
 *     cdef int L = ms_def_n_scales(Nd, K_star, L_min, isLmin1)
 */
  __pyx_v_isnotLmin1 = (!(__pyx_v_isLmin1 != 0));

  /* "fmsne_implem.pyx":2716
 *     cdef bint isnotLmin1 = not isLmin1
 *     # Number of scales
 *     cdef int L = ms_def_n_scales(Nd, K_star, L_min, isLmin1)             # <<<<<<<<<<<<<<
 * 
 *     # Just a shift for the perplexity at first scale when L_min != 1
 */
  __pyx_v_L = __pyx_f_12fmsne_implem_ms_def_n_scales(__pyx_v_Nd, __pyx_v_K_star, __pyx_v_L_min, __pyx_v_isLmin1);

  /* "fmsne_implem.pyx":2719
 * 
 *     # Just a shift for the perplexity at first scale when L_min != 1
 *     cdef int sLm_nt = ms_def_shift_Lmin(isnotLmin1, L_min)             # <<<<<<<<<<<<<<
 * 
 *     # Perplexity at each scale
 */
  __pyx_v_sLm_nt = __pyx_f_12fmsne_implem_ms_def_shift_Lmin(__pyx_v_isnotLmin1, __pyx_v_L_min);

  /* "fmsne_implem.pyx":2722
 * 
 *     # Perplexity at each scale
 *     cdef int* K_h = ms_def_Kh(K_star, isnotLmin1, sLm_nt, L)             # <<<<<<<<<<<<<<
 *     if K_h is NULL:
 *         printf("Error in fmssne_implem function of fmsne_implem.pyx: out of memory for K_h.")
 */
  __pyx_v_K_h = __pyx_f_12fmsne_implem_ms_def_Kh(__pyx_v_K_star, __pyx_v_isnotLmin1, __pyx_v_sLm_nt, __pyx_v_L);

  /* "fmsne_implem.pyx":2723
 *     # Perplexity at each scale
 *     cdef int* K_h = ms_def_Kh(K_star, isnotLmin1, sLm_nt, L)
 *     if K_h is NULL:             # <<<<<<<<<<<<<<
 *         printf("Error in fmssne_implem function of fmsne_implem.pyx: out of memory for K_h.")
 *         exit(EXIT_FAILURE)
 */
  __pyx_t_1 = ((__pyx_v_K_h == NULL) != 0);
  if (__pyx_t_1) {

    /* "fmsne_implem.pyx":2724
 *     cdef int* K_h = ms_def_Kh(K_star, isnotLmin1, sLm_nt, L)
 *     if K_h is NULL:
 *         printf("Error in fmssne_implem function of fmsne_implem.pyx: out of memory for K_h.")             # <<<<<<<<<<<<<<
 *         exit(EXIT_FAILURE)
 * 
 */
    (void)(printf(((char const *)"Error in fmssne_implem function of fmsne_implem.pyx: out of memory for K_h.")));

    /* "fmsne_implem.pyx":2725
 *     if K_h is NULL:
 *         printf("Error in fmssne_implem function of fmsne_implem.pyx: out of memory for K_h.")
 *         exit(EXIT_FAILURE)             # <<<<<<<<<<<<<<
 * 
 *     #####
 */
    exit(EXIT_FAILURE);

    /* "fmsne_implem.pyx":2723
 *     # Perplexity at each scale
 *     cdef int* K_h = ms_def_Kh(K_star, isnotLmin1, sLm_nt, L)
 *     if K_h is NULL:             # <<<<<<<<<<<<<<
 *         printf("Error in fmssne_implem function of fmsne_implem.pyx: out of memory for K_h.")
 *         exit(EXIT_FAILURE)
 */
  }

  /* "fmsne_implem.pyx":2732
 * 
 *     # Size of the subsampled data set at each scale (except the first scale if L_min==1)
 *     cdef int* n_ds_h = f_def_n_ds_h(isLmin1, N, sLm_nt, Nd, L)             # <<<<<<<<<<<<<<
 *     if n_ds_h is NULL:
 *         PyMem_Free(K_h)
 */
  __pyx_v_n_ds_h = __pyx_f_12fmsne_implem_f_def_n_ds_h(__pyx_v_isLmin1, __pyx_v_N, __pyx_v_sLm_nt, __pyx_v_Nd, __pyx_v_L);

  /* "fmsne_implem.pyx":2733
 *     # Size of the subsampled data set at each scale (except the first scale if L_min==1)
 *     cdef int* n_ds_h = f_def_n_ds_h(isLmin1, N, sLm_nt, Nd, L)
 *     if n_ds_h is NULL:             # <<<<<<<<<<<<<<
 *         PyMem_Free(K_h)
 *         printf("Error in fmssne_implem function of fmsne_implem.pyx: out of memory for n_ds_h.")
 */
  __pyx_t_1 = ((__pyx_v_n_ds_h == NULL) != 0);
  if (__pyx_t_1) {

    /* "fmsne_implem.pyx":2734
 *     cdef int* n_ds_h = f_def_n_ds_h(isLmin1, N, sLm_nt, Nd, L)
 *     if n_ds_h is NULL:
 *         PyMem_Free(K_h)             # <<<<<<<<<<<<<<
 *         printf("Error in fmssne_implem function of fmsne_implem.pyx: out of memory for n_ds_h.")
 *         exit(EXIT_FAILURE)
 */
    PyMem_Free(__pyx_v_K_h);

    /* "fmsne_implem.pyx":2735
 *     if n_ds_h is NULL:
 *         PyMem_Free(K_h)
 *         printf("Error in fmssne_implem function of fmsne_implem.pyx: out of memory for n_ds_h.")             # <<<<<<<<<<<<<<
 *         exit(EXIT_FAILURE)
 * 
 */
    (void)(printf(((char const *)"Error in fmssne_implem function of fmsne_implem.pyx: out of memory for n_ds_h.")));

    /* "fmsne_implem.pyx":2736
 *         PyMem_Free(K_h)
 *         printf("Error in fmssne_implem function of fmsne_implem.pyx: out of memory for n_ds_h.")
 *         exit(EXIT_FAILURE)             # <<<<<<<<<<<<<<
 * 
 *     #####
 */
    exit(EXIT_FAILURE);

    /* "fmsne_implem.pyx":2733
 *     # Size of the subsampled data set at each scale (except the first scale if L_min==1)
 *     cdef int* n_ds_h = f_def_n_ds_h(isLmin1, N, sLm_nt, Nd, L)
 *     if n_ds_h is NULL:             # <<<<<<<<<<<<<<
 *         PyMem_Free(K_h)
 *         printf("Error in fmssne_implem function of fmsne_implem.pyx: out of memory for n_ds_h.")
 */
  }

  /* "fmsne_implem.pyx":2742
 *     #####
 * 
 *     cdef int* all_ind = seq_1step(N)             # <<<<<<<<<<<<<<
 *     if all_ind is NULL:
 *         PyMem_Free(K_h)
 */
  __pyx_v_all_ind = __pyx_f_12fmsne_implem_seq_1step(__pyx_v_N);

  /* "fmsne_implem.pyx":2743
 * 
 *     cdef int* all_ind = seq_1step(N)
 *     if all_ind is NULL:             # <<<<<<<<<<<<<<
 *         PyMem_Free(K_h)
 *         PyMem_Free(n_ds_h)
 */
  __pyx_t_1 = ((__pyx_v_all_ind == NULL) != 0);
  if (__pyx_t_1) {

    /* "fmsne_implem.pyx":2744
 *     cdef int* all_ind = seq_1step(N)
 *     if all_ind is NULL:
 *         PyMem_Free(K_h)             # <<<<<<<<<<<<<<
 *         PyMem_Free(n_ds_h)
 *         printf("Error in fmssne_implem function of fmsne_implem.pyx: out of memory for all_ind.")
 */
    PyMem_Free(__pyx_v_K_h);

    /* "fmsne_implem.pyx":2745
 *     if all_ind is NULL:
 *         PyMem_Free(K_h)
 *         PyMem_Free(n_ds_h)             # <<<<<<<<<<<<<<
 *         printf("Error in fmssne_implem function of fmsne_implem.pyx: out of memory for all_ind.")
 *         exit(EXIT_FAILURE)
 */
    PyMem_Free(__pyx_v_n_ds_h);

    /* "fmsne_implem.pyx":2746
 *         PyMem_Free(K_h)
 *         PyMem_Free(n_ds_h)
 *         printf("Error in fmssne_implem function of fmsne_implem.pyx: out of memory for all_ind.")             # <<<<<<<<<<<<<<
 *         exit(EXIT_FAILURE)
 * 
 */
    (void)(printf(((char const *)"Error in fmssne_implem function of fmsne_implem.pyx: out of memory for all_ind.")));

    /* "fmsne_implem.pyx":2747
 *         PyMem_Free(n_ds_h)
 *         printf("Error in fmssne_implem function of fmsne_implem.pyx: out of memory for all_ind.")
 *         exit(EXIT_FAILURE)             # <<<<<<<<<<<<<<
 * 
 *     #####
 */
    exit(EXIT_FAILURE);

    /* "fmsne_implem.pyx":2743
 * 
 *     cdef int* all_ind = seq_1step(N)
 *     if all_ind is NULL:             # <<<<<<<<<<<<<<
 *         PyMem_Free(K_h)
 *         PyMem_Free(n_ds_h)
 */
  }

  /* "fmsne_implem.pyx":2753
 *     #####
 * 
 *     cdef int* nnn_h = f_def_nnn_h(L, K_h, n_ds_h, cperp)             # <<<<<<<<<<<<<<
 *     if nnn_h is NULL:
 *         PyMem_Free(K_h)
 */
  __pyx_v_nnn_h = __pyx_f_12fmsne_implem_f_def_nnn_h(__pyx_v_L, __pyx_v_K_h, __pyx_v_n_ds_h, __pyx_v_cperp);

  /* "fmsne_implem.pyx":2754
 * 
 *     cdef int* nnn_h = f_def_nnn_h(L, K_h, n_ds_h, cperp)
 *     if nnn_h is NULL:             # <<<<<<<<<<<<<<
 *         PyMem_Free(K_h)
 *         PyMem_Free(n_ds_h)
 */
  __pyx_t_1 = ((__pyx_v_nnn_h == NULL) != 0);
  if (__pyx_t_1) {

    /* "fmsne_implem.pyx":2755
 *     cdef int* nnn_h = f_def_nnn_h(L, K_h, n_ds_h, cperp)
 *     if nnn_h is NULL:
 *         PyMem_Free(K_h)             # <<<<<<<<<<<<<<
 *         PyMem_Free(n_ds_h)
 *         PyMem_Free(all_ind)
 */
    PyMem_Free(__pyx_v_K_h);

    /* "fmsne_implem.pyx":2756
 *     if nnn_h is NULL:
 *         PyMem_Free(K_h)
 *         PyMem_Free(n_ds_h)             # <<<<<<<<<<<<<<
 *         PyMem_Free(all_ind)
 *         printf("Error in fmssne_implem function of fmsne_implem.pyx: out of memory for nnn_h.")
 */
    PyMem_Free(__pyx_v_n_ds_h);

    /* "fmsne_implem.pyx":2757
 *         PyMem_Free(K_h)
 *         PyMem_Free(n_ds_h)
 *         PyMem_Free(all_ind)             # <<<<<<<<<<<<<<
 *         printf("Error in fmssne_implem function of fmsne_implem.pyx: out of memory for nnn_h.")
 *         exit(EXIT_FAILURE)
 */
    PyMem_Free(__pyx_v_all_ind);

    /* "fmsne_implem.pyx":2758
 *         PyMem_Free(n_ds_h)
 *         PyMem_Free(all_ind)
 *         printf("Error in fmssne_implem function of fmsne_implem.pyx: out of memory for nnn_h.")             # <<<<<<<<<<<<<<
 *         exit(EXIT_FAILURE)
 *     # Sum of the elements of nnn_h
 */
    (void)(printf(((char const *)"Error in fmssne_implem function of fmsne_implem.pyx: out of memory for nnn_h.")));

    /* "fmsne_implem.pyx":2759
 *         PyMem_Free(all_ind)
 *         printf("Error in fmssne_implem function of fmsne_implem.pyx: out of memory for nnn_h.")
 *         exit(EXIT_FAILURE)             # <<<<<<<<<<<<<<
 *     # Sum of the elements of nnn_h
 *     sLm_nt = f_nnn_tot(nnn_h, L)
 */
    exit(EXIT_FAILURE);

    /* "fmsne_implem.pyx":2754
 * 
 *     cdef int* nnn_h = f_def_nnn_h(L, K_h, n_ds_h, cperp)
 *     if nnn_h is NULL:             # <<<<<<<<<<<<<<
 *         PyMem_Free(K_h)
 *         PyMem_Free(n_ds_h)
 */
  }

  /* "fmsne_implem.pyx":2761
 *         exit(EXIT_FAILURE)
 *     # Sum of the elements of nnn_h
 *     sLm_nt = f_nnn_tot(nnn_h, L)             # <<<<<<<<<<<<<<
 * 
 *     #####
 */
  __pyx_v_sLm_nt = __pyx_f_12fmsne_implem_f_nnn_tot(__pyx_v_nnn_h, __pyx_v_L);

  /* "fmsne_implem.pyx":2769
 * 
 *     # Allocating memory to store the indexes of the considered neighbors for each data point, for each random sampling. In function f_nn_ds_hdprec, arr_nn_i_rs will be reallocated so that its third dimension may be smaller than sLm_nt.
 *     cdef int*** arr_nn_i_rs = alloc_int_3dmat(n_rs, N, sLm_nt)             # <<<<<<<<<<<<<<
 *     if arr_nn_i_rs is NULL:
 *         PyMem_Free(K_h)
 */
  __pyx_v_arr_nn_i_rs = __pyx_f_12fmsne_implem_alloc_int_3dmat(__pyx_v_n_rs, __pyx_v_N, __pyx_v_sLm_nt);

  /* "fmsne_implem.pyx":2770
 *     # Allocating memory to store the indexes of the considered neighbors for each data point, for each random sampling. In function f_nn_ds_hdprec, arr_nn_i_rs will be reallocated so that its third dimension may be smaller than sLm_nt.
 *     cdef int*** arr_nn_i_rs = alloc_int_3dmat(n_rs, N, sLm_nt)
 *     if arr_nn_i_rs is NULL:             # <<<<<<<<<<<<<<
 *         PyMem_Free(K_h)
 *         PyMem_Free(n_ds_h)
 */
  __pyx_t_1 = ((__pyx_v_arr_nn_i_rs == NULL) != 0);
  if (__pyx_t_1) {

    /* "fmsne_implem.pyx":2771
 *     cdef int*** arr_nn_i_rs = alloc_int_3dmat(n_rs, N, sLm_nt)
 *     if arr_nn_i_rs is NULL:
 *         PyMem_Free(K_h)             # <<<<<<<<<<<<<<
 *         PyMem_Free(n_ds_h)
 *         PyMem_Free(all_ind)
 */
    PyMem_Free(__pyx_v_K_h);

    /* "fmsne_implem.pyx":2772
 *     if arr_nn_i_rs is NULL:
 *         PyMem_Free(K_h)
 *         PyMem_Free(n_ds_h)             # <<<<<<<<<<<<<<
 *         PyMem_Free(all_ind)
 *         PyMem_Free(nnn_h)
 */
    PyMem_Free(__pyx_v_n_ds_h);

    /* "fmsne_implem.pyx":2773
 *         PyMem_Free(K_h)
 *         PyMem_Free(n_ds_h)
 *         PyMem_Free(all_ind)             # <<<<<<<<<<<<<<
 *         PyMem_Free(nnn_h)
 *         printf("Error in fmssne_implem function of fmsne_implem.pyx: out of memory for arr_nn_i_rs.")
 */
    PyMem_Free(__pyx_v_all_ind);

    /* "fmsne_implem.pyx":2774
 *         PyMem_Free(n_ds_h)
 *         PyMem_Free(all_ind)
 *         PyMem_Free(nnn_h)             # <<<<<<<<<<<<<<
 *         printf("Error in fmssne_implem function of fmsne_implem.pyx: out of memory for arr_nn_i_rs.")
 *         exit(EXIT_FAILURE)
 */
    PyMem_Free(__pyx_v_nnn_h);

    /* "fmsne_implem.pyx":2775
 *         PyMem_Free(all_ind)
 *         PyMem_Free(nnn_h)
 *         printf("Error in fmssne_implem function of fmsne_implem.pyx: out of memory for arr_nn_i_rs.")             # <<<<<<<<<<<<<<
 *         exit(EXIT_FAILURE)
 * 
 */
    (void)(printf(((char const *)"Error in fmssne_implem function of fmsne_implem.pyx: out of memory for arr_nn_i_rs.")));

    /* "fmsne_implem.pyx":2776
 *         PyMem_Free(nnn_h)
 *         printf("Error in fmssne_implem function of fmsne_implem.pyx: out of memory for arr_nn_i_rs.")
 *         exit(EXIT_FAILURE)             # <<<<<<<<<<<<<<
 * 
 *     # Allocating memory to store the number of considered neighbors for each data point, for each random sampling
 */
    exit(EXIT_FAILURE);

    /* "fmsne_implem.pyx":2770
 *     # Allocating memory to store the indexes of the considered neighbors for each data point, for each random sampling. In function f_nn_ds_hdprec, arr_nn_i_rs will be reallocated so that its third dimension may be smaller than sLm_nt.
 *     cdef int*** arr_nn_i_rs = alloc_int_3dmat(n_rs, N, sLm_nt)
 *     if arr_nn_i_rs is NULL:             # <<<<<<<<<<<<<<
 *         PyMem_Free(K_h)
 *         PyMem_Free(n_ds_h)
 */
  }

  /* "fmsne_implem.pyx":2779
 * 
 *     # Allocating memory to store the number of considered neighbors for each data point, for each random sampling
 *     cdef int** nnn_i_rs = calloc_int_2dmat(n_rs, N)             # <<<<<<<<<<<<<<
 *     if nnn_i_rs is NULL:
 *         PyMem_Free(K_h)
 */
  __pyx_v_nnn_i_rs = __pyx_f_12fmsne_implem_calloc_int_2dmat(__pyx_v_n_rs, __pyx_v_N);

  /* "fmsne_implem.pyx":2780
 *     # Allocating memory to store the number of considered neighbors for each data point, for each random sampling
 *     cdef int** nnn_i_rs = calloc_int_2dmat(n_rs, N)
 *     if nnn_i_rs is NULL:             # <<<<<<<<<<<<<<
 *         PyMem_Free(K_h)
 *         PyMem_Free(n_ds_h)
 */
  __pyx_t_1 = ((__pyx_v_nnn_i_rs == NULL) != 0);
  if (__pyx_t_1) {

    /* "fmsne_implem.pyx":2781
 *     cdef int** nnn_i_rs = calloc_int_2dmat(n_rs, N)
 *     if nnn_i_rs is NULL:
 *         PyMem_Free(K_h)             # <<<<<<<<<<<<<<
 *         PyMem_Free(n_ds_h)
 *         PyMem_Free(all_ind)
 */
    PyMem_Free(__pyx_v_K_h);

    /* "fmsne_implem.pyx":2782
 *     if nnn_i_rs is NULL:
 *         PyMem_Free(K_h)
 *         PyMem_Free(n_ds_h)             # <<<<<<<<<<<<<<
 *         PyMem_Free(all_ind)
 *         PyMem_Free(nnn_h)
 */
    PyMem_Free(__pyx_v_n_ds_h);

    /* "fmsne_implem.pyx":2783
 *         PyMem_Free(K_h)
 *         PyMem_Free(n_ds_h)
 *         PyMem_Free(all_ind)             # <<<<<<<<<<<<<<
 *         PyMem_Free(nnn_h)
 *         free_int_3dmat(arr_nn_i_rs, n_rs, N)
 */
    PyMem_Free(__pyx_v_all_ind);

    /* "fmsne_implem.pyx":2784
 *         PyMem_Free(n_ds_h)
 *         PyMem_Free(all_ind)
 *         PyMem_Free(nnn_h)             # <<<<<<<<<<<<<<
 *         free_int_3dmat(arr_nn_i_rs, n_rs, N)
 *         printf("Error in fmssne_implem function of fmsne_implem.pyx: out of memory for nnn_i_rs.")
 */
    PyMem_Free(__pyx_v_nnn_h);

    /* "fmsne_implem.pyx":2785
 *         PyMem_Free(all_ind)
 *         PyMem_Free(nnn_h)
 *         free_int_3dmat(arr_nn_i_rs, n_rs, N)             # <<<<<<<<<<<<<<
 *         printf("Error in fmssne_implem function of fmsne_implem.pyx: out of memory for nnn_i_rs.")
 *         exit(EXIT_FAILURE)
 */
    __pyx_f_12fmsne_implem_free_int_3dmat(__pyx_v_arr_nn_i_rs, __pyx_v_n_rs, __pyx_v_N);

    /* "fmsne_implem.pyx":2786
 *         PyMem_Free(nnn_h)
 *         free_int_3dmat(arr_nn_i_rs, n_rs, N)
 *         printf("Error in fmssne_implem function of fmsne_implem.pyx: out of memory for nnn_i_rs.")             # <<<<<<<<<<<<<<
 *         exit(EXIT_FAILURE)
 * 
 */
    (void)(printf(((char const *)"Error in fmssne_implem function of fmsne_implem.pyx: out of memory for nnn_i_rs.")));

    /* "fmsne_implem.pyx":2787
 *         free_int_3dmat(arr_nn_i_rs, n_rs, N)
 *         printf("Error in fmssne_implem function of fmsne_implem.pyx: out of memory for nnn_i_rs.")
 *         exit(EXIT_FAILURE)             # <<<<<<<<<<<<<<
 * 
 *     # Allocating memory to store the squared distances between the considered neighbors and each data point, for each random sampling. In fact, for each random sampling rs, data point i and neighbor j, ds_nn_i_rs[rs][i][j] will contain the minimum squared distance between i and all its neighbors in random sampling rs minus the squared distance between i and j. In function f_nn_ds_hdprec, ds_nn_i_rs will be reallocated so that its third dimension may be smaller than sLm_nt.
 */
    exit(EXIT_FAILURE);

    /* "fmsne_implem.pyx":2780
 *     # Allocating memory to store the number of considered neighbors for each data point, for each random sampling
 *     cdef int** nnn_i_rs = calloc_int_2dmat(n_rs, N)
 *     if nnn_i_rs is NULL:             # <<<<<<<<<<<<<<
 *         PyMem_Free(K_h)
 *         PyMem_Free(n_ds_h)
 */
  }

  /* "fmsne_implem.pyx":2790
 * 
 *     # Allocating memory to store the squared distances between the considered neighbors and each data point, for each random sampling. In fact, for each random sampling rs, data point i and neighbor j, ds_nn_i_rs[rs][i][j] will contain the minimum squared distance between i and all its neighbors in random sampling rs minus the squared distance between i and j. In function f_nn_ds_hdprec, ds_nn_i_rs will be reallocated so that its third dimension may be smaller than sLm_nt.
 *     cdef double*** ds_nn_i_rs = alloc_dble_3dmat(n_rs, N, sLm_nt)             # <<<<<<<<<<<<<<
 *     if ds_nn_i_rs is NULL:
 *         PyMem_Free(K_h)
 */
  __pyx_v_ds_nn_i_rs = __pyx_f_12fmsne_implem_alloc_dble_3dmat(__pyx_v_n_rs, __pyx_v_N, __pyx_v_sLm_nt);

  /* "fmsne_implem.pyx":2791
 *     # Allocating memory to store the squared distances between the considered neighbors and each data point, for each random sampling. In fact, for each random sampling rs, data point i and neighbor j, ds_nn_i_rs[rs][i][j] will contain the minimum squared distance between i and all its neighbors in random sampling rs minus the squared distance between i and j. In function f_nn_ds_hdprec, ds_nn_i_rs will be reallocated so that its third dimension may be smaller than sLm_nt.
 *     cdef double*** ds_nn_i_rs = alloc_dble_3dmat(n_rs, N, sLm_nt)
 *     if ds_nn_i_rs is NULL:             # <<<<<<<<<<<<<<
 *         PyMem_Free(K_h)
 *         PyMem_Free(n_ds_h)
 */
  __pyx_t_1 = ((__pyx_v_ds_nn_i_rs == NULL) != 0);
  if (__pyx_t_1) {

    /* "fmsne_implem.pyx":2792
 *     cdef double*** ds_nn_i_rs = alloc_dble_3dmat(n_rs, N, sLm_nt)
 *     if ds_nn_i_rs is NULL:
 *         PyMem_Free(K_h)             # <<<<<<<<<<<<<<
 *         PyMem_Free(n_ds_h)
 *         PyMem_Free(all_ind)
 */
    PyMem_Free(__pyx_v_K_h);

    /* "fmsne_implem.pyx":2793
 *     if ds_nn_i_rs is NULL:
 *         PyMem_Free(K_h)
 *         PyMem_Free(n_ds_h)             # <<<<<<<<<<<<<<
 *         PyMem_Free(all_ind)
 *         PyMem_Free(nnn_h)
 */
    PyMem_Free(__pyx_v_n_ds_h);

    /* "fmsne_implem.pyx":2794
 *         PyMem_Free(K_h)
 *         PyMem_Free(n_ds_h)
 *         PyMem_Free(all_ind)             # <<<<<<<<<<<<<<
 *         PyMem_Free(nnn_h)
 *         free_int_3dmat(arr_nn_i_rs, n_rs, N)
 */
    PyMem_Free(__pyx_v_all_ind);

    /* "fmsne_implem.pyx":2795
 *         PyMem_Free(n_ds_h)
 *         PyMem_Free(all_ind)
 *         PyMem_Free(nnn_h)             # <<<<<<<<<<<<<<
 *         free_int_3dmat(arr_nn_i_rs, n_rs, N)
 *         free_int_2dmat(nnn_i_rs, n_rs)
 */
    PyMem_Free(__pyx_v_nnn_h);

    /* "fmsne_implem.pyx":2796
 *         PyMem_Free(all_ind)
 *         PyMem_Free(nnn_h)
 *         free_int_3dmat(arr_nn_i_rs, n_rs, N)             # <<<<<<<<<<<<<<
 *         free_int_2dmat(nnn_i_rs, n_rs)
 *         printf("Error in fmssne_implem function of fmsne_implem.pyx: out of memory for ds_nn_i_rs.")
 */
    __pyx_f_12fmsne_implem_free_int_3dmat(__pyx_v_arr_nn_i_rs, __pyx_v_n_rs, __pyx_v_N);

    /* "fmsne_implem.pyx":2797
 *         PyMem_Free(nnn_h)
 *         free_int_3dmat(arr_nn_i_rs, n_rs, N)
 *         free_int_2dmat(nnn_i_rs, n_rs)             # <<<<<<<<<<<<<<
 *         printf("Error in fmssne_implem function of fmsne_implem.pyx: out of memory for ds_nn_i_rs.")
 *         exit(EXIT_FAILURE)
 */
    __pyx_f_12fmsne_implem_free_int_2dmat(__pyx_v_nnn_i_rs, __pyx_v_n_rs);

    /* "fmsne_implem.pyx":2798
 *         free_int_3dmat(arr_nn_i_rs, n_rs, N)
 *         free_int_2dmat(nnn_i_rs, n_rs)
 *         printf("Error in fmssne_implem function of fmsne_implem.pyx: out of memory for ds_nn_i_rs.")             # <<<<<<<<<<<<<<
 *         exit(EXIT_FAILURE)
 * 
 */
    (void)(printf(((char const *)"Error in fmssne_implem function of fmsne_implem.pyx: out of memory for ds_nn_i_rs.")));

    /* "fmsne_implem.pyx":2799
 *         free_int_2dmat(nnn_i_rs, n_rs)
 *         printf("Error in fmssne_implem function of fmsne_implem.pyx: out of memory for ds_nn_i_rs.")
 *         exit(EXIT_FAILURE)             # <<<<<<<<<<<<<<
 * 
 *     # Allocating memory to store the HD bandwidths for each scale, data point and random sampling
 */
    exit(EXIT_FAILURE);

    /* "fmsne_implem.pyx":2791
 *     # Allocating memory to store the squared distances between the considered neighbors and each data point, for each random sampling. In fact, for each random sampling rs, data point i and neighbor j, ds_nn_i_rs[rs][i][j] will contain the minimum squared distance between i and all its neighbors in random sampling rs minus the squared distance between i and j. In function f_nn_ds_hdprec, ds_nn_i_rs will be reallocated so that its third dimension may be smaller than sLm_nt.
 *     cdef double*** ds_nn_i_rs = alloc_dble_3dmat(n_rs, N, sLm_nt)
 *     if ds_nn_i_rs is NULL:             # <<<<<<<<<<<<<<
 *         PyMem_Free(K_h)
 *         PyMem_Free(n_ds_h)
 */
  }

  /* "fmsne_implem.pyx":2802
 * 
 *     # Allocating memory to store the HD bandwidths for each scale, data point and random sampling
 *     cdef double*** tau_h_i_rs = alloc_dble_3dmat(L, n_rs, N)             # <<<<<<<<<<<<<<
 *     if tau_h_i_rs is NULL:
 *         PyMem_Free(K_h)
 */
  __pyx_v_tau_h_i_rs = __pyx_f_12fmsne_implem_alloc_dble_3dmat(__pyx_v_L, __pyx_v_n_rs, __pyx_v_N);

  /* "fmsne_implem.pyx":2803
 *     # Allocating memory to store the HD bandwidths for each scale, data point and random sampling
 *     cdef double*** tau_h_i_rs = alloc_dble_3dmat(L, n_rs, N)
 *     if tau_h_i_rs is NULL:             # <<<<<<<<<<<<<<
 *         PyMem_Free(K_h)
 *         PyMem_Free(n_ds_h)
 */
  __pyx_t_1 = ((__pyx_v_tau_h_i_rs == NULL) != 0);
  if (__pyx_t_1) {

    /* "fmsne_implem.pyx":2804
 *     cdef double*** tau_h_i_rs = alloc_dble_3dmat(L, n_rs, N)
 *     if tau_h_i_rs is NULL:
 *         PyMem_Free(K_h)             # <<<<<<<<<<<<<<
 *         PyMem_Free(n_ds_h)
 *         PyMem_Free(all_ind)
 */
    PyMem_Free(__pyx_v_K_h);

    /* "fmsne_implem.pyx":2805
 *     if tau_h_i_rs is NULL:
 *         PyMem_Free(K_h)
 *         PyMem_Free(n_ds_h)             # <<<<<<<<<<<<<<
 *         PyMem_Free(all_ind)
 *         PyMem_Free(nnn_h)
 */
    PyMem_Free(__pyx_v_n_ds_h);

    /* "fmsne_implem.pyx":2806
 *         PyMem_Free(K_h)
 *         PyMem_Free(n_ds_h)
 *         PyMem_Free(all_ind)             # <<<<<<<<<<<<<<
 *         PyMem_Free(nnn_h)
 *         free_int_3dmat(arr_nn_i_rs, n_rs, N)
 */
    PyMem_Free(__pyx_v_all_ind);

    /* "fmsne_implem.pyx":2807
 *         PyMem_Free(n_ds_h)
 *         PyMem_Free(all_ind)
 *         PyMem_Free(nnn_h)             # <<<<<<<<<<<<<<
 *         free_int_3dmat(arr_nn_i_rs, n_rs, N)
 *         free_int_2dmat(nnn_i_rs, n_rs)
 */
    PyMem_Free(__pyx_v_nnn_h);

    /* "fmsne_implem.pyx":2808
 *         PyMem_Free(all_ind)
 *         PyMem_Free(nnn_h)
 *         free_int_3dmat(arr_nn_i_rs, n_rs, N)             # <<<<<<<<<<<<<<
 *         free_int_2dmat(nnn_i_rs, n_rs)
 *         free_dble_3dmat(ds_nn_i_rs, n_rs, N)
 */
    __pyx_f_12fmsne_implem_free_int_3dmat(__pyx_v_arr_nn_i_rs, __pyx_v_n_rs, __pyx_v_N);

    /* "fmsne_implem.pyx":2809
 *         PyMem_Free(nnn_h)
 *         free_int_3dmat(arr_nn_i_rs, n_rs, N)
 *         free_int_2dmat(nnn_i_rs, n_rs)             # <<<<<<<<<<<<<<
 *         free_dble_3dmat(ds_nn_i_rs, n_rs, N)
 *         printf("Error in fmssne_implem function of fmsne_implem.pyx: out of memory for tau_h_i_rs.")
 */
    __pyx_f_12fmsne_implem_free_int_2dmat(__pyx_v_nnn_i_rs, __pyx_v_n_rs);

    /* "fmsne_implem.pyx":2810
 *         free_int_3dmat(arr_nn_i_rs, n_rs, N)
 *         free_int_2dmat(nnn_i_rs, n_rs)
 *         free_dble_3dmat(ds_nn_i_rs, n_rs, N)             # <<<<<<<<<<<<<<
 *         printf("Error in fmssne_implem function of fmsne_implem.pyx: out of memory for tau_h_i_rs.")
 *         exit(EXIT_FAILURE)
 */
    __pyx_f_12fmsne_implem_free_dble_3dmat(__pyx_v_ds_nn_i_rs, __pyx_v_n_rs, __pyx_v_N);

    /* "fmsne_implem.pyx":2811
 *         free_int_2dmat(nnn_i_rs, n_rs)
 *         free_dble_3dmat(ds_nn_i_rs, n_rs, N)
 *         printf("Error in fmssne_implem function of fmsne_implem.pyx: out of memory for tau_h_i_rs.")             # <<<<<<<<<<<<<<
 *         exit(EXIT_FAILURE)
 * 
 */
    (void)(printf(((char const *)"Error in fmssne_implem function of fmsne_implem.pyx: out of memory for tau_h_i_rs.")));

    /* "fmsne_implem.pyx":2812
 *         free_dble_3dmat(ds_nn_i_rs, n_rs, N)
 *         printf("Error in fmssne_implem function of fmsne_implem.pyx: out of memory for tau_h_i_rs.")
 *         exit(EXIT_FAILURE)             # <<<<<<<<<<<<<<
 * 
 *     # Computing the considered nearest neighbors of each data point for each random sampling and filling arr_nn_i_rs, nnn_i_rs, ds_nn_i_rs and tau_h_i_rs.
 */
    exit(EXIT_FAILURE);

    /* "fmsne_implem.pyx":2803
 *     # Allocating memory to store the HD bandwidths for each scale, data point and random sampling
 *     cdef double*** tau_h_i_rs = alloc_dble_3dmat(L, n_rs, N)
 *     if tau_h_i_rs is NULL:             # <<<<<<<<<<<<<<
 *         PyMem_Free(K_h)
 *         PyMem_Free(n_ds_h)
 */
  }

  /* "fmsne_implem.pyx":2815
 * 
 *     # Computing the considered nearest neighbors of each data point for each random sampling and filling arr_nn_i_rs, nnn_i_rs, ds_nn_i_rs and tau_h_i_rs.
 *     if f_nn_ds_hdprec(d_hds, K_h, N, L, n_ds_h, all_ind, nnn_h, isLmin1, &X_hds[0], n_rs, arr_nn_i_rs, nnn_i_rs, ds_nn_i_rs, tau_h_i_rs, sLm_nt, sym_nn):             # <<<<<<<<<<<<<<
 *         PyMem_Free(K_h)
 *         PyMem_Free(n_ds_h)
 */
  __pyx_t_2 = 0;
  __pyx_t_1 = (__pyx_f_12fmsne_implem_f_nn_ds_hdprec(__pyx_v_d_hds, __pyx_v_K_h, __pyx_v_N, __pyx_v_L, __pyx_v_n_ds_h, __pyx_v_all_ind, __pyx_v_nnn_h, __pyx_v_isLmin1, (&(*((double *) ( /* dim=0 */ ((char *) (((double *) __pyx_v_X_hds.data) + __pyx_t_2)) )))), __pyx_v_n_rs, __pyx_v_arr_nn_i_rs, __pyx_v_nnn_i_rs, __pyx_v_ds_nn_i_rs, __pyx_v_tau_h_i_rs, __pyx_v_sLm_nt, __pyx_v_sym_nn) != 0);
  if (__pyx_t_1) {

    /* "fmsne_implem.pyx":2816
 *     # Computing the considered nearest neighbors of each data point for each random sampling and filling arr_nn_i_rs, nnn_i_rs, ds_nn_i_rs and tau_h_i_rs.
 *     if f_nn_ds_hdprec(d_hds, K_h, N, L, n_ds_h, all_ind, nnn_h, isLmin1, &X_hds[0], n_rs, arr_nn_i_rs, nnn_i_rs, ds_nn_i_rs, tau_h_i_rs, sLm_nt, sym_nn):
 *         PyMem_Free(K_h)             # <<<<<<<<<<<<<<
 *         PyMem_Free(n_ds_h)
 *         PyMem_Free(all_ind)
 */
    PyMem_Free(__pyx_v_K_h);

    /* "fmsne_implem.pyx":2817
 *     if f_nn_ds_hdprec(d_hds, K_h, N, L, n_ds_h, all_ind, nnn_h, isLmin1, &X_hds[0], n_rs, arr_nn_i_rs, nnn_i_rs, ds_nn_i_rs, tau_h_i_rs, sLm_nt, sym_nn):
 *         PyMem_Free(K_h)
 *         PyMem_Free(n_ds_h)             # <<<<<<<<<<<<<<
 *         PyMem_Free(all_ind)
 *         PyMem_Free(nnn_h)
 */
    PyMem_Free(__pyx_v_n_ds_h);

    /* "fmsne_implem.pyx":2818
 *         PyMem_Free(K_h)
 *         PyMem_Free(n_ds_h)
 *         PyMem_Free(all_ind)             # <<<<<<<<<<<<<<
 *         PyMem_Free(nnn_h)
 *         free_int_3dmat(arr_nn_i_rs, n_rs, N)
 */
    PyMem_Free(__pyx_v_all_ind);

    /* "fmsne_implem.pyx":2819
 *         PyMem_Free(n_ds_h)
 *         PyMem_Free(all_ind)
 *         PyMem_Free(nnn_h)             # <<<<<<<<<<<<<<
 *         free_int_3dmat(arr_nn_i_rs, n_rs, N)
 *         free_int_2dmat(nnn_i_rs, n_rs)
 */
    PyMem_Free(__pyx_v_nnn_h);

    /* "fmsne_implem.pyx":2820
 *         PyMem_Free(all_ind)
 *         PyMem_Free(nnn_h)
 *         free_int_3dmat(arr_nn_i_rs, n_rs, N)             # <<<<<<<<<<<<<<
 *         free_int_2dmat(nnn_i_rs, n_rs)
 *         free_dble_3dmat(ds_nn_i_rs, n_rs, N)
 */
    __pyx_f_12fmsne_implem_free_int_3dmat(__pyx_v_arr_nn_i_rs, __pyx_v_n_rs, __pyx_v_N);

    /* "fmsne_implem.pyx":2821
 *         PyMem_Free(nnn_h)
 *         free_int_3dmat(arr_nn_i_rs, n_rs, N)
 *         free_int_2dmat(nnn_i_rs, n_rs)             # <<<<<<<<<<<<<<
 *         free_dble_3dmat(ds_nn_i_rs, n_rs, N)
 *         free_dble_3dmat(tau_h_i_rs, L, n_rs)
 */
    __pyx_f_12fmsne_implem_free_int_2dmat(__pyx_v_nnn_i_rs, __pyx_v_n_rs);

    /* "fmsne_implem.pyx":2822
 *         free_int_3dmat(arr_nn_i_rs, n_rs, N)
 *         free_int_2dmat(nnn_i_rs, n_rs)
 *         free_dble_3dmat(ds_nn_i_rs, n_rs, N)             # <<<<<<<<<<<<<<
 *         free_dble_3dmat(tau_h_i_rs, L, n_rs)
 *         printf("Error in fmssne_implem function of fmsne_implem.pyx: out of memory in function f_nn_ds_hdprec.")
 */
    __pyx_f_12fmsne_implem_free_dble_3dmat(__pyx_v_ds_nn_i_rs, __pyx_v_n_rs, __pyx_v_N);

    /* "fmsne_implem.pyx":2823
 *         free_int_2dmat(nnn_i_rs, n_rs)
 *         free_dble_3dmat(ds_nn_i_rs, n_rs, N)
 *         free_dble_3dmat(tau_h_i_rs, L, n_rs)             # <<<<<<<<<<<<<<
 *         printf("Error in fmssne_implem function of fmsne_implem.pyx: out of memory in function f_nn_ds_hdprec.")
 *         exit(EXIT_FAILURE)
 */
    __pyx_f_12fmsne_implem_free_dble_3dmat(__pyx_v_tau_h_i_rs, __pyx_v_L, __pyx_v_n_rs);

    /* "fmsne_implem.pyx":2824
 *         free_dble_3dmat(ds_nn_i_rs, n_rs, N)
 *         free_dble_3dmat(tau_h_i_rs, L, n_rs)
 *         printf("Error in fmssne_implem function of fmsne_implem.pyx: out of memory in function f_nn_ds_hdprec.")             # <<<<<<<<<<<<<<
 *         exit(EXIT_FAILURE)
 * 
 */
    (void)(printf(((char const *)"Error in fmssne_implem function of fmsne_implem.pyx: out of memory in function f_nn_ds_hdprec.")));

    /* "fmsne_implem.pyx":2825
 *         free_dble_3dmat(tau_h_i_rs, L, n_rs)
 *         printf("Error in fmssne_implem function of fmsne_implem.pyx: out of memory in function f_nn_ds_hdprec.")
 *         exit(EXIT_FAILURE)             # <<<<<<<<<<<<<<
 * 
 *     # Free stuffs which will not be used anymore
 */
    exit(EXIT_FAILURE);

    /* "fmsne_implem.pyx":2815
 * 
 *     # Computing the considered nearest neighbors of each data point for each random sampling and filling arr_nn_i_rs, nnn_i_rs, ds_nn_i_rs and tau_h_i_rs.
 *     if f_nn_ds_hdprec(d_hds, K_h, N, L, n_ds_h, all_ind, nnn_h, isLmin1, &X_hds[0], n_rs, arr_nn_i_rs, nnn_i_rs, ds_nn_i_rs, tau_h_i_rs, sLm_nt, sym_nn):             # <<<<<<<<<<<<<<
 *         PyMem_Free(K_h)
 *         PyMem_Free(n_ds_h)
 */
  }

  /* "fmsne_implem.pyx":2828
 * 
 *     # Free stuffs which will not be used anymore
 *     PyMem_Free(n_ds_h)             # <<<<<<<<<<<<<<
 *     PyMem_Free(all_ind)
 *     PyMem_Free(nnn_h)
 */
  PyMem_Free(__pyx_v_n_ds_h);

  /* "fmsne_implem.pyx":2829
 *     # Free stuffs which will not be used anymore
 *     PyMem_Free(n_ds_h)
 *     PyMem_Free(all_ind)             # <<<<<<<<<<<<<<
 *     PyMem_Free(nnn_h)
 * 
 */
  PyMem_Free(__pyx_v_all_ind);

  /* "fmsne_implem.pyx":2830
 *     PyMem_Free(n_ds_h)
 *     PyMem_Free(all_ind)
 *     PyMem_Free(nnn_h)             # <<<<<<<<<<<<<<
 * 
 *     #####
 */
  PyMem_Free(__pyx_v_nnn_h);

  /* "fmsne_implem.pyx":2836
 *     #####
 * 
 *     cdef Py_ssize_t*** nn_i_rs_id_dld = alloc_Pysst_3dmat_varK(n_rs, N, nnn_i_rs)             # <<<<<<<<<<<<<<
 *     if nn_i_rs_id_dld is NULL:
 *         PyMem_Free(K_h)
 */
  __pyx_v_nn_i_rs_id_dld = __pyx_f_12fmsne_implem_alloc_Pysst_3dmat_varK(__pyx_v_n_rs, __pyx_v_N, __pyx_v_nnn_i_rs);

  /* "fmsne_implem.pyx":2837
 * 
 *     cdef Py_ssize_t*** nn_i_rs_id_dld = alloc_Pysst_3dmat_varK(n_rs, N, nnn_i_rs)
 *     if nn_i_rs_id_dld is NULL:             # <<<<<<<<<<<<<<
 *         PyMem_Free(K_h)
 *         free_int_3dmat(arr_nn_i_rs, n_rs, N)
 */
  __pyx_t_1 = ((__pyx_v_nn_i_rs_id_dld == NULL) != 0);
  if (__pyx_t_1) {

    /* "fmsne_implem.pyx":2838
 *     cdef Py_ssize_t*** nn_i_rs_id_dld = alloc_Pysst_3dmat_varK(n_rs, N, nnn_i_rs)
 *     if nn_i_rs_id_dld is NULL:
 *         PyMem_Free(K_h)             # <<<<<<<<<<<<<<
 *         free_int_3dmat(arr_nn_i_rs, n_rs, N)
 *         free_int_2dmat(nnn_i_rs, n_rs)
 */
    PyMem_Free(__pyx_v_K_h);

    /* "fmsne_implem.pyx":2839
 *     if nn_i_rs_id_dld is NULL:
 *         PyMem_Free(K_h)
 *         free_int_3dmat(arr_nn_i_rs, n_rs, N)             # <<<<<<<<<<<<<<
 *         free_int_2dmat(nnn_i_rs, n_rs)
 *         free_dble_3dmat(ds_nn_i_rs, n_rs, N)
 */
    __pyx_f_12fmsne_implem_free_int_3dmat(__pyx_v_arr_nn_i_rs, __pyx_v_n_rs, __pyx_v_N);

    /* "fmsne_implem.pyx":2840
 *         PyMem_Free(K_h)
 *         free_int_3dmat(arr_nn_i_rs, n_rs, N)
 *         free_int_2dmat(nnn_i_rs, n_rs)             # <<<<<<<<<<<<<<
 *         free_dble_3dmat(ds_nn_i_rs, n_rs, N)
 *         free_dble_3dmat(tau_h_i_rs, L, n_rs)
 */
    __pyx_f_12fmsne_implem_free_int_2dmat(__pyx_v_nnn_i_rs, __pyx_v_n_rs);

    /* "fmsne_implem.pyx":2841
 *         free_int_3dmat(arr_nn_i_rs, n_rs, N)
 *         free_int_2dmat(nnn_i_rs, n_rs)
 *         free_dble_3dmat(ds_nn_i_rs, n_rs, N)             # <<<<<<<<<<<<<<
 *         free_dble_3dmat(tau_h_i_rs, L, n_rs)
 *         printf('Error in fmssne_implem function of fmsne_implem.pyx: out of memory for nn_i_rs_id_dld')
 */
    __pyx_f_12fmsne_implem_free_dble_3dmat(__pyx_v_ds_nn_i_rs, __pyx_v_n_rs, __pyx_v_N);

    /* "fmsne_implem.pyx":2842
 *         free_int_2dmat(nnn_i_rs, n_rs)
 *         free_dble_3dmat(ds_nn_i_rs, n_rs, N)
 *         free_dble_3dmat(tau_h_i_rs, L, n_rs)             # <<<<<<<<<<<<<<
 *         printf('Error in fmssne_implem function of fmsne_implem.pyx: out of memory for nn_i_rs_id_dld')
 *         exit(EXIT_FAILURE)
 */
    __pyx_f_12fmsne_implem_free_dble_3dmat(__pyx_v_tau_h_i_rs, __pyx_v_L, __pyx_v_n_rs);

    /* "fmsne_implem.pyx":2843
 *         free_dble_3dmat(ds_nn_i_rs, n_rs, N)
 *         free_dble_3dmat(tau_h_i_rs, L, n_rs)
 *         printf('Error in fmssne_implem function of fmsne_implem.pyx: out of memory for nn_i_rs_id_dld')             # <<<<<<<<<<<<<<
 *         exit(EXIT_FAILURE)
 * 
 */
    (void)(printf(((char const *)"Error in fmssne_implem function of fmsne_implem.pyx: out of memory for nn_i_rs_id_dld")));

    /* "fmsne_implem.pyx":2844
 *         free_dble_3dmat(tau_h_i_rs, L, n_rs)
 *         printf('Error in fmssne_implem function of fmsne_implem.pyx: out of memory for nn_i_rs_id_dld')
 *         exit(EXIT_FAILURE)             # <<<<<<<<<<<<<<
 * 
 *     # sLm_nt will now refer to N-1
 */
    exit(EXIT_FAILURE);

    /* "fmsne_implem.pyx":2837
 * 
 *     cdef Py_ssize_t*** nn_i_rs_id_dld = alloc_Pysst_3dmat_varK(n_rs, N, nnn_i_rs)
 *     if nn_i_rs_id_dld is NULL:             # <<<<<<<<<<<<<<
 *         PyMem_Free(K_h)
 *         free_int_3dmat(arr_nn_i_rs, n_rs, N)
 */
  }

  /* "fmsne_implem.pyx":2847
 * 
 *     # sLm_nt will now refer to N-1
 *     sLm_nt = N-1             # <<<<<<<<<<<<<<
 * 
 *     cdef size_t shdp = sLm_nt*sizeof(Py_ssize_t)
 */
  __pyx_v_sLm_nt = (__pyx_v_N - 1);

  /* "fmsne_implem.pyx":2849
 *     sLm_nt = N-1
 * 
 *     cdef size_t shdp = sLm_nt*sizeof(Py_ssize_t)             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t* ni_dld = <Py_ssize_t*> PyMem_Malloc(shdp)
 *     if ni_dld is NULL:
 */
  __pyx_v_shdp = (__pyx_v_sLm_nt * (sizeof(Py_ssize_t)));

  /* "fmsne_implem.pyx":2850
 * 
 *     cdef size_t shdp = sLm_nt*sizeof(Py_ssize_t)
 *     cdef Py_ssize_t* ni_dld = <Py_ssize_t*> PyMem_Malloc(shdp)             # <<<<<<<<<<<<<<
 *     if ni_dld is NULL:
 *         PyMem_Free(K_h)
 */
  __pyx_v_ni_dld = ((Py_ssize_t *)PyMem_Malloc(__pyx_v_shdp));

  /* "fmsne_implem.pyx":2851
 *     cdef size_t shdp = sLm_nt*sizeof(Py_ssize_t)
 *     cdef Py_ssize_t* ni_dld = <Py_ssize_t*> PyMem_Malloc(shdp)
 *     if ni_dld is NULL:             # <<<<<<<<<<<<<<
 *         PyMem_Free(K_h)
 *         free_int_3dmat(arr_nn_i_rs, n_rs, N)
 */
  __pyx_t_1 = ((__pyx_v_ni_dld == NULL) != 0);
  if (__pyx_t_1) {

    /* "fmsne_implem.pyx":2852
 *     cdef Py_ssize_t* ni_dld = <Py_ssize_t*> PyMem_Malloc(shdp)
 *     if ni_dld is NULL:
 *         PyMem_Free(K_h)             # <<<<<<<<<<<<<<
 *         free_int_3dmat(arr_nn_i_rs, n_rs, N)
 *         free_int_2dmat(nnn_i_rs, n_rs)
 */
    PyMem_Free(__pyx_v_K_h);

    /* "fmsne_implem.pyx":2853
 *     if ni_dld is NULL:
 *         PyMem_Free(K_h)
 *         free_int_3dmat(arr_nn_i_rs, n_rs, N)             # <<<<<<<<<<<<<<
 *         free_int_2dmat(nnn_i_rs, n_rs)
 *         free_dble_3dmat(ds_nn_i_rs, n_rs, N)
 */
    __pyx_f_12fmsne_implem_free_int_3dmat(__pyx_v_arr_nn_i_rs, __pyx_v_n_rs, __pyx_v_N);

    /* "fmsne_implem.pyx":2854
 *         PyMem_Free(K_h)
 *         free_int_3dmat(arr_nn_i_rs, n_rs, N)
 *         free_int_2dmat(nnn_i_rs, n_rs)             # <<<<<<<<<<<<<<
 *         free_dble_3dmat(ds_nn_i_rs, n_rs, N)
 *         free_dble_3dmat(tau_h_i_rs, L, n_rs)
 */
    __pyx_f_12fmsne_implem_free_int_2dmat(__pyx_v_nnn_i_rs, __pyx_v_n_rs);

    /* "fmsne_implem.pyx":2855
 *         free_int_3dmat(arr_nn_i_rs, n_rs, N)
 *         free_int_2dmat(nnn_i_rs, n_rs)
 *         free_dble_3dmat(ds_nn_i_rs, n_rs, N)             # <<<<<<<<<<<<<<
 *         free_dble_3dmat(tau_h_i_rs, L, n_rs)
 *         free_Pysst_3dmat(nn_i_rs_id_dld, n_rs, N)
 */
    __pyx_f_12fmsne_implem_free_dble_3dmat(__pyx_v_ds_nn_i_rs, __pyx_v_n_rs, __pyx_v_N);

    /* "fmsne_implem.pyx":2856
 *         free_int_2dmat(nnn_i_rs, n_rs)
 *         free_dble_3dmat(ds_nn_i_rs, n_rs, N)
 *         free_dble_3dmat(tau_h_i_rs, L, n_rs)             # <<<<<<<<<<<<<<
 *         free_Pysst_3dmat(nn_i_rs_id_dld, n_rs, N)
 *         printf('Error in fmssne_implem function of fmsne_implem.pyx: out of memory for ni_dld')
 */
    __pyx_f_12fmsne_implem_free_dble_3dmat(__pyx_v_tau_h_i_rs, __pyx_v_L, __pyx_v_n_rs);

    /* "fmsne_implem.pyx":2857
 *         free_dble_3dmat(ds_nn_i_rs, n_rs, N)
 *         free_dble_3dmat(tau_h_i_rs, L, n_rs)
 *         free_Pysst_3dmat(nn_i_rs_id_dld, n_rs, N)             # <<<<<<<<<<<<<<
 *         printf('Error in fmssne_implem function of fmsne_implem.pyx: out of memory for ni_dld')
 *         exit(EXIT_FAILURE)
 */
    __pyx_f_12fmsne_implem_free_Pysst_3dmat(__pyx_v_nn_i_rs_id_dld, __pyx_v_n_rs, __pyx_v_N);

    /* "fmsne_implem.pyx":2858
 *         free_dble_3dmat(tau_h_i_rs, L, n_rs)
 *         free_Pysst_3dmat(nn_i_rs_id_dld, n_rs, N)
 *         printf('Error in fmssne_implem function of fmsne_implem.pyx: out of memory for ni_dld')             # <<<<<<<<<<<<<<
 *         exit(EXIT_FAILURE)
 * 
 */
    (void)(printf(((char const *)"Error in fmssne_implem function of fmsne_implem.pyx: out of memory for ni_dld")));

    /* "fmsne_implem.pyx":2859
 *         free_Pysst_3dmat(nn_i_rs_id_dld, n_rs, N)
 *         printf('Error in fmssne_implem function of fmsne_implem.pyx: out of memory for ni_dld')
 *         exit(EXIT_FAILURE)             # <<<<<<<<<<<<<<
 * 
 *     cdef Py_ssize_t** ij_dld = fms_nn_dld_match(nn_i_rs_id_dld, ni_dld, shdp, n_rs, sLm_nt, N, nnn_i_rs, arr_nn_i_rs, sym_nn, n_components)
 */
    exit(EXIT_FAILURE);

    /* "fmsne_implem.pyx":2851
 *     cdef size_t shdp = sLm_nt*sizeof(Py_ssize_t)
 *     cdef Py_ssize_t* ni_dld = <Py_ssize_t*> PyMem_Malloc(shdp)
 *     if ni_dld is NULL:             # <<<<<<<<<<<<<<
 *         PyMem_Free(K_h)
 *         free_int_3dmat(arr_nn_i_rs, n_rs, N)
 */
  }

  /* "fmsne_implem.pyx":2861
 *         exit(EXIT_FAILURE)
 * 
 *     cdef Py_ssize_t** ij_dld = fms_nn_dld_match(nn_i_rs_id_dld, ni_dld, shdp, n_rs, sLm_nt, N, nnn_i_rs, arr_nn_i_rs, sym_nn, n_components)             # <<<<<<<<<<<<<<
 *     if ij_dld is NULL:
 *         PyMem_Free(K_h)
 */
  __pyx_v_ij_dld = __pyx_f_12fmsne_implem_fms_nn_dld_match(__pyx_v_nn_i_rs_id_dld, __pyx_v_ni_dld, __pyx_v_shdp, __pyx_v_n_rs, __pyx_v_sLm_nt, __pyx_v_N, __pyx_v_nnn_i_rs, __pyx_v_arr_nn_i_rs, __pyx_v_sym_nn, __pyx_v_n_components);

  /* "fmsne_implem.pyx":2862
 * 
 *     cdef Py_ssize_t** ij_dld = fms_nn_dld_match(nn_i_rs_id_dld, ni_dld, shdp, n_rs, sLm_nt, N, nnn_i_rs, arr_nn_i_rs, sym_nn, n_components)
 *     if ij_dld is NULL:             # <<<<<<<<<<<<<<
 *         PyMem_Free(K_h)
 *         free_int_3dmat(arr_nn_i_rs, n_rs, N)
 */
  __pyx_t_1 = ((__pyx_v_ij_dld == NULL) != 0);
  if (__pyx_t_1) {

    /* "fmsne_implem.pyx":2863
 *     cdef Py_ssize_t** ij_dld = fms_nn_dld_match(nn_i_rs_id_dld, ni_dld, shdp, n_rs, sLm_nt, N, nnn_i_rs, arr_nn_i_rs, sym_nn, n_components)
 *     if ij_dld is NULL:
 *         PyMem_Free(K_h)             # <<<<<<<<<<<<<<
 *         free_int_3dmat(arr_nn_i_rs, n_rs, N)
 *         free_int_2dmat(nnn_i_rs, n_rs)
 */
    PyMem_Free(__pyx_v_K_h);

    /* "fmsne_implem.pyx":2864
 *     if ij_dld is NULL:
 *         PyMem_Free(K_h)
 *         free_int_3dmat(arr_nn_i_rs, n_rs, N)             # <<<<<<<<<<<<<<
 *         free_int_2dmat(nnn_i_rs, n_rs)
 *         free_dble_3dmat(ds_nn_i_rs, n_rs, N)
 */
    __pyx_f_12fmsne_implem_free_int_3dmat(__pyx_v_arr_nn_i_rs, __pyx_v_n_rs, __pyx_v_N);

    /* "fmsne_implem.pyx":2865
 *         PyMem_Free(K_h)
 *         free_int_3dmat(arr_nn_i_rs, n_rs, N)
 *         free_int_2dmat(nnn_i_rs, n_rs)             # <<<<<<<<<<<<<<
 *         free_dble_3dmat(ds_nn_i_rs, n_rs, N)
 *         free_dble_3dmat(tau_h_i_rs, L, n_rs)
 */
    __pyx_f_12fmsne_implem_free_int_2dmat(__pyx_v_nnn_i_rs, __pyx_v_n_rs);

    /* "fmsne_implem.pyx":2866
 *         free_int_3dmat(arr_nn_i_rs, n_rs, N)
 *         free_int_2dmat(nnn_i_rs, n_rs)
 *         free_dble_3dmat(ds_nn_i_rs, n_rs, N)             # <<<<<<<<<<<<<<
 *         free_dble_3dmat(tau_h_i_rs, L, n_rs)
 *         free_Pysst_3dmat(nn_i_rs_id_dld, n_rs, N)
 */
    __pyx_f_12fmsne_implem_free_dble_3dmat(__pyx_v_ds_nn_i_rs, __pyx_v_n_rs, __pyx_v_N);

    /* "fmsne_implem.pyx":2867
 *         free_int_2dmat(nnn_i_rs, n_rs)
 *         free_dble_3dmat(ds_nn_i_rs, n_rs, N)
 *         free_dble_3dmat(tau_h_i_rs, L, n_rs)             # <<<<<<<<<<<<<<
 *         free_Pysst_3dmat(nn_i_rs_id_dld, n_rs, N)
 *         PyMem_Free(ni_dld)
 */
    __pyx_f_12fmsne_implem_free_dble_3dmat(__pyx_v_tau_h_i_rs, __pyx_v_L, __pyx_v_n_rs);

    /* "fmsne_implem.pyx":2868
 *         free_dble_3dmat(ds_nn_i_rs, n_rs, N)
 *         free_dble_3dmat(tau_h_i_rs, L, n_rs)
 *         free_Pysst_3dmat(nn_i_rs_id_dld, n_rs, N)             # <<<<<<<<<<<<<<
 *         PyMem_Free(ni_dld)
 *         printf('Error in fmssne_implem function of fmsne_implem.pyx: out of memory for ij_dld')
 */
    __pyx_f_12fmsne_implem_free_Pysst_3dmat(__pyx_v_nn_i_rs_id_dld, __pyx_v_n_rs, __pyx_v_N);

    /* "fmsne_implem.pyx":2869
 *         free_dble_3dmat(tau_h_i_rs, L, n_rs)
 *         free_Pysst_3dmat(nn_i_rs_id_dld, n_rs, N)
 *         PyMem_Free(ni_dld)             # <<<<<<<<<<<<<<
 *         printf('Error in fmssne_implem function of fmsne_implem.pyx: out of memory for ij_dld')
 *         exit(EXIT_FAILURE)
 */
    PyMem_Free(__pyx_v_ni_dld);

    /* "fmsne_implem.pyx":2870
 *         free_Pysst_3dmat(nn_i_rs_id_dld, n_rs, N)
 *         PyMem_Free(ni_dld)
 *         printf('Error in fmssne_implem function of fmsne_implem.pyx: out of memory for ij_dld')             # <<<<<<<<<<<<<<
 *         exit(EXIT_FAILURE)
 * 
 */
    (void)(printf(((char const *)"Error in fmssne_implem function of fmsne_implem.pyx: out of memory for ij_dld")));

    /* "fmsne_implem.pyx":2871
 *         PyMem_Free(ni_dld)
 *         printf('Error in fmssne_implem function of fmsne_implem.pyx: out of memory for ij_dld')
 *         exit(EXIT_FAILURE)             # <<<<<<<<<<<<<<
 * 
 *     cdef double** dij_ld = alloc_dble_2dmat_varKpysst(sLm_nt, ni_dld)
 */
    exit(EXIT_FAILURE);

    /* "fmsne_implem.pyx":2862
 * 
 *     cdef Py_ssize_t** ij_dld = fms_nn_dld_match(nn_i_rs_id_dld, ni_dld, shdp, n_rs, sLm_nt, N, nnn_i_rs, arr_nn_i_rs, sym_nn, n_components)
 *     if ij_dld is NULL:             # <<<<<<<<<<<<<<
 *         PyMem_Free(K_h)
 *         free_int_3dmat(arr_nn_i_rs, n_rs, N)
 */
  }

  /* "fmsne_implem.pyx":2873
 *         exit(EXIT_FAILURE)
 * 
 *     cdef double** dij_ld = alloc_dble_2dmat_varKpysst(sLm_nt, ni_dld)             # <<<<<<<<<<<<<<
 *     if dij_ld is NULL:
 *         PyMem_Free(K_h)
 */
  __pyx_v_dij_ld = __pyx_f_12fmsne_implem_alloc_dble_2dmat_varKpysst(__pyx_v_sLm_nt, __pyx_v_ni_dld);

  /* "fmsne_implem.pyx":2874
 * 
 *     cdef double** dij_ld = alloc_dble_2dmat_varKpysst(sLm_nt, ni_dld)
 *     if dij_ld is NULL:             # <<<<<<<<<<<<<<
 *         PyMem_Free(K_h)
 *         free_int_3dmat(arr_nn_i_rs, n_rs, N)
 */
  __pyx_t_1 = ((__pyx_v_dij_ld == NULL) != 0);
  if (__pyx_t_1) {

    /* "fmsne_implem.pyx":2875
 *     cdef double** dij_ld = alloc_dble_2dmat_varKpysst(sLm_nt, ni_dld)
 *     if dij_ld is NULL:
 *         PyMem_Free(K_h)             # <<<<<<<<<<<<<<
 *         free_int_3dmat(arr_nn_i_rs, n_rs, N)
 *         free_int_2dmat(nnn_i_rs, n_rs)
 */
    PyMem_Free(__pyx_v_K_h);

    /* "fmsne_implem.pyx":2876
 *     if dij_ld is NULL:
 *         PyMem_Free(K_h)
 *         free_int_3dmat(arr_nn_i_rs, n_rs, N)             # <<<<<<<<<<<<<<
 *         free_int_2dmat(nnn_i_rs, n_rs)
 *         free_dble_3dmat(ds_nn_i_rs, n_rs, N)
 */
    __pyx_f_12fmsne_implem_free_int_3dmat(__pyx_v_arr_nn_i_rs, __pyx_v_n_rs, __pyx_v_N);

    /* "fmsne_implem.pyx":2877
 *         PyMem_Free(K_h)
 *         free_int_3dmat(arr_nn_i_rs, n_rs, N)
 *         free_int_2dmat(nnn_i_rs, n_rs)             # <<<<<<<<<<<<<<
 *         free_dble_3dmat(ds_nn_i_rs, n_rs, N)
 *         free_dble_3dmat(tau_h_i_rs, L, n_rs)
 */
    __pyx_f_12fmsne_implem_free_int_2dmat(__pyx_v_nnn_i_rs, __pyx_v_n_rs);

    /* "fmsne_implem.pyx":2878
 *         free_int_3dmat(arr_nn_i_rs, n_rs, N)
 *         free_int_2dmat(nnn_i_rs, n_rs)
 *         free_dble_3dmat(ds_nn_i_rs, n_rs, N)             # <<<<<<<<<<<<<<
 *         free_dble_3dmat(tau_h_i_rs, L, n_rs)
 *         free_Pysst_3dmat(nn_i_rs_id_dld, n_rs, N)
 */
    __pyx_f_12fmsne_implem_free_dble_3dmat(__pyx_v_ds_nn_i_rs, __pyx_v_n_rs, __pyx_v_N);

    /* "fmsne_implem.pyx":2879
 *         free_int_2dmat(nnn_i_rs, n_rs)
 *         free_dble_3dmat(ds_nn_i_rs, n_rs, N)
 *         free_dble_3dmat(tau_h_i_rs, L, n_rs)             # <<<<<<<<<<<<<<
 *         free_Pysst_3dmat(nn_i_rs_id_dld, n_rs, N)
 *         PyMem_Free(ni_dld)
 */
    __pyx_f_12fmsne_implem_free_dble_3dmat(__pyx_v_tau_h_i_rs, __pyx_v_L, __pyx_v_n_rs);

    /* "fmsne_implem.pyx":2880
 *         free_dble_3dmat(ds_nn_i_rs, n_rs, N)
 *         free_dble_3dmat(tau_h_i_rs, L, n_rs)
 *         free_Pysst_3dmat(nn_i_rs_id_dld, n_rs, N)             # <<<<<<<<<<<<<<
 *         PyMem_Free(ni_dld)
 *         free_Pysst_2dmat(ij_dld, sLm_nt)
 */
    __pyx_f_12fmsne_implem_free_Pysst_3dmat(__pyx_v_nn_i_rs_id_dld, __pyx_v_n_rs, __pyx_v_N);

    /* "fmsne_implem.pyx":2881
 *         free_dble_3dmat(tau_h_i_rs, L, n_rs)
 *         free_Pysst_3dmat(nn_i_rs_id_dld, n_rs, N)
 *         PyMem_Free(ni_dld)             # <<<<<<<<<<<<<<
 *         free_Pysst_2dmat(ij_dld, sLm_nt)
 *         printf('Error in fmssne_implem function of fmsne_implem.pyx: out of memory for dij_ld')
 */
    PyMem_Free(__pyx_v_ni_dld);

    /* "fmsne_implem.pyx":2882
 *         free_Pysst_3dmat(nn_i_rs_id_dld, n_rs, N)
 *         PyMem_Free(ni_dld)
 *         free_Pysst_2dmat(ij_dld, sLm_nt)             # <<<<<<<<<<<<<<
 *         printf('Error in fmssne_implem function of fmsne_implem.pyx: out of memory for dij_ld')
 *         exit(EXIT_FAILURE)
 */
    __pyx_f_12fmsne_implem_free_Pysst_2dmat(__pyx_v_ij_dld, __pyx_v_sLm_nt);

    /* "fmsne_implem.pyx":2883
 *         PyMem_Free(ni_dld)
 *         free_Pysst_2dmat(ij_dld, sLm_nt)
 *         printf('Error in fmssne_implem function of fmsne_implem.pyx: out of memory for dij_ld')             # <<<<<<<<<<<<<<
 *         exit(EXIT_FAILURE)
 * 
 */
    (void)(printf(((char const *)"Error in fmssne_implem function of fmsne_implem.pyx: out of memory for dij_ld")));

    /* "fmsne_implem.pyx":2884
 *         free_Pysst_2dmat(ij_dld, sLm_nt)
 *         printf('Error in fmssne_implem function of fmsne_implem.pyx: out of memory for dij_ld')
 *         exit(EXIT_FAILURE)             # <<<<<<<<<<<<<<
 * 
 *     #####
 */
    exit(EXIT_FAILURE);

    /* "fmsne_implem.pyx":2874
 * 
 *     cdef double** dij_ld = alloc_dble_2dmat_varKpysst(sLm_nt, ni_dld)
 *     if dij_ld is NULL:             # <<<<<<<<<<<<<<
 *         PyMem_Free(K_h)
 *         free_int_3dmat(arr_nn_i_rs, n_rs, N)
 */
  }

  /* "fmsne_implem.pyx":2898
 *     # Array storing 2/p_h_rs
 *     cdef double** t_h_rs
 *     if fit_U:             # <<<<<<<<<<<<<<
 *         p_h = NULL
 *         t_h = NULL
 */
  __pyx_t_1 = (__pyx_v_fit_U != 0);
  if (__pyx_t_1) {

    /* "fmsne_implem.pyx":2899
 *     cdef double** t_h_rs
 *     if fit_U:
 *         p_h = NULL             # <<<<<<<<<<<<<<
 *         t_h = NULL
 *         p_h_rs = alloc_dble_2dmat(L, n_rs)
 */
    __pyx_v_p_h = NULL;

    /* "fmsne_implem.pyx":2900
 *     if fit_U:
 *         p_h = NULL
 *         t_h = NULL             # <<<<<<<<<<<<<<
 *         p_h_rs = alloc_dble_2dmat(L, n_rs)
 *         if p_h_rs is NULL:
 */
    __pyx_v_t_h = NULL;

    /* "fmsne_implem.pyx":2901
 *         p_h = NULL
 *         t_h = NULL
 *         p_h_rs = alloc_dble_2dmat(L, n_rs)             # <<<<<<<<<<<<<<
 *         if p_h_rs is NULL:
 *             PyMem_Free(K_h)
 */
    __pyx_v_p_h_rs = __pyx_f_12fmsne_implem_alloc_dble_2dmat(__pyx_v_L, __pyx_v_n_rs);

    /* "fmsne_implem.pyx":2902
 *         t_h = NULL
 *         p_h_rs = alloc_dble_2dmat(L, n_rs)
 *         if p_h_rs is NULL:             # <<<<<<<<<<<<<<
 *             PyMem_Free(K_h)
 *             free_int_3dmat(arr_nn_i_rs, n_rs, N)
 */
    __pyx_t_1 = ((__pyx_v_p_h_rs == NULL) != 0);
    if (__pyx_t_1) {

      /* "fmsne_implem.pyx":2903
 *         p_h_rs = alloc_dble_2dmat(L, n_rs)
 *         if p_h_rs is NULL:
 *             PyMem_Free(K_h)             # <<<<<<<<<<<<<<
 *             free_int_3dmat(arr_nn_i_rs, n_rs, N)
 *             free_int_2dmat(nnn_i_rs, n_rs)
 */
      PyMem_Free(__pyx_v_K_h);

      /* "fmsne_implem.pyx":2904
 *         if p_h_rs is NULL:
 *             PyMem_Free(K_h)
 *             free_int_3dmat(arr_nn_i_rs, n_rs, N)             # <<<<<<<<<<<<<<
 *             free_int_2dmat(nnn_i_rs, n_rs)
 *             free_dble_3dmat(ds_nn_i_rs, n_rs, N)
 */
      __pyx_f_12fmsne_implem_free_int_3dmat(__pyx_v_arr_nn_i_rs, __pyx_v_n_rs, __pyx_v_N);

      /* "fmsne_implem.pyx":2905
 *             PyMem_Free(K_h)
 *             free_int_3dmat(arr_nn_i_rs, n_rs, N)
 *             free_int_2dmat(nnn_i_rs, n_rs)             # <<<<<<<<<<<<<<
 *             free_dble_3dmat(ds_nn_i_rs, n_rs, N)
 *             free_dble_3dmat(tau_h_i_rs, L, n_rs)
 */
      __pyx_f_12fmsne_implem_free_int_2dmat(__pyx_v_nnn_i_rs, __pyx_v_n_rs);

      /* "fmsne_implem.pyx":2906
 *             free_int_3dmat(arr_nn_i_rs, n_rs, N)
 *             free_int_2dmat(nnn_i_rs, n_rs)
 *             free_dble_3dmat(ds_nn_i_rs, n_rs, N)             # <<<<<<<<<<<<<<
 *             free_dble_3dmat(tau_h_i_rs, L, n_rs)
 *             free_Pysst_3dmat(nn_i_rs_id_dld, n_rs, N)
 */
      __pyx_f_12fmsne_implem_free_dble_3dmat(__pyx_v_ds_nn_i_rs, __pyx_v_n_rs, __pyx_v_N);

      /* "fmsne_implem.pyx":2907
 *             free_int_2dmat(nnn_i_rs, n_rs)
 *             free_dble_3dmat(ds_nn_i_rs, n_rs, N)
 *             free_dble_3dmat(tau_h_i_rs, L, n_rs)             # <<<<<<<<<<<<<<
 *             free_Pysst_3dmat(nn_i_rs_id_dld, n_rs, N)
 *             PyMem_Free(ni_dld)
 */
      __pyx_f_12fmsne_implem_free_dble_3dmat(__pyx_v_tau_h_i_rs, __pyx_v_L, __pyx_v_n_rs);

      /* "fmsne_implem.pyx":2908
 *             free_dble_3dmat(ds_nn_i_rs, n_rs, N)
 *             free_dble_3dmat(tau_h_i_rs, L, n_rs)
 *             free_Pysst_3dmat(nn_i_rs_id_dld, n_rs, N)             # <<<<<<<<<<<<<<
 *             PyMem_Free(ni_dld)
 *             free_Pysst_2dmat(ij_dld, sLm_nt)
 */
      __pyx_f_12fmsne_implem_free_Pysst_3dmat(__pyx_v_nn_i_rs_id_dld, __pyx_v_n_rs, __pyx_v_N);

      /* "fmsne_implem.pyx":2909
 *             free_dble_3dmat(tau_h_i_rs, L, n_rs)
 *             free_Pysst_3dmat(nn_i_rs_id_dld, n_rs, N)
 *             PyMem_Free(ni_dld)             # <<<<<<<<<<<<<<
 *             free_Pysst_2dmat(ij_dld, sLm_nt)
 *             free_dble_2dmat(dij_ld, sLm_nt)
 */
      PyMem_Free(__pyx_v_ni_dld);

      /* "fmsne_implem.pyx":2910
 *             free_Pysst_3dmat(nn_i_rs_id_dld, n_rs, N)
 *             PyMem_Free(ni_dld)
 *             free_Pysst_2dmat(ij_dld, sLm_nt)             # <<<<<<<<<<<<<<
 *             free_dble_2dmat(dij_ld, sLm_nt)
 *             printf('Error in fmssne_implem function of fmsne_implem.pyx: out of memory for p_h_rs')
 */
      __pyx_f_12fmsne_implem_free_Pysst_2dmat(__pyx_v_ij_dld, __pyx_v_sLm_nt);

      /* "fmsne_implem.pyx":2911
 *             PyMem_Free(ni_dld)
 *             free_Pysst_2dmat(ij_dld, sLm_nt)
 *             free_dble_2dmat(dij_ld, sLm_nt)             # <<<<<<<<<<<<<<
 *             printf('Error in fmssne_implem function of fmsne_implem.pyx: out of memory for p_h_rs')
 *             exit(EXIT_FAILURE)
 */
      __pyx_f_12fmsne_implem_free_dble_2dmat(__pyx_v_dij_ld, __pyx_v_sLm_nt);

      /* "fmsne_implem.pyx":2912
 *             free_Pysst_2dmat(ij_dld, sLm_nt)
 *             free_dble_2dmat(dij_ld, sLm_nt)
 *             printf('Error in fmssne_implem function of fmsne_implem.pyx: out of memory for p_h_rs')             # <<<<<<<<<<<<<<
 *             exit(EXIT_FAILURE)
 *         t_h_rs = alloc_dble_2dmat(L, n_rs)
 */
      (void)(printf(((char const *)"Error in fmssne_implem function of fmsne_implem.pyx: out of memory for p_h_rs")));

      /* "fmsne_implem.pyx":2913
 *             free_dble_2dmat(dij_ld, sLm_nt)
 *             printf('Error in fmssne_implem function of fmsne_implem.pyx: out of memory for p_h_rs')
 *             exit(EXIT_FAILURE)             # <<<<<<<<<<<<<<
 *         t_h_rs = alloc_dble_2dmat(L, n_rs)
 *         if t_h_rs is NULL:
 */
      exit(EXIT_FAILURE);

      /* "fmsne_implem.pyx":2902
 *         t_h = NULL
 *         p_h_rs = alloc_dble_2dmat(L, n_rs)
 *         if p_h_rs is NULL:             # <<<<<<<<<<<<<<
 *             PyMem_Free(K_h)
 *             free_int_3dmat(arr_nn_i_rs, n_rs, N)
 */
    }

    /* "fmsne_implem.pyx":2914
 *             printf('Error in fmssne_implem function of fmsne_implem.pyx: out of memory for p_h_rs')
 *             exit(EXIT_FAILURE)
 *         t_h_rs = alloc_dble_2dmat(L, n_rs)             # <<<<<<<<<<<<<<
 *         if t_h_rs is NULL:
 *             PyMem_Free(K_h)
 */
    __pyx_v_t_h_rs = __pyx_f_12fmsne_implem_alloc_dble_2dmat(__pyx_v_L, __pyx_v_n_rs);

    /* "fmsne_implem.pyx":2915
 *             exit(EXIT_FAILURE)
 *         t_h_rs = alloc_dble_2dmat(L, n_rs)
 *         if t_h_rs is NULL:             # <<<<<<<<<<<<<<
 *             PyMem_Free(K_h)
 *             free_int_3dmat(arr_nn_i_rs, n_rs, N)
 */
    __pyx_t_1 = ((__pyx_v_t_h_rs == NULL) != 0);
    if (__pyx_t_1) {

      /* "fmsne_implem.pyx":2916
 *         t_h_rs = alloc_dble_2dmat(L, n_rs)
 *         if t_h_rs is NULL:
 *             PyMem_Free(K_h)             # <<<<<<<<<<<<<<
 *             free_int_3dmat(arr_nn_i_rs, n_rs, N)
 *             free_int_2dmat(nnn_i_rs, n_rs)
 */
      PyMem_Free(__pyx_v_K_h);

      /* "fmsne_implem.pyx":2917
 *         if t_h_rs is NULL:
 *             PyMem_Free(K_h)
 *             free_int_3dmat(arr_nn_i_rs, n_rs, N)             # <<<<<<<<<<<<<<
 *             free_int_2dmat(nnn_i_rs, n_rs)
 *             free_dble_3dmat(ds_nn_i_rs, n_rs, N)
 */
      __pyx_f_12fmsne_implem_free_int_3dmat(__pyx_v_arr_nn_i_rs, __pyx_v_n_rs, __pyx_v_N);

      /* "fmsne_implem.pyx":2918
 *             PyMem_Free(K_h)
 *             free_int_3dmat(arr_nn_i_rs, n_rs, N)
 *             free_int_2dmat(nnn_i_rs, n_rs)             # <<<<<<<<<<<<<<
 *             free_dble_3dmat(ds_nn_i_rs, n_rs, N)
 *             free_dble_3dmat(tau_h_i_rs, L, n_rs)
 */
      __pyx_f_12fmsne_implem_free_int_2dmat(__pyx_v_nnn_i_rs, __pyx_v_n_rs);

      /* "fmsne_implem.pyx":2919
 *             free_int_3dmat(arr_nn_i_rs, n_rs, N)
 *             free_int_2dmat(nnn_i_rs, n_rs)
 *             free_dble_3dmat(ds_nn_i_rs, n_rs, N)             # <<<<<<<<<<<<<<
 *             free_dble_3dmat(tau_h_i_rs, L, n_rs)
 *             free_Pysst_3dmat(nn_i_rs_id_dld, n_rs, N)
 */
      __pyx_f_12fmsne_implem_free_dble_3dmat(__pyx_v_ds_nn_i_rs, __pyx_v_n_rs, __pyx_v_N);

      /* "fmsne_implem.pyx":2920
 *             free_int_2dmat(nnn_i_rs, n_rs)
 *             free_dble_3dmat(ds_nn_i_rs, n_rs, N)
 *             free_dble_3dmat(tau_h_i_rs, L, n_rs)             # <<<<<<<<<<<<<<
 *             free_Pysst_3dmat(nn_i_rs_id_dld, n_rs, N)
 *             PyMem_Free(ni_dld)
 */
      __pyx_f_12fmsne_implem_free_dble_3dmat(__pyx_v_tau_h_i_rs, __pyx_v_L, __pyx_v_n_rs);

      /* "fmsne_implem.pyx":2921
 *             free_dble_3dmat(ds_nn_i_rs, n_rs, N)
 *             free_dble_3dmat(tau_h_i_rs, L, n_rs)
 *             free_Pysst_3dmat(nn_i_rs_id_dld, n_rs, N)             # <<<<<<<<<<<<<<
 *             PyMem_Free(ni_dld)
 *             free_Pysst_2dmat(ij_dld, sLm_nt)
 */
      __pyx_f_12fmsne_implem_free_Pysst_3dmat(__pyx_v_nn_i_rs_id_dld, __pyx_v_n_rs, __pyx_v_N);

      /* "fmsne_implem.pyx":2922
 *             free_dble_3dmat(tau_h_i_rs, L, n_rs)
 *             free_Pysst_3dmat(nn_i_rs_id_dld, n_rs, N)
 *             PyMem_Free(ni_dld)             # <<<<<<<<<<<<<<
 *             free_Pysst_2dmat(ij_dld, sLm_nt)
 *             free_dble_2dmat(dij_ld, sLm_nt)
 */
      PyMem_Free(__pyx_v_ni_dld);

      /* "fmsne_implem.pyx":2923
 *             free_Pysst_3dmat(nn_i_rs_id_dld, n_rs, N)
 *             PyMem_Free(ni_dld)
 *             free_Pysst_2dmat(ij_dld, sLm_nt)             # <<<<<<<<<<<<<<
 *             free_dble_2dmat(dij_ld, sLm_nt)
 *             free_dble_2dmat(p_h_rs, L)
 */
      __pyx_f_12fmsne_implem_free_Pysst_2dmat(__pyx_v_ij_dld, __pyx_v_sLm_nt);

      /* "fmsne_implem.pyx":2924
 *             PyMem_Free(ni_dld)
 *             free_Pysst_2dmat(ij_dld, sLm_nt)
 *             free_dble_2dmat(dij_ld, sLm_nt)             # <<<<<<<<<<<<<<
 *             free_dble_2dmat(p_h_rs, L)
 *             printf('Error in fmssne_implem function of fmsne_implem.pyx: out of memory for t_h_rs')
 */
      __pyx_f_12fmsne_implem_free_dble_2dmat(__pyx_v_dij_ld, __pyx_v_sLm_nt);

      /* "fmsne_implem.pyx":2925
 *             free_Pysst_2dmat(ij_dld, sLm_nt)
 *             free_dble_2dmat(dij_ld, sLm_nt)
 *             free_dble_2dmat(p_h_rs, L)             # <<<<<<<<<<<<<<
 *             printf('Error in fmssne_implem function of fmsne_implem.pyx: out of memory for t_h_rs')
 *             exit(EXIT_FAILURE)
 */
      __pyx_f_12fmsne_implem_free_dble_2dmat(__pyx_v_p_h_rs, __pyx_v_L);

      /* "fmsne_implem.pyx":2926
 *             free_dble_2dmat(dij_ld, sLm_nt)
 *             free_dble_2dmat(p_h_rs, L)
 *             printf('Error in fmssne_implem function of fmsne_implem.pyx: out of memory for t_h_rs')             # <<<<<<<<<<<<<<
 *             exit(EXIT_FAILURE)
 *     else:
 */
      (void)(printf(((char const *)"Error in fmssne_implem function of fmsne_implem.pyx: out of memory for t_h_rs")));

      /* "fmsne_implem.pyx":2927
 *             free_dble_2dmat(p_h_rs, L)
 *             printf('Error in fmssne_implem function of fmsne_implem.pyx: out of memory for t_h_rs')
 *             exit(EXIT_FAILURE)             # <<<<<<<<<<<<<<
 *     else:
 *         p_h_rs = NULL
 */
      exit(EXIT_FAILURE);

      /* "fmsne_implem.pyx":2915
 *             exit(EXIT_FAILURE)
 *         t_h_rs = alloc_dble_2dmat(L, n_rs)
 *         if t_h_rs is NULL:             # <<<<<<<<<<<<<<
 *             PyMem_Free(K_h)
 *             free_int_3dmat(arr_nn_i_rs, n_rs, N)
 */
    }

    /* "fmsne_implem.pyx":2898
 *     # Array storing 2/p_h_rs
 *     cdef double** t_h_rs
 *     if fit_U:             # <<<<<<<<<<<<<<
 *         p_h = NULL
 *         t_h = NULL
 */
    goto __pyx_L16;
  }

  /* "fmsne_implem.pyx":2929
 *             exit(EXIT_FAILURE)
 *     else:
 *         p_h_rs = NULL             # <<<<<<<<<<<<<<
 *         t_h_rs = NULL
 *         p_h = <double*> PyMem_Malloc(L*sizeof(double))
 */
  /*else*/ {
    __pyx_v_p_h_rs = NULL;

    /* "fmsne_implem.pyx":2930
 *     else:
 *         p_h_rs = NULL
 *         t_h_rs = NULL             # <<<<<<<<<<<<<<
 *         p_h = <double*> PyMem_Malloc(L*sizeof(double))
 *         if p_h is NULL:
 */
    __pyx_v_t_h_rs = NULL;

    /* "fmsne_implem.pyx":2931
 *         p_h_rs = NULL
 *         t_h_rs = NULL
 *         p_h = <double*> PyMem_Malloc(L*sizeof(double))             # <<<<<<<<<<<<<<
 *         if p_h is NULL:
 *             PyMem_Free(K_h)
 */
    __pyx_v_p_h = ((double *)PyMem_Malloc((__pyx_v_L * (sizeof(double)))));

    /* "fmsne_implem.pyx":2932
 *         t_h_rs = NULL
 *         p_h = <double*> PyMem_Malloc(L*sizeof(double))
 *         if p_h is NULL:             # <<<<<<<<<<<<<<
 *             PyMem_Free(K_h)
 *             free_int_3dmat(arr_nn_i_rs, n_rs, N)
 */
    __pyx_t_1 = ((__pyx_v_p_h == NULL) != 0);
    if (__pyx_t_1) {

      /* "fmsne_implem.pyx":2933
 *         p_h = <double*> PyMem_Malloc(L*sizeof(double))
 *         if p_h is NULL:
 *             PyMem_Free(K_h)             # <<<<<<<<<<<<<<
 *             free_int_3dmat(arr_nn_i_rs, n_rs, N)
 *             free_int_2dmat(nnn_i_rs, n_rs)
 */
      PyMem_Free(__pyx_v_K_h);

      /* "fmsne_implem.pyx":2934
 *         if p_h is NULL:
 *             PyMem_Free(K_h)
 *             free_int_3dmat(arr_nn_i_rs, n_rs, N)             # <<<<<<<<<<<<<<
 *             free_int_2dmat(nnn_i_rs, n_rs)
 *             free_dble_3dmat(ds_nn_i_rs, n_rs, N)
 */
      __pyx_f_12fmsne_implem_free_int_3dmat(__pyx_v_arr_nn_i_rs, __pyx_v_n_rs, __pyx_v_N);

      /* "fmsne_implem.pyx":2935
 *             PyMem_Free(K_h)
 *             free_int_3dmat(arr_nn_i_rs, n_rs, N)
 *             free_int_2dmat(nnn_i_rs, n_rs)             # <<<<<<<<<<<<<<
 *             free_dble_3dmat(ds_nn_i_rs, n_rs, N)
 *             free_dble_3dmat(tau_h_i_rs, L, n_rs)
 */
      __pyx_f_12fmsne_implem_free_int_2dmat(__pyx_v_nnn_i_rs, __pyx_v_n_rs);

      /* "fmsne_implem.pyx":2936
 *             free_int_3dmat(arr_nn_i_rs, n_rs, N)
 *             free_int_2dmat(nnn_i_rs, n_rs)
 *             free_dble_3dmat(ds_nn_i_rs, n_rs, N)             # <<<<<<<<<<<<<<
 *             free_dble_3dmat(tau_h_i_rs, L, n_rs)
 *             free_Pysst_3dmat(nn_i_rs_id_dld, n_rs, N)
 */
      __pyx_f_12fmsne_implem_free_dble_3dmat(__pyx_v_ds_nn_i_rs, __pyx_v_n_rs, __pyx_v_N);

      /* "fmsne_implem.pyx":2937
 *             free_int_2dmat(nnn_i_rs, n_rs)
 *             free_dble_3dmat(ds_nn_i_rs, n_rs, N)
 *             free_dble_3dmat(tau_h_i_rs, L, n_rs)             # <<<<<<<<<<<<<<
 *             free_Pysst_3dmat(nn_i_rs_id_dld, n_rs, N)
 *             PyMem_Free(ni_dld)
 */
      __pyx_f_12fmsne_implem_free_dble_3dmat(__pyx_v_tau_h_i_rs, __pyx_v_L, __pyx_v_n_rs);

      /* "fmsne_implem.pyx":2938
 *             free_dble_3dmat(ds_nn_i_rs, n_rs, N)
 *             free_dble_3dmat(tau_h_i_rs, L, n_rs)
 *             free_Pysst_3dmat(nn_i_rs_id_dld, n_rs, N)             # <<<<<<<<<<<<<<
 *             PyMem_Free(ni_dld)
 *             free_Pysst_2dmat(ij_dld, sLm_nt)
 */
      __pyx_f_12fmsne_implem_free_Pysst_3dmat(__pyx_v_nn_i_rs_id_dld, __pyx_v_n_rs, __pyx_v_N);

      /* "fmsne_implem.pyx":2939
 *             free_dble_3dmat(tau_h_i_rs, L, n_rs)
 *             free_Pysst_3dmat(nn_i_rs_id_dld, n_rs, N)
 *             PyMem_Free(ni_dld)             # <<<<<<<<<<<<<<
 *             free_Pysst_2dmat(ij_dld, sLm_nt)
 *             free_dble_2dmat(dij_ld, sLm_nt)
 */
      PyMem_Free(__pyx_v_ni_dld);

      /* "fmsne_implem.pyx":2940
 *             free_Pysst_3dmat(nn_i_rs_id_dld, n_rs, N)
 *             PyMem_Free(ni_dld)
 *             free_Pysst_2dmat(ij_dld, sLm_nt)             # <<<<<<<<<<<<<<
 *             free_dble_2dmat(dij_ld, sLm_nt)
 *             printf("Error in fmssne_implem function of fmsne_implem.pyx: out of memory for p_h.")
 */
      __pyx_f_12fmsne_implem_free_Pysst_2dmat(__pyx_v_ij_dld, __pyx_v_sLm_nt);

      /* "fmsne_implem.pyx":2941
 *             PyMem_Free(ni_dld)
 *             free_Pysst_2dmat(ij_dld, sLm_nt)
 *             free_dble_2dmat(dij_ld, sLm_nt)             # <<<<<<<<<<<<<<
 *             printf("Error in fmssne_implem function of fmsne_implem.pyx: out of memory for p_h.")
 *             exit(EXIT_FAILURE)
 */
      __pyx_f_12fmsne_implem_free_dble_2dmat(__pyx_v_dij_ld, __pyx_v_sLm_nt);

      /* "fmsne_implem.pyx":2942
 *             free_Pysst_2dmat(ij_dld, sLm_nt)
 *             free_dble_2dmat(dij_ld, sLm_nt)
 *             printf("Error in fmssne_implem function of fmsne_implem.pyx: out of memory for p_h.")             # <<<<<<<<<<<<<<
 *             exit(EXIT_FAILURE)
 *         t_h = <double*> PyMem_Malloc(L*sizeof(double))
 */
      (void)(printf(((char const *)"Error in fmssne_implem function of fmsne_implem.pyx: out of memory for p_h.")));

      /* "fmsne_implem.pyx":2943
 *             free_dble_2dmat(dij_ld, sLm_nt)
 *             printf("Error in fmssne_implem function of fmsne_implem.pyx: out of memory for p_h.")
 *             exit(EXIT_FAILURE)             # <<<<<<<<<<<<<<
 *         t_h = <double*> PyMem_Malloc(L*sizeof(double))
 *         if t_h is NULL:
 */
      exit(EXIT_FAILURE);

      /* "fmsne_implem.pyx":2932
 *         t_h_rs = NULL
 *         p_h = <double*> PyMem_Malloc(L*sizeof(double))
 *         if p_h is NULL:             # <<<<<<<<<<<<<<
 *             PyMem_Free(K_h)
 *             free_int_3dmat(arr_nn_i_rs, n_rs, N)
 */
    }

    /* "fmsne_implem.pyx":2944
 *             printf("Error in fmssne_implem function of fmsne_implem.pyx: out of memory for p_h.")
 *             exit(EXIT_FAILURE)
 *         t_h = <double*> PyMem_Malloc(L*sizeof(double))             # <<<<<<<<<<<<<<
 *         if t_h is NULL:
 *             PyMem_Free(K_h)
 */
    __pyx_v_t_h = ((double *)PyMem_Malloc((__pyx_v_L * (sizeof(double)))));

    /* "fmsne_implem.pyx":2945
 *             exit(EXIT_FAILURE)
 *         t_h = <double*> PyMem_Malloc(L*sizeof(double))
 *         if t_h is NULL:             # <<<<<<<<<<<<<<
 *             PyMem_Free(K_h)
 *             free_int_3dmat(arr_nn_i_rs, n_rs, N)
 */
    __pyx_t_1 = ((__pyx_v_t_h == NULL) != 0);
    if (__pyx_t_1) {

      /* "fmsne_implem.pyx":2946
 *         t_h = <double*> PyMem_Malloc(L*sizeof(double))
 *         if t_h is NULL:
 *             PyMem_Free(K_h)             # <<<<<<<<<<<<<<
 *             free_int_3dmat(arr_nn_i_rs, n_rs, N)
 *             free_int_2dmat(nnn_i_rs, n_rs)
 */
      PyMem_Free(__pyx_v_K_h);

      /* "fmsne_implem.pyx":2947
 *         if t_h is NULL:
 *             PyMem_Free(K_h)
 *             free_int_3dmat(arr_nn_i_rs, n_rs, N)             # <<<<<<<<<<<<<<
 *             free_int_2dmat(nnn_i_rs, n_rs)
 *             free_dble_3dmat(ds_nn_i_rs, n_rs, N)
 */
      __pyx_f_12fmsne_implem_free_int_3dmat(__pyx_v_arr_nn_i_rs, __pyx_v_n_rs, __pyx_v_N);

      /* "fmsne_implem.pyx":2948
 *             PyMem_Free(K_h)
 *             free_int_3dmat(arr_nn_i_rs, n_rs, N)
 *             free_int_2dmat(nnn_i_rs, n_rs)             # <<<<<<<<<<<<<<
 *             free_dble_3dmat(ds_nn_i_rs, n_rs, N)
 *             free_dble_3dmat(tau_h_i_rs, L, n_rs)
 */
      __pyx_f_12fmsne_implem_free_int_2dmat(__pyx_v_nnn_i_rs, __pyx_v_n_rs);

      /* "fmsne_implem.pyx":2949
 *             free_int_3dmat(arr_nn_i_rs, n_rs, N)
 *             free_int_2dmat(nnn_i_rs, n_rs)
 *             free_dble_3dmat(ds_nn_i_rs, n_rs, N)             # <<<<<<<<<<<<<<
 *             free_dble_3dmat(tau_h_i_rs, L, n_rs)
 *             free_Pysst_3dmat(nn_i_rs_id_dld, n_rs, N)
 */
      __pyx_f_12fmsne_implem_free_dble_3dmat(__pyx_v_ds_nn_i_rs, __pyx_v_n_rs, __pyx_v_N);

      /* "fmsne_implem.pyx":2950
 *             free_int_2dmat(nnn_i_rs, n_rs)
 *             free_dble_3dmat(ds_nn_i_rs, n_rs, N)
 *             free_dble_3dmat(tau_h_i_rs, L, n_rs)             # <<<<<<<<<<<<<<
 *             free_Pysst_3dmat(nn_i_rs_id_dld, n_rs, N)
 *             PyMem_Free(ni_dld)
 */
      __pyx_f_12fmsne_implem_free_dble_3dmat(__pyx_v_tau_h_i_rs, __pyx_v_L, __pyx_v_n_rs);

      /* "fmsne_implem.pyx":2951
 *             free_dble_3dmat(ds_nn_i_rs, n_rs, N)
 *             free_dble_3dmat(tau_h_i_rs, L, n_rs)
 *             free_Pysst_3dmat(nn_i_rs_id_dld, n_rs, N)             # <<<<<<<<<<<<<<
 *             PyMem_Free(ni_dld)
 *             free_Pysst_2dmat(ij_dld, sLm_nt)
 */
      __pyx_f_12fmsne_implem_free_Pysst_3dmat(__pyx_v_nn_i_rs_id_dld, __pyx_v_n_rs, __pyx_v_N);

      /* "fmsne_implem.pyx":2952
 *             free_dble_3dmat(tau_h_i_rs, L, n_rs)
 *             free_Pysst_3dmat(nn_i_rs_id_dld, n_rs, N)
 *             PyMem_Free(ni_dld)             # <<<<<<<<<<<<<<
 *             free_Pysst_2dmat(ij_dld, sLm_nt)
 *             free_dble_2dmat(dij_ld, sLm_nt)
 */
      PyMem_Free(__pyx_v_ni_dld);

      /* "fmsne_implem.pyx":2953
 *             free_Pysst_3dmat(nn_i_rs_id_dld, n_rs, N)
 *             PyMem_Free(ni_dld)
 *             free_Pysst_2dmat(ij_dld, sLm_nt)             # <<<<<<<<<<<<<<
 *             free_dble_2dmat(dij_ld, sLm_nt)
 *             PyMem_Free(p_h)
 */
      __pyx_f_12fmsne_implem_free_Pysst_2dmat(__pyx_v_ij_dld, __pyx_v_sLm_nt);

      /* "fmsne_implem.pyx":2954
 *             PyMem_Free(ni_dld)
 *             free_Pysst_2dmat(ij_dld, sLm_nt)
 *             free_dble_2dmat(dij_ld, sLm_nt)             # <<<<<<<<<<<<<<
 *             PyMem_Free(p_h)
 *             printf("Error in fmssne_implem function of fmsne_implem.pyx: out of memory for t_h.")
 */
      __pyx_f_12fmsne_implem_free_dble_2dmat(__pyx_v_dij_ld, __pyx_v_sLm_nt);

      /* "fmsne_implem.pyx":2955
 *             free_Pysst_2dmat(ij_dld, sLm_nt)
 *             free_dble_2dmat(dij_ld, sLm_nt)
 *             PyMem_Free(p_h)             # <<<<<<<<<<<<<<
 *             printf("Error in fmssne_implem function of fmsne_implem.pyx: out of memory for t_h.")
 *             exit(EXIT_FAILURE)
 */
      PyMem_Free(__pyx_v_p_h);

      /* "fmsne_implem.pyx":2956
 *             free_dble_2dmat(dij_ld, sLm_nt)
 *             PyMem_Free(p_h)
 *             printf("Error in fmssne_implem function of fmsne_implem.pyx: out of memory for t_h.")             # <<<<<<<<<<<<<<
 *             exit(EXIT_FAILURE)
 *     # Pointer toward the start of the LDS
 */
      (void)(printf(((char const *)"Error in fmssne_implem function of fmsne_implem.pyx: out of memory for t_h.")));

      /* "fmsne_implem.pyx":2957
 *             PyMem_Free(p_h)
 *             printf("Error in fmssne_implem function of fmsne_implem.pyx: out of memory for t_h.")
 *             exit(EXIT_FAILURE)             # <<<<<<<<<<<<<<
 *     # Pointer toward the start of the LDS
 *     cdef double* xlds = &X_lds[0]
 */
      exit(EXIT_FAILURE);

      /* "fmsne_implem.pyx":2945
 *             exit(EXIT_FAILURE)
 *         t_h = <double*> PyMem_Malloc(L*sizeof(double))
 *         if t_h is NULL:             # <<<<<<<<<<<<<<
 *             PyMem_Free(K_h)
 *             free_int_3dmat(arr_nn_i_rs, n_rs, N)
 */
    }
  }
  __pyx_L16:;

  /* "fmsne_implem.pyx":2959
 *             exit(EXIT_FAILURE)
 *     # Pointer toward the start of the LDS
 *     cdef double* xlds = &X_lds[0]             # <<<<<<<<<<<<<<
 *     cdef int prod_N_nc = N*n_components
 *     # Computing the LD precisions
 */
  __pyx_t_2 = 0;
  __pyx_v_xlds = (&(*((double *) ( /* dim=0 */ ((char *) (((double *) __pyx_v_X_lds.data) + __pyx_t_2)) ))));

  /* "fmsne_implem.pyx":2960
 *     # Pointer toward the start of the LDS
 *     cdef double* xlds = &X_lds[0]
 *     cdef int prod_N_nc = N*n_components             # <<<<<<<<<<<<<<
 *     # Computing the LD precisions
 *     f_ldprec(n_components, Nd, xlds, prod_N_nc, fit_U, n_rs, L, N, tau_h_i_rs, K_h, p_h_rs, t_h_rs, p_h, t_h, sLm_nt)
 */
  __pyx_v_prod_N_nc = (__pyx_v_N * __pyx_v_n_components);

  /* "fmsne_implem.pyx":2962
 *     cdef int prod_N_nc = N*n_components
 *     # Computing the LD precisions
 *     f_ldprec(n_components, Nd, xlds, prod_N_nc, fit_U, n_rs, L, N, tau_h_i_rs, K_h, p_h_rs, t_h_rs, p_h, t_h, sLm_nt)             # <<<<<<<<<<<<<<
 * 
 *     # Free stuff which will not be used anymore
 */
  __pyx_f_12fmsne_implem_f_ldprec(__pyx_v_n_components, __pyx_v_Nd, __pyx_v_xlds, __pyx_v_prod_N_nc, __pyx_v_fit_U, __pyx_v_n_rs, __pyx_v_L, __pyx_v_N, __pyx_v_tau_h_i_rs, __pyx_v_K_h, __pyx_v_p_h_rs, __pyx_v_t_h_rs, __pyx_v_p_h, __pyx_v_t_h, __pyx_v_sLm_nt);

  /* "fmsne_implem.pyx":2965
 * 
 *     # Free stuff which will not be used anymore
 *     PyMem_Free(K_h)             # <<<<<<<<<<<<<<
 * 
 *     #####
 */
  PyMem_Free(__pyx_v_K_h);

  /* "fmsne_implem.pyx":2972
 * 
 *     # Array storing the multi-scale HD similarities, as computed during the multi-scale optimization
 *     cdef double*** simhd_ms_nn_i_rs = alloc_dble_3dmat_varK(n_rs, N, nnn_i_rs)             # <<<<<<<<<<<<<<
 *     if simhd_ms_nn_i_rs is NULL:
 *         free_int_3dmat(arr_nn_i_rs, n_rs, N)
 */
  __pyx_v_simhd_ms_nn_i_rs = __pyx_f_12fmsne_implem_alloc_dble_3dmat_varK(__pyx_v_n_rs, __pyx_v_N, __pyx_v_nnn_i_rs);

  /* "fmsne_implem.pyx":2973
 *     # Array storing the multi-scale HD similarities, as computed during the multi-scale optimization
 *     cdef double*** simhd_ms_nn_i_rs = alloc_dble_3dmat_varK(n_rs, N, nnn_i_rs)
 *     if simhd_ms_nn_i_rs is NULL:             # <<<<<<<<<<<<<<
 *         free_int_3dmat(arr_nn_i_rs, n_rs, N)
 *         free_int_2dmat(nnn_i_rs, n_rs)
 */
  __pyx_t_1 = ((__pyx_v_simhd_ms_nn_i_rs == NULL) != 0);
  if (__pyx_t_1) {

    /* "fmsne_implem.pyx":2974
 *     cdef double*** simhd_ms_nn_i_rs = alloc_dble_3dmat_varK(n_rs, N, nnn_i_rs)
 *     if simhd_ms_nn_i_rs is NULL:
 *         free_int_3dmat(arr_nn_i_rs, n_rs, N)             # <<<<<<<<<<<<<<
 *         free_int_2dmat(nnn_i_rs, n_rs)
 *         free_dble_3dmat(ds_nn_i_rs, n_rs, N)
 */
    __pyx_f_12fmsne_implem_free_int_3dmat(__pyx_v_arr_nn_i_rs, __pyx_v_n_rs, __pyx_v_N);

    /* "fmsne_implem.pyx":2975
 *     if simhd_ms_nn_i_rs is NULL:
 *         free_int_3dmat(arr_nn_i_rs, n_rs, N)
 *         free_int_2dmat(nnn_i_rs, n_rs)             # <<<<<<<<<<<<<<
 *         free_dble_3dmat(ds_nn_i_rs, n_rs, N)
 *         free_dble_3dmat(tau_h_i_rs, L, n_rs)
 */
    __pyx_f_12fmsne_implem_free_int_2dmat(__pyx_v_nnn_i_rs, __pyx_v_n_rs);

    /* "fmsne_implem.pyx":2976
 *         free_int_3dmat(arr_nn_i_rs, n_rs, N)
 *         free_int_2dmat(nnn_i_rs, n_rs)
 *         free_dble_3dmat(ds_nn_i_rs, n_rs, N)             # <<<<<<<<<<<<<<
 *         free_dble_3dmat(tau_h_i_rs, L, n_rs)
 *         free_Pysst_3dmat(nn_i_rs_id_dld, n_rs, N)
 */
    __pyx_f_12fmsne_implem_free_dble_3dmat(__pyx_v_ds_nn_i_rs, __pyx_v_n_rs, __pyx_v_N);

    /* "fmsne_implem.pyx":2977
 *         free_int_2dmat(nnn_i_rs, n_rs)
 *         free_dble_3dmat(ds_nn_i_rs, n_rs, N)
 *         free_dble_3dmat(tau_h_i_rs, L, n_rs)             # <<<<<<<<<<<<<<
 *         free_Pysst_3dmat(nn_i_rs_id_dld, n_rs, N)
 *         PyMem_Free(ni_dld)
 */
    __pyx_f_12fmsne_implem_free_dble_3dmat(__pyx_v_tau_h_i_rs, __pyx_v_L, __pyx_v_n_rs);

    /* "fmsne_implem.pyx":2978
 *         free_dble_3dmat(ds_nn_i_rs, n_rs, N)
 *         free_dble_3dmat(tau_h_i_rs, L, n_rs)
 *         free_Pysst_3dmat(nn_i_rs_id_dld, n_rs, N)             # <<<<<<<<<<<<<<
 *         PyMem_Free(ni_dld)
 *         free_Pysst_2dmat(ij_dld, sLm_nt)
 */
    __pyx_f_12fmsne_implem_free_Pysst_3dmat(__pyx_v_nn_i_rs_id_dld, __pyx_v_n_rs, __pyx_v_N);

    /* "fmsne_implem.pyx":2979
 *         free_dble_3dmat(tau_h_i_rs, L, n_rs)
 *         free_Pysst_3dmat(nn_i_rs_id_dld, n_rs, N)
 *         PyMem_Free(ni_dld)             # <<<<<<<<<<<<<<
 *         free_Pysst_2dmat(ij_dld, sLm_nt)
 *         free_dble_2dmat(dij_ld, sLm_nt)
 */
    PyMem_Free(__pyx_v_ni_dld);

    /* "fmsne_implem.pyx":2980
 *         free_Pysst_3dmat(nn_i_rs_id_dld, n_rs, N)
 *         PyMem_Free(ni_dld)
 *         free_Pysst_2dmat(ij_dld, sLm_nt)             # <<<<<<<<<<<<<<
 *         free_dble_2dmat(dij_ld, sLm_nt)
 *         if fit_U:
 */
    __pyx_f_12fmsne_implem_free_Pysst_2dmat(__pyx_v_ij_dld, __pyx_v_sLm_nt);

    /* "fmsne_implem.pyx":2981
 *         PyMem_Free(ni_dld)
 *         free_Pysst_2dmat(ij_dld, sLm_nt)
 *         free_dble_2dmat(dij_ld, sLm_nt)             # <<<<<<<<<<<<<<
 *         if fit_U:
 *             free_dble_2dmat(p_h_rs, L)
 */
    __pyx_f_12fmsne_implem_free_dble_2dmat(__pyx_v_dij_ld, __pyx_v_sLm_nt);

    /* "fmsne_implem.pyx":2982
 *         free_Pysst_2dmat(ij_dld, sLm_nt)
 *         free_dble_2dmat(dij_ld, sLm_nt)
 *         if fit_U:             # <<<<<<<<<<<<<<
 *             free_dble_2dmat(p_h_rs, L)
 *             free_dble_2dmat(t_h_rs, L)
 */
    __pyx_t_1 = (__pyx_v_fit_U != 0);
    if (__pyx_t_1) {

      /* "fmsne_implem.pyx":2983
 *         free_dble_2dmat(dij_ld, sLm_nt)
 *         if fit_U:
 *             free_dble_2dmat(p_h_rs, L)             # <<<<<<<<<<<<<<
 *             free_dble_2dmat(t_h_rs, L)
 *         else:
 */
      __pyx_f_12fmsne_implem_free_dble_2dmat(__pyx_v_p_h_rs, __pyx_v_L);

      /* "fmsne_implem.pyx":2984
 *         if fit_U:
 *             free_dble_2dmat(p_h_rs, L)
 *             free_dble_2dmat(t_h_rs, L)             # <<<<<<<<<<<<<<
 *         else:
 *             PyMem_Free(p_h)
 */
      __pyx_f_12fmsne_implem_free_dble_2dmat(__pyx_v_t_h_rs, __pyx_v_L);

      /* "fmsne_implem.pyx":2982
 *         free_Pysst_2dmat(ij_dld, sLm_nt)
 *         free_dble_2dmat(dij_ld, sLm_nt)
 *         if fit_U:             # <<<<<<<<<<<<<<
 *             free_dble_2dmat(p_h_rs, L)
 *             free_dble_2dmat(t_h_rs, L)
 */
      goto __pyx_L22;
    }

    /* "fmsne_implem.pyx":2986
 *             free_dble_2dmat(t_h_rs, L)
 *         else:
 *             PyMem_Free(p_h)             # <<<<<<<<<<<<<<
 *             PyMem_Free(t_h)
 *         printf("Error in fmssne_implem function of fmsne_implem.pyx: out of memory for simhd_ms_nn_i_rs.")
 */
    /*else*/ {
      PyMem_Free(__pyx_v_p_h);

      /* "fmsne_implem.pyx":2987
 *         else:
 *             PyMem_Free(p_h)
 *             PyMem_Free(t_h)             # <<<<<<<<<<<<<<
 *         printf("Error in fmssne_implem function of fmsne_implem.pyx: out of memory for simhd_ms_nn_i_rs.")
 *         exit(EXIT_FAILURE)
 */
      PyMem_Free(__pyx_v_t_h);
    }
    __pyx_L22:;

    /* "fmsne_implem.pyx":2988
 *             PyMem_Free(p_h)
 *             PyMem_Free(t_h)
 *         printf("Error in fmssne_implem function of fmsne_implem.pyx: out of memory for simhd_ms_nn_i_rs.")             # <<<<<<<<<<<<<<
 *         exit(EXIT_FAILURE)
 * 
 */
    (void)(printf(((char const *)"Error in fmssne_implem function of fmsne_implem.pyx: out of memory for simhd_ms_nn_i_rs.")));

    /* "fmsne_implem.pyx":2989
 *             PyMem_Free(t_h)
 *         printf("Error in fmssne_implem function of fmsne_implem.pyx: out of memory for simhd_ms_nn_i_rs.")
 *         exit(EXIT_FAILURE)             # <<<<<<<<<<<<<<
 * 
 *     # Array storing the HD similarities at some scale h, during the multi-scale optimization
 */
    exit(EXIT_FAILURE);

    /* "fmsne_implem.pyx":2973
 *     # Array storing the multi-scale HD similarities, as computed during the multi-scale optimization
 *     cdef double*** simhd_ms_nn_i_rs = alloc_dble_3dmat_varK(n_rs, N, nnn_i_rs)
 *     if simhd_ms_nn_i_rs is NULL:             # <<<<<<<<<<<<<<
 *         free_int_3dmat(arr_nn_i_rs, n_rs, N)
 *         free_int_2dmat(nnn_i_rs, n_rs)
 */
  }

  /* "fmsne_implem.pyx":2992
 * 
 *     # Array storing the HD similarities at some scale h, during the multi-scale optimization
 *     cdef double*** simhd_h_nn_i_rs = alloc_dble_3dmat_varK(n_rs, N, nnn_i_rs)             # <<<<<<<<<<<<<<
 *     if simhd_h_nn_i_rs is NULL:
 *         free_int_3dmat(arr_nn_i_rs, n_rs, N)
 */
  __pyx_v_simhd_h_nn_i_rs = __pyx_f_12fmsne_implem_alloc_dble_3dmat_varK(__pyx_v_n_rs, __pyx_v_N, __pyx_v_nnn_i_rs);

  /* "fmsne_implem.pyx":2993
 *     # Array storing the HD similarities at some scale h, during the multi-scale optimization
 *     cdef double*** simhd_h_nn_i_rs = alloc_dble_3dmat_varK(n_rs, N, nnn_i_rs)
 *     if simhd_h_nn_i_rs is NULL:             # <<<<<<<<<<<<<<
 *         free_int_3dmat(arr_nn_i_rs, n_rs, N)
 *         free_int_2dmat(nnn_i_rs, n_rs)
 */
  __pyx_t_1 = ((__pyx_v_simhd_h_nn_i_rs == NULL) != 0);
  if (__pyx_t_1) {

    /* "fmsne_implem.pyx":2994
 *     cdef double*** simhd_h_nn_i_rs = alloc_dble_3dmat_varK(n_rs, N, nnn_i_rs)
 *     if simhd_h_nn_i_rs is NULL:
 *         free_int_3dmat(arr_nn_i_rs, n_rs, N)             # <<<<<<<<<<<<<<
 *         free_int_2dmat(nnn_i_rs, n_rs)
 *         free_dble_3dmat(ds_nn_i_rs, n_rs, N)
 */
    __pyx_f_12fmsne_implem_free_int_3dmat(__pyx_v_arr_nn_i_rs, __pyx_v_n_rs, __pyx_v_N);

    /* "fmsne_implem.pyx":2995
 *     if simhd_h_nn_i_rs is NULL:
 *         free_int_3dmat(arr_nn_i_rs, n_rs, N)
 *         free_int_2dmat(nnn_i_rs, n_rs)             # <<<<<<<<<<<<<<
 *         free_dble_3dmat(ds_nn_i_rs, n_rs, N)
 *         free_dble_3dmat(simhd_ms_nn_i_rs, n_rs, N)
 */
    __pyx_f_12fmsne_implem_free_int_2dmat(__pyx_v_nnn_i_rs, __pyx_v_n_rs);

    /* "fmsne_implem.pyx":2996
 *         free_int_3dmat(arr_nn_i_rs, n_rs, N)
 *         free_int_2dmat(nnn_i_rs, n_rs)
 *         free_dble_3dmat(ds_nn_i_rs, n_rs, N)             # <<<<<<<<<<<<<<
 *         free_dble_3dmat(simhd_ms_nn_i_rs, n_rs, N)
 *         free_dble_3dmat(tau_h_i_rs, L, n_rs)
 */
    __pyx_f_12fmsne_implem_free_dble_3dmat(__pyx_v_ds_nn_i_rs, __pyx_v_n_rs, __pyx_v_N);

    /* "fmsne_implem.pyx":2997
 *         free_int_2dmat(nnn_i_rs, n_rs)
 *         free_dble_3dmat(ds_nn_i_rs, n_rs, N)
 *         free_dble_3dmat(simhd_ms_nn_i_rs, n_rs, N)             # <<<<<<<<<<<<<<
 *         free_dble_3dmat(tau_h_i_rs, L, n_rs)
 *         free_Pysst_3dmat(nn_i_rs_id_dld, n_rs, N)
 */
    __pyx_f_12fmsne_implem_free_dble_3dmat(__pyx_v_simhd_ms_nn_i_rs, __pyx_v_n_rs, __pyx_v_N);

    /* "fmsne_implem.pyx":2998
 *         free_dble_3dmat(ds_nn_i_rs, n_rs, N)
 *         free_dble_3dmat(simhd_ms_nn_i_rs, n_rs, N)
 *         free_dble_3dmat(tau_h_i_rs, L, n_rs)             # <<<<<<<<<<<<<<
 *         free_Pysst_3dmat(nn_i_rs_id_dld, n_rs, N)
 *         PyMem_Free(ni_dld)
 */
    __pyx_f_12fmsne_implem_free_dble_3dmat(__pyx_v_tau_h_i_rs, __pyx_v_L, __pyx_v_n_rs);

    /* "fmsne_implem.pyx":2999
 *         free_dble_3dmat(simhd_ms_nn_i_rs, n_rs, N)
 *         free_dble_3dmat(tau_h_i_rs, L, n_rs)
 *         free_Pysst_3dmat(nn_i_rs_id_dld, n_rs, N)             # <<<<<<<<<<<<<<
 *         PyMem_Free(ni_dld)
 *         free_Pysst_2dmat(ij_dld, sLm_nt)
 */
    __pyx_f_12fmsne_implem_free_Pysst_3dmat(__pyx_v_nn_i_rs_id_dld, __pyx_v_n_rs, __pyx_v_N);

    /* "fmsne_implem.pyx":3000
 *         free_dble_3dmat(tau_h_i_rs, L, n_rs)
 *         free_Pysst_3dmat(nn_i_rs_id_dld, n_rs, N)
 *         PyMem_Free(ni_dld)             # <<<<<<<<<<<<<<
 *         free_Pysst_2dmat(ij_dld, sLm_nt)
 *         free_dble_2dmat(dij_ld, sLm_nt)
 */
    PyMem_Free(__pyx_v_ni_dld);

    /* "fmsne_implem.pyx":3001
 *         free_Pysst_3dmat(nn_i_rs_id_dld, n_rs, N)
 *         PyMem_Free(ni_dld)
 *         free_Pysst_2dmat(ij_dld, sLm_nt)             # <<<<<<<<<<<<<<
 *         free_dble_2dmat(dij_ld, sLm_nt)
 *         if fit_U:
 */
    __pyx_f_12fmsne_implem_free_Pysst_2dmat(__pyx_v_ij_dld, __pyx_v_sLm_nt);

    /* "fmsne_implem.pyx":3002
 *         PyMem_Free(ni_dld)
 *         free_Pysst_2dmat(ij_dld, sLm_nt)
 *         free_dble_2dmat(dij_ld, sLm_nt)             # <<<<<<<<<<<<<<
 *         if fit_U:
 *             free_dble_2dmat(p_h_rs, L)
 */
    __pyx_f_12fmsne_implem_free_dble_2dmat(__pyx_v_dij_ld, __pyx_v_sLm_nt);

    /* "fmsne_implem.pyx":3003
 *         free_Pysst_2dmat(ij_dld, sLm_nt)
 *         free_dble_2dmat(dij_ld, sLm_nt)
 *         if fit_U:             # <<<<<<<<<<<<<<
 *             free_dble_2dmat(p_h_rs, L)
 *             free_dble_2dmat(t_h_rs, L)
 */
    __pyx_t_1 = (__pyx_v_fit_U != 0);
    if (__pyx_t_1) {

      /* "fmsne_implem.pyx":3004
 *         free_dble_2dmat(dij_ld, sLm_nt)
 *         if fit_U:
 *             free_dble_2dmat(p_h_rs, L)             # <<<<<<<<<<<<<<
 *             free_dble_2dmat(t_h_rs, L)
 *         else:
 */
      __pyx_f_12fmsne_implem_free_dble_2dmat(__pyx_v_p_h_rs, __pyx_v_L);

      /* "fmsne_implem.pyx":3005
 *         if fit_U:
 *             free_dble_2dmat(p_h_rs, L)
 *             free_dble_2dmat(t_h_rs, L)             # <<<<<<<<<<<<<<
 *         else:
 *             PyMem_Free(p_h)
 */
      __pyx_f_12fmsne_implem_free_dble_2dmat(__pyx_v_t_h_rs, __pyx_v_L);

      /* "fmsne_implem.pyx":3003
 *         free_Pysst_2dmat(ij_dld, sLm_nt)
 *         free_dble_2dmat(dij_ld, sLm_nt)
 *         if fit_U:             # <<<<<<<<<<<<<<
 *             free_dble_2dmat(p_h_rs, L)
 *             free_dble_2dmat(t_h_rs, L)
 */
      goto __pyx_L24;
    }

    /* "fmsne_implem.pyx":3007
 *             free_dble_2dmat(t_h_rs, L)
 *         else:
 *             PyMem_Free(p_h)             # <<<<<<<<<<<<<<
 *             PyMem_Free(t_h)
 *         printf("Error in fmssne_implem function of fmsne_implem.pyx: out of memory for simhd_h_nn_i_rs.")
 */
    /*else*/ {
      PyMem_Free(__pyx_v_p_h);

      /* "fmsne_implem.pyx":3008
 *         else:
 *             PyMem_Free(p_h)
 *             PyMem_Free(t_h)             # <<<<<<<<<<<<<<
 *         printf("Error in fmssne_implem function of fmsne_implem.pyx: out of memory for simhd_h_nn_i_rs.")
 *         exit(EXIT_FAILURE)
 */
      PyMem_Free(__pyx_v_t_h);
    }
    __pyx_L24:;

    /* "fmsne_implem.pyx":3009
 *             PyMem_Free(p_h)
 *             PyMem_Free(t_h)
 *         printf("Error in fmssne_implem function of fmsne_implem.pyx: out of memory for simhd_h_nn_i_rs.")             # <<<<<<<<<<<<<<
 *         exit(EXIT_FAILURE)
 * 
 */
    (void)(printf(((char const *)"Error in fmssne_implem function of fmsne_implem.pyx: out of memory for simhd_h_nn_i_rs.")));

    /* "fmsne_implem.pyx":3010
 *             PyMem_Free(t_h)
 *         printf("Error in fmssne_implem function of fmsne_implem.pyx: out of memory for simhd_h_nn_i_rs.")
 *         exit(EXIT_FAILURE)             # <<<<<<<<<<<<<<
 * 
 *     #####
 */
    exit(EXIT_FAILURE);

    /* "fmsne_implem.pyx":2993
 *     # Array storing the HD similarities at some scale h, during the multi-scale optimization
 *     cdef double*** simhd_h_nn_i_rs = alloc_dble_3dmat_varK(n_rs, N, nnn_i_rs)
 *     if simhd_h_nn_i_rs is NULL:             # <<<<<<<<<<<<<<
 *         free_int_3dmat(arr_nn_i_rs, n_rs, N)
 *         free_int_2dmat(nnn_i_rs, n_rs)
 */
  }

  /* "fmsne_implem.pyx":3017
 * 
 *     # Number of bytes of the array for the optimization
 *     shdp = prod_N_nc*sizeof(double)             # <<<<<<<<<<<<<<
 *     # Variables for the optimization, initialized to the current LDS.
 *     cdef lbfgsfloatval_t* xopt = init_lbfgs_var(shdp, prod_N_nc, xlds)
 */
  __pyx_v_shdp = (__pyx_v_prod_N_nc * (sizeof(double)));

  /* "fmsne_implem.pyx":3019
 *     shdp = prod_N_nc*sizeof(double)
 *     # Variables for the optimization, initialized to the current LDS.
 *     cdef lbfgsfloatval_t* xopt = init_lbfgs_var(shdp, prod_N_nc, xlds)             # <<<<<<<<<<<<<<
 *     if xopt is NULL:
 *         free_int_3dmat(arr_nn_i_rs, n_rs, N)
 */
  __pyx_v_xopt = __pyx_f_12fmsne_implem_init_lbfgs_var(__pyx_v_shdp, __pyx_v_prod_N_nc, __pyx_v_xlds);

  /* "fmsne_implem.pyx":3020
 *     # Variables for the optimization, initialized to the current LDS.
 *     cdef lbfgsfloatval_t* xopt = init_lbfgs_var(shdp, prod_N_nc, xlds)
 *     if xopt is NULL:             # <<<<<<<<<<<<<<
 *         free_int_3dmat(arr_nn_i_rs, n_rs, N)
 *         free_int_2dmat(nnn_i_rs, n_rs)
 */
  __pyx_t_1 = ((__pyx_v_xopt == NULL) != 0);
  if (__pyx_t_1) {

    /* "fmsne_implem.pyx":3021
 *     cdef lbfgsfloatval_t* xopt = init_lbfgs_var(shdp, prod_N_nc, xlds)
 *     if xopt is NULL:
 *         free_int_3dmat(arr_nn_i_rs, n_rs, N)             # <<<<<<<<<<<<<<
 *         free_int_2dmat(nnn_i_rs, n_rs)
 *         free_dble_3dmat(ds_nn_i_rs, n_rs, N)
 */
    __pyx_f_12fmsne_implem_free_int_3dmat(__pyx_v_arr_nn_i_rs, __pyx_v_n_rs, __pyx_v_N);

    /* "fmsne_implem.pyx":3022
 *     if xopt is NULL:
 *         free_int_3dmat(arr_nn_i_rs, n_rs, N)
 *         free_int_2dmat(nnn_i_rs, n_rs)             # <<<<<<<<<<<<<<
 *         free_dble_3dmat(ds_nn_i_rs, n_rs, N)
 *         free_dble_3dmat(simhd_ms_nn_i_rs, n_rs, N)
 */
    __pyx_f_12fmsne_implem_free_int_2dmat(__pyx_v_nnn_i_rs, __pyx_v_n_rs);

    /* "fmsne_implem.pyx":3023
 *         free_int_3dmat(arr_nn_i_rs, n_rs, N)
 *         free_int_2dmat(nnn_i_rs, n_rs)
 *         free_dble_3dmat(ds_nn_i_rs, n_rs, N)             # <<<<<<<<<<<<<<
 *         free_dble_3dmat(simhd_ms_nn_i_rs, n_rs, N)
 *         free_dble_3dmat(simhd_h_nn_i_rs, n_rs, N)
 */
    __pyx_f_12fmsne_implem_free_dble_3dmat(__pyx_v_ds_nn_i_rs, __pyx_v_n_rs, __pyx_v_N);

    /* "fmsne_implem.pyx":3024
 *         free_int_2dmat(nnn_i_rs, n_rs)
 *         free_dble_3dmat(ds_nn_i_rs, n_rs, N)
 *         free_dble_3dmat(simhd_ms_nn_i_rs, n_rs, N)             # <<<<<<<<<<<<<<
 *         free_dble_3dmat(simhd_h_nn_i_rs, n_rs, N)
 *         free_dble_3dmat(tau_h_i_rs, L, n_rs)
 */
    __pyx_f_12fmsne_implem_free_dble_3dmat(__pyx_v_simhd_ms_nn_i_rs, __pyx_v_n_rs, __pyx_v_N);

    /* "fmsne_implem.pyx":3025
 *         free_dble_3dmat(ds_nn_i_rs, n_rs, N)
 *         free_dble_3dmat(simhd_ms_nn_i_rs, n_rs, N)
 *         free_dble_3dmat(simhd_h_nn_i_rs, n_rs, N)             # <<<<<<<<<<<<<<
 *         free_dble_3dmat(tau_h_i_rs, L, n_rs)
 *         free_Pysst_3dmat(nn_i_rs_id_dld, n_rs, N)
 */
    __pyx_f_12fmsne_implem_free_dble_3dmat(__pyx_v_simhd_h_nn_i_rs, __pyx_v_n_rs, __pyx_v_N);

    /* "fmsne_implem.pyx":3026
 *         free_dble_3dmat(simhd_ms_nn_i_rs, n_rs, N)
 *         free_dble_3dmat(simhd_h_nn_i_rs, n_rs, N)
 *         free_dble_3dmat(tau_h_i_rs, L, n_rs)             # <<<<<<<<<<<<<<
 *         free_Pysst_3dmat(nn_i_rs_id_dld, n_rs, N)
 *         PyMem_Free(ni_dld)
 */
    __pyx_f_12fmsne_implem_free_dble_3dmat(__pyx_v_tau_h_i_rs, __pyx_v_L, __pyx_v_n_rs);

    /* "fmsne_implem.pyx":3027
 *         free_dble_3dmat(simhd_h_nn_i_rs, n_rs, N)
 *         free_dble_3dmat(tau_h_i_rs, L, n_rs)
 *         free_Pysst_3dmat(nn_i_rs_id_dld, n_rs, N)             # <<<<<<<<<<<<<<
 *         PyMem_Free(ni_dld)
 *         free_Pysst_2dmat(ij_dld, sLm_nt)
 */
    __pyx_f_12fmsne_implem_free_Pysst_3dmat(__pyx_v_nn_i_rs_id_dld, __pyx_v_n_rs, __pyx_v_N);

    /* "fmsne_implem.pyx":3028
 *         free_dble_3dmat(tau_h_i_rs, L, n_rs)
 *         free_Pysst_3dmat(nn_i_rs_id_dld, n_rs, N)
 *         PyMem_Free(ni_dld)             # <<<<<<<<<<<<<<
 *         free_Pysst_2dmat(ij_dld, sLm_nt)
 *         free_dble_2dmat(dij_ld, sLm_nt)
 */
    PyMem_Free(__pyx_v_ni_dld);

    /* "fmsne_implem.pyx":3029
 *         free_Pysst_3dmat(nn_i_rs_id_dld, n_rs, N)
 *         PyMem_Free(ni_dld)
 *         free_Pysst_2dmat(ij_dld, sLm_nt)             # <<<<<<<<<<<<<<
 *         free_dble_2dmat(dij_ld, sLm_nt)
 *         if fit_U:
 */
    __pyx_f_12fmsne_implem_free_Pysst_2dmat(__pyx_v_ij_dld, __pyx_v_sLm_nt);

    /* "fmsne_implem.pyx":3030
 *         PyMem_Free(ni_dld)
 *         free_Pysst_2dmat(ij_dld, sLm_nt)
 *         free_dble_2dmat(dij_ld, sLm_nt)             # <<<<<<<<<<<<<<
 *         if fit_U:
 *             free_dble_2dmat(p_h_rs, L)
 */
    __pyx_f_12fmsne_implem_free_dble_2dmat(__pyx_v_dij_ld, __pyx_v_sLm_nt);

    /* "fmsne_implem.pyx":3031
 *         free_Pysst_2dmat(ij_dld, sLm_nt)
 *         free_dble_2dmat(dij_ld, sLm_nt)
 *         if fit_U:             # <<<<<<<<<<<<<<
 *             free_dble_2dmat(p_h_rs, L)
 *             free_dble_2dmat(t_h_rs, L)
 */
    __pyx_t_1 = (__pyx_v_fit_U != 0);
    if (__pyx_t_1) {

      /* "fmsne_implem.pyx":3032
 *         free_dble_2dmat(dij_ld, sLm_nt)
 *         if fit_U:
 *             free_dble_2dmat(p_h_rs, L)             # <<<<<<<<<<<<<<
 *             free_dble_2dmat(t_h_rs, L)
 *         else:
 */
      __pyx_f_12fmsne_implem_free_dble_2dmat(__pyx_v_p_h_rs, __pyx_v_L);

      /* "fmsne_implem.pyx":3033
 *         if fit_U:
 *             free_dble_2dmat(p_h_rs, L)
 *             free_dble_2dmat(t_h_rs, L)             # <<<<<<<<<<<<<<
 *         else:
 *             PyMem_Free(p_h)
 */
      __pyx_f_12fmsne_implem_free_dble_2dmat(__pyx_v_t_h_rs, __pyx_v_L);

      /* "fmsne_implem.pyx":3031
 *         free_Pysst_2dmat(ij_dld, sLm_nt)
 *         free_dble_2dmat(dij_ld, sLm_nt)
 *         if fit_U:             # <<<<<<<<<<<<<<
 *             free_dble_2dmat(p_h_rs, L)
 *             free_dble_2dmat(t_h_rs, L)
 */
      goto __pyx_L26;
    }

    /* "fmsne_implem.pyx":3035
 *             free_dble_2dmat(t_h_rs, L)
 *         else:
 *             PyMem_Free(p_h)             # <<<<<<<<<<<<<<
 *             PyMem_Free(t_h)
 *         printf('Out of memory for xopt')
 */
    /*else*/ {
      PyMem_Free(__pyx_v_p_h);

      /* "fmsne_implem.pyx":3036
 *         else:
 *             PyMem_Free(p_h)
 *             PyMem_Free(t_h)             # <<<<<<<<<<<<<<
 *         printf('Out of memory for xopt')
 *         exit(EXIT_FAILURE)
 */
      PyMem_Free(__pyx_v_t_h);
    }
    __pyx_L26:;

    /* "fmsne_implem.pyx":3037
 *             PyMem_Free(p_h)
 *             PyMem_Free(t_h)
 *         printf('Out of memory for xopt')             # <<<<<<<<<<<<<<
 *         exit(EXIT_FAILURE)
 * 
 */
    (void)(printf(((char const *)"Out of memory for xopt")));

    /* "fmsne_implem.pyx":3038
 *             PyMem_Free(t_h)
 *         printf('Out of memory for xopt')
 *         exit(EXIT_FAILURE)             # <<<<<<<<<<<<<<
 * 
 *     # Structure gathering the data which are necessary to evaluate the cost function and the gradient
 */
    exit(EXIT_FAILURE);

    /* "fmsne_implem.pyx":3020
 *     # Variables for the optimization, initialized to the current LDS.
 *     cdef lbfgsfloatval_t* xopt = init_lbfgs_var(shdp, prod_N_nc, xlds)
 *     if xopt is NULL:             # <<<<<<<<<<<<<<
 *         free_int_3dmat(arr_nn_i_rs, n_rs, N)
 *         free_int_2dmat(nnn_i_rs, n_rs)
 */
  }

  /* "fmsne_implem.pyx":3041
 * 
 *     # Structure gathering the data which are necessary to evaluate the cost function and the gradient
 *     cdef Opfmssne* popt = <Opfmssne*> PyMem_Malloc(sizeof(Opfmssne))             # <<<<<<<<<<<<<<
 *     if popt is NULL:
 *         free_int_3dmat(arr_nn_i_rs, n_rs, N)
 */
  __pyx_v_popt = ((struct __pyx_t_12fmsne_implem_Opfmssne *)PyMem_Malloc((sizeof(struct __pyx_t_12fmsne_implem_Opfmssne))));

  /* "fmsne_implem.pyx":3042
 *     # Structure gathering the data which are necessary to evaluate the cost function and the gradient
 *     cdef Opfmssne* popt = <Opfmssne*> PyMem_Malloc(sizeof(Opfmssne))
 *     if popt is NULL:             # <<<<<<<<<<<<<<
 *         free_int_3dmat(arr_nn_i_rs, n_rs, N)
 *         free_int_2dmat(nnn_i_rs, n_rs)
 */
  __pyx_t_1 = ((__pyx_v_popt == NULL) != 0);
  if (__pyx_t_1) {

    /* "fmsne_implem.pyx":3043
 *     cdef Opfmssne* popt = <Opfmssne*> PyMem_Malloc(sizeof(Opfmssne))
 *     if popt is NULL:
 *         free_int_3dmat(arr_nn_i_rs, n_rs, N)             # <<<<<<<<<<<<<<
 *         free_int_2dmat(nnn_i_rs, n_rs)
 *         free_dble_3dmat(ds_nn_i_rs, n_rs, N)
 */
    __pyx_f_12fmsne_implem_free_int_3dmat(__pyx_v_arr_nn_i_rs, __pyx_v_n_rs, __pyx_v_N);

    /* "fmsne_implem.pyx":3044
 *     if popt is NULL:
 *         free_int_3dmat(arr_nn_i_rs, n_rs, N)
 *         free_int_2dmat(nnn_i_rs, n_rs)             # <<<<<<<<<<<<<<
 *         free_dble_3dmat(ds_nn_i_rs, n_rs, N)
 *         free_dble_3dmat(simhd_ms_nn_i_rs, n_rs, N)
 */
    __pyx_f_12fmsne_implem_free_int_2dmat(__pyx_v_nnn_i_rs, __pyx_v_n_rs);

    /* "fmsne_implem.pyx":3045
 *         free_int_3dmat(arr_nn_i_rs, n_rs, N)
 *         free_int_2dmat(nnn_i_rs, n_rs)
 *         free_dble_3dmat(ds_nn_i_rs, n_rs, N)             # <<<<<<<<<<<<<<
 *         free_dble_3dmat(simhd_ms_nn_i_rs, n_rs, N)
 *         free_dble_3dmat(simhd_h_nn_i_rs, n_rs, N)
 */
    __pyx_f_12fmsne_implem_free_dble_3dmat(__pyx_v_ds_nn_i_rs, __pyx_v_n_rs, __pyx_v_N);

    /* "fmsne_implem.pyx":3046
 *         free_int_2dmat(nnn_i_rs, n_rs)
 *         free_dble_3dmat(ds_nn_i_rs, n_rs, N)
 *         free_dble_3dmat(simhd_ms_nn_i_rs, n_rs, N)             # <<<<<<<<<<<<<<
 *         free_dble_3dmat(simhd_h_nn_i_rs, n_rs, N)
 *         free_dble_3dmat(tau_h_i_rs, L, n_rs)
 */
    __pyx_f_12fmsne_implem_free_dble_3dmat(__pyx_v_simhd_ms_nn_i_rs, __pyx_v_n_rs, __pyx_v_N);

    /* "fmsne_implem.pyx":3047
 *         free_dble_3dmat(ds_nn_i_rs, n_rs, N)
 *         free_dble_3dmat(simhd_ms_nn_i_rs, n_rs, N)
 *         free_dble_3dmat(simhd_h_nn_i_rs, n_rs, N)             # <<<<<<<<<<<<<<
 *         free_dble_3dmat(tau_h_i_rs, L, n_rs)
 *         free_Pysst_3dmat(nn_i_rs_id_dld, n_rs, N)
 */
    __pyx_f_12fmsne_implem_free_dble_3dmat(__pyx_v_simhd_h_nn_i_rs, __pyx_v_n_rs, __pyx_v_N);

    /* "fmsne_implem.pyx":3048
 *         free_dble_3dmat(simhd_ms_nn_i_rs, n_rs, N)
 *         free_dble_3dmat(simhd_h_nn_i_rs, n_rs, N)
 *         free_dble_3dmat(tau_h_i_rs, L, n_rs)             # <<<<<<<<<<<<<<
 *         free_Pysst_3dmat(nn_i_rs_id_dld, n_rs, N)
 *         PyMem_Free(ni_dld)
 */
    __pyx_f_12fmsne_implem_free_dble_3dmat(__pyx_v_tau_h_i_rs, __pyx_v_L, __pyx_v_n_rs);

    /* "fmsne_implem.pyx":3049
 *         free_dble_3dmat(simhd_h_nn_i_rs, n_rs, N)
 *         free_dble_3dmat(tau_h_i_rs, L, n_rs)
 *         free_Pysst_3dmat(nn_i_rs_id_dld, n_rs, N)             # <<<<<<<<<<<<<<
 *         PyMem_Free(ni_dld)
 *         free_Pysst_2dmat(ij_dld, sLm_nt)
 */
    __pyx_f_12fmsne_implem_free_Pysst_3dmat(__pyx_v_nn_i_rs_id_dld, __pyx_v_n_rs, __pyx_v_N);

    /* "fmsne_implem.pyx":3050
 *         free_dble_3dmat(tau_h_i_rs, L, n_rs)
 *         free_Pysst_3dmat(nn_i_rs_id_dld, n_rs, N)
 *         PyMem_Free(ni_dld)             # <<<<<<<<<<<<<<
 *         free_Pysst_2dmat(ij_dld, sLm_nt)
 *         free_dble_2dmat(dij_ld, sLm_nt)
 */
    PyMem_Free(__pyx_v_ni_dld);

    /* "fmsne_implem.pyx":3051
 *         free_Pysst_3dmat(nn_i_rs_id_dld, n_rs, N)
 *         PyMem_Free(ni_dld)
 *         free_Pysst_2dmat(ij_dld, sLm_nt)             # <<<<<<<<<<<<<<
 *         free_dble_2dmat(dij_ld, sLm_nt)
 *         if fit_U:
 */
    __pyx_f_12fmsne_implem_free_Pysst_2dmat(__pyx_v_ij_dld, __pyx_v_sLm_nt);

    /* "fmsne_implem.pyx":3052
 *         PyMem_Free(ni_dld)
 *         free_Pysst_2dmat(ij_dld, sLm_nt)
 *         free_dble_2dmat(dij_ld, sLm_nt)             # <<<<<<<<<<<<<<
 *         if fit_U:
 *             free_dble_2dmat(p_h_rs, L)
 */
    __pyx_f_12fmsne_implem_free_dble_2dmat(__pyx_v_dij_ld, __pyx_v_sLm_nt);

    /* "fmsne_implem.pyx":3053
 *         free_Pysst_2dmat(ij_dld, sLm_nt)
 *         free_dble_2dmat(dij_ld, sLm_nt)
 *         if fit_U:             # <<<<<<<<<<<<<<
 *             free_dble_2dmat(p_h_rs, L)
 *             free_dble_2dmat(t_h_rs, L)
 */
    __pyx_t_1 = (__pyx_v_fit_U != 0);
    if (__pyx_t_1) {

      /* "fmsne_implem.pyx":3054
 *         free_dble_2dmat(dij_ld, sLm_nt)
 *         if fit_U:
 *             free_dble_2dmat(p_h_rs, L)             # <<<<<<<<<<<<<<
 *             free_dble_2dmat(t_h_rs, L)
 *         else:
 */
      __pyx_f_12fmsne_implem_free_dble_2dmat(__pyx_v_p_h_rs, __pyx_v_L);

      /* "fmsne_implem.pyx":3055
 *         if fit_U:
 *             free_dble_2dmat(p_h_rs, L)
 *             free_dble_2dmat(t_h_rs, L)             # <<<<<<<<<<<<<<
 *         else:
 *             PyMem_Free(p_h)
 */
      __pyx_f_12fmsne_implem_free_dble_2dmat(__pyx_v_t_h_rs, __pyx_v_L);

      /* "fmsne_implem.pyx":3053
 *         free_Pysst_2dmat(ij_dld, sLm_nt)
 *         free_dble_2dmat(dij_ld, sLm_nt)
 *         if fit_U:             # <<<<<<<<<<<<<<
 *             free_dble_2dmat(p_h_rs, L)
 *             free_dble_2dmat(t_h_rs, L)
 */
      goto __pyx_L28;
    }

    /* "fmsne_implem.pyx":3057
 *             free_dble_2dmat(t_h_rs, L)
 *         else:
 *             PyMem_Free(p_h)             # <<<<<<<<<<<<<<
 *             PyMem_Free(t_h)
 *         lbfgs_free(xopt)
 */
    /*else*/ {
      PyMem_Free(__pyx_v_p_h);

      /* "fmsne_implem.pyx":3058
 *         else:
 *             PyMem_Free(p_h)
 *             PyMem_Free(t_h)             # <<<<<<<<<<<<<<
 *         lbfgs_free(xopt)
 *         printf("Out of memory for popt")
 */
      PyMem_Free(__pyx_v_t_h);
    }
    __pyx_L28:;

    /* "fmsne_implem.pyx":3059
 *             PyMem_Free(p_h)
 *             PyMem_Free(t_h)
 *         lbfgs_free(xopt)             # <<<<<<<<<<<<<<
 *         printf("Out of memory for popt")
 *         exit(EXIT_FAILURE)
 */
    lbfgs_free(__pyx_v_xopt);

    /* "fmsne_implem.pyx":3060
 *             PyMem_Free(t_h)
 *         lbfgs_free(xopt)
 *         printf("Out of memory for popt")             # <<<<<<<<<<<<<<
 *         exit(EXIT_FAILURE)
 *     # Filling popt
 */
    (void)(printf(((char const *)"Out of memory for popt")));

    /* "fmsne_implem.pyx":3061
 *         lbfgs_free(xopt)
 *         printf("Out of memory for popt")
 *         exit(EXIT_FAILURE)             # <<<<<<<<<<<<<<
 *     # Filling popt
 *     popt.N = N
 */
    exit(EXIT_FAILURE);

    /* "fmsne_implem.pyx":3042
 *     # Structure gathering the data which are necessary to evaluate the cost function and the gradient
 *     cdef Opfmssne* popt = <Opfmssne*> PyMem_Malloc(sizeof(Opfmssne))
 *     if popt is NULL:             # <<<<<<<<<<<<<<
 *         free_int_3dmat(arr_nn_i_rs, n_rs, N)
 *         free_int_2dmat(nnn_i_rs, n_rs)
 */
  }

  /* "fmsne_implem.pyx":3063
 *         exit(EXIT_FAILURE)
 *     # Filling popt
 *     popt.N = N             # <<<<<<<<<<<<<<
 *     popt.N_1 = sLm_nt
 *     popt.dij_ld = dij_ld
 */
  __pyx_v_popt->N = __pyx_v_N;

  /* "fmsne_implem.pyx":3064
 *     # Filling popt
 *     popt.N = N
 *     popt.N_1 = sLm_nt             # <<<<<<<<<<<<<<
 *     popt.dij_ld = dij_ld
 *     popt.ij_dld = ij_dld
 */
  __pyx_v_popt->N_1 = __pyx_v_sLm_nt;

  /* "fmsne_implem.pyx":3065
 *     popt.N = N
 *     popt.N_1 = sLm_nt
 *     popt.dij_ld = dij_ld             # <<<<<<<<<<<<<<
 *     popt.ij_dld = ij_dld
 *     popt.ni_dld = ni_dld
 */
  __pyx_v_popt->dij_ld = __pyx_v_dij_ld;

  /* "fmsne_implem.pyx":3066
 *     popt.N_1 = sLm_nt
 *     popt.dij_ld = dij_ld
 *     popt.ij_dld = ij_dld             # <<<<<<<<<<<<<<
 *     popt.ni_dld = ni_dld
 *     popt.nn_i_rs_id_dld = nn_i_rs_id_dld
 */
  __pyx_v_popt->ij_dld = __pyx_v_ij_dld;

  /* "fmsne_implem.pyx":3067
 *     popt.dij_ld = dij_ld
 *     popt.ij_dld = ij_dld
 *     popt.ni_dld = ni_dld             # <<<<<<<<<<<<<<
 *     popt.nn_i_rs_id_dld = nn_i_rs_id_dld
 *     popt.n_components = n_components
 */
  __pyx_v_popt->ni_dld = __pyx_v_ni_dld;

  /* "fmsne_implem.pyx":3068
 *     popt.ij_dld = ij_dld
 *     popt.ni_dld = ni_dld
 *     popt.nn_i_rs_id_dld = nn_i_rs_id_dld             # <<<<<<<<<<<<<<
 *     popt.n_components = n_components
 *     popt.sstx = shdp
 */
  __pyx_v_popt->nn_i_rs_id_dld = __pyx_v_nn_i_rs_id_dld;

  /* "fmsne_implem.pyx":3069
 *     popt.ni_dld = ni_dld
 *     popt.nn_i_rs_id_dld = nn_i_rs_id_dld
 *     popt.n_components = n_components             # <<<<<<<<<<<<<<
 *     popt.sstx = shdp
 *     popt.n_rs = n_rs
 */
  __pyx_v_popt->n_components = __pyx_v_n_components;

  /* "fmsne_implem.pyx":3070
 *     popt.nn_i_rs_id_dld = nn_i_rs_id_dld
 *     popt.n_components = n_components
 *     popt.sstx = shdp             # <<<<<<<<<<<<<<
 *     popt.n_rs = n_rs
 *     popt.inv_n_rs_f = 1.0/(<double> n_rs)
 */
  __pyx_v_popt->sstx = __pyx_v_shdp;

  /* "fmsne_implem.pyx":3071
 *     popt.n_components = n_components
 *     popt.sstx = shdp
 *     popt.n_rs = n_rs             # <<<<<<<<<<<<<<
 *     popt.inv_n_rs_f = 1.0/(<double> n_rs)
 *     popt.sim_hd_ms = simhd_ms_nn_i_rs
 */
  __pyx_v_popt->n_rs = __pyx_v_n_rs;

  /* "fmsne_implem.pyx":3072
 *     popt.sstx = shdp
 *     popt.n_rs = n_rs
 *     popt.inv_n_rs_f = 1.0/(<double> n_rs)             # <<<<<<<<<<<<<<
 *     popt.sim_hd_ms = simhd_ms_nn_i_rs
 *     popt.arr_nn = arr_nn_i_rs
 */
  __pyx_v_popt->inv_n_rs_f = (1.0 / ((double)__pyx_v_n_rs));

  /* "fmsne_implem.pyx":3073
 *     popt.n_rs = n_rs
 *     popt.inv_n_rs_f = 1.0/(<double> n_rs)
 *     popt.sim_hd_ms = simhd_ms_nn_i_rs             # <<<<<<<<<<<<<<
 *     popt.arr_nn = arr_nn_i_rs
 *     popt.nnn = nnn_i_rs
 */
  __pyx_v_popt->sim_hd_ms = __pyx_v_simhd_ms_nn_i_rs;

  /* "fmsne_implem.pyx":3074
 *     popt.inv_n_rs_f = 1.0/(<double> n_rs)
 *     popt.sim_hd_ms = simhd_ms_nn_i_rs
 *     popt.arr_nn = arr_nn_i_rs             # <<<<<<<<<<<<<<
 *     popt.nnn = nnn_i_rs
 *     popt.fit_U = fit_U
 */
  __pyx_v_popt->arr_nn = __pyx_v_arr_nn_i_rs;

  /* "fmsne_implem.pyx":3075
 *     popt.sim_hd_ms = simhd_ms_nn_i_rs
 *     popt.arr_nn = arr_nn_i_rs
 *     popt.nnn = nnn_i_rs             # <<<<<<<<<<<<<<
 *     popt.fit_U = fit_U
 *     popt.sbsa = 0
 */
  __pyx_v_popt->nnn = __pyx_v_nnn_i_rs;

  /* "fmsne_implem.pyx":3076
 *     popt.arr_nn = arr_nn_i_rs
 *     popt.nnn = nnn_i_rs
 *     popt.fit_U = fit_U             # <<<<<<<<<<<<<<
 *     popt.sbsa = 0
 *     # Space-partitioning trees are working with the squared threshold to save the computation time of computing the square root for the Euclidean distance
 */
  __pyx_v_popt->fit_U = __pyx_v_fit_U;

  /* "fmsne_implem.pyx":3077
 *     popt.nnn = nnn_i_rs
 *     popt.fit_U = fit_U
 *     popt.sbsa = 0             # <<<<<<<<<<<<<<
 *     # Space-partitioning trees are working with the squared threshold to save the computation time of computing the square root for the Euclidean distance
 *     popt.theta_s = ms_thetha*ms_thetha
 */
  __pyx_v_popt->sbsa = 0;

  /* "fmsne_implem.pyx":3079
 *     popt.sbsa = 0
 *     # Space-partitioning trees are working with the squared threshold to save the computation time of computing the square root for the Euclidean distance
 *     popt.theta_s = ms_thetha*ms_thetha             # <<<<<<<<<<<<<<
 * 
 *     # Accumulators to traverse the space-partitioning trees
 */
  __pyx_v_popt->theta_s = (__pyx_v_ms_thetha * __pyx_v_ms_thetha);

  /* "fmsne_implem.pyx":3082
 * 
 *     # Accumulators to traverse the space-partitioning trees
 *     if fit_U:             # <<<<<<<<<<<<<<
 *         popt.p_h = NULL
 *         popt.t_h = NULL
 */
  __pyx_t_1 = (__pyx_v_fit_U != 0);
  if (__pyx_t_1) {

    /* "fmsne_implem.pyx":3083
 *     # Accumulators to traverse the space-partitioning trees
 *     if fit_U:
 *         popt.p_h = NULL             # <<<<<<<<<<<<<<
 *         popt.t_h = NULL
 *         popt.Z = NULL
 */
    __pyx_v_popt->p_h = NULL;

    /* "fmsne_implem.pyx":3084
 *     if fit_U:
 *         popt.p_h = NULL
 *         popt.t_h = NULL             # <<<<<<<<<<<<<<
 *         popt.Z = NULL
 *         popt.sX = NULL
 */
    __pyx_v_popt->t_h = NULL;

    /* "fmsne_implem.pyx":3085
 *         popt.p_h = NULL
 *         popt.t_h = NULL
 *         popt.Z = NULL             # <<<<<<<<<<<<<<
 *         popt.sX = NULL
 *         popt.Z_rs = alloc_dble_2dmat(L, n_rs)
 */
    __pyx_v_popt->Z = NULL;

    /* "fmsne_implem.pyx":3086
 *         popt.t_h = NULL
 *         popt.Z = NULL
 *         popt.sX = NULL             # <<<<<<<<<<<<<<
 *         popt.Z_rs = alloc_dble_2dmat(L, n_rs)
 *         if popt.Z_rs is NULL:
 */
    __pyx_v_popt->sX = NULL;

    /* "fmsne_implem.pyx":3087
 *         popt.Z = NULL
 *         popt.sX = NULL
 *         popt.Z_rs = alloc_dble_2dmat(L, n_rs)             # <<<<<<<<<<<<<<
 *         if popt.Z_rs is NULL:
 *             free_int_3dmat(arr_nn_i_rs, n_rs, N)
 */
    __pyx_v_popt->Z_rs = __pyx_f_12fmsne_implem_alloc_dble_2dmat(__pyx_v_L, __pyx_v_n_rs);

    /* "fmsne_implem.pyx":3088
 *         popt.sX = NULL
 *         popt.Z_rs = alloc_dble_2dmat(L, n_rs)
 *         if popt.Z_rs is NULL:             # <<<<<<<<<<<<<<
 *             free_int_3dmat(arr_nn_i_rs, n_rs, N)
 *             free_int_2dmat(nnn_i_rs, n_rs)
 */
    __pyx_t_1 = ((__pyx_v_popt->Z_rs == NULL) != 0);
    if (__pyx_t_1) {

      /* "fmsne_implem.pyx":3089
 *         popt.Z_rs = alloc_dble_2dmat(L, n_rs)
 *         if popt.Z_rs is NULL:
 *             free_int_3dmat(arr_nn_i_rs, n_rs, N)             # <<<<<<<<<<<<<<
 *             free_int_2dmat(nnn_i_rs, n_rs)
 *             free_dble_3dmat(ds_nn_i_rs, n_rs, N)
 */
      __pyx_f_12fmsne_implem_free_int_3dmat(__pyx_v_arr_nn_i_rs, __pyx_v_n_rs, __pyx_v_N);

      /* "fmsne_implem.pyx":3090
 *         if popt.Z_rs is NULL:
 *             free_int_3dmat(arr_nn_i_rs, n_rs, N)
 *             free_int_2dmat(nnn_i_rs, n_rs)             # <<<<<<<<<<<<<<
 *             free_dble_3dmat(ds_nn_i_rs, n_rs, N)
 *             free_dble_3dmat(simhd_ms_nn_i_rs, n_rs, N)
 */
      __pyx_f_12fmsne_implem_free_int_2dmat(__pyx_v_nnn_i_rs, __pyx_v_n_rs);

      /* "fmsne_implem.pyx":3091
 *             free_int_3dmat(arr_nn_i_rs, n_rs, N)
 *             free_int_2dmat(nnn_i_rs, n_rs)
 *             free_dble_3dmat(ds_nn_i_rs, n_rs, N)             # <<<<<<<<<<<<<<
 *             free_dble_3dmat(simhd_ms_nn_i_rs, n_rs, N)
 *             free_dble_3dmat(simhd_h_nn_i_rs, n_rs, N)
 */
      __pyx_f_12fmsne_implem_free_dble_3dmat(__pyx_v_ds_nn_i_rs, __pyx_v_n_rs, __pyx_v_N);

      /* "fmsne_implem.pyx":3092
 *             free_int_2dmat(nnn_i_rs, n_rs)
 *             free_dble_3dmat(ds_nn_i_rs, n_rs, N)
 *             free_dble_3dmat(simhd_ms_nn_i_rs, n_rs, N)             # <<<<<<<<<<<<<<
 *             free_dble_3dmat(simhd_h_nn_i_rs, n_rs, N)
 *             free_dble_3dmat(tau_h_i_rs, L, n_rs)
 */
      __pyx_f_12fmsne_implem_free_dble_3dmat(__pyx_v_simhd_ms_nn_i_rs, __pyx_v_n_rs, __pyx_v_N);

      /* "fmsne_implem.pyx":3093
 *             free_dble_3dmat(ds_nn_i_rs, n_rs, N)
 *             free_dble_3dmat(simhd_ms_nn_i_rs, n_rs, N)
 *             free_dble_3dmat(simhd_h_nn_i_rs, n_rs, N)             # <<<<<<<<<<<<<<
 *             free_dble_3dmat(tau_h_i_rs, L, n_rs)
 *             free_Pysst_3dmat(nn_i_rs_id_dld, n_rs, N)
 */
      __pyx_f_12fmsne_implem_free_dble_3dmat(__pyx_v_simhd_h_nn_i_rs, __pyx_v_n_rs, __pyx_v_N);

      /* "fmsne_implem.pyx":3094
 *             free_dble_3dmat(simhd_ms_nn_i_rs, n_rs, N)
 *             free_dble_3dmat(simhd_h_nn_i_rs, n_rs, N)
 *             free_dble_3dmat(tau_h_i_rs, L, n_rs)             # <<<<<<<<<<<<<<
 *             free_Pysst_3dmat(nn_i_rs_id_dld, n_rs, N)
 *             PyMem_Free(ni_dld)
 */
      __pyx_f_12fmsne_implem_free_dble_3dmat(__pyx_v_tau_h_i_rs, __pyx_v_L, __pyx_v_n_rs);

      /* "fmsne_implem.pyx":3095
 *             free_dble_3dmat(simhd_h_nn_i_rs, n_rs, N)
 *             free_dble_3dmat(tau_h_i_rs, L, n_rs)
 *             free_Pysst_3dmat(nn_i_rs_id_dld, n_rs, N)             # <<<<<<<<<<<<<<
 *             PyMem_Free(ni_dld)
 *             free_Pysst_2dmat(ij_dld, sLm_nt)
 */
      __pyx_f_12fmsne_implem_free_Pysst_3dmat(__pyx_v_nn_i_rs_id_dld, __pyx_v_n_rs, __pyx_v_N);

      /* "fmsne_implem.pyx":3096
 *             free_dble_3dmat(tau_h_i_rs, L, n_rs)
 *             free_Pysst_3dmat(nn_i_rs_id_dld, n_rs, N)
 *             PyMem_Free(ni_dld)             # <<<<<<<<<<<<<<
 *             free_Pysst_2dmat(ij_dld, sLm_nt)
 *             free_dble_2dmat(dij_ld, sLm_nt)
 */
      PyMem_Free(__pyx_v_ni_dld);

      /* "fmsne_implem.pyx":3097
 *             free_Pysst_3dmat(nn_i_rs_id_dld, n_rs, N)
 *             PyMem_Free(ni_dld)
 *             free_Pysst_2dmat(ij_dld, sLm_nt)             # <<<<<<<<<<<<<<
 *             free_dble_2dmat(dij_ld, sLm_nt)
 *             free_dble_2dmat(p_h_rs, L)
 */
      __pyx_f_12fmsne_implem_free_Pysst_2dmat(__pyx_v_ij_dld, __pyx_v_sLm_nt);

      /* "fmsne_implem.pyx":3098
 *             PyMem_Free(ni_dld)
 *             free_Pysst_2dmat(ij_dld, sLm_nt)
 *             free_dble_2dmat(dij_ld, sLm_nt)             # <<<<<<<<<<<<<<
 *             free_dble_2dmat(p_h_rs, L)
 *             free_dble_2dmat(t_h_rs, L)
 */
      __pyx_f_12fmsne_implem_free_dble_2dmat(__pyx_v_dij_ld, __pyx_v_sLm_nt);

      /* "fmsne_implem.pyx":3099
 *             free_Pysst_2dmat(ij_dld, sLm_nt)
 *             free_dble_2dmat(dij_ld, sLm_nt)
 *             free_dble_2dmat(p_h_rs, L)             # <<<<<<<<<<<<<<
 *             free_dble_2dmat(t_h_rs, L)
 *             lbfgs_free(xopt)
 */
      __pyx_f_12fmsne_implem_free_dble_2dmat(__pyx_v_p_h_rs, __pyx_v_L);

      /* "fmsne_implem.pyx":3100
 *             free_dble_2dmat(dij_ld, sLm_nt)
 *             free_dble_2dmat(p_h_rs, L)
 *             free_dble_2dmat(t_h_rs, L)             # <<<<<<<<<<<<<<
 *             lbfgs_free(xopt)
 *             PyMem_Free(popt)
 */
      __pyx_f_12fmsne_implem_free_dble_2dmat(__pyx_v_t_h_rs, __pyx_v_L);

      /* "fmsne_implem.pyx":3101
 *             free_dble_2dmat(p_h_rs, L)
 *             free_dble_2dmat(t_h_rs, L)
 *             lbfgs_free(xopt)             # <<<<<<<<<<<<<<
 *             PyMem_Free(popt)
 *             printf("Out of memory for popt.Z_rs")
 */
      lbfgs_free(__pyx_v_xopt);

      /* "fmsne_implem.pyx":3102
 *             free_dble_2dmat(t_h_rs, L)
 *             lbfgs_free(xopt)
 *             PyMem_Free(popt)             # <<<<<<<<<<<<<<
 *             printf("Out of memory for popt.Z_rs")
 *             exit(EXIT_FAILURE)
 */
      PyMem_Free(__pyx_v_popt);

      /* "fmsne_implem.pyx":3103
 *             lbfgs_free(xopt)
 *             PyMem_Free(popt)
 *             printf("Out of memory for popt.Z_rs")             # <<<<<<<<<<<<<<
 *             exit(EXIT_FAILURE)
 *         popt.sX_rs = alloc_dble_3dmat(L, n_rs, n_components)
 */
      (void)(printf(((char const *)"Out of memory for popt.Z_rs")));

      /* "fmsne_implem.pyx":3104
 *             PyMem_Free(popt)
 *             printf("Out of memory for popt.Z_rs")
 *             exit(EXIT_FAILURE)             # <<<<<<<<<<<<<<
 *         popt.sX_rs = alloc_dble_3dmat(L, n_rs, n_components)
 *         if popt.sX_rs is NULL:
 */
      exit(EXIT_FAILURE);

      /* "fmsne_implem.pyx":3088
 *         popt.sX = NULL
 *         popt.Z_rs = alloc_dble_2dmat(L, n_rs)
 *         if popt.Z_rs is NULL:             # <<<<<<<<<<<<<<
 *             free_int_3dmat(arr_nn_i_rs, n_rs, N)
 *             free_int_2dmat(nnn_i_rs, n_rs)
 */
    }

    /* "fmsne_implem.pyx":3105
 *             printf("Out of memory for popt.Z_rs")
 *             exit(EXIT_FAILURE)
 *         popt.sX_rs = alloc_dble_3dmat(L, n_rs, n_components)             # <<<<<<<<<<<<<<
 *         if popt.sX_rs is NULL:
 *             free_int_3dmat(arr_nn_i_rs, n_rs, N)
 */
    __pyx_v_popt->sX_rs = __pyx_f_12fmsne_implem_alloc_dble_3dmat(__pyx_v_L, __pyx_v_n_rs, __pyx_v_n_components);

    /* "fmsne_implem.pyx":3106
 *             exit(EXIT_FAILURE)
 *         popt.sX_rs = alloc_dble_3dmat(L, n_rs, n_components)
 *         if popt.sX_rs is NULL:             # <<<<<<<<<<<<<<
 *             free_int_3dmat(arr_nn_i_rs, n_rs, N)
 *             free_int_2dmat(nnn_i_rs, n_rs)
 */
    __pyx_t_1 = ((__pyx_v_popt->sX_rs == NULL) != 0);
    if (__pyx_t_1) {

      /* "fmsne_implem.pyx":3107
 *         popt.sX_rs = alloc_dble_3dmat(L, n_rs, n_components)
 *         if popt.sX_rs is NULL:
 *             free_int_3dmat(arr_nn_i_rs, n_rs, N)             # <<<<<<<<<<<<<<
 *             free_int_2dmat(nnn_i_rs, n_rs)
 *             free_dble_3dmat(ds_nn_i_rs, n_rs, N)
 */
      __pyx_f_12fmsne_implem_free_int_3dmat(__pyx_v_arr_nn_i_rs, __pyx_v_n_rs, __pyx_v_N);

      /* "fmsne_implem.pyx":3108
 *         if popt.sX_rs is NULL:
 *             free_int_3dmat(arr_nn_i_rs, n_rs, N)
 *             free_int_2dmat(nnn_i_rs, n_rs)             # <<<<<<<<<<<<<<
 *             free_dble_3dmat(ds_nn_i_rs, n_rs, N)
 *             free_dble_3dmat(simhd_ms_nn_i_rs, n_rs, N)
 */
      __pyx_f_12fmsne_implem_free_int_2dmat(__pyx_v_nnn_i_rs, __pyx_v_n_rs);

      /* "fmsne_implem.pyx":3109
 *             free_int_3dmat(arr_nn_i_rs, n_rs, N)
 *             free_int_2dmat(nnn_i_rs, n_rs)
 *             free_dble_3dmat(ds_nn_i_rs, n_rs, N)             # <<<<<<<<<<<<<<
 *             free_dble_3dmat(simhd_ms_nn_i_rs, n_rs, N)
 *             free_dble_3dmat(simhd_h_nn_i_rs, n_rs, N)
 */
      __pyx_f_12fmsne_implem_free_dble_3dmat(__pyx_v_ds_nn_i_rs, __pyx_v_n_rs, __pyx_v_N);

      /* "fmsne_implem.pyx":3110
 *             free_int_2dmat(nnn_i_rs, n_rs)
 *             free_dble_3dmat(ds_nn_i_rs, n_rs, N)
 *             free_dble_3dmat(simhd_ms_nn_i_rs, n_rs, N)             # <<<<<<<<<<<<<<
 *             free_dble_3dmat(simhd_h_nn_i_rs, n_rs, N)
 *             free_dble_3dmat(tau_h_i_rs, L, n_rs)
 */
      __pyx_f_12fmsne_implem_free_dble_3dmat(__pyx_v_simhd_ms_nn_i_rs, __pyx_v_n_rs, __pyx_v_N);

      /* "fmsne_implem.pyx":3111
 *             free_dble_3dmat(ds_nn_i_rs, n_rs, N)
 *             free_dble_3dmat(simhd_ms_nn_i_rs, n_rs, N)
 *             free_dble_3dmat(simhd_h_nn_i_rs, n_rs, N)             # <<<<<<<<<<<<<<
 *             free_dble_3dmat(tau_h_i_rs, L, n_rs)
 *             free_Pysst_3dmat(nn_i_rs_id_dld, n_rs, N)
 */
      __pyx_f_12fmsne_implem_free_dble_3dmat(__pyx_v_simhd_h_nn_i_rs, __pyx_v_n_rs, __pyx_v_N);

      /* "fmsne_implem.pyx":3112
 *             free_dble_3dmat(simhd_ms_nn_i_rs, n_rs, N)
 *             free_dble_3dmat(simhd_h_nn_i_rs, n_rs, N)
 *             free_dble_3dmat(tau_h_i_rs, L, n_rs)             # <<<<<<<<<<<<<<
 *             free_Pysst_3dmat(nn_i_rs_id_dld, n_rs, N)
 *             PyMem_Free(ni_dld)
 */
      __pyx_f_12fmsne_implem_free_dble_3dmat(__pyx_v_tau_h_i_rs, __pyx_v_L, __pyx_v_n_rs);

      /* "fmsne_implem.pyx":3113
 *             free_dble_3dmat(simhd_h_nn_i_rs, n_rs, N)
 *             free_dble_3dmat(tau_h_i_rs, L, n_rs)
 *             free_Pysst_3dmat(nn_i_rs_id_dld, n_rs, N)             # <<<<<<<<<<<<<<
 *             PyMem_Free(ni_dld)
 *             free_Pysst_2dmat(ij_dld, sLm_nt)
 */
      __pyx_f_12fmsne_implem_free_Pysst_3dmat(__pyx_v_nn_i_rs_id_dld, __pyx_v_n_rs, __pyx_v_N);

      /* "fmsne_implem.pyx":3114
 *             free_dble_3dmat(tau_h_i_rs, L, n_rs)
 *             free_Pysst_3dmat(nn_i_rs_id_dld, n_rs, N)
 *             PyMem_Free(ni_dld)             # <<<<<<<<<<<<<<
 *             free_Pysst_2dmat(ij_dld, sLm_nt)
 *             free_dble_2dmat(dij_ld, sLm_nt)
 */
      PyMem_Free(__pyx_v_ni_dld);

      /* "fmsne_implem.pyx":3115
 *             free_Pysst_3dmat(nn_i_rs_id_dld, n_rs, N)
 *             PyMem_Free(ni_dld)
 *             free_Pysst_2dmat(ij_dld, sLm_nt)             # <<<<<<<<<<<<<<
 *             free_dble_2dmat(dij_ld, sLm_nt)
 *             free_dble_2dmat(p_h_rs, L)
 */
      __pyx_f_12fmsne_implem_free_Pysst_2dmat(__pyx_v_ij_dld, __pyx_v_sLm_nt);

      /* "fmsne_implem.pyx":3116
 *             PyMem_Free(ni_dld)
 *             free_Pysst_2dmat(ij_dld, sLm_nt)
 *             free_dble_2dmat(dij_ld, sLm_nt)             # <<<<<<<<<<<<<<
 *             free_dble_2dmat(p_h_rs, L)
 *             free_dble_2dmat(t_h_rs, L)
 */
      __pyx_f_12fmsne_implem_free_dble_2dmat(__pyx_v_dij_ld, __pyx_v_sLm_nt);

      /* "fmsne_implem.pyx":3117
 *             free_Pysst_2dmat(ij_dld, sLm_nt)
 *             free_dble_2dmat(dij_ld, sLm_nt)
 *             free_dble_2dmat(p_h_rs, L)             # <<<<<<<<<<<<<<
 *             free_dble_2dmat(t_h_rs, L)
 *             free_dble_2dmat(popt.Z_rs, L)
 */
      __pyx_f_12fmsne_implem_free_dble_2dmat(__pyx_v_p_h_rs, __pyx_v_L);

      /* "fmsne_implem.pyx":3118
 *             free_dble_2dmat(dij_ld, sLm_nt)
 *             free_dble_2dmat(p_h_rs, L)
 *             free_dble_2dmat(t_h_rs, L)             # <<<<<<<<<<<<<<
 *             free_dble_2dmat(popt.Z_rs, L)
 *             lbfgs_free(xopt)
 */
      __pyx_f_12fmsne_implem_free_dble_2dmat(__pyx_v_t_h_rs, __pyx_v_L);

      /* "fmsne_implem.pyx":3119
 *             free_dble_2dmat(p_h_rs, L)
 *             free_dble_2dmat(t_h_rs, L)
 *             free_dble_2dmat(popt.Z_rs, L)             # <<<<<<<<<<<<<<
 *             lbfgs_free(xopt)
 *             PyMem_Free(popt)
 */
      __pyx_f_12fmsne_implem_free_dble_2dmat(__pyx_v_popt->Z_rs, __pyx_v_L);

      /* "fmsne_implem.pyx":3120
 *             free_dble_2dmat(t_h_rs, L)
 *             free_dble_2dmat(popt.Z_rs, L)
 *             lbfgs_free(xopt)             # <<<<<<<<<<<<<<
 *             PyMem_Free(popt)
 *             printf("Out of memory for popt.sX_rs.\n")
 */
      lbfgs_free(__pyx_v_xopt);

      /* "fmsne_implem.pyx":3121
 *             free_dble_2dmat(popt.Z_rs, L)
 *             lbfgs_free(xopt)
 *             PyMem_Free(popt)             # <<<<<<<<<<<<<<
 *             printf("Out of memory for popt.sX_rs.\n")
 *             exit(EXIT_FAILURE)
 */
      PyMem_Free(__pyx_v_popt);

      /* "fmsne_implem.pyx":3122
 *             lbfgs_free(xopt)
 *             PyMem_Free(popt)
 *             printf("Out of memory for popt.sX_rs.\n")             # <<<<<<<<<<<<<<
 *             exit(EXIT_FAILURE)
 *         popt.inter_fct_1 = 1
 */
      (void)(printf(((char const *)"Out of memory for popt.sX_rs.\n")));

      /* "fmsne_implem.pyx":3123
 *             PyMem_Free(popt)
 *             printf("Out of memory for popt.sX_rs.\n")
 *             exit(EXIT_FAILURE)             # <<<<<<<<<<<<<<
 *         popt.inter_fct_1 = 1
 *         popt.inter_fct_2 = 6
 */
      exit(EXIT_FAILURE);

      /* "fmsne_implem.pyx":3106
 *             exit(EXIT_FAILURE)
 *         popt.sX_rs = alloc_dble_3dmat(L, n_rs, n_components)
 *         if popt.sX_rs is NULL:             # <<<<<<<<<<<<<<
 *             free_int_3dmat(arr_nn_i_rs, n_rs, N)
 *             free_int_2dmat(nnn_i_rs, n_rs)
 */
    }

    /* "fmsne_implem.pyx":3124
 *             printf("Out of memory for popt.sX_rs.\n")
 *             exit(EXIT_FAILURE)
 *         popt.inter_fct_1 = 1             # <<<<<<<<<<<<<<
 *         popt.inter_fct_2 = 6
 *     else:
 */
    __pyx_v_popt->inter_fct_1 = 1;

    /* "fmsne_implem.pyx":3125
 *             exit(EXIT_FAILURE)
 *         popt.inter_fct_1 = 1
 *         popt.inter_fct_2 = 6             # <<<<<<<<<<<<<<
 *     else:
 *         popt.p_h_rs = NULL
 */
    __pyx_v_popt->inter_fct_2 = 6;

    /* "fmsne_implem.pyx":3082
 * 
 *     # Accumulators to traverse the space-partitioning trees
 *     if fit_U:             # <<<<<<<<<<<<<<
 *         popt.p_h = NULL
 *         popt.t_h = NULL
 */
    goto __pyx_L29;
  }

  /* "fmsne_implem.pyx":3127
 *         popt.inter_fct_2 = 6
 *     else:
 *         popt.p_h_rs = NULL             # <<<<<<<<<<<<<<
 *         popt.t_h_rs = NULL
 *         popt.Z_rs = NULL
 */
  /*else*/ {
    __pyx_v_popt->p_h_rs = NULL;

    /* "fmsne_implem.pyx":3128
 *     else:
 *         popt.p_h_rs = NULL
 *         popt.t_h_rs = NULL             # <<<<<<<<<<<<<<
 *         popt.Z_rs = NULL
 *         popt.sX_rs = NULL
 */
    __pyx_v_popt->t_h_rs = NULL;

    /* "fmsne_implem.pyx":3129
 *         popt.p_h_rs = NULL
 *         popt.t_h_rs = NULL
 *         popt.Z_rs = NULL             # <<<<<<<<<<<<<<
 *         popt.sX_rs = NULL
 *         popt.Z = <double*> PyMem_Malloc(L*sizeof(double))
 */
    __pyx_v_popt->Z_rs = NULL;

    /* "fmsne_implem.pyx":3130
 *         popt.t_h_rs = NULL
 *         popt.Z_rs = NULL
 *         popt.sX_rs = NULL             # <<<<<<<<<<<<<<
 *         popt.Z = <double*> PyMem_Malloc(L*sizeof(double))
 *         if popt.Z is NULL:
 */
    __pyx_v_popt->sX_rs = NULL;

    /* "fmsne_implem.pyx":3131
 *         popt.Z_rs = NULL
 *         popt.sX_rs = NULL
 *         popt.Z = <double*> PyMem_Malloc(L*sizeof(double))             # <<<<<<<<<<<<<<
 *         if popt.Z is NULL:
 *             free_int_3dmat(arr_nn_i_rs, n_rs, N)
 */
    __pyx_v_popt->Z = ((double *)PyMem_Malloc((__pyx_v_L * (sizeof(double)))));

    /* "fmsne_implem.pyx":3132
 *         popt.sX_rs = NULL
 *         popt.Z = <double*> PyMem_Malloc(L*sizeof(double))
 *         if popt.Z is NULL:             # <<<<<<<<<<<<<<
 *             free_int_3dmat(arr_nn_i_rs, n_rs, N)
 *             free_int_2dmat(nnn_i_rs, n_rs)
 */
    __pyx_t_1 = ((__pyx_v_popt->Z == NULL) != 0);
    if (__pyx_t_1) {

      /* "fmsne_implem.pyx":3133
 *         popt.Z = <double*> PyMem_Malloc(L*sizeof(double))
 *         if popt.Z is NULL:
 *             free_int_3dmat(arr_nn_i_rs, n_rs, N)             # <<<<<<<<<<<<<<
 *             free_int_2dmat(nnn_i_rs, n_rs)
 *             free_dble_3dmat(ds_nn_i_rs, n_rs, N)
 */
      __pyx_f_12fmsne_implem_free_int_3dmat(__pyx_v_arr_nn_i_rs, __pyx_v_n_rs, __pyx_v_N);

      /* "fmsne_implem.pyx":3134
 *         if popt.Z is NULL:
 *             free_int_3dmat(arr_nn_i_rs, n_rs, N)
 *             free_int_2dmat(nnn_i_rs, n_rs)             # <<<<<<<<<<<<<<
 *             free_dble_3dmat(ds_nn_i_rs, n_rs, N)
 *             free_dble_3dmat(simhd_ms_nn_i_rs, n_rs, N)
 */
      __pyx_f_12fmsne_implem_free_int_2dmat(__pyx_v_nnn_i_rs, __pyx_v_n_rs);

      /* "fmsne_implem.pyx":3135
 *             free_int_3dmat(arr_nn_i_rs, n_rs, N)
 *             free_int_2dmat(nnn_i_rs, n_rs)
 *             free_dble_3dmat(ds_nn_i_rs, n_rs, N)             # <<<<<<<<<<<<<<
 *             free_dble_3dmat(simhd_ms_nn_i_rs, n_rs, N)
 *             free_dble_3dmat(simhd_h_nn_i_rs, n_rs, N)
 */
      __pyx_f_12fmsne_implem_free_dble_3dmat(__pyx_v_ds_nn_i_rs, __pyx_v_n_rs, __pyx_v_N);

      /* "fmsne_implem.pyx":3136
 *             free_int_2dmat(nnn_i_rs, n_rs)
 *             free_dble_3dmat(ds_nn_i_rs, n_rs, N)
 *             free_dble_3dmat(simhd_ms_nn_i_rs, n_rs, N)             # <<<<<<<<<<<<<<
 *             free_dble_3dmat(simhd_h_nn_i_rs, n_rs, N)
 *             free_dble_3dmat(tau_h_i_rs, L, n_rs)
 */
      __pyx_f_12fmsne_implem_free_dble_3dmat(__pyx_v_simhd_ms_nn_i_rs, __pyx_v_n_rs, __pyx_v_N);

      /* "fmsne_implem.pyx":3137
 *             free_dble_3dmat(ds_nn_i_rs, n_rs, N)
 *             free_dble_3dmat(simhd_ms_nn_i_rs, n_rs, N)
 *             free_dble_3dmat(simhd_h_nn_i_rs, n_rs, N)             # <<<<<<<<<<<<<<
 *             free_dble_3dmat(tau_h_i_rs, L, n_rs)
 *             free_Pysst_3dmat(nn_i_rs_id_dld, n_rs, N)
 */
      __pyx_f_12fmsne_implem_free_dble_3dmat(__pyx_v_simhd_h_nn_i_rs, __pyx_v_n_rs, __pyx_v_N);

      /* "fmsne_implem.pyx":3138
 *             free_dble_3dmat(simhd_ms_nn_i_rs, n_rs, N)
 *             free_dble_3dmat(simhd_h_nn_i_rs, n_rs, N)
 *             free_dble_3dmat(tau_h_i_rs, L, n_rs)             # <<<<<<<<<<<<<<
 *             free_Pysst_3dmat(nn_i_rs_id_dld, n_rs, N)
 *             PyMem_Free(ni_dld)
 */
      __pyx_f_12fmsne_implem_free_dble_3dmat(__pyx_v_tau_h_i_rs, __pyx_v_L, __pyx_v_n_rs);

      /* "fmsne_implem.pyx":3139
 *             free_dble_3dmat(simhd_h_nn_i_rs, n_rs, N)
 *             free_dble_3dmat(tau_h_i_rs, L, n_rs)
 *             free_Pysst_3dmat(nn_i_rs_id_dld, n_rs, N)             # <<<<<<<<<<<<<<
 *             PyMem_Free(ni_dld)
 *             free_Pysst_2dmat(ij_dld, sLm_nt)
 */
      __pyx_f_12fmsne_implem_free_Pysst_3dmat(__pyx_v_nn_i_rs_id_dld, __pyx_v_n_rs, __pyx_v_N);

      /* "fmsne_implem.pyx":3140
 *             free_dble_3dmat(tau_h_i_rs, L, n_rs)
 *             free_Pysst_3dmat(nn_i_rs_id_dld, n_rs, N)
 *             PyMem_Free(ni_dld)             # <<<<<<<<<<<<<<
 *             free_Pysst_2dmat(ij_dld, sLm_nt)
 *             free_dble_2dmat(dij_ld, sLm_nt)
 */
      PyMem_Free(__pyx_v_ni_dld);

      /* "fmsne_implem.pyx":3141
 *             free_Pysst_3dmat(nn_i_rs_id_dld, n_rs, N)
 *             PyMem_Free(ni_dld)
 *             free_Pysst_2dmat(ij_dld, sLm_nt)             # <<<<<<<<<<<<<<
 *             free_dble_2dmat(dij_ld, sLm_nt)
 *             PyMem_Free(p_h)
 */
      __pyx_f_12fmsne_implem_free_Pysst_2dmat(__pyx_v_ij_dld, __pyx_v_sLm_nt);

      /* "fmsne_implem.pyx":3142
 *             PyMem_Free(ni_dld)
 *             free_Pysst_2dmat(ij_dld, sLm_nt)
 *             free_dble_2dmat(dij_ld, sLm_nt)             # <<<<<<<<<<<<<<
 *             PyMem_Free(p_h)
 *             PyMem_Free(t_h)
 */
      __pyx_f_12fmsne_implem_free_dble_2dmat(__pyx_v_dij_ld, __pyx_v_sLm_nt);

      /* "fmsne_implem.pyx":3143
 *             free_Pysst_2dmat(ij_dld, sLm_nt)
 *             free_dble_2dmat(dij_ld, sLm_nt)
 *             PyMem_Free(p_h)             # <<<<<<<<<<<<<<
 *             PyMem_Free(t_h)
 *             lbfgs_free(xopt)
 */
      PyMem_Free(__pyx_v_p_h);

      /* "fmsne_implem.pyx":3144
 *             free_dble_2dmat(dij_ld, sLm_nt)
 *             PyMem_Free(p_h)
 *             PyMem_Free(t_h)             # <<<<<<<<<<<<<<
 *             lbfgs_free(xopt)
 *             PyMem_Free(popt)
 */
      PyMem_Free(__pyx_v_t_h);

      /* "fmsne_implem.pyx":3145
 *             PyMem_Free(p_h)
 *             PyMem_Free(t_h)
 *             lbfgs_free(xopt)             # <<<<<<<<<<<<<<
 *             PyMem_Free(popt)
 *             printf("Out of memory for popt.Z.\n")
 */
      lbfgs_free(__pyx_v_xopt);

      /* "fmsne_implem.pyx":3146
 *             PyMem_Free(t_h)
 *             lbfgs_free(xopt)
 *             PyMem_Free(popt)             # <<<<<<<<<<<<<<
 *             printf("Out of memory for popt.Z.\n")
 *             exit(EXIT_FAILURE)
 */
      PyMem_Free(__pyx_v_popt);

      /* "fmsne_implem.pyx":3147
 *             lbfgs_free(xopt)
 *             PyMem_Free(popt)
 *             printf("Out of memory for popt.Z.\n")             # <<<<<<<<<<<<<<
 *             exit(EXIT_FAILURE)
 *         popt.sX = alloc_dble_2dmat(L, n_components)
 */
      (void)(printf(((char const *)"Out of memory for popt.Z.\n")));

      /* "fmsne_implem.pyx":3148
 *             PyMem_Free(popt)
 *             printf("Out of memory for popt.Z.\n")
 *             exit(EXIT_FAILURE)             # <<<<<<<<<<<<<<
 *         popt.sX = alloc_dble_2dmat(L, n_components)
 *         if popt.sX is NULL:
 */
      exit(EXIT_FAILURE);

      /* "fmsne_implem.pyx":3132
 *         popt.sX_rs = NULL
 *         popt.Z = <double*> PyMem_Malloc(L*sizeof(double))
 *         if popt.Z is NULL:             # <<<<<<<<<<<<<<
 *             free_int_3dmat(arr_nn_i_rs, n_rs, N)
 *             free_int_2dmat(nnn_i_rs, n_rs)
 */
    }

    /* "fmsne_implem.pyx":3149
 *             printf("Out of memory for popt.Z.\n")
 *             exit(EXIT_FAILURE)
 *         popt.sX = alloc_dble_2dmat(L, n_components)             # <<<<<<<<<<<<<<
 *         if popt.sX is NULL:
 *             free_int_3dmat(arr_nn_i_rs, n_rs, N)
 */
    __pyx_v_popt->sX = __pyx_f_12fmsne_implem_alloc_dble_2dmat(__pyx_v_L, __pyx_v_n_components);

    /* "fmsne_implem.pyx":3150
 *             exit(EXIT_FAILURE)
 *         popt.sX = alloc_dble_2dmat(L, n_components)
 *         if popt.sX is NULL:             # <<<<<<<<<<<<<<
 *             free_int_3dmat(arr_nn_i_rs, n_rs, N)
 *             free_int_2dmat(nnn_i_rs, n_rs)
 */
    __pyx_t_1 = ((__pyx_v_popt->sX == NULL) != 0);
    if (__pyx_t_1) {

      /* "fmsne_implem.pyx":3151
 *         popt.sX = alloc_dble_2dmat(L, n_components)
 *         if popt.sX is NULL:
 *             free_int_3dmat(arr_nn_i_rs, n_rs, N)             # <<<<<<<<<<<<<<
 *             free_int_2dmat(nnn_i_rs, n_rs)
 *             free_dble_3dmat(ds_nn_i_rs, n_rs, N)
 */
      __pyx_f_12fmsne_implem_free_int_3dmat(__pyx_v_arr_nn_i_rs, __pyx_v_n_rs, __pyx_v_N);

      /* "fmsne_implem.pyx":3152
 *         if popt.sX is NULL:
 *             free_int_3dmat(arr_nn_i_rs, n_rs, N)
 *             free_int_2dmat(nnn_i_rs, n_rs)             # <<<<<<<<<<<<<<
 *             free_dble_3dmat(ds_nn_i_rs, n_rs, N)
 *             free_dble_3dmat(simhd_ms_nn_i_rs, n_rs, N)
 */
      __pyx_f_12fmsne_implem_free_int_2dmat(__pyx_v_nnn_i_rs, __pyx_v_n_rs);

      /* "fmsne_implem.pyx":3153
 *             free_int_3dmat(arr_nn_i_rs, n_rs, N)
 *             free_int_2dmat(nnn_i_rs, n_rs)
 *             free_dble_3dmat(ds_nn_i_rs, n_rs, N)             # <<<<<<<<<<<<<<
 *             free_dble_3dmat(simhd_ms_nn_i_rs, n_rs, N)
 *             free_dble_3dmat(simhd_h_nn_i_rs, n_rs, N)
 */
      __pyx_f_12fmsne_implem_free_dble_3dmat(__pyx_v_ds_nn_i_rs, __pyx_v_n_rs, __pyx_v_N);

      /* "fmsne_implem.pyx":3154
 *             free_int_2dmat(nnn_i_rs, n_rs)
 *             free_dble_3dmat(ds_nn_i_rs, n_rs, N)
 *             free_dble_3dmat(simhd_ms_nn_i_rs, n_rs, N)             # <<<<<<<<<<<<<<
 *             free_dble_3dmat(simhd_h_nn_i_rs, n_rs, N)
 *             free_dble_3dmat(tau_h_i_rs, L, n_rs)
 */
      __pyx_f_12fmsne_implem_free_dble_3dmat(__pyx_v_simhd_ms_nn_i_rs, __pyx_v_n_rs, __pyx_v_N);

      /* "fmsne_implem.pyx":3155
 *             free_dble_3dmat(ds_nn_i_rs, n_rs, N)
 *             free_dble_3dmat(simhd_ms_nn_i_rs, n_rs, N)
 *             free_dble_3dmat(simhd_h_nn_i_rs, n_rs, N)             # <<<<<<<<<<<<<<
 *             free_dble_3dmat(tau_h_i_rs, L, n_rs)
 *             free_Pysst_3dmat(nn_i_rs_id_dld, n_rs, N)
 */
      __pyx_f_12fmsne_implem_free_dble_3dmat(__pyx_v_simhd_h_nn_i_rs, __pyx_v_n_rs, __pyx_v_N);

      /* "fmsne_implem.pyx":3156
 *             free_dble_3dmat(simhd_ms_nn_i_rs, n_rs, N)
 *             free_dble_3dmat(simhd_h_nn_i_rs, n_rs, N)
 *             free_dble_3dmat(tau_h_i_rs, L, n_rs)             # <<<<<<<<<<<<<<
 *             free_Pysst_3dmat(nn_i_rs_id_dld, n_rs, N)
 *             PyMem_Free(ni_dld)
 */
      __pyx_f_12fmsne_implem_free_dble_3dmat(__pyx_v_tau_h_i_rs, __pyx_v_L, __pyx_v_n_rs);

      /* "fmsne_implem.pyx":3157
 *             free_dble_3dmat(simhd_h_nn_i_rs, n_rs, N)
 *             free_dble_3dmat(tau_h_i_rs, L, n_rs)
 *             free_Pysst_3dmat(nn_i_rs_id_dld, n_rs, N)             # <<<<<<<<<<<<<<
 *             PyMem_Free(ni_dld)
 *             free_Pysst_2dmat(ij_dld, sLm_nt)
 */
      __pyx_f_12fmsne_implem_free_Pysst_3dmat(__pyx_v_nn_i_rs_id_dld, __pyx_v_n_rs, __pyx_v_N);

      /* "fmsne_implem.pyx":3158
 *             free_dble_3dmat(tau_h_i_rs, L, n_rs)
 *             free_Pysst_3dmat(nn_i_rs_id_dld, n_rs, N)
 *             PyMem_Free(ni_dld)             # <<<<<<<<<<<<<<
 *             free_Pysst_2dmat(ij_dld, sLm_nt)
 *             free_dble_2dmat(dij_ld, sLm_nt)
 */
      PyMem_Free(__pyx_v_ni_dld);

      /* "fmsne_implem.pyx":3159
 *             free_Pysst_3dmat(nn_i_rs_id_dld, n_rs, N)
 *             PyMem_Free(ni_dld)
 *             free_Pysst_2dmat(ij_dld, sLm_nt)             # <<<<<<<<<<<<<<
 *             free_dble_2dmat(dij_ld, sLm_nt)
 *             PyMem_Free(p_h)
 */
      __pyx_f_12fmsne_implem_free_Pysst_2dmat(__pyx_v_ij_dld, __pyx_v_sLm_nt);

      /* "fmsne_implem.pyx":3160
 *             PyMem_Free(ni_dld)
 *             free_Pysst_2dmat(ij_dld, sLm_nt)
 *             free_dble_2dmat(dij_ld, sLm_nt)             # <<<<<<<<<<<<<<
 *             PyMem_Free(p_h)
 *             PyMem_Free(t_h)
 */
      __pyx_f_12fmsne_implem_free_dble_2dmat(__pyx_v_dij_ld, __pyx_v_sLm_nt);

      /* "fmsne_implem.pyx":3161
 *             free_Pysst_2dmat(ij_dld, sLm_nt)
 *             free_dble_2dmat(dij_ld, sLm_nt)
 *             PyMem_Free(p_h)             # <<<<<<<<<<<<<<
 *             PyMem_Free(t_h)
 *             PyMem_Free(popt.Z)
 */
      PyMem_Free(__pyx_v_p_h);

      /* "fmsne_implem.pyx":3162
 *             free_dble_2dmat(dij_ld, sLm_nt)
 *             PyMem_Free(p_h)
 *             PyMem_Free(t_h)             # <<<<<<<<<<<<<<
 *             PyMem_Free(popt.Z)
 *             lbfgs_free(xopt)
 */
      PyMem_Free(__pyx_v_t_h);

      /* "fmsne_implem.pyx":3163
 *             PyMem_Free(p_h)
 *             PyMem_Free(t_h)
 *             PyMem_Free(popt.Z)             # <<<<<<<<<<<<<<
 *             lbfgs_free(xopt)
 *             PyMem_Free(popt)
 */
      PyMem_Free(__pyx_v_popt->Z);

      /* "fmsne_implem.pyx":3164
 *             PyMem_Free(t_h)
 *             PyMem_Free(popt.Z)
 *             lbfgs_free(xopt)             # <<<<<<<<<<<<<<
 *             PyMem_Free(popt)
 *             printf("Out of memory for popt.sX.\n")
 */
      lbfgs_free(__pyx_v_xopt);

      /* "fmsne_implem.pyx":3165
 *             PyMem_Free(popt.Z)
 *             lbfgs_free(xopt)
 *             PyMem_Free(popt)             # <<<<<<<<<<<<<<
 *             printf("Out of memory for popt.sX.\n")
 *             exit(EXIT_FAILURE)
 */
      PyMem_Free(__pyx_v_popt);

      /* "fmsne_implem.pyx":3166
 *             lbfgs_free(xopt)
 *             PyMem_Free(popt)
 *             printf("Out of memory for popt.sX.\n")             # <<<<<<<<<<<<<<
 *             exit(EXIT_FAILURE)
 *         popt.inter_fct_1 = 0
 */
      (void)(printf(((char const *)"Out of memory for popt.sX.\n")));

      /* "fmsne_implem.pyx":3167
 *             PyMem_Free(popt)
 *             printf("Out of memory for popt.sX.\n")
 *             exit(EXIT_FAILURE)             # <<<<<<<<<<<<<<
 *         popt.inter_fct_1 = 0
 *         popt.inter_fct_2 = 5
 */
      exit(EXIT_FAILURE);

      /* "fmsne_implem.pyx":3150
 *             exit(EXIT_FAILURE)
 *         popt.sX = alloc_dble_2dmat(L, n_components)
 *         if popt.sX is NULL:             # <<<<<<<<<<<<<<
 *             free_int_3dmat(arr_nn_i_rs, n_rs, N)
 *             free_int_2dmat(nnn_i_rs, n_rs)
 */
    }

    /* "fmsne_implem.pyx":3168
 *             printf("Out of memory for popt.sX.\n")
 *             exit(EXIT_FAILURE)
 *         popt.inter_fct_1 = 0             # <<<<<<<<<<<<<<
 *         popt.inter_fct_2 = 5
 * 
 */
    __pyx_v_popt->inter_fct_1 = 0;

    /* "fmsne_implem.pyx":3169
 *             exit(EXIT_FAILURE)
 *         popt.inter_fct_1 = 0
 *         popt.inter_fct_2 = 5             # <<<<<<<<<<<<<<
 * 
 *     popt.sbqd = n_components*sizeof(double)
 */
    __pyx_v_popt->inter_fct_2 = 5;
  }
  __pyx_L29:;

  /* "fmsne_implem.pyx":3171
 *         popt.inter_fct_2 = 5
 * 
 *     popt.sbqd = n_components*sizeof(double)             # <<<<<<<<<<<<<<
 *     popt.qdiff = <double*> PyMem_Malloc(popt.sbqd)
 *     if popt.qdiff is NULL:
 */
  __pyx_v_popt->sbqd = (__pyx_v_n_components * (sizeof(double)));

  /* "fmsne_implem.pyx":3172
 * 
 *     popt.sbqd = n_components*sizeof(double)
 *     popt.qdiff = <double*> PyMem_Malloc(popt.sbqd)             # <<<<<<<<<<<<<<
 *     if popt.qdiff is NULL:
 *         free_int_3dmat(arr_nn_i_rs, n_rs, N)
 */
  __pyx_v_popt->qdiff = ((double *)PyMem_Malloc(__pyx_v_popt->sbqd));

  /* "fmsne_implem.pyx":3173
 *     popt.sbqd = n_components*sizeof(double)
 *     popt.qdiff = <double*> PyMem_Malloc(popt.sbqd)
 *     if popt.qdiff is NULL:             # <<<<<<<<<<<<<<
 *         free_int_3dmat(arr_nn_i_rs, n_rs, N)
 *         free_int_2dmat(nnn_i_rs, n_rs)
 */
  __pyx_t_1 = ((__pyx_v_popt->qdiff == NULL) != 0);
  if (__pyx_t_1) {

    /* "fmsne_implem.pyx":3174
 *     popt.qdiff = <double*> PyMem_Malloc(popt.sbqd)
 *     if popt.qdiff is NULL:
 *         free_int_3dmat(arr_nn_i_rs, n_rs, N)             # <<<<<<<<<<<<<<
 *         free_int_2dmat(nnn_i_rs, n_rs)
 *         free_dble_3dmat(ds_nn_i_rs, n_rs, N)
 */
    __pyx_f_12fmsne_implem_free_int_3dmat(__pyx_v_arr_nn_i_rs, __pyx_v_n_rs, __pyx_v_N);

    /* "fmsne_implem.pyx":3175
 *     if popt.qdiff is NULL:
 *         free_int_3dmat(arr_nn_i_rs, n_rs, N)
 *         free_int_2dmat(nnn_i_rs, n_rs)             # <<<<<<<<<<<<<<
 *         free_dble_3dmat(ds_nn_i_rs, n_rs, N)
 *         free_dble_3dmat(simhd_ms_nn_i_rs, n_rs, N)
 */
    __pyx_f_12fmsne_implem_free_int_2dmat(__pyx_v_nnn_i_rs, __pyx_v_n_rs);

    /* "fmsne_implem.pyx":3176
 *         free_int_3dmat(arr_nn_i_rs, n_rs, N)
 *         free_int_2dmat(nnn_i_rs, n_rs)
 *         free_dble_3dmat(ds_nn_i_rs, n_rs, N)             # <<<<<<<<<<<<<<
 *         free_dble_3dmat(simhd_ms_nn_i_rs, n_rs, N)
 *         free_dble_3dmat(simhd_h_nn_i_rs, n_rs, N)
 */
    __pyx_f_12fmsne_implem_free_dble_3dmat(__pyx_v_ds_nn_i_rs, __pyx_v_n_rs, __pyx_v_N);

    /* "fmsne_implem.pyx":3177
 *         free_int_2dmat(nnn_i_rs, n_rs)
 *         free_dble_3dmat(ds_nn_i_rs, n_rs, N)
 *         free_dble_3dmat(simhd_ms_nn_i_rs, n_rs, N)             # <<<<<<<<<<<<<<
 *         free_dble_3dmat(simhd_h_nn_i_rs, n_rs, N)
 *         free_dble_3dmat(tau_h_i_rs, L, n_rs)
 */
    __pyx_f_12fmsne_implem_free_dble_3dmat(__pyx_v_simhd_ms_nn_i_rs, __pyx_v_n_rs, __pyx_v_N);

    /* "fmsne_implem.pyx":3178
 *         free_dble_3dmat(ds_nn_i_rs, n_rs, N)
 *         free_dble_3dmat(simhd_ms_nn_i_rs, n_rs, N)
 *         free_dble_3dmat(simhd_h_nn_i_rs, n_rs, N)             # <<<<<<<<<<<<<<
 *         free_dble_3dmat(tau_h_i_rs, L, n_rs)
 *         free_Pysst_3dmat(nn_i_rs_id_dld, n_rs, N)
 */
    __pyx_f_12fmsne_implem_free_dble_3dmat(__pyx_v_simhd_h_nn_i_rs, __pyx_v_n_rs, __pyx_v_N);

    /* "fmsne_implem.pyx":3179
 *         free_dble_3dmat(simhd_ms_nn_i_rs, n_rs, N)
 *         free_dble_3dmat(simhd_h_nn_i_rs, n_rs, N)
 *         free_dble_3dmat(tau_h_i_rs, L, n_rs)             # <<<<<<<<<<<<<<
 *         free_Pysst_3dmat(nn_i_rs_id_dld, n_rs, N)
 *         PyMem_Free(ni_dld)
 */
    __pyx_f_12fmsne_implem_free_dble_3dmat(__pyx_v_tau_h_i_rs, __pyx_v_L, __pyx_v_n_rs);

    /* "fmsne_implem.pyx":3180
 *         free_dble_3dmat(simhd_h_nn_i_rs, n_rs, N)
 *         free_dble_3dmat(tau_h_i_rs, L, n_rs)
 *         free_Pysst_3dmat(nn_i_rs_id_dld, n_rs, N)             # <<<<<<<<<<<<<<
 *         PyMem_Free(ni_dld)
 *         free_Pysst_2dmat(ij_dld, sLm_nt)
 */
    __pyx_f_12fmsne_implem_free_Pysst_3dmat(__pyx_v_nn_i_rs_id_dld, __pyx_v_n_rs, __pyx_v_N);

    /* "fmsne_implem.pyx":3181
 *         free_dble_3dmat(tau_h_i_rs, L, n_rs)
 *         free_Pysst_3dmat(nn_i_rs_id_dld, n_rs, N)
 *         PyMem_Free(ni_dld)             # <<<<<<<<<<<<<<
 *         free_Pysst_2dmat(ij_dld, sLm_nt)
 *         free_dble_2dmat(dij_ld, sLm_nt)
 */
    PyMem_Free(__pyx_v_ni_dld);

    /* "fmsne_implem.pyx":3182
 *         free_Pysst_3dmat(nn_i_rs_id_dld, n_rs, N)
 *         PyMem_Free(ni_dld)
 *         free_Pysst_2dmat(ij_dld, sLm_nt)             # <<<<<<<<<<<<<<
 *         free_dble_2dmat(dij_ld, sLm_nt)
 *         if fit_U:
 */
    __pyx_f_12fmsne_implem_free_Pysst_2dmat(__pyx_v_ij_dld, __pyx_v_sLm_nt);

    /* "fmsne_implem.pyx":3183
 *         PyMem_Free(ni_dld)
 *         free_Pysst_2dmat(ij_dld, sLm_nt)
 *         free_dble_2dmat(dij_ld, sLm_nt)             # <<<<<<<<<<<<<<
 *         if fit_U:
 *             free_dble_2dmat(p_h_rs, L)
 */
    __pyx_f_12fmsne_implem_free_dble_2dmat(__pyx_v_dij_ld, __pyx_v_sLm_nt);

    /* "fmsne_implem.pyx":3184
 *         free_Pysst_2dmat(ij_dld, sLm_nt)
 *         free_dble_2dmat(dij_ld, sLm_nt)
 *         if fit_U:             # <<<<<<<<<<<<<<
 *             free_dble_2dmat(p_h_rs, L)
 *             free_dble_2dmat(t_h_rs, L)
 */
    __pyx_t_1 = (__pyx_v_fit_U != 0);
    if (__pyx_t_1) {

      /* "fmsne_implem.pyx":3185
 *         free_dble_2dmat(dij_ld, sLm_nt)
 *         if fit_U:
 *             free_dble_2dmat(p_h_rs, L)             # <<<<<<<<<<<<<<
 *             free_dble_2dmat(t_h_rs, L)
 *             free_dble_2dmat(popt.Z_rs, L)
 */
      __pyx_f_12fmsne_implem_free_dble_2dmat(__pyx_v_p_h_rs, __pyx_v_L);

      /* "fmsne_implem.pyx":3186
 *         if fit_U:
 *             free_dble_2dmat(p_h_rs, L)
 *             free_dble_2dmat(t_h_rs, L)             # <<<<<<<<<<<<<<
 *             free_dble_2dmat(popt.Z_rs, L)
 *             free_dble_3dmat(popt.sX_rs, L, n_rs)
 */
      __pyx_f_12fmsne_implem_free_dble_2dmat(__pyx_v_t_h_rs, __pyx_v_L);

      /* "fmsne_implem.pyx":3187
 *             free_dble_2dmat(p_h_rs, L)
 *             free_dble_2dmat(t_h_rs, L)
 *             free_dble_2dmat(popt.Z_rs, L)             # <<<<<<<<<<<<<<
 *             free_dble_3dmat(popt.sX_rs, L, n_rs)
 *         else:
 */
      __pyx_f_12fmsne_implem_free_dble_2dmat(__pyx_v_popt->Z_rs, __pyx_v_L);

      /* "fmsne_implem.pyx":3188
 *             free_dble_2dmat(t_h_rs, L)
 *             free_dble_2dmat(popt.Z_rs, L)
 *             free_dble_3dmat(popt.sX_rs, L, n_rs)             # <<<<<<<<<<<<<<
 *         else:
 *             PyMem_Free(p_h)
 */
      __pyx_f_12fmsne_implem_free_dble_3dmat(__pyx_v_popt->sX_rs, __pyx_v_L, __pyx_v_n_rs);

      /* "fmsne_implem.pyx":3184
 *         free_Pysst_2dmat(ij_dld, sLm_nt)
 *         free_dble_2dmat(dij_ld, sLm_nt)
 *         if fit_U:             # <<<<<<<<<<<<<<
 *             free_dble_2dmat(p_h_rs, L)
 *             free_dble_2dmat(t_h_rs, L)
 */
      goto __pyx_L35;
    }

    /* "fmsne_implem.pyx":3190
 *             free_dble_3dmat(popt.sX_rs, L, n_rs)
 *         else:
 *             PyMem_Free(p_h)             # <<<<<<<<<<<<<<
 *             PyMem_Free(t_h)
 *             PyMem_Free(popt.Z)
 */
    /*else*/ {
      PyMem_Free(__pyx_v_p_h);

      /* "fmsne_implem.pyx":3191
 *         else:
 *             PyMem_Free(p_h)
 *             PyMem_Free(t_h)             # <<<<<<<<<<<<<<
 *             PyMem_Free(popt.Z)
 *             free_dble_2dmat(popt.sX, L)
 */
      PyMem_Free(__pyx_v_t_h);

      /* "fmsne_implem.pyx":3192
 *             PyMem_Free(p_h)
 *             PyMem_Free(t_h)
 *             PyMem_Free(popt.Z)             # <<<<<<<<<<<<<<
 *             free_dble_2dmat(popt.sX, L)
 *         lbfgs_free(xopt)
 */
      PyMem_Free(__pyx_v_popt->Z);

      /* "fmsne_implem.pyx":3193
 *             PyMem_Free(t_h)
 *             PyMem_Free(popt.Z)
 *             free_dble_2dmat(popt.sX, L)             # <<<<<<<<<<<<<<
 *         lbfgs_free(xopt)
 *         PyMem_Free(popt)
 */
      __pyx_f_12fmsne_implem_free_dble_2dmat(__pyx_v_popt->sX, __pyx_v_L);
    }
    __pyx_L35:;

    /* "fmsne_implem.pyx":3194
 *             PyMem_Free(popt.Z)
 *             free_dble_2dmat(popt.sX, L)
 *         lbfgs_free(xopt)             # <<<<<<<<<<<<<<
 *         PyMem_Free(popt)
 *         printf("Out of memory for popt.qdiff.\n")
 */
    lbfgs_free(__pyx_v_xopt);

    /* "fmsne_implem.pyx":3195
 *             free_dble_2dmat(popt.sX, L)
 *         lbfgs_free(xopt)
 *         PyMem_Free(popt)             # <<<<<<<<<<<<<<
 *         printf("Out of memory for popt.qdiff.\n")
 *         exit(EXIT_FAILURE)
 */
    PyMem_Free(__pyx_v_popt);

    /* "fmsne_implem.pyx":3196
 *         lbfgs_free(xopt)
 *         PyMem_Free(popt)
 *         printf("Out of memory for popt.qdiff.\n")             # <<<<<<<<<<<<<<
 *         exit(EXIT_FAILURE)
 * 
 */
    (void)(printf(((char const *)"Out of memory for popt.qdiff.\n")));

    /* "fmsne_implem.pyx":3197
 *         PyMem_Free(popt)
 *         printf("Out of memory for popt.qdiff.\n")
 *         exit(EXIT_FAILURE)             # <<<<<<<<<<<<<<
 * 
 *     popt.sa = alloc_dble_2dmat(n_rs, L*N)
 */
    exit(EXIT_FAILURE);

    /* "fmsne_implem.pyx":3173
 *     popt.sbqd = n_components*sizeof(double)
 *     popt.qdiff = <double*> PyMem_Malloc(popt.sbqd)
 *     if popt.qdiff is NULL:             # <<<<<<<<<<<<<<
 *         free_int_3dmat(arr_nn_i_rs, n_rs, N)
 *         free_int_2dmat(nnn_i_rs, n_rs)
 */
  }

  /* "fmsne_implem.pyx":3199
 *         exit(EXIT_FAILURE)
 * 
 *     popt.sa = alloc_dble_2dmat(n_rs, L*N)             # <<<<<<<<<<<<<<
 *     if popt.sa is NULL:
 *         free_int_3dmat(arr_nn_i_rs, n_rs, N)
 */
  __pyx_v_popt->sa = __pyx_f_12fmsne_implem_alloc_dble_2dmat(__pyx_v_n_rs, (__pyx_v_L * __pyx_v_N));

  /* "fmsne_implem.pyx":3200
 * 
 *     popt.sa = alloc_dble_2dmat(n_rs, L*N)
 *     if popt.sa is NULL:             # <<<<<<<<<<<<<<
 *         free_int_3dmat(arr_nn_i_rs, n_rs, N)
 *         free_int_2dmat(nnn_i_rs, n_rs)
 */
  __pyx_t_1 = ((__pyx_v_popt->sa == NULL) != 0);
  if (__pyx_t_1) {

    /* "fmsne_implem.pyx":3201
 *     popt.sa = alloc_dble_2dmat(n_rs, L*N)
 *     if popt.sa is NULL:
 *         free_int_3dmat(arr_nn_i_rs, n_rs, N)             # <<<<<<<<<<<<<<
 *         free_int_2dmat(nnn_i_rs, n_rs)
 *         free_dble_3dmat(ds_nn_i_rs, n_rs, N)
 */
    __pyx_f_12fmsne_implem_free_int_3dmat(__pyx_v_arr_nn_i_rs, __pyx_v_n_rs, __pyx_v_N);

    /* "fmsne_implem.pyx":3202
 *     if popt.sa is NULL:
 *         free_int_3dmat(arr_nn_i_rs, n_rs, N)
 *         free_int_2dmat(nnn_i_rs, n_rs)             # <<<<<<<<<<<<<<
 *         free_dble_3dmat(ds_nn_i_rs, n_rs, N)
 *         free_dble_3dmat(simhd_ms_nn_i_rs, n_rs, N)
 */
    __pyx_f_12fmsne_implem_free_int_2dmat(__pyx_v_nnn_i_rs, __pyx_v_n_rs);

    /* "fmsne_implem.pyx":3203
 *         free_int_3dmat(arr_nn_i_rs, n_rs, N)
 *         free_int_2dmat(nnn_i_rs, n_rs)
 *         free_dble_3dmat(ds_nn_i_rs, n_rs, N)             # <<<<<<<<<<<<<<
 *         free_dble_3dmat(simhd_ms_nn_i_rs, n_rs, N)
 *         free_dble_3dmat(simhd_h_nn_i_rs, n_rs, N)
 */
    __pyx_f_12fmsne_implem_free_dble_3dmat(__pyx_v_ds_nn_i_rs, __pyx_v_n_rs, __pyx_v_N);

    /* "fmsne_implem.pyx":3204
 *         free_int_2dmat(nnn_i_rs, n_rs)
 *         free_dble_3dmat(ds_nn_i_rs, n_rs, N)
 *         free_dble_3dmat(simhd_ms_nn_i_rs, n_rs, N)             # <<<<<<<<<<<<<<
 *         free_dble_3dmat(simhd_h_nn_i_rs, n_rs, N)
 *         free_dble_3dmat(tau_h_i_rs, L, n_rs)
 */
    __pyx_f_12fmsne_implem_free_dble_3dmat(__pyx_v_simhd_ms_nn_i_rs, __pyx_v_n_rs, __pyx_v_N);

    /* "fmsne_implem.pyx":3205
 *         free_dble_3dmat(ds_nn_i_rs, n_rs, N)
 *         free_dble_3dmat(simhd_ms_nn_i_rs, n_rs, N)
 *         free_dble_3dmat(simhd_h_nn_i_rs, n_rs, N)             # <<<<<<<<<<<<<<
 *         free_dble_3dmat(tau_h_i_rs, L, n_rs)
 *         free_Pysst_3dmat(nn_i_rs_id_dld, n_rs, N)
 */
    __pyx_f_12fmsne_implem_free_dble_3dmat(__pyx_v_simhd_h_nn_i_rs, __pyx_v_n_rs, __pyx_v_N);

    /* "fmsne_implem.pyx":3206
 *         free_dble_3dmat(simhd_ms_nn_i_rs, n_rs, N)
 *         free_dble_3dmat(simhd_h_nn_i_rs, n_rs, N)
 *         free_dble_3dmat(tau_h_i_rs, L, n_rs)             # <<<<<<<<<<<<<<
 *         free_Pysst_3dmat(nn_i_rs_id_dld, n_rs, N)
 *         PyMem_Free(ni_dld)
 */
    __pyx_f_12fmsne_implem_free_dble_3dmat(__pyx_v_tau_h_i_rs, __pyx_v_L, __pyx_v_n_rs);

    /* "fmsne_implem.pyx":3207
 *         free_dble_3dmat(simhd_h_nn_i_rs, n_rs, N)
 *         free_dble_3dmat(tau_h_i_rs, L, n_rs)
 *         free_Pysst_3dmat(nn_i_rs_id_dld, n_rs, N)             # <<<<<<<<<<<<<<
 *         PyMem_Free(ni_dld)
 *         free_Pysst_2dmat(ij_dld, sLm_nt)
 */
    __pyx_f_12fmsne_implem_free_Pysst_3dmat(__pyx_v_nn_i_rs_id_dld, __pyx_v_n_rs, __pyx_v_N);

    /* "fmsne_implem.pyx":3208
 *         free_dble_3dmat(tau_h_i_rs, L, n_rs)
 *         free_Pysst_3dmat(nn_i_rs_id_dld, n_rs, N)
 *         PyMem_Free(ni_dld)             # <<<<<<<<<<<<<<
 *         free_Pysst_2dmat(ij_dld, sLm_nt)
 *         free_dble_2dmat(dij_ld, sLm_nt)
 */
    PyMem_Free(__pyx_v_ni_dld);

    /* "fmsne_implem.pyx":3209
 *         free_Pysst_3dmat(nn_i_rs_id_dld, n_rs, N)
 *         PyMem_Free(ni_dld)
 *         free_Pysst_2dmat(ij_dld, sLm_nt)             # <<<<<<<<<<<<<<
 *         free_dble_2dmat(dij_ld, sLm_nt)
 *         if fit_U:
 */
    __pyx_f_12fmsne_implem_free_Pysst_2dmat(__pyx_v_ij_dld, __pyx_v_sLm_nt);

    /* "fmsne_implem.pyx":3210
 *         PyMem_Free(ni_dld)
 *         free_Pysst_2dmat(ij_dld, sLm_nt)
 *         free_dble_2dmat(dij_ld, sLm_nt)             # <<<<<<<<<<<<<<
 *         if fit_U:
 *             free_dble_2dmat(p_h_rs, L)
 */
    __pyx_f_12fmsne_implem_free_dble_2dmat(__pyx_v_dij_ld, __pyx_v_sLm_nt);

    /* "fmsne_implem.pyx":3211
 *         free_Pysst_2dmat(ij_dld, sLm_nt)
 *         free_dble_2dmat(dij_ld, sLm_nt)
 *         if fit_U:             # <<<<<<<<<<<<<<
 *             free_dble_2dmat(p_h_rs, L)
 *             free_dble_2dmat(t_h_rs, L)
 */
    __pyx_t_1 = (__pyx_v_fit_U != 0);
    if (__pyx_t_1) {

      /* "fmsne_implem.pyx":3212
 *         free_dble_2dmat(dij_ld, sLm_nt)
 *         if fit_U:
 *             free_dble_2dmat(p_h_rs, L)             # <<<<<<<<<<<<<<
 *             free_dble_2dmat(t_h_rs, L)
 *             free_dble_2dmat(popt.Z_rs, L)
 */
      __pyx_f_12fmsne_implem_free_dble_2dmat(__pyx_v_p_h_rs, __pyx_v_L);

      /* "fmsne_implem.pyx":3213
 *         if fit_U:
 *             free_dble_2dmat(p_h_rs, L)
 *             free_dble_2dmat(t_h_rs, L)             # <<<<<<<<<<<<<<
 *             free_dble_2dmat(popt.Z_rs, L)
 *             free_dble_3dmat(popt.sX_rs, L, n_rs)
 */
      __pyx_f_12fmsne_implem_free_dble_2dmat(__pyx_v_t_h_rs, __pyx_v_L);

      /* "fmsne_implem.pyx":3214
 *             free_dble_2dmat(p_h_rs, L)
 *             free_dble_2dmat(t_h_rs, L)
 *             free_dble_2dmat(popt.Z_rs, L)             # <<<<<<<<<<<<<<
 *             free_dble_3dmat(popt.sX_rs, L, n_rs)
 *         else:
 */
      __pyx_f_12fmsne_implem_free_dble_2dmat(__pyx_v_popt->Z_rs, __pyx_v_L);

      /* "fmsne_implem.pyx":3215
 *             free_dble_2dmat(t_h_rs, L)
 *             free_dble_2dmat(popt.Z_rs, L)
 *             free_dble_3dmat(popt.sX_rs, L, n_rs)             # <<<<<<<<<<<<<<
 *         else:
 *             PyMem_Free(p_h)
 */
      __pyx_f_12fmsne_implem_free_dble_3dmat(__pyx_v_popt->sX_rs, __pyx_v_L, __pyx_v_n_rs);

      /* "fmsne_implem.pyx":3211
 *         free_Pysst_2dmat(ij_dld, sLm_nt)
 *         free_dble_2dmat(dij_ld, sLm_nt)
 *         if fit_U:             # <<<<<<<<<<<<<<
 *             free_dble_2dmat(p_h_rs, L)
 *             free_dble_2dmat(t_h_rs, L)
 */
      goto __pyx_L37;
    }

    /* "fmsne_implem.pyx":3217
 *             free_dble_3dmat(popt.sX_rs, L, n_rs)
 *         else:
 *             PyMem_Free(p_h)             # <<<<<<<<<<<<<<
 *             PyMem_Free(t_h)
 *             PyMem_Free(popt.Z)
 */
    /*else*/ {
      PyMem_Free(__pyx_v_p_h);

      /* "fmsne_implem.pyx":3218
 *         else:
 *             PyMem_Free(p_h)
 *             PyMem_Free(t_h)             # <<<<<<<<<<<<<<
 *             PyMem_Free(popt.Z)
 *             free_dble_2dmat(popt.sX, L)
 */
      PyMem_Free(__pyx_v_t_h);

      /* "fmsne_implem.pyx":3219
 *             PyMem_Free(p_h)
 *             PyMem_Free(t_h)
 *             PyMem_Free(popt.Z)             # <<<<<<<<<<<<<<
 *             free_dble_2dmat(popt.sX, L)
 *         lbfgs_free(xopt)
 */
      PyMem_Free(__pyx_v_popt->Z);

      /* "fmsne_implem.pyx":3220
 *             PyMem_Free(t_h)
 *             PyMem_Free(popt.Z)
 *             free_dble_2dmat(popt.sX, L)             # <<<<<<<<<<<<<<
 *         lbfgs_free(xopt)
 *         PyMem_Free(popt.qdiff)
 */
      __pyx_f_12fmsne_implem_free_dble_2dmat(__pyx_v_popt->sX, __pyx_v_L);
    }
    __pyx_L37:;

    /* "fmsne_implem.pyx":3221
 *             PyMem_Free(popt.Z)
 *             free_dble_2dmat(popt.sX, L)
 *         lbfgs_free(xopt)             # <<<<<<<<<<<<<<
 *         PyMem_Free(popt.qdiff)
 *         PyMem_Free(popt)
 */
    lbfgs_free(__pyx_v_xopt);

    /* "fmsne_implem.pyx":3222
 *             free_dble_2dmat(popt.sX, L)
 *         lbfgs_free(xopt)
 *         PyMem_Free(popt.qdiff)             # <<<<<<<<<<<<<<
 *         PyMem_Free(popt)
 *         printf("Out of memory for popt.sa.\n")
 */
    PyMem_Free(__pyx_v_popt->qdiff);

    /* "fmsne_implem.pyx":3223
 *         lbfgs_free(xopt)
 *         PyMem_Free(popt.qdiff)
 *         PyMem_Free(popt)             # <<<<<<<<<<<<<<
 *         printf("Out of memory for popt.sa.\n")
 *         exit(EXIT_FAILURE)
 */
    PyMem_Free(__pyx_v_popt);

    /* "fmsne_implem.pyx":3224
 *         PyMem_Free(popt.qdiff)
 *         PyMem_Free(popt)
 *         printf("Out of memory for popt.sa.\n")             # <<<<<<<<<<<<<<
 *         exit(EXIT_FAILURE)
 * 
 */
    (void)(printf(((char const *)"Out of memory for popt.sa.\n")));

    /* "fmsne_implem.pyx":3225
 *         PyMem_Free(popt)
 *         printf("Out of memory for popt.sa.\n")
 *         exit(EXIT_FAILURE)             # <<<<<<<<<<<<<<
 * 
 *     popt.sah = <double*> PyMem_Malloc(L*sizeof(double))
 */
    exit(EXIT_FAILURE);

    /* "fmsne_implem.pyx":3200
 * 
 *     popt.sa = alloc_dble_2dmat(n_rs, L*N)
 *     if popt.sa is NULL:             # <<<<<<<<<<<<<<
 *         free_int_3dmat(arr_nn_i_rs, n_rs, N)
 *         free_int_2dmat(nnn_i_rs, n_rs)
 */
  }

  /* "fmsne_implem.pyx":3227
 *         exit(EXIT_FAILURE)
 * 
 *     popt.sah = <double*> PyMem_Malloc(L*sizeof(double))             # <<<<<<<<<<<<<<
 *     if popt.sah is NULL:
 *         free_int_3dmat(arr_nn_i_rs, n_rs, N)
 */
  __pyx_v_popt->sah = ((double *)PyMem_Malloc((__pyx_v_L * (sizeof(double)))));

  /* "fmsne_implem.pyx":3228
 * 
 *     popt.sah = <double*> PyMem_Malloc(L*sizeof(double))
 *     if popt.sah is NULL:             # <<<<<<<<<<<<<<
 *         free_int_3dmat(arr_nn_i_rs, n_rs, N)
 *         free_int_2dmat(nnn_i_rs, n_rs)
 */
  __pyx_t_1 = ((__pyx_v_popt->sah == NULL) != 0);
  if (__pyx_t_1) {

    /* "fmsne_implem.pyx":3229
 *     popt.sah = <double*> PyMem_Malloc(L*sizeof(double))
 *     if popt.sah is NULL:
 *         free_int_3dmat(arr_nn_i_rs, n_rs, N)             # <<<<<<<<<<<<<<
 *         free_int_2dmat(nnn_i_rs, n_rs)
 *         free_dble_3dmat(ds_nn_i_rs, n_rs, N)
 */
    __pyx_f_12fmsne_implem_free_int_3dmat(__pyx_v_arr_nn_i_rs, __pyx_v_n_rs, __pyx_v_N);

    /* "fmsne_implem.pyx":3230
 *     if popt.sah is NULL:
 *         free_int_3dmat(arr_nn_i_rs, n_rs, N)
 *         free_int_2dmat(nnn_i_rs, n_rs)             # <<<<<<<<<<<<<<
 *         free_dble_3dmat(ds_nn_i_rs, n_rs, N)
 *         free_dble_3dmat(simhd_ms_nn_i_rs, n_rs, N)
 */
    __pyx_f_12fmsne_implem_free_int_2dmat(__pyx_v_nnn_i_rs, __pyx_v_n_rs);

    /* "fmsne_implem.pyx":3231
 *         free_int_3dmat(arr_nn_i_rs, n_rs, N)
 *         free_int_2dmat(nnn_i_rs, n_rs)
 *         free_dble_3dmat(ds_nn_i_rs, n_rs, N)             # <<<<<<<<<<<<<<
 *         free_dble_3dmat(simhd_ms_nn_i_rs, n_rs, N)
 *         free_dble_3dmat(simhd_h_nn_i_rs, n_rs, N)
 */
    __pyx_f_12fmsne_implem_free_dble_3dmat(__pyx_v_ds_nn_i_rs, __pyx_v_n_rs, __pyx_v_N);

    /* "fmsne_implem.pyx":3232
 *         free_int_2dmat(nnn_i_rs, n_rs)
 *         free_dble_3dmat(ds_nn_i_rs, n_rs, N)
 *         free_dble_3dmat(simhd_ms_nn_i_rs, n_rs, N)             # <<<<<<<<<<<<<<
 *         free_dble_3dmat(simhd_h_nn_i_rs, n_rs, N)
 *         free_dble_3dmat(tau_h_i_rs, L, n_rs)
 */
    __pyx_f_12fmsne_implem_free_dble_3dmat(__pyx_v_simhd_ms_nn_i_rs, __pyx_v_n_rs, __pyx_v_N);

    /* "fmsne_implem.pyx":3233
 *         free_dble_3dmat(ds_nn_i_rs, n_rs, N)
 *         free_dble_3dmat(simhd_ms_nn_i_rs, n_rs, N)
 *         free_dble_3dmat(simhd_h_nn_i_rs, n_rs, N)             # <<<<<<<<<<<<<<
 *         free_dble_3dmat(tau_h_i_rs, L, n_rs)
 *         free_Pysst_3dmat(nn_i_rs_id_dld, n_rs, N)
 */
    __pyx_f_12fmsne_implem_free_dble_3dmat(__pyx_v_simhd_h_nn_i_rs, __pyx_v_n_rs, __pyx_v_N);

    /* "fmsne_implem.pyx":3234
 *         free_dble_3dmat(simhd_ms_nn_i_rs, n_rs, N)
 *         free_dble_3dmat(simhd_h_nn_i_rs, n_rs, N)
 *         free_dble_3dmat(tau_h_i_rs, L, n_rs)             # <<<<<<<<<<<<<<
 *         free_Pysst_3dmat(nn_i_rs_id_dld, n_rs, N)
 *         PyMem_Free(ni_dld)
 */
    __pyx_f_12fmsne_implem_free_dble_3dmat(__pyx_v_tau_h_i_rs, __pyx_v_L, __pyx_v_n_rs);

    /* "fmsne_implem.pyx":3235
 *         free_dble_3dmat(simhd_h_nn_i_rs, n_rs, N)
 *         free_dble_3dmat(tau_h_i_rs, L, n_rs)
 *         free_Pysst_3dmat(nn_i_rs_id_dld, n_rs, N)             # <<<<<<<<<<<<<<
 *         PyMem_Free(ni_dld)
 *         free_Pysst_2dmat(ij_dld, sLm_nt)
 */
    __pyx_f_12fmsne_implem_free_Pysst_3dmat(__pyx_v_nn_i_rs_id_dld, __pyx_v_n_rs, __pyx_v_N);

    /* "fmsne_implem.pyx":3236
 *         free_dble_3dmat(tau_h_i_rs, L, n_rs)
 *         free_Pysst_3dmat(nn_i_rs_id_dld, n_rs, N)
 *         PyMem_Free(ni_dld)             # <<<<<<<<<<<<<<
 *         free_Pysst_2dmat(ij_dld, sLm_nt)
 *         free_dble_2dmat(dij_ld, sLm_nt)
 */
    PyMem_Free(__pyx_v_ni_dld);

    /* "fmsne_implem.pyx":3237
 *         free_Pysst_3dmat(nn_i_rs_id_dld, n_rs, N)
 *         PyMem_Free(ni_dld)
 *         free_Pysst_2dmat(ij_dld, sLm_nt)             # <<<<<<<<<<<<<<
 *         free_dble_2dmat(dij_ld, sLm_nt)
 *         if fit_U:
 */
    __pyx_f_12fmsne_implem_free_Pysst_2dmat(__pyx_v_ij_dld, __pyx_v_sLm_nt);

    /* "fmsne_implem.pyx":3238
 *         PyMem_Free(ni_dld)
 *         free_Pysst_2dmat(ij_dld, sLm_nt)
 *         free_dble_2dmat(dij_ld, sLm_nt)             # <<<<<<<<<<<<<<
 *         if fit_U:
 *             free_dble_2dmat(p_h_rs, L)
 */
    __pyx_f_12fmsne_implem_free_dble_2dmat(__pyx_v_dij_ld, __pyx_v_sLm_nt);

    /* "fmsne_implem.pyx":3239
 *         free_Pysst_2dmat(ij_dld, sLm_nt)
 *         free_dble_2dmat(dij_ld, sLm_nt)
 *         if fit_U:             # <<<<<<<<<<<<<<
 *             free_dble_2dmat(p_h_rs, L)
 *             free_dble_2dmat(t_h_rs, L)
 */
    __pyx_t_1 = (__pyx_v_fit_U != 0);
    if (__pyx_t_1) {

      /* "fmsne_implem.pyx":3240
 *         free_dble_2dmat(dij_ld, sLm_nt)
 *         if fit_U:
 *             free_dble_2dmat(p_h_rs, L)             # <<<<<<<<<<<<<<
 *             free_dble_2dmat(t_h_rs, L)
 *             free_dble_2dmat(popt.Z_rs, L)
 */
      __pyx_f_12fmsne_implem_free_dble_2dmat(__pyx_v_p_h_rs, __pyx_v_L);

      /* "fmsne_implem.pyx":3241
 *         if fit_U:
 *             free_dble_2dmat(p_h_rs, L)
 *             free_dble_2dmat(t_h_rs, L)             # <<<<<<<<<<<<<<
 *             free_dble_2dmat(popt.Z_rs, L)
 *             free_dble_3dmat(popt.sX_rs, L, n_rs)
 */
      __pyx_f_12fmsne_implem_free_dble_2dmat(__pyx_v_t_h_rs, __pyx_v_L);

      /* "fmsne_implem.pyx":3242
 *             free_dble_2dmat(p_h_rs, L)
 *             free_dble_2dmat(t_h_rs, L)
 *             free_dble_2dmat(popt.Z_rs, L)             # <<<<<<<<<<<<<<
 *             free_dble_3dmat(popt.sX_rs, L, n_rs)
 *         else:
 */
      __pyx_f_12fmsne_implem_free_dble_2dmat(__pyx_v_popt->Z_rs, __pyx_v_L);

      /* "fmsne_implem.pyx":3243
 *             free_dble_2dmat(t_h_rs, L)
 *             free_dble_2dmat(popt.Z_rs, L)
 *             free_dble_3dmat(popt.sX_rs, L, n_rs)             # <<<<<<<<<<<<<<
 *         else:
 *             PyMem_Free(p_h)
 */
      __pyx_f_12fmsne_implem_free_dble_3dmat(__pyx_v_popt->sX_rs, __pyx_v_L, __pyx_v_n_rs);

      /* "fmsne_implem.pyx":3239
 *         free_Pysst_2dmat(ij_dld, sLm_nt)
 *         free_dble_2dmat(dij_ld, sLm_nt)
 *         if fit_U:             # <<<<<<<<<<<<<<
 *             free_dble_2dmat(p_h_rs, L)
 *             free_dble_2dmat(t_h_rs, L)
 */
      goto __pyx_L39;
    }

    /* "fmsne_implem.pyx":3245
 *             free_dble_3dmat(popt.sX_rs, L, n_rs)
 *         else:
 *             PyMem_Free(p_h)             # <<<<<<<<<<<<<<
 *             PyMem_Free(t_h)
 *             PyMem_Free(popt.Z)
 */
    /*else*/ {
      PyMem_Free(__pyx_v_p_h);

      /* "fmsne_implem.pyx":3246
 *         else:
 *             PyMem_Free(p_h)
 *             PyMem_Free(t_h)             # <<<<<<<<<<<<<<
 *             PyMem_Free(popt.Z)
 *             free_dble_2dmat(popt.sX, L)
 */
      PyMem_Free(__pyx_v_t_h);

      /* "fmsne_implem.pyx":3247
 *             PyMem_Free(p_h)
 *             PyMem_Free(t_h)
 *             PyMem_Free(popt.Z)             # <<<<<<<<<<<<<<
 *             free_dble_2dmat(popt.sX, L)
 *         lbfgs_free(xopt)
 */
      PyMem_Free(__pyx_v_popt->Z);

      /* "fmsne_implem.pyx":3248
 *             PyMem_Free(t_h)
 *             PyMem_Free(popt.Z)
 *             free_dble_2dmat(popt.sX, L)             # <<<<<<<<<<<<<<
 *         lbfgs_free(xopt)
 *         PyMem_Free(popt.qdiff)
 */
      __pyx_f_12fmsne_implem_free_dble_2dmat(__pyx_v_popt->sX, __pyx_v_L);
    }
    __pyx_L39:;

    /* "fmsne_implem.pyx":3249
 *             PyMem_Free(popt.Z)
 *             free_dble_2dmat(popt.sX, L)
 *         lbfgs_free(xopt)             # <<<<<<<<<<<<<<
 *         PyMem_Free(popt.qdiff)
 *         free_dble_2dmat(popt.sa, n_rs)
 */
    lbfgs_free(__pyx_v_xopt);

    /* "fmsne_implem.pyx":3250
 *             free_dble_2dmat(popt.sX, L)
 *         lbfgs_free(xopt)
 *         PyMem_Free(popt.qdiff)             # <<<<<<<<<<<<<<
 *         free_dble_2dmat(popt.sa, n_rs)
 *         PyMem_Free(popt)
 */
    PyMem_Free(__pyx_v_popt->qdiff);

    /* "fmsne_implem.pyx":3251
 *         lbfgs_free(xopt)
 *         PyMem_Free(popt.qdiff)
 *         free_dble_2dmat(popt.sa, n_rs)             # <<<<<<<<<<<<<<
 *         PyMem_Free(popt)
 *         printf("Out of memory for popt.sah.\n")
 */
    __pyx_f_12fmsne_implem_free_dble_2dmat(__pyx_v_popt->sa, __pyx_v_n_rs);

    /* "fmsne_implem.pyx":3252
 *         PyMem_Free(popt.qdiff)
 *         free_dble_2dmat(popt.sa, n_rs)
 *         PyMem_Free(popt)             # <<<<<<<<<<<<<<
 *         printf("Out of memory for popt.sah.\n")
 *         exit(EXIT_FAILURE)
 */
    PyMem_Free(__pyx_v_popt);

    /* "fmsne_implem.pyx":3253
 *         free_dble_2dmat(popt.sa, n_rs)
 *         PyMem_Free(popt)
 *         printf("Out of memory for popt.sah.\n")             # <<<<<<<<<<<<<<
 *         exit(EXIT_FAILURE)
 * 
 */
    (void)(printf(((char const *)"Out of memory for popt.sah.\n")));

    /* "fmsne_implem.pyx":3254
 *         PyMem_Free(popt)
 *         printf("Out of memory for popt.sah.\n")
 *         exit(EXIT_FAILURE)             # <<<<<<<<<<<<<<
 * 
 *     # Parameters of the L-BFGS optimization
 */
    exit(EXIT_FAILURE);

    /* "fmsne_implem.pyx":3228
 * 
 *     popt.sah = <double*> PyMem_Malloc(L*sizeof(double))
 *     if popt.sah is NULL:             # <<<<<<<<<<<<<<
 *         free_int_3dmat(arr_nn_i_rs, n_rs, N)
 *         free_int_2dmat(nnn_i_rs, n_rs)
 */
  }

  /* "fmsne_implem.pyx":3258
 *     # Parameters of the L-BFGS optimization
 *     cdef lbfgs_parameter_t param
 *     cdef lbfgs_parameter_t* pparam = &param             # <<<<<<<<<<<<<<
 *     # Initializing param with default values
 *     lbfgs_parameter_init(pparam)
 */
  __pyx_v_pparam = (&__pyx_v_param);

  /* "fmsne_implem.pyx":3260
 *     cdef lbfgs_parameter_t* pparam = &param
 *     # Initializing param with default values
 *     lbfgs_parameter_init(pparam)             # <<<<<<<<<<<<<<
 *     # Updating some parameters
 *     param.m = maxcor
 */
  lbfgs_parameter_init(__pyx_v_pparam);

  /* "fmsne_implem.pyx":3262
 *     lbfgs_parameter_init(pparam)
 *     # Updating some parameters
 *     param.m = maxcor             # <<<<<<<<<<<<<<
 *     param.epsilon = gtol
 *     param.delta = ftol
 */
  __pyx_v_param.m = __pyx_v_maxcor;

  /* "fmsne_implem.pyx":3263
 *     # Updating some parameters
 *     param.m = maxcor
 *     param.epsilon = gtol             # <<<<<<<<<<<<<<
 *     param.delta = ftol
 *     param.max_iterations = nit_max
 */
  __pyx_v_param.epsilon = __pyx_v_gtol;

  /* "fmsne_implem.pyx":3264
 *     param.m = maxcor
 *     param.epsilon = gtol
 *     param.delta = ftol             # <<<<<<<<<<<<<<
 *     param.max_iterations = nit_max
 *     param.max_linesearch = maxls
 */
  __pyx_v_param.delta = __pyx_v_ftol;

  /* "fmsne_implem.pyx":3265
 *     param.epsilon = gtol
 *     param.delta = ftol
 *     param.max_iterations = nit_max             # <<<<<<<<<<<<<<
 *     param.max_linesearch = maxls
 *     param.past = 1
 */
  __pyx_v_param.max_iterations = __pyx_v_nit_max;

  /* "fmsne_implem.pyx":3266
 *     param.delta = ftol
 *     param.max_iterations = nit_max
 *     param.max_linesearch = maxls             # <<<<<<<<<<<<<<
 *     param.past = 1
 *     # We modify the default values of the minimum and maximum step
 */
  __pyx_v_param.max_linesearch = __pyx_v_maxls;

  /* "fmsne_implem.pyx":3267
 *     param.max_iterations = nit_max
 *     param.max_linesearch = maxls
 *     param.past = 1             # <<<<<<<<<<<<<<
 *     # We modify the default values of the minimum and maximum step
 *     # sizes of the line search because the problem is badly scaled
 */
  __pyx_v_param.past = 1;

  /* "fmsne_implem.pyx":3270
 *     # We modify the default values of the minimum and maximum step
 *     # sizes of the line search because the problem is badly scaled
 *     param.max_step = DBL_MAX             # <<<<<<<<<<<<<<
 *     param.min_step = DBL_MIN
 * 
 */
  __pyx_v_param.max_step = DBL_MAX;

  /* "fmsne_implem.pyx":3271
 *     # sizes of the line search because the problem is badly scaled
 *     param.max_step = DBL_MAX
 *     param.min_step = DBL_MIN             # <<<<<<<<<<<<<<
 * 
 *     # Will update the number of supplementary attributes in the
 */
  __pyx_v_param.min_step = DBL_MIN;

  /* "fmsne_implem.pyx":3276
 *     # space-partitioning tree, which is augmenting with the number of
 *     # scales which are considered
 *     K_star = N*sizeof(double)             # <<<<<<<<<<<<<<
 *     # k refers to the number of currently considered scales and h to
 *     # the index of the current scale. Nd will store the inverse of
 */
  __pyx_v_K_star = (__pyx_v_N * (sizeof(double)));

  /* "fmsne_implem.pyx":3282
 * 
 *     cdef Py_ssize_t k, h
 *     h = L-1             # <<<<<<<<<<<<<<
 *     for k in range(1, L+1, 1):
 *         # Updates related to the current multi-scale optimization step
 */
  __pyx_v_h = (__pyx_v_L - 1);

  /* "fmsne_implem.pyx":3283
 *     cdef Py_ssize_t k, h
 *     h = L-1
 *     for k in range(1, L+1, 1):             # <<<<<<<<<<<<<<
 *         # Updates related to the current multi-scale optimization step
 *         Nd = f_update_mso_step(k, h, n_rs, N, nnn_i_rs, ds_nn_i_rs, tau_h_i_rs, simhd_ms_nn_i_rs, simhd_h_nn_i_rs)
 */
  __pyx_t_3 = (__pyx_v_L + 1);
  __pyx_t_4 = __pyx_t_3;
  for (__pyx_t_5 = 1; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
    __pyx_v_k = __pyx_t_5;

    /* "fmsne_implem.pyx":3285
 *     for k in range(1, L+1, 1):
 *         # Updates related to the current multi-scale optimization step
 *         Nd = f_update_mso_step(k, h, n_rs, N, nnn_i_rs, ds_nn_i_rs, tau_h_i_rs, simhd_ms_nn_i_rs, simhd_h_nn_i_rs)             # <<<<<<<<<<<<<<
 *         # Updating the data structure to evaluate the cost function and the gradient
 *         popt.ns = k
 */
    __pyx_v_Nd = __pyx_f_12fmsne_implem_f_update_mso_step(__pyx_v_k, __pyx_v_h, __pyx_v_n_rs, __pyx_v_N, __pyx_v_nnn_i_rs, __pyx_v_ds_nn_i_rs, __pyx_v_tau_h_i_rs, __pyx_v_simhd_ms_nn_i_rs, __pyx_v_simhd_h_nn_i_rs);

    /* "fmsne_implem.pyx":3287
 *         Nd = f_update_mso_step(k, h, n_rs, N, nnn_i_rs, ds_nn_i_rs, tau_h_i_rs, simhd_ms_nn_i_rs, simhd_h_nn_i_rs)
 *         # Updating the data structure to evaluate the cost function and the gradient
 *         popt.ns = k             # <<<<<<<<<<<<<<
 *         popt.inv_ns = Nd
 *         popt.inv_nsrs = Nd*popt.inv_n_rs_f
 */
    __pyx_v_popt->ns = __pyx_v_k;

    /* "fmsne_implem.pyx":3288
 *         # Updating the data structure to evaluate the cost function and the gradient
 *         popt.ns = k
 *         popt.inv_ns = Nd             # <<<<<<<<<<<<<<
 *         popt.inv_nsrs = Nd*popt.inv_n_rs_f
 *         if fit_U:
 */
    __pyx_v_popt->inv_ns = __pyx_v_Nd;

    /* "fmsne_implem.pyx":3289
 *         popt.ns = k
 *         popt.inv_ns = Nd
 *         popt.inv_nsrs = Nd*popt.inv_n_rs_f             # <<<<<<<<<<<<<<
 *         if fit_U:
 *             popt.p_h_rs = &p_h_rs[h]
 */
    __pyx_v_popt->inv_nsrs = (__pyx_v_Nd * __pyx_v_popt->inv_n_rs_f);

    /* "fmsne_implem.pyx":3290
 *         popt.inv_ns = Nd
 *         popt.inv_nsrs = Nd*popt.inv_n_rs_f
 *         if fit_U:             # <<<<<<<<<<<<<<
 *             popt.p_h_rs = &p_h_rs[h]
 *             popt.t_h_rs = &t_h_rs[h]
 */
    __pyx_t_1 = (__pyx_v_fit_U != 0);
    if (__pyx_t_1) {

      /* "fmsne_implem.pyx":3291
 *         popt.inv_nsrs = Nd*popt.inv_n_rs_f
 *         if fit_U:
 *             popt.p_h_rs = &p_h_rs[h]             # <<<<<<<<<<<<<<
 *             popt.t_h_rs = &t_h_rs[h]
 *         else:
 */
      __pyx_v_popt->p_h_rs = (&(__pyx_v_p_h_rs[__pyx_v_h]));

      /* "fmsne_implem.pyx":3292
 *         if fit_U:
 *             popt.p_h_rs = &p_h_rs[h]
 *             popt.t_h_rs = &t_h_rs[h]             # <<<<<<<<<<<<<<
 *         else:
 *             popt.p_h = &p_h[h]
 */
      __pyx_v_popt->t_h_rs = (&(__pyx_v_t_h_rs[__pyx_v_h]));

      /* "fmsne_implem.pyx":3290
 *         popt.inv_ns = Nd
 *         popt.inv_nsrs = Nd*popt.inv_n_rs_f
 *         if fit_U:             # <<<<<<<<<<<<<<
 *             popt.p_h_rs = &p_h_rs[h]
 *             popt.t_h_rs = &t_h_rs[h]
 */
      goto __pyx_L42;
    }

    /* "fmsne_implem.pyx":3294
 *             popt.t_h_rs = &t_h_rs[h]
 *         else:
 *             popt.p_h = &p_h[h]             # <<<<<<<<<<<<<<
 *             popt.t_h = &t_h[h]
 *         popt.sbsa += K_star
 */
    /*else*/ {
      __pyx_v_popt->p_h = (&(__pyx_v_p_h[__pyx_v_h]));

      /* "fmsne_implem.pyx":3295
 *         else:
 *             popt.p_h = &p_h[h]
 *             popt.t_h = &t_h[h]             # <<<<<<<<<<<<<<
 *         popt.sbsa += K_star
 *         # Performing the optimization
 */
      __pyx_v_popt->t_h = (&(__pyx_v_t_h[__pyx_v_h]));
    }
    __pyx_L42:;

    /* "fmsne_implem.pyx":3296
 *             popt.p_h = &p_h[h]
 *             popt.t_h = &t_h[h]
 *         popt.sbsa += K_star             # <<<<<<<<<<<<<<
 *         # Performing the optimization
 *         lbfgs(prod_N_nc, xopt, NULL, fmssne_evaluate, NULL, popt, pparam)
 */
    __pyx_v_popt->sbsa = (__pyx_v_popt->sbsa + __pyx_v_K_star);

    /* "fmsne_implem.pyx":3298
 *         popt.sbsa += K_star
 *         # Performing the optimization
 *         lbfgs(prod_N_nc, xopt, NULL, fmssne_evaluate, NULL, popt, pparam)             # <<<<<<<<<<<<<<
 *         h -= 1
 * 
 */
    (void)(lbfgs(__pyx_v_prod_N_nc, __pyx_v_xopt, NULL, __pyx_f_12fmsne_implem_fmssne_evaluate, NULL, __pyx_v_popt, __pyx_v_pparam));

    /* "fmsne_implem.pyx":3299
 *         # Performing the optimization
 *         lbfgs(prod_N_nc, xopt, NULL, fmssne_evaluate, NULL, popt, pparam)
 *         h -= 1             # <<<<<<<<<<<<<<
 * 
 *     # Gathering the optimized LD coordinates
 */
    __pyx_v_h = (__pyx_v_h - 1);
  }

  /* "fmsne_implem.pyx":3302
 * 
 *     # Gathering the optimized LD coordinates
 *     memcpy(xlds, xopt, shdp)             # <<<<<<<<<<<<<<
 * 
 *     # Free the ressources
 */
  (void)(memcpy(__pyx_v_xlds, __pyx_v_xopt, __pyx_v_shdp));

  /* "fmsne_implem.pyx":3305
 * 
 *     # Free the ressources
 *     free_int_3dmat(arr_nn_i_rs, n_rs, N)             # <<<<<<<<<<<<<<
 *     free_int_2dmat(nnn_i_rs, n_rs)
 *     free_dble_3dmat(ds_nn_i_rs, n_rs, N)
 */
  __pyx_f_12fmsne_implem_free_int_3dmat(__pyx_v_arr_nn_i_rs, __pyx_v_n_rs, __pyx_v_N);

  /* "fmsne_implem.pyx":3306
 *     # Free the ressources
 *     free_int_3dmat(arr_nn_i_rs, n_rs, N)
 *     free_int_2dmat(nnn_i_rs, n_rs)             # <<<<<<<<<<<<<<
 *     free_dble_3dmat(ds_nn_i_rs, n_rs, N)
 *     free_dble_3dmat(simhd_ms_nn_i_rs, n_rs, N)
 */
  __pyx_f_12fmsne_implem_free_int_2dmat(__pyx_v_nnn_i_rs, __pyx_v_n_rs);

  /* "fmsne_implem.pyx":3307
 *     free_int_3dmat(arr_nn_i_rs, n_rs, N)
 *     free_int_2dmat(nnn_i_rs, n_rs)
 *     free_dble_3dmat(ds_nn_i_rs, n_rs, N)             # <<<<<<<<<<<<<<
 *     free_dble_3dmat(simhd_ms_nn_i_rs, n_rs, N)
 *     free_dble_3dmat(simhd_h_nn_i_rs, n_rs, N)
 */
  __pyx_f_12fmsne_implem_free_dble_3dmat(__pyx_v_ds_nn_i_rs, __pyx_v_n_rs, __pyx_v_N);

  /* "fmsne_implem.pyx":3308
 *     free_int_2dmat(nnn_i_rs, n_rs)
 *     free_dble_3dmat(ds_nn_i_rs, n_rs, N)
 *     free_dble_3dmat(simhd_ms_nn_i_rs, n_rs, N)             # <<<<<<<<<<<<<<
 *     free_dble_3dmat(simhd_h_nn_i_rs, n_rs, N)
 *     free_dble_3dmat(tau_h_i_rs, L, n_rs)
 */
  __pyx_f_12fmsne_implem_free_dble_3dmat(__pyx_v_simhd_ms_nn_i_rs, __pyx_v_n_rs, __pyx_v_N);

  /* "fmsne_implem.pyx":3309
 *     free_dble_3dmat(ds_nn_i_rs, n_rs, N)
 *     free_dble_3dmat(simhd_ms_nn_i_rs, n_rs, N)
 *     free_dble_3dmat(simhd_h_nn_i_rs, n_rs, N)             # <<<<<<<<<<<<<<
 *     free_dble_3dmat(tau_h_i_rs, L, n_rs)
 *     free_Pysst_3dmat(nn_i_rs_id_dld, n_rs, N)
 */
  __pyx_f_12fmsne_implem_free_dble_3dmat(__pyx_v_simhd_h_nn_i_rs, __pyx_v_n_rs, __pyx_v_N);

  /* "fmsne_implem.pyx":3310
 *     free_dble_3dmat(simhd_ms_nn_i_rs, n_rs, N)
 *     free_dble_3dmat(simhd_h_nn_i_rs, n_rs, N)
 *     free_dble_3dmat(tau_h_i_rs, L, n_rs)             # <<<<<<<<<<<<<<
 *     free_Pysst_3dmat(nn_i_rs_id_dld, n_rs, N)
 *     PyMem_Free(ni_dld)
 */
  __pyx_f_12fmsne_implem_free_dble_3dmat(__pyx_v_tau_h_i_rs, __pyx_v_L, __pyx_v_n_rs);

  /* "fmsne_implem.pyx":3311
 *     free_dble_3dmat(simhd_h_nn_i_rs, n_rs, N)
 *     free_dble_3dmat(tau_h_i_rs, L, n_rs)
 *     free_Pysst_3dmat(nn_i_rs_id_dld, n_rs, N)             # <<<<<<<<<<<<<<
 *     PyMem_Free(ni_dld)
 *     free_Pysst_2dmat(ij_dld, sLm_nt)
 */
  __pyx_f_12fmsne_implem_free_Pysst_3dmat(__pyx_v_nn_i_rs_id_dld, __pyx_v_n_rs, __pyx_v_N);

  /* "fmsne_implem.pyx":3312
 *     free_dble_3dmat(tau_h_i_rs, L, n_rs)
 *     free_Pysst_3dmat(nn_i_rs_id_dld, n_rs, N)
 *     PyMem_Free(ni_dld)             # <<<<<<<<<<<<<<
 *     free_Pysst_2dmat(ij_dld, sLm_nt)
 *     free_dble_2dmat(dij_ld, sLm_nt)
 */
  PyMem_Free(__pyx_v_ni_dld);

  /* "fmsne_implem.pyx":3313
 *     free_Pysst_3dmat(nn_i_rs_id_dld, n_rs, N)
 *     PyMem_Free(ni_dld)
 *     free_Pysst_2dmat(ij_dld, sLm_nt)             # <<<<<<<<<<<<<<
 *     free_dble_2dmat(dij_ld, sLm_nt)
 *     if fit_U:
 */
  __pyx_f_12fmsne_implem_free_Pysst_2dmat(__pyx_v_ij_dld, __pyx_v_sLm_nt);

  /* "fmsne_implem.pyx":3314
 *     PyMem_Free(ni_dld)
 *     free_Pysst_2dmat(ij_dld, sLm_nt)
 *     free_dble_2dmat(dij_ld, sLm_nt)             # <<<<<<<<<<<<<<
 *     if fit_U:
 *         free_dble_2dmat(p_h_rs, L)
 */
  __pyx_f_12fmsne_implem_free_dble_2dmat(__pyx_v_dij_ld, __pyx_v_sLm_nt);

  /* "fmsne_implem.pyx":3315
 *     free_Pysst_2dmat(ij_dld, sLm_nt)
 *     free_dble_2dmat(dij_ld, sLm_nt)
 *     if fit_U:             # <<<<<<<<<<<<<<
 *         free_dble_2dmat(p_h_rs, L)
 *         free_dble_2dmat(t_h_rs, L)
 */
  __pyx_t_1 = (__pyx_v_fit_U != 0);
  if (__pyx_t_1) {

    /* "fmsne_implem.pyx":3316
 *     free_dble_2dmat(dij_ld, sLm_nt)
 *     if fit_U:
 *         free_dble_2dmat(p_h_rs, L)             # <<<<<<<<<<<<<<
 *         free_dble_2dmat(t_h_rs, L)
 *         free_dble_2dmat(popt.Z_rs, L)
 */
    __pyx_f_12fmsne_implem_free_dble_2dmat(__pyx_v_p_h_rs, __pyx_v_L);

    /* "fmsne_implem.pyx":3317
 *     if fit_U:
 *         free_dble_2dmat(p_h_rs, L)
 *         free_dble_2dmat(t_h_rs, L)             # <<<<<<<<<<<<<<
 *         free_dble_2dmat(popt.Z_rs, L)
 *         free_dble_3dmat(popt.sX_rs, L, n_rs)
 */
    __pyx_f_12fmsne_implem_free_dble_2dmat(__pyx_v_t_h_rs, __pyx_v_L);

    /* "fmsne_implem.pyx":3318
 *         free_dble_2dmat(p_h_rs, L)
 *         free_dble_2dmat(t_h_rs, L)
 *         free_dble_2dmat(popt.Z_rs, L)             # <<<<<<<<<<<<<<
 *         free_dble_3dmat(popt.sX_rs, L, n_rs)
 *     else:
 */
    __pyx_f_12fmsne_implem_free_dble_2dmat(__pyx_v_popt->Z_rs, __pyx_v_L);

    /* "fmsne_implem.pyx":3319
 *         free_dble_2dmat(t_h_rs, L)
 *         free_dble_2dmat(popt.Z_rs, L)
 *         free_dble_3dmat(popt.sX_rs, L, n_rs)             # <<<<<<<<<<<<<<
 *     else:
 *         PyMem_Free(p_h)
 */
    __pyx_f_12fmsne_implem_free_dble_3dmat(__pyx_v_popt->sX_rs, __pyx_v_L, __pyx_v_n_rs);

    /* "fmsne_implem.pyx":3315
 *     free_Pysst_2dmat(ij_dld, sLm_nt)
 *     free_dble_2dmat(dij_ld, sLm_nt)
 *     if fit_U:             # <<<<<<<<<<<<<<
 *         free_dble_2dmat(p_h_rs, L)
 *         free_dble_2dmat(t_h_rs, L)
 */
    goto __pyx_L43;
  }

  /* "fmsne_implem.pyx":3321
 *         free_dble_3dmat(popt.sX_rs, L, n_rs)
 *     else:
 *         PyMem_Free(p_h)             # <<<<<<<<<<<<<<
 *         PyMem_Free(t_h)
 *         PyMem_Free(popt.Z)
 */
  /*else*/ {
    PyMem_Free(__pyx_v_p_h);

    /* "fmsne_implem.pyx":3322
 *     else:
 *         PyMem_Free(p_h)
 *         PyMem_Free(t_h)             # <<<<<<<<<<<<<<
 *         PyMem_Free(popt.Z)
 *         free_dble_2dmat(popt.sX, L)
 */
    PyMem_Free(__pyx_v_t_h);

    /* "fmsne_implem.pyx":3323
 *         PyMem_Free(p_h)
 *         PyMem_Free(t_h)
 *         PyMem_Free(popt.Z)             # <<<<<<<<<<<<<<
 *         free_dble_2dmat(popt.sX, L)
 *     lbfgs_free(xopt)
 */
    PyMem_Free(__pyx_v_popt->Z);

    /* "fmsne_implem.pyx":3324
 *         PyMem_Free(t_h)
 *         PyMem_Free(popt.Z)
 *         free_dble_2dmat(popt.sX, L)             # <<<<<<<<<<<<<<
 *     lbfgs_free(xopt)
 *     PyMem_Free(popt.qdiff)
 */
    __pyx_f_12fmsne_implem_free_dble_2dmat(__pyx_v_popt->sX, __pyx_v_L);
  }
  __pyx_L43:;

  /* "fmsne_implem.pyx":3325
 *         PyMem_Free(popt.Z)
 *         free_dble_2dmat(popt.sX, L)
 *     lbfgs_free(xopt)             # <<<<<<<<<<<<<<
 *     PyMem_Free(popt.qdiff)
 *     free_dble_2dmat(popt.sa, n_rs)
 */
  lbfgs_free(__pyx_v_xopt);

  /* "fmsne_implem.pyx":3326
 *         free_dble_2dmat(popt.sX, L)
 *     lbfgs_free(xopt)
 *     PyMem_Free(popt.qdiff)             # <<<<<<<<<<<<<<
 *     free_dble_2dmat(popt.sa, n_rs)
 *     PyMem_Free(popt.sah)
 */
  PyMem_Free(__pyx_v_popt->qdiff);

  /* "fmsne_implem.pyx":3327
 *     lbfgs_free(xopt)
 *     PyMem_Free(popt.qdiff)
 *     free_dble_2dmat(popt.sa, n_rs)             # <<<<<<<<<<<<<<
 *     PyMem_Free(popt.sah)
 *     PyMem_Free(popt)
 */
  __pyx_f_12fmsne_implem_free_dble_2dmat(__pyx_v_popt->sa, __pyx_v_n_rs);

  /* "fmsne_implem.pyx":3328
 *     PyMem_Free(popt.qdiff)
 *     free_dble_2dmat(popt.sa, n_rs)
 *     PyMem_Free(popt.sah)             # <<<<<<<<<<<<<<
 *     PyMem_Free(popt)
 * 
 */
  PyMem_Free(__pyx_v_popt->sah);

  /* "fmsne_implem.pyx":3329
 *     free_dble_2dmat(popt.sa, n_rs)
 *     PyMem_Free(popt.sah)
 *     PyMem_Free(popt)             # <<<<<<<<<<<<<<
 * 
 * #######################################################
 */
  PyMem_Free(__pyx_v_popt);

  /* "fmsne_implem.pyx":2696
 *     return fx*popt.inv_n_rs_f
 * 
 * cpdef inline void fmssne_implem(double[::1] X_hds, double[::1] X_lds, int N, int d_hds, int n_components, bint cperp, int n_rs, bint fit_U, double ms_thetha, int nit_max, double gtol, double ftol, int maxls, int maxcor, int L_min, int rseed, bint sym_nn):             # <<<<<<<<<<<<<<
 *     """
 *     Cython implementation of Fast Multi-scale SNE.
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* Python wrapper */
static PyObject *__pyx_pw_12fmsne_implem_5fmssne_implem(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12fmsne_implem_4fmssne_implem[] = "\n    Cython implementation of Fast Multi-scale SNE.\n    L_min is provided in argument.\n    X_hds and X_lds must both be in a 1d array\n    sym_nn: Whether to use symmetric neighbor sets or not\n    ";
static PyObject *__pyx_pw_12fmsne_implem_5fmssne_implem(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  __Pyx_memviewslice __pyx_v_X_hds = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_X_lds = { 0, 0, { 0 }, { 0 }, { 0 } };
  int __pyx_v_N;
  int __pyx_v_d_hds;
  int __pyx_v_n_components;
  int __pyx_v_cperp;
  int __pyx_v_n_rs;
  int __pyx_v_fit_U;
  double __pyx_v_ms_thetha;
  int __pyx_v_nit_max;
  double __pyx_v_gtol;
  double __pyx_v_ftol;
  int __pyx_v_maxls;
  int __pyx_v_maxcor;
  int __pyx_v_L_min;
  int __pyx_v_rseed;
  int __pyx_v_sym_nn;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("fmssne_implem (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_X_hds,&__pyx_n_s_X_lds,&__pyx_n_s_N,&__pyx_n_s_d_hds,&__pyx_n_s_n_components,&__pyx_n_s_cperp,&__pyx_n_s_n_rs,&__pyx_n_s_fit_U,&__pyx_n_s_ms_thetha,&__pyx_n_s_nit_max,&__pyx_n_s_gtol,&__pyx_n_s_ftol,&__pyx_n_s_maxls,&__pyx_n_s_maxcor,&__pyx_n_s_L_min,&__pyx_n_s_rseed,&__pyx_n_s_sym_nn,0};
    PyObject* values[17] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case 17: values[16] = PyTuple_GET_ITEM(__pyx_args, 16);
        CYTHON_FALLTHROUGH;
        case 16: values[15] = PyTuple_GET_ITEM(__pyx_args, 15);
        CYTHON_FALLTHROUGH;
        case 15: values[14] = PyTuple_GET_ITEM(__pyx_args, 14);
        CYTHON_FALLTHROUGH;
        case 14: values[13] = PyTuple_GET_ITEM(__pyx_args, 13);
        CYTHON_FALLTHROUGH;
        case 13: values[12] = PyTuple_GET_ITEM(__pyx_args, 12);
        CYTHON_FALLTHROUGH;
        case 12: values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
        CYTHON_FALLTHROUGH;
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        CYTHON_FALLTHROUGH;
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        CYTHON_FALLTHROUGH;
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_X_hds)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_X_lds)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("fmssne_implem", 1, 17, 17, 1); __PYX_ERR(0, 2696, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_N)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("fmssne_implem", 1, 17, 17, 2); __PYX_ERR(0, 2696, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_d_hds)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("fmssne_implem", 1, 17, 17, 3); __PYX_ERR(0, 2696, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_n_components)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("fmssne_implem", 1, 17, 17, 4); __PYX_ERR(0, 2696, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_cperp)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("fmssne_implem", 1, 17, 17, 5); __PYX_ERR(0, 2696, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (likely((values[6] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_n_rs)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("fmssne_implem", 1, 17, 17, 6); __PYX_ERR(0, 2696, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (likely((values[7] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_fit_U)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("fmssne_implem", 1, 17, 17, 7); __PYX_ERR(0, 2696, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  8:
        if (likely((values[8] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ms_thetha)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("fmssne_implem", 1, 17, 17, 8); __PYX_ERR(0, 2696, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  9:
        if (likely((values[9] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_nit_max)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("fmssne_implem", 1, 17, 17, 9); __PYX_ERR(0, 2696, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 10:
        if (likely((values[10] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_gtol)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("fmssne_implem", 1, 17, 17, 10); __PYX_ERR(0, 2696, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 11:
        if (likely((values[11] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ftol)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("fmssne_implem", 1, 17, 17, 11); __PYX_ERR(0, 2696, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 12:
        if (likely((values[12] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_maxls)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("fmssne_implem", 1, 17, 17, 12); __PYX_ERR(0, 2696, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 13:
        if (likely((values[13] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_maxcor)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("fmssne_implem", 1, 17, 17, 13); __PYX_ERR(0, 2696, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 14:
        if (likely((values[14] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_L_min)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("fmssne_implem", 1, 17, 17, 14); __PYX_ERR(0, 2696, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 15:
        if (likely((values[15] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_rseed)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("fmssne_implem", 1, 17, 17, 15); __PYX_ERR(0, 2696, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 16:
        if (likely((values[16] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_sym_nn)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("fmssne_implem", 1, 17, 17, 16); __PYX_ERR(0, 2696, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "fmssne_implem") < 0)) __PYX_ERR(0, 2696, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 17) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
      values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
      values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
      values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
      values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
      values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
      values[12] = PyTuple_GET_ITEM(__pyx_args, 12);
      values[13] = PyTuple_GET_ITEM(__pyx_args, 13);
      values[14] = PyTuple_GET_ITEM(__pyx_args, 14);
      values[15] = PyTuple_GET_ITEM(__pyx_args, 15);
      values[16] = PyTuple_GET_ITEM(__pyx_args, 16);
    }
    __pyx_v_X_hds = __Pyx_PyObject_to_MemoryviewSlice_dc_double(values[0], PyBUF_WRITABLE); if (unlikely(!__pyx_v_X_hds.memview)) __PYX_ERR(0, 2696, __pyx_L3_error)
    __pyx_v_X_lds = __Pyx_PyObject_to_MemoryviewSlice_dc_double(values[1], PyBUF_WRITABLE); if (unlikely(!__pyx_v_X_lds.memview)) __PYX_ERR(0, 2696, __pyx_L3_error)
    __pyx_v_N = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_N == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 2696, __pyx_L3_error)
    __pyx_v_d_hds = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_d_hds == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 2696, __pyx_L3_error)
    __pyx_v_n_components = __Pyx_PyInt_As_int(values[4]); if (unlikely((__pyx_v_n_components == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 2696, __pyx_L3_error)
    __pyx_v_cperp = __Pyx_PyObject_IsTrue(values[5]); if (unlikely((__pyx_v_cperp == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 2696, __pyx_L3_error)
    __pyx_v_n_rs = __Pyx_PyInt_As_int(values[6]); if (unlikely((__pyx_v_n_rs == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 2696, __pyx_L3_error)
    __pyx_v_fit_U = __Pyx_PyObject_IsTrue(values[7]); if (unlikely((__pyx_v_fit_U == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 2696, __pyx_L3_error)
    __pyx_v_ms_thetha = __pyx_PyFloat_AsDouble(values[8]); if (unlikely((__pyx_v_ms_thetha == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 2696, __pyx_L3_error)
    __pyx_v_nit_max = __Pyx_PyInt_As_int(values[9]); if (unlikely((__pyx_v_nit_max == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 2696, __pyx_L3_error)
    __pyx_v_gtol = __pyx_PyFloat_AsDouble(values[10]); if (unlikely((__pyx_v_gtol == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 2696, __pyx_L3_error)
    __pyx_v_ftol = __pyx_PyFloat_AsDouble(values[11]); if (unlikely((__pyx_v_ftol == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 2696, __pyx_L3_error)
    __pyx_v_maxls = __Pyx_PyInt_As_int(values[12]); if (unlikely((__pyx_v_maxls == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 2696, __pyx_L3_error)
    __pyx_v_maxcor = __Pyx_PyInt_As_int(values[13]); if (unlikely((__pyx_v_maxcor == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 2696, __pyx_L3_error)
    __pyx_v_L_min = __Pyx_PyInt_As_int(values[14]); if (unlikely((__pyx_v_L_min == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 2696, __pyx_L3_error)
    __pyx_v_rseed = __Pyx_PyInt_As_int(values[15]); if (unlikely((__pyx_v_rseed == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 2696, __pyx_L3_error)
    __pyx_v_sym_nn = __Pyx_PyObject_IsTrue(values[16]); if (unlikely((__pyx_v_sym_nn == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 2696, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("fmssne_implem", 1, 17, 17, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 2696, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("fmsne_implem.fmssne_implem", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_12fmsne_implem_4fmssne_implem(__pyx_self, __pyx_v_X_hds, __pyx_v_X_lds, __pyx_v_N, __pyx_v_d_hds, __pyx_v_n_components, __pyx_v_cperp, __pyx_v_n_rs, __pyx_v_fit_U, __pyx_v_ms_thetha, __pyx_v_nit_max, __pyx_v_gtol, __pyx_v_ftol, __pyx_v_maxls, __pyx_v_maxcor, __pyx_v_L_min, __pyx_v_rseed, __pyx_v_sym_nn);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12fmsne_implem_4fmssne_implem(CYTHON_UNUSED PyObject *__pyx_self, __Pyx_memviewslice __pyx_v_X_hds, __Pyx_memviewslice __pyx_v_X_lds, int __pyx_v_N, int __pyx_v_d_hds, int __pyx_v_n_components, int __pyx_v_cperp, int __pyx_v_n_rs, int __pyx_v_fit_U, double __pyx_v_ms_thetha, int __pyx_v_nit_max, double __pyx_v_gtol, double __pyx_v_ftol, int __pyx_v_maxls, int __pyx_v_maxcor, int __pyx_v_L_min, int __pyx_v_rseed, int __pyx_v_sym_nn) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("fmssne_implem", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_void_to_None(__pyx_f_12fmsne_implem_fmssne_implem(__pyx_v_X_hds, __pyx_v_X_lds, __pyx_v_N, __pyx_v_d_hds, __pyx_v_n_components, __pyx_v_cperp, __pyx_v_n_rs, __pyx_v_fit_U, __pyx_v_ms_thetha, __pyx_v_nit_max, __pyx_v_gtol, __pyx_v_ftol, __pyx_v_maxls, __pyx_v_maxcor, __pyx_v_L_min, __pyx_v_rseed, __pyx_v_sym_nn, 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2696, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("fmsne_implem.fmssne_implem", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __PYX_XDEC_MEMVIEW(&__pyx_v_X_hds, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_X_lds, 1);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "fmsne_implem.pyx":3335
 * #######################################################
 * 
 * cdef inline Py_ssize_t*** fms_sym_nn_match(Py_ssize_t n_rs, Py_ssize_t N_1, int*** arr_nn_i_rs, int** nnn_i_rs, Py_ssize_t n_components):             # <<<<<<<<<<<<<<
 *     """
 *     This assumes that the nearest neighbor sets are symmetric: if i is in the neighbors of j (ie in arr_nn_i_rs[rs][j]), then j must be in the neighbors of i (ie in arr_nn_i_rs[rs][i]).
 */

static CYTHON_INLINE Py_ssize_t ***__pyx_f_12fmsne_implem_fms_sym_nn_match(Py_ssize_t __pyx_v_n_rs, Py_ssize_t __pyx_v_N_1, int ***__pyx_v_arr_nn_i_rs, int **__pyx_v_nnn_i_rs, Py_ssize_t __pyx_v_n_components) {
  Py_ssize_t __pyx_v_rs;
  Py_ssize_t __pyx_v_i;
  Py_ssize_t __pyx_v_j;
  Py_ssize_t __pyx_v_idj;
  Py_ssize_t __pyx_v_k;
  Py_ssize_t __pyx_v_nnn;
  Py_ssize_t ***__pyx_v_m_nn;
  Py_ssize_t *__pyx_v_tmp;
  Py_ssize_t ***__pyx_r;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  int __pyx_t_9;
  Py_ssize_t __pyx_t_10;
  int __pyx_t_11;
  int __pyx_t_12;
  Py_ssize_t __pyx_t_13;
  __Pyx_RefNannySetupContext("fms_sym_nn_match", 0);

  /* "fmsne_implem.pyx":3342
 *     cdef Py_ssize_t rs, i, j, idj, k, nnn
 *     # Temporarily modifying nnn_i_rs
 *     for rs in range(n_rs):             # <<<<<<<<<<<<<<
 *         for i in range(N_1):
 *             nnn_i_rs[rs][i] = 4*nnn_i_rs[rs][i] + 2
 */
  __pyx_t_1 = __pyx_v_n_rs;
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_rs = __pyx_t_3;

    /* "fmsne_implem.pyx":3343
 *     # Temporarily modifying nnn_i_rs
 *     for rs in range(n_rs):
 *         for i in range(N_1):             # <<<<<<<<<<<<<<
 *             nnn_i_rs[rs][i] = 4*nnn_i_rs[rs][i] + 2
 *     # Allocate memory
 */
    __pyx_t_4 = __pyx_v_N_1;
    __pyx_t_5 = __pyx_t_4;
    for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
      __pyx_v_i = __pyx_t_6;

      /* "fmsne_implem.pyx":3344
 *     for rs in range(n_rs):
 *         for i in range(N_1):
 *             nnn_i_rs[rs][i] = 4*nnn_i_rs[rs][i] + 2             # <<<<<<<<<<<<<<
 *     # Allocate memory
 *     cdef Py_ssize_t*** m_nn = alloc_Pysst_3dmat_varK(n_rs, N_1, nnn_i_rs)
 */
      ((__pyx_v_nnn_i_rs[__pyx_v_rs])[__pyx_v_i]) = ((4 * ((__pyx_v_nnn_i_rs[__pyx_v_rs])[__pyx_v_i])) + 2);
    }
  }

  /* "fmsne_implem.pyx":3346
 *             nnn_i_rs[rs][i] = 4*nnn_i_rs[rs][i] + 2
 *     # Allocate memory
 *     cdef Py_ssize_t*** m_nn = alloc_Pysst_3dmat_varK(n_rs, N_1, nnn_i_rs)             # <<<<<<<<<<<<<<
 *     if m_nn is NULL:
 *         return NULL
 */
  __pyx_v_m_nn = __pyx_f_12fmsne_implem_alloc_Pysst_3dmat_varK(__pyx_v_n_rs, __pyx_v_N_1, __pyx_v_nnn_i_rs);

  /* "fmsne_implem.pyx":3347
 *     # Allocate memory
 *     cdef Py_ssize_t*** m_nn = alloc_Pysst_3dmat_varK(n_rs, N_1, nnn_i_rs)
 *     if m_nn is NULL:             # <<<<<<<<<<<<<<
 *         return NULL
 *     # Setting nnn_i_rs back to its value
 */
  __pyx_t_7 = ((__pyx_v_m_nn == NULL) != 0);
  if (__pyx_t_7) {

    /* "fmsne_implem.pyx":3348
 *     cdef Py_ssize_t*** m_nn = alloc_Pysst_3dmat_varK(n_rs, N_1, nnn_i_rs)
 *     if m_nn is NULL:
 *         return NULL             # <<<<<<<<<<<<<<
 *     # Setting nnn_i_rs back to its value
 *     for rs in range(n_rs):
 */
    __pyx_r = NULL;
    goto __pyx_L0;

    /* "fmsne_implem.pyx":3347
 *     # Allocate memory
 *     cdef Py_ssize_t*** m_nn = alloc_Pysst_3dmat_varK(n_rs, N_1, nnn_i_rs)
 *     if m_nn is NULL:             # <<<<<<<<<<<<<<
 *         return NULL
 *     # Setting nnn_i_rs back to its value
 */
  }

  /* "fmsne_implem.pyx":3350
 *         return NULL
 *     # Setting nnn_i_rs back to its value
 *     for rs in range(n_rs):             # <<<<<<<<<<<<<<
 *         for i in range(N_1):
 *             nnn_i_rs[rs][i] = (nnn_i_rs[rs][i] - 2)/4
 */
  __pyx_t_1 = __pyx_v_n_rs;
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_rs = __pyx_t_3;

    /* "fmsne_implem.pyx":3351
 *     # Setting nnn_i_rs back to its value
 *     for rs in range(n_rs):
 *         for i in range(N_1):             # <<<<<<<<<<<<<<
 *             nnn_i_rs[rs][i] = (nnn_i_rs[rs][i] - 2)/4
 *     # Filling m_nn
 */
    __pyx_t_4 = __pyx_v_N_1;
    __pyx_t_5 = __pyx_t_4;
    for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
      __pyx_v_i = __pyx_t_6;

      /* "fmsne_implem.pyx":3352
 *     for rs in range(n_rs):
 *         for i in range(N_1):
 *             nnn_i_rs[rs][i] = (nnn_i_rs[rs][i] - 2)/4             # <<<<<<<<<<<<<<
 *     # Filling m_nn
 *     cdef Py_ssize_t* tmp
 */
      ((__pyx_v_nnn_i_rs[__pyx_v_rs])[__pyx_v_i]) = ((((__pyx_v_nnn_i_rs[__pyx_v_rs])[__pyx_v_i]) - 2) / 4);
    }
  }

  /* "fmsne_implem.pyx":3355
 *     # Filling m_nn
 *     cdef Py_ssize_t* tmp
 *     for rs in range(n_rs):             # <<<<<<<<<<<<<<
 *         for i in range(N_1):
 *             nnn = 2
 */
  __pyx_t_1 = __pyx_v_n_rs;
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_rs = __pyx_t_3;

    /* "fmsne_implem.pyx":3356
 *     cdef Py_ssize_t* tmp
 *     for rs in range(n_rs):
 *         for i in range(N_1):             # <<<<<<<<<<<<<<
 *             nnn = 2
 *             for idj in range(nnn_i_rs[rs][i]):
 */
    __pyx_t_4 = __pyx_v_N_1;
    __pyx_t_5 = __pyx_t_4;
    for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
      __pyx_v_i = __pyx_t_6;

      /* "fmsne_implem.pyx":3357
 *     for rs in range(n_rs):
 *         for i in range(N_1):
 *             nnn = 2             # <<<<<<<<<<<<<<
 *             for idj in range(nnn_i_rs[rs][i]):
 *                 j = arr_nn_i_rs[rs][i][idj]
 */
      __pyx_v_nnn = 2;

      /* "fmsne_implem.pyx":3358
 *         for i in range(N_1):
 *             nnn = 2
 *             for idj in range(nnn_i_rs[rs][i]):             # <<<<<<<<<<<<<<
 *                 j = arr_nn_i_rs[rs][i][idj]
 *                 if j > i:
 */
      __pyx_t_8 = ((__pyx_v_nnn_i_rs[__pyx_v_rs])[__pyx_v_i]);
      __pyx_t_9 = __pyx_t_8;
      for (__pyx_t_10 = 0; __pyx_t_10 < __pyx_t_9; __pyx_t_10+=1) {
        __pyx_v_idj = __pyx_t_10;

        /* "fmsne_implem.pyx":3359
 *             nnn = 2
 *             for idj in range(nnn_i_rs[rs][i]):
 *                 j = arr_nn_i_rs[rs][i][idj]             # <<<<<<<<<<<<<<
 *                 if j > i:
 *                     for k in range(nnn_i_rs[rs][j]):
 */
        __pyx_v_j = (((__pyx_v_arr_nn_i_rs[__pyx_v_rs])[__pyx_v_i])[__pyx_v_idj]);

        /* "fmsne_implem.pyx":3360
 *             for idj in range(nnn_i_rs[rs][i]):
 *                 j = arr_nn_i_rs[rs][i][idj]
 *                 if j > i:             # <<<<<<<<<<<<<<
 *                     for k in range(nnn_i_rs[rs][j]):
 *                         if arr_nn_i_rs[rs][j][k] == i:
 */
        __pyx_t_7 = ((__pyx_v_j > __pyx_v_i) != 0);
        if (__pyx_t_7) {

          /* "fmsne_implem.pyx":3361
 *                 j = arr_nn_i_rs[rs][i][idj]
 *                 if j > i:
 *                     for k in range(nnn_i_rs[rs][j]):             # <<<<<<<<<<<<<<
 *                         if arr_nn_i_rs[rs][j][k] == i:
 *                             m_nn[rs][i][nnn] = idj
 */
          __pyx_t_11 = ((__pyx_v_nnn_i_rs[__pyx_v_rs])[__pyx_v_j]);
          __pyx_t_12 = __pyx_t_11;
          for (__pyx_t_13 = 0; __pyx_t_13 < __pyx_t_12; __pyx_t_13+=1) {
            __pyx_v_k = __pyx_t_13;

            /* "fmsne_implem.pyx":3362
 *                 if j > i:
 *                     for k in range(nnn_i_rs[rs][j]):
 *                         if arr_nn_i_rs[rs][j][k] == i:             # <<<<<<<<<<<<<<
 *                             m_nn[rs][i][nnn] = idj
 *                             nnn += 1
 */
            __pyx_t_7 = (((((__pyx_v_arr_nn_i_rs[__pyx_v_rs])[__pyx_v_j])[__pyx_v_k]) == __pyx_v_i) != 0);
            if (__pyx_t_7) {

              /* "fmsne_implem.pyx":3363
 *                     for k in range(nnn_i_rs[rs][j]):
 *                         if arr_nn_i_rs[rs][j][k] == i:
 *                             m_nn[rs][i][nnn] = idj             # <<<<<<<<<<<<<<
 *                             nnn += 1
 *                             m_nn[rs][i][nnn] = j*n_components
 */
              (((__pyx_v_m_nn[__pyx_v_rs])[__pyx_v_i])[__pyx_v_nnn]) = __pyx_v_idj;

              /* "fmsne_implem.pyx":3364
 *                         if arr_nn_i_rs[rs][j][k] == i:
 *                             m_nn[rs][i][nnn] = idj
 *                             nnn += 1             # <<<<<<<<<<<<<<
 *                             m_nn[rs][i][nnn] = j*n_components
 *                             nnn += 1
 */
              __pyx_v_nnn = (__pyx_v_nnn + 1);

              /* "fmsne_implem.pyx":3365
 *                             m_nn[rs][i][nnn] = idj
 *                             nnn += 1
 *                             m_nn[rs][i][nnn] = j*n_components             # <<<<<<<<<<<<<<
 *                             nnn += 1
 *                             m_nn[rs][i][nnn] = k
 */
              (((__pyx_v_m_nn[__pyx_v_rs])[__pyx_v_i])[__pyx_v_nnn]) = (__pyx_v_j * __pyx_v_n_components);

              /* "fmsne_implem.pyx":3366
 *                             nnn += 1
 *                             m_nn[rs][i][nnn] = j*n_components
 *                             nnn += 1             # <<<<<<<<<<<<<<
 *                             m_nn[rs][i][nnn] = k
 *                             nnn += 1
 */
              __pyx_v_nnn = (__pyx_v_nnn + 1);

              /* "fmsne_implem.pyx":3367
 *                             m_nn[rs][i][nnn] = j*n_components
 *                             nnn += 1
 *                             m_nn[rs][i][nnn] = k             # <<<<<<<<<<<<<<
 *                             nnn += 1
 *                             m_nn[rs][i][nnn] = j
 */
              (((__pyx_v_m_nn[__pyx_v_rs])[__pyx_v_i])[__pyx_v_nnn]) = __pyx_v_k;

              /* "fmsne_implem.pyx":3368
 *                             nnn += 1
 *                             m_nn[rs][i][nnn] = k
 *                             nnn += 1             # <<<<<<<<<<<<<<
 *                             m_nn[rs][i][nnn] = j
 *                             nnn += 1
 */
              __pyx_v_nnn = (__pyx_v_nnn + 1);

              /* "fmsne_implem.pyx":3369
 *                             m_nn[rs][i][nnn] = k
 *                             nnn += 1
 *                             m_nn[rs][i][nnn] = j             # <<<<<<<<<<<<<<
 *                             nnn += 1
 *                             break
 */
              (((__pyx_v_m_nn[__pyx_v_rs])[__pyx_v_i])[__pyx_v_nnn]) = __pyx_v_j;

              /* "fmsne_implem.pyx":3370
 *                             nnn += 1
 *                             m_nn[rs][i][nnn] = j
 *                             nnn += 1             # <<<<<<<<<<<<<<
 *                             break
 *                     else:
 */
              __pyx_v_nnn = (__pyx_v_nnn + 1);

              /* "fmsne_implem.pyx":3371
 *                             m_nn[rs][i][nnn] = j
 *                             nnn += 1
 *                             break             # <<<<<<<<<<<<<<
 *                     else:
 *                         free_Pysst_3dmat(m_nn, n_rs, N_1)
 */
              goto __pyx_L20_break;

              /* "fmsne_implem.pyx":3362
 *                 if j > i:
 *                     for k in range(nnn_i_rs[rs][j]):
 *                         if arr_nn_i_rs[rs][j][k] == i:             # <<<<<<<<<<<<<<
 *                             m_nn[rs][i][nnn] = idj
 *                             nnn += 1
 */
            }
          }
          /*else*/ {

            /* "fmsne_implem.pyx":3373
 *                             break
 *                     else:
 *                         free_Pysst_3dmat(m_nn, n_rs, N_1)             # <<<<<<<<<<<<<<
 *                         return NULL
 *             m_nn[rs][i][0] = nnn
 */
            __pyx_f_12fmsne_implem_free_Pysst_3dmat(__pyx_v_m_nn, __pyx_v_n_rs, __pyx_v_N_1);

            /* "fmsne_implem.pyx":3374
 *                     else:
 *                         free_Pysst_3dmat(m_nn, n_rs, N_1)
 *                         return NULL             # <<<<<<<<<<<<<<
 *             m_nn[rs][i][0] = nnn
 *             # m_nn[rs][i][1] = number of j > i in the neighbors of i in random sampling rs
 */
            __pyx_r = NULL;
            goto __pyx_L0;
          }
          __pyx_L20_break:;

          /* "fmsne_implem.pyx":3360
 *             for idj in range(nnn_i_rs[rs][i]):
 *                 j = arr_nn_i_rs[rs][i][idj]
 *                 if j > i:             # <<<<<<<<<<<<<<
 *                     for k in range(nnn_i_rs[rs][j]):
 *                         if arr_nn_i_rs[rs][j][k] == i:
 */
        }
      }

      /* "fmsne_implem.pyx":3375
 *                         free_Pysst_3dmat(m_nn, n_rs, N_1)
 *                         return NULL
 *             m_nn[rs][i][0] = nnn             # <<<<<<<<<<<<<<
 *             # m_nn[rs][i][1] = number of j > i in the neighbors of i in random sampling rs
 *             m_nn[rs][i][1] = (nnn-2)/4
 */
      (((__pyx_v_m_nn[__pyx_v_rs])[__pyx_v_i])[0]) = __pyx_v_nnn;

      /* "fmsne_implem.pyx":3377
 *             m_nn[rs][i][0] = nnn
 *             # m_nn[rs][i][1] = number of j > i in the neighbors of i in random sampling rs
 *             m_nn[rs][i][1] = (nnn-2)/4             # <<<<<<<<<<<<<<
 *             if nnn < nnn_i_rs[rs][i]:
 *                 tmp = <Py_ssize_t*> PyMem_Realloc(<void*> m_nn[rs][i], nnn*sizeof(Py_ssize_t))
 */
      (((__pyx_v_m_nn[__pyx_v_rs])[__pyx_v_i])[1]) = ((__pyx_v_nnn - 2) / 4);

      /* "fmsne_implem.pyx":3378
 *             # m_nn[rs][i][1] = number of j > i in the neighbors of i in random sampling rs
 *             m_nn[rs][i][1] = (nnn-2)/4
 *             if nnn < nnn_i_rs[rs][i]:             # <<<<<<<<<<<<<<
 *                 tmp = <Py_ssize_t*> PyMem_Realloc(<void*> m_nn[rs][i], nnn*sizeof(Py_ssize_t))
 *                 if tmp is NULL:
 */
      __pyx_t_7 = ((__pyx_v_nnn < ((__pyx_v_nnn_i_rs[__pyx_v_rs])[__pyx_v_i])) != 0);
      if (__pyx_t_7) {

        /* "fmsne_implem.pyx":3379
 *             m_nn[rs][i][1] = (nnn-2)/4
 *             if nnn < nnn_i_rs[rs][i]:
 *                 tmp = <Py_ssize_t*> PyMem_Realloc(<void*> m_nn[rs][i], nnn*sizeof(Py_ssize_t))             # <<<<<<<<<<<<<<
 *                 if tmp is NULL:
 *                     free_Pysst_3dmat(m_nn, n_rs, N_1)
 */
        __pyx_v_tmp = ((Py_ssize_t *)PyMem_Realloc(((void *)((__pyx_v_m_nn[__pyx_v_rs])[__pyx_v_i])), (__pyx_v_nnn * (sizeof(Py_ssize_t)))));

        /* "fmsne_implem.pyx":3380
 *             if nnn < nnn_i_rs[rs][i]:
 *                 tmp = <Py_ssize_t*> PyMem_Realloc(<void*> m_nn[rs][i], nnn*sizeof(Py_ssize_t))
 *                 if tmp is NULL:             # <<<<<<<<<<<<<<
 *                     free_Pysst_3dmat(m_nn, n_rs, N_1)
 *                     return NULL
 */
        __pyx_t_7 = ((__pyx_v_tmp == NULL) != 0);
        if (__pyx_t_7) {

          /* "fmsne_implem.pyx":3381
 *                 tmp = <Py_ssize_t*> PyMem_Realloc(<void*> m_nn[rs][i], nnn*sizeof(Py_ssize_t))
 *                 if tmp is NULL:
 *                     free_Pysst_3dmat(m_nn, n_rs, N_1)             # <<<<<<<<<<<<<<
 *                     return NULL
 *                 m_nn[rs][i] = tmp
 */
          __pyx_f_12fmsne_implem_free_Pysst_3dmat(__pyx_v_m_nn, __pyx_v_n_rs, __pyx_v_N_1);

          /* "fmsne_implem.pyx":3382
 *                 if tmp is NULL:
 *                     free_Pysst_3dmat(m_nn, n_rs, N_1)
 *                     return NULL             # <<<<<<<<<<<<<<
 *                 m_nn[rs][i] = tmp
 *     return m_nn
 */
          __pyx_r = NULL;
          goto __pyx_L0;

          /* "fmsne_implem.pyx":3380
 *             if nnn < nnn_i_rs[rs][i]:
 *                 tmp = <Py_ssize_t*> PyMem_Realloc(<void*> m_nn[rs][i], nnn*sizeof(Py_ssize_t))
 *                 if tmp is NULL:             # <<<<<<<<<<<<<<
 *                     free_Pysst_3dmat(m_nn, n_rs, N_1)
 *                     return NULL
 */
        }

        /* "fmsne_implem.pyx":3383
 *                     free_Pysst_3dmat(m_nn, n_rs, N_1)
 *                     return NULL
 *                 m_nn[rs][i] = tmp             # <<<<<<<<<<<<<<
 *     return m_nn
 * 
 */
        ((__pyx_v_m_nn[__pyx_v_rs])[__pyx_v_i]) = __pyx_v_tmp;

        /* "fmsne_implem.pyx":3378
 *             # m_nn[rs][i][1] = number of j > i in the neighbors of i in random sampling rs
 *             m_nn[rs][i][1] = (nnn-2)/4
 *             if nnn < nnn_i_rs[rs][i]:             # <<<<<<<<<<<<<<
 *                 tmp = <Py_ssize_t*> PyMem_Realloc(<void*> m_nn[rs][i], nnn*sizeof(Py_ssize_t))
 *                 if tmp is NULL:
 */
      }
    }
  }

  /* "fmsne_implem.pyx":3384
 *                     return NULL
 *                 m_nn[rs][i] = tmp
 *     return m_nn             # <<<<<<<<<<<<<<
 * 
 * cdef inline Py_ssize_t** gather_nn_all_rs(Py_ssize_t* nnn_all_rs, Py_ssize_t n_rs, Py_ssize_t N_1, Py_ssize_t*** m_nn):
 */
  __pyx_r = __pyx_v_m_nn;
  goto __pyx_L0;

  /* "fmsne_implem.pyx":3335
 * #######################################################
 * 
 * cdef inline Py_ssize_t*** fms_sym_nn_match(Py_ssize_t n_rs, Py_ssize_t N_1, int*** arr_nn_i_rs, int** nnn_i_rs, Py_ssize_t n_components):             # <<<<<<<<<<<<<<
 *     """
 *     This assumes that the nearest neighbor sets are symmetric: if i is in the neighbors of j (ie in arr_nn_i_rs[rs][j]), then j must be in the neighbors of i (ie in arr_nn_i_rs[rs][i]).
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "fmsne_implem.pyx":3386
 *     return m_nn
 * 
 * cdef inline Py_ssize_t** gather_nn_all_rs(Py_ssize_t* nnn_all_rs, Py_ssize_t n_rs, Py_ssize_t N_1, Py_ssize_t*** m_nn):             # <<<<<<<<<<<<<<
 *     """
 *     """
 */

static CYTHON_INLINE Py_ssize_t **__pyx_f_12fmsne_implem_gather_nn_all_rs(Py_ssize_t *__pyx_v_nnn_all_rs, Py_ssize_t __pyx_v_n_rs, Py_ssize_t __pyx_v_N_1, Py_ssize_t ***__pyx_v_m_nn) {
  Py_ssize_t **__pyx_v_inn_all_rs;
  Py_ssize_t *__pyx_v_tmp;
  Py_ssize_t __pyx_v_i;
  Py_ssize_t __pyx_v_rs;
  Py_ssize_t __pyx_v_j;
  Py_ssize_t __pyx_v_k;
  Py_ssize_t __pyx_v_n;
  Py_ssize_t __pyx_v_nel;
  Py_ssize_t **__pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  Py_ssize_t __pyx_t_7;
  Py_ssize_t __pyx_t_8;
  Py_ssize_t __pyx_t_9;
  Py_ssize_t __pyx_t_10;
  Py_ssize_t __pyx_t_11;
  Py_ssize_t __pyx_t_12;
  Py_ssize_t __pyx_t_13;
  __Pyx_RefNannySetupContext("gather_nn_all_rs", 0);

  /* "fmsne_implem.pyx":3390
 *     """
 *     # Will store the indexes of the neighbors j of i over all random samplings, such that j>i
 *     cdef Py_ssize_t** inn_all_rs = <Py_ssize_t**> PyMem_Malloc(N_1*sizeof(Py_ssize_t*))             # <<<<<<<<<<<<<<
 *     if inn_all_rs is NULL:
 *         return NULL
 */
  __pyx_v_inn_all_rs = ((Py_ssize_t **)PyMem_Malloc((__pyx_v_N_1 * (sizeof(Py_ssize_t *)))));

  /* "fmsne_implem.pyx":3391
 *     # Will store the indexes of the neighbors j of i over all random samplings, such that j>i
 *     cdef Py_ssize_t** inn_all_rs = <Py_ssize_t**> PyMem_Malloc(N_1*sizeof(Py_ssize_t*))
 *     if inn_all_rs is NULL:             # <<<<<<<<<<<<<<
 *         return NULL
 *     cdef Py_ssize_t* tmp
 */
  __pyx_t_1 = ((__pyx_v_inn_all_rs == NULL) != 0);
  if (__pyx_t_1) {

    /* "fmsne_implem.pyx":3392
 *     cdef Py_ssize_t** inn_all_rs = <Py_ssize_t**> PyMem_Malloc(N_1*sizeof(Py_ssize_t*))
 *     if inn_all_rs is NULL:
 *         return NULL             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t* tmp
 *     cdef Py_ssize_t i, rs, j, k, n, nel
 */
    __pyx_r = NULL;
    goto __pyx_L0;

    /* "fmsne_implem.pyx":3391
 *     # Will store the indexes of the neighbors j of i over all random samplings, such that j>i
 *     cdef Py_ssize_t** inn_all_rs = <Py_ssize_t**> PyMem_Malloc(N_1*sizeof(Py_ssize_t*))
 *     if inn_all_rs is NULL:             # <<<<<<<<<<<<<<
 *         return NULL
 *     cdef Py_ssize_t* tmp
 */
  }

  /* "fmsne_implem.pyx":3395
 *     cdef Py_ssize_t* tmp
 *     cdef Py_ssize_t i, rs, j, k, n, nel
 *     for i in range(N_1):             # <<<<<<<<<<<<<<
 *         # Counting the total number of neighbors across all random samplings (possibly with duplicates)
 *         nel = 0
 */
  __pyx_t_2 = __pyx_v_N_1;
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "fmsne_implem.pyx":3397
 *     for i in range(N_1):
 *         # Counting the total number of neighbors across all random samplings (possibly with duplicates)
 *         nel = 0             # <<<<<<<<<<<<<<
 *         for rs in range(n_rs):
 *             nel += m_nn[rs][i][1]
 */
    __pyx_v_nel = 0;

    /* "fmsne_implem.pyx":3398
 *         # Counting the total number of neighbors across all random samplings (possibly with duplicates)
 *         nel = 0
 *         for rs in range(n_rs):             # <<<<<<<<<<<<<<
 *             nel += m_nn[rs][i][1]
 *         # Allocate memory
 */
    __pyx_t_5 = __pyx_v_n_rs;
    __pyx_t_6 = __pyx_t_5;
    for (__pyx_t_7 = 0; __pyx_t_7 < __pyx_t_6; __pyx_t_7+=1) {
      __pyx_v_rs = __pyx_t_7;

      /* "fmsne_implem.pyx":3399
 *         nel = 0
 *         for rs in range(n_rs):
 *             nel += m_nn[rs][i][1]             # <<<<<<<<<<<<<<
 *         # Allocate memory
 *         inn_all_rs[i] = <Py_ssize_t*> PyMem_Malloc(nel*sizeof(Py_ssize_t))
 */
      __pyx_v_nel = (__pyx_v_nel + (((__pyx_v_m_nn[__pyx_v_rs])[__pyx_v_i])[1]));
    }

    /* "fmsne_implem.pyx":3401
 *             nel += m_nn[rs][i][1]
 *         # Allocate memory
 *         inn_all_rs[i] = <Py_ssize_t*> PyMem_Malloc(nel*sizeof(Py_ssize_t))             # <<<<<<<<<<<<<<
 *         if inn_all_rs[i] is NULL:
 *             free_Pysst_2dmat(inn_all_rs, i)
 */
    (__pyx_v_inn_all_rs[__pyx_v_i]) = ((Py_ssize_t *)PyMem_Malloc((__pyx_v_nel * (sizeof(Py_ssize_t)))));

    /* "fmsne_implem.pyx":3402
 *         # Allocate memory
 *         inn_all_rs[i] = <Py_ssize_t*> PyMem_Malloc(nel*sizeof(Py_ssize_t))
 *         if inn_all_rs[i] is NULL:             # <<<<<<<<<<<<<<
 *             free_Pysst_2dmat(inn_all_rs, i)
 *             return NULL
 */
    __pyx_t_1 = (((__pyx_v_inn_all_rs[__pyx_v_i]) == NULL) != 0);
    if (__pyx_t_1) {

      /* "fmsne_implem.pyx":3403
 *         inn_all_rs[i] = <Py_ssize_t*> PyMem_Malloc(nel*sizeof(Py_ssize_t))
 *         if inn_all_rs[i] is NULL:
 *             free_Pysst_2dmat(inn_all_rs, i)             # <<<<<<<<<<<<<<
 *             return NULL
 *         # Add the neighbors of the first random sampling
 */
      __pyx_f_12fmsne_implem_free_Pysst_2dmat(__pyx_v_inn_all_rs, __pyx_v_i);

      /* "fmsne_implem.pyx":3404
 *         if inn_all_rs[i] is NULL:
 *             free_Pysst_2dmat(inn_all_rs, i)
 *             return NULL             # <<<<<<<<<<<<<<
 *         # Add the neighbors of the first random sampling
 *         nnn_all_rs[i] = m_nn[0][i][1]
 */
      __pyx_r = NULL;
      goto __pyx_L0;

      /* "fmsne_implem.pyx":3402
 *         # Allocate memory
 *         inn_all_rs[i] = <Py_ssize_t*> PyMem_Malloc(nel*sizeof(Py_ssize_t))
 *         if inn_all_rs[i] is NULL:             # <<<<<<<<<<<<<<
 *             free_Pysst_2dmat(inn_all_rs, i)
 *             return NULL
 */
    }

    /* "fmsne_implem.pyx":3406
 *             return NULL
 *         # Add the neighbors of the first random sampling
 *         nnn_all_rs[i] = m_nn[0][i][1]             # <<<<<<<<<<<<<<
 *         k = 0
 *         for j in range(3, m_nn[0][i][0], 4):
 */
    (__pyx_v_nnn_all_rs[__pyx_v_i]) = (((__pyx_v_m_nn[0])[__pyx_v_i])[1]);

    /* "fmsne_implem.pyx":3407
 *         # Add the neighbors of the first random sampling
 *         nnn_all_rs[i] = m_nn[0][i][1]
 *         k = 0             # <<<<<<<<<<<<<<
 *         for j in range(3, m_nn[0][i][0], 4):
 *             inn_all_rs[i][k] = m_nn[0][i][j]
 */
    __pyx_v_k = 0;

    /* "fmsne_implem.pyx":3408
 *         nnn_all_rs[i] = m_nn[0][i][1]
 *         k = 0
 *         for j in range(3, m_nn[0][i][0], 4):             # <<<<<<<<<<<<<<
 *             inn_all_rs[i][k] = m_nn[0][i][j]
 *             k += 1
 */
    __pyx_t_5 = (((__pyx_v_m_nn[0])[__pyx_v_i])[0]);
    __pyx_t_6 = __pyx_t_5;
    for (__pyx_t_7 = 3; __pyx_t_7 < __pyx_t_6; __pyx_t_7+=4) {
      __pyx_v_j = __pyx_t_7;

      /* "fmsne_implem.pyx":3409
 *         k = 0
 *         for j in range(3, m_nn[0][i][0], 4):
 *             inn_all_rs[i][k] = m_nn[0][i][j]             # <<<<<<<<<<<<<<
 *             k += 1
 *         # Adding the neighbors of the other random samplings
 */
      ((__pyx_v_inn_all_rs[__pyx_v_i])[__pyx_v_k]) = (((__pyx_v_m_nn[0])[__pyx_v_i])[__pyx_v_j]);

      /* "fmsne_implem.pyx":3410
 *         for j in range(3, m_nn[0][i][0], 4):
 *             inn_all_rs[i][k] = m_nn[0][i][j]
 *             k += 1             # <<<<<<<<<<<<<<
 *         # Adding the neighbors of the other random samplings
 *         for rs in range(1, n_rs, 1):
 */
      __pyx_v_k = (__pyx_v_k + 1);
    }

    /* "fmsne_implem.pyx":3412
 *             k += 1
 *         # Adding the neighbors of the other random samplings
 *         for rs in range(1, n_rs, 1):             # <<<<<<<<<<<<<<
 *             n = nnn_all_rs[i]
 *             for j in range(3, m_nn[rs][i][0], 4):
 */
    __pyx_t_5 = __pyx_v_n_rs;
    __pyx_t_6 = __pyx_t_5;
    for (__pyx_t_7 = 1; __pyx_t_7 < __pyx_t_6; __pyx_t_7+=1) {
      __pyx_v_rs = __pyx_t_7;

      /* "fmsne_implem.pyx":3413
 *         # Adding the neighbors of the other random samplings
 *         for rs in range(1, n_rs, 1):
 *             n = nnn_all_rs[i]             # <<<<<<<<<<<<<<
 *             for j in range(3, m_nn[rs][i][0], 4):
 *                 for k in range(nnn_all_rs[i]):
 */
      __pyx_v_n = (__pyx_v_nnn_all_rs[__pyx_v_i]);

      /* "fmsne_implem.pyx":3414
 *         for rs in range(1, n_rs, 1):
 *             n = nnn_all_rs[i]
 *             for j in range(3, m_nn[rs][i][0], 4):             # <<<<<<<<<<<<<<
 *                 for k in range(nnn_all_rs[i]):
 *                     if inn_all_rs[i][k] == m_nn[rs][i][j]:
 */
      __pyx_t_8 = (((__pyx_v_m_nn[__pyx_v_rs])[__pyx_v_i])[0]);
      __pyx_t_9 = __pyx_t_8;
      for (__pyx_t_10 = 3; __pyx_t_10 < __pyx_t_9; __pyx_t_10+=4) {
        __pyx_v_j = __pyx_t_10;

        /* "fmsne_implem.pyx":3415
 *             n = nnn_all_rs[i]
 *             for j in range(3, m_nn[rs][i][0], 4):
 *                 for k in range(nnn_all_rs[i]):             # <<<<<<<<<<<<<<
 *                     if inn_all_rs[i][k] == m_nn[rs][i][j]:
 *                         break
 */
        __pyx_t_11 = (__pyx_v_nnn_all_rs[__pyx_v_i]);
        __pyx_t_12 = __pyx_t_11;
        for (__pyx_t_13 = 0; __pyx_t_13 < __pyx_t_12; __pyx_t_13+=1) {
          __pyx_v_k = __pyx_t_13;

          /* "fmsne_implem.pyx":3416
 *             for j in range(3, m_nn[rs][i][0], 4):
 *                 for k in range(nnn_all_rs[i]):
 *                     if inn_all_rs[i][k] == m_nn[rs][i][j]:             # <<<<<<<<<<<<<<
 *                         break
 *                 else:
 */
          __pyx_t_1 = ((((__pyx_v_inn_all_rs[__pyx_v_i])[__pyx_v_k]) == (((__pyx_v_m_nn[__pyx_v_rs])[__pyx_v_i])[__pyx_v_j])) != 0);
          if (__pyx_t_1) {

            /* "fmsne_implem.pyx":3417
 *                 for k in range(nnn_all_rs[i]):
 *                     if inn_all_rs[i][k] == m_nn[rs][i][j]:
 *                         break             # <<<<<<<<<<<<<<
 *                 else:
 *                     inn_all_rs[i][n] = m_nn[rs][i][j]
 */
            goto __pyx_L16_break;

            /* "fmsne_implem.pyx":3416
 *             for j in range(3, m_nn[rs][i][0], 4):
 *                 for k in range(nnn_all_rs[i]):
 *                     if inn_all_rs[i][k] == m_nn[rs][i][j]:             # <<<<<<<<<<<<<<
 *                         break
 *                 else:
 */
          }
        }
        /*else*/ {

          /* "fmsne_implem.pyx":3419
 *                         break
 *                 else:
 *                     inn_all_rs[i][n] = m_nn[rs][i][j]             # <<<<<<<<<<<<<<
 *                     n += 1
 *             nnn_all_rs[i] = n
 */
          ((__pyx_v_inn_all_rs[__pyx_v_i])[__pyx_v_n]) = (((__pyx_v_m_nn[__pyx_v_rs])[__pyx_v_i])[__pyx_v_j]);

          /* "fmsne_implem.pyx":3420
 *                 else:
 *                     inn_all_rs[i][n] = m_nn[rs][i][j]
 *                     n += 1             # <<<<<<<<<<<<<<
 *             nnn_all_rs[i] = n
 *         # Reallocating inn_all_rs[i]
 */
          __pyx_v_n = (__pyx_v_n + 1);
        }
        __pyx_L16_break:;
      }

      /* "fmsne_implem.pyx":3421
 *                     inn_all_rs[i][n] = m_nn[rs][i][j]
 *                     n += 1
 *             nnn_all_rs[i] = n             # <<<<<<<<<<<<<<
 *         # Reallocating inn_all_rs[i]
 *         if nnn_all_rs[i] < nel:
 */
      (__pyx_v_nnn_all_rs[__pyx_v_i]) = __pyx_v_n;
    }

    /* "fmsne_implem.pyx":3423
 *             nnn_all_rs[i] = n
 *         # Reallocating inn_all_rs[i]
 *         if nnn_all_rs[i] < nel:             # <<<<<<<<<<<<<<
 *             tmp = <Py_ssize_t*> PyMem_Realloc(<void*> inn_all_rs[i], nnn_all_rs[i]*sizeof(Py_ssize_t))
 *             if tmp is NULL:
 */
    __pyx_t_1 = (((__pyx_v_nnn_all_rs[__pyx_v_i]) < __pyx_v_nel) != 0);
    if (__pyx_t_1) {

      /* "fmsne_implem.pyx":3424
 *         # Reallocating inn_all_rs[i]
 *         if nnn_all_rs[i] < nel:
 *             tmp = <Py_ssize_t*> PyMem_Realloc(<void*> inn_all_rs[i], nnn_all_rs[i]*sizeof(Py_ssize_t))             # <<<<<<<<<<<<<<
 *             if tmp is NULL:
 *                 free_Pysst_2dmat(inn_all_rs, i)
 */
      __pyx_v_tmp = ((Py_ssize_t *)PyMem_Realloc(((void *)(__pyx_v_inn_all_rs[__pyx_v_i])), ((__pyx_v_nnn_all_rs[__pyx_v_i]) * (sizeof(Py_ssize_t)))));

      /* "fmsne_implem.pyx":3425
 *         if nnn_all_rs[i] < nel:
 *             tmp = <Py_ssize_t*> PyMem_Realloc(<void*> inn_all_rs[i], nnn_all_rs[i]*sizeof(Py_ssize_t))
 *             if tmp is NULL:             # <<<<<<<<<<<<<<
 *                 free_Pysst_2dmat(inn_all_rs, i)
 *                 return NULL
 */
      __pyx_t_1 = ((__pyx_v_tmp == NULL) != 0);
      if (__pyx_t_1) {

        /* "fmsne_implem.pyx":3426
 *             tmp = <Py_ssize_t*> PyMem_Realloc(<void*> inn_all_rs[i], nnn_all_rs[i]*sizeof(Py_ssize_t))
 *             if tmp is NULL:
 *                 free_Pysst_2dmat(inn_all_rs, i)             # <<<<<<<<<<<<<<
 *                 return NULL
 *             inn_all_rs[i] = tmp
 */
        __pyx_f_12fmsne_implem_free_Pysst_2dmat(__pyx_v_inn_all_rs, __pyx_v_i);

        /* "fmsne_implem.pyx":3427
 *             if tmp is NULL:
 *                 free_Pysst_2dmat(inn_all_rs, i)
 *                 return NULL             # <<<<<<<<<<<<<<
 *             inn_all_rs[i] = tmp
 *     return inn_all_rs
 */
        __pyx_r = NULL;
        goto __pyx_L0;

        /* "fmsne_implem.pyx":3425
 *         if nnn_all_rs[i] < nel:
 *             tmp = <Py_ssize_t*> PyMem_Realloc(<void*> inn_all_rs[i], nnn_all_rs[i]*sizeof(Py_ssize_t))
 *             if tmp is NULL:             # <<<<<<<<<<<<<<
 *                 free_Pysst_2dmat(inn_all_rs, i)
 *                 return NULL
 */
      }

      /* "fmsne_implem.pyx":3428
 *                 free_Pysst_2dmat(inn_all_rs, i)
 *                 return NULL
 *             inn_all_rs[i] = tmp             # <<<<<<<<<<<<<<
 *     return inn_all_rs
 * 
 */
      (__pyx_v_inn_all_rs[__pyx_v_i]) = __pyx_v_tmp;

      /* "fmsne_implem.pyx":3423
 *             nnn_all_rs[i] = n
 *         # Reallocating inn_all_rs[i]
 *         if nnn_all_rs[i] < nel:             # <<<<<<<<<<<<<<
 *             tmp = <Py_ssize_t*> PyMem_Realloc(<void*> inn_all_rs[i], nnn_all_rs[i]*sizeof(Py_ssize_t))
 *             if tmp is NULL:
 */
    }
  }

  /* "fmsne_implem.pyx":3429
 *                 return NULL
 *             inn_all_rs[i] = tmp
 *     return inn_all_rs             # <<<<<<<<<<<<<<
 * 
 * cdef inline Py_ssize_t*** fms_nn_rs_match_all_rs(Py_ssize_t n_rs, Py_ssize_t N_1, Py_ssize_t** inn_all_rs, Py_ssize_t* nnn_all_rs, Py_ssize_t*** m_nn):
 */
  __pyx_r = __pyx_v_inn_all_rs;
  goto __pyx_L0;

  /* "fmsne_implem.pyx":3386
 *     return m_nn
 * 
 * cdef inline Py_ssize_t** gather_nn_all_rs(Py_ssize_t* nnn_all_rs, Py_ssize_t n_rs, Py_ssize_t N_1, Py_ssize_t*** m_nn):             # <<<<<<<<<<<<<<
 *     """
 *     """
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "fmsne_implem.pyx":3431
 *     return inn_all_rs
 * 
 * cdef inline Py_ssize_t*** fms_nn_rs_match_all_rs(Py_ssize_t n_rs, Py_ssize_t N_1, Py_ssize_t** inn_all_rs, Py_ssize_t* nnn_all_rs, Py_ssize_t*** m_nn):             # <<<<<<<<<<<<<<
 *     """
 *     """
 */

static CYTHON_INLINE Py_ssize_t ***__pyx_f_12fmsne_implem_fms_nn_rs_match_all_rs(Py_ssize_t __pyx_v_n_rs, Py_ssize_t __pyx_v_N_1, Py_ssize_t **__pyx_v_inn_all_rs, Py_ssize_t *__pyx_v_nnn_all_rs, Py_ssize_t ***__pyx_v_m_nn) {
  Py_ssize_t ***__pyx_v_idnn_in_ars;
  Py_ssize_t __pyx_v_rs;
  Py_ssize_t __pyx_v_i;
  Py_ssize_t __pyx_v_j;
  Py_ssize_t __pyx_v_k;
  Py_ssize_t __pyx_v_n;
  Py_ssize_t ***__pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  Py_ssize_t __pyx_t_7;
  Py_ssize_t __pyx_t_8;
  Py_ssize_t __pyx_t_9;
  Py_ssize_t __pyx_t_10;
  Py_ssize_t __pyx_t_11;
  Py_ssize_t __pyx_t_12;
  Py_ssize_t __pyx_t_13;
  __Pyx_RefNannySetupContext("fms_nn_rs_match_all_rs", 0);

  /* "fmsne_implem.pyx":3434
 *     """
 *     """
 *     cdef Py_ssize_t*** idnn_in_ars = alloc_Pysst_3dmat_varK_3dK(n_rs, N_1, m_nn, 1)             # <<<<<<<<<<<<<<
 *     if idnn_in_ars is NULL:
 *         return NULL
 */
  __pyx_v_idnn_in_ars = __pyx_f_12fmsne_implem_alloc_Pysst_3dmat_varK_3dK(__pyx_v_n_rs, __pyx_v_N_1, __pyx_v_m_nn, 1);

  /* "fmsne_implem.pyx":3435
 *     """
 *     cdef Py_ssize_t*** idnn_in_ars = alloc_Pysst_3dmat_varK_3dK(n_rs, N_1, m_nn, 1)
 *     if idnn_in_ars is NULL:             # <<<<<<<<<<<<<<
 *         return NULL
 *     cdef Py_ssize_t rs, i, j, k, n
 */
  __pyx_t_1 = ((__pyx_v_idnn_in_ars == NULL) != 0);
  if (__pyx_t_1) {

    /* "fmsne_implem.pyx":3436
 *     cdef Py_ssize_t*** idnn_in_ars = alloc_Pysst_3dmat_varK_3dK(n_rs, N_1, m_nn, 1)
 *     if idnn_in_ars is NULL:
 *         return NULL             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t rs, i, j, k, n
 *     for rs in range(n_rs):
 */
    __pyx_r = NULL;
    goto __pyx_L0;

    /* "fmsne_implem.pyx":3435
 *     """
 *     cdef Py_ssize_t*** idnn_in_ars = alloc_Pysst_3dmat_varK_3dK(n_rs, N_1, m_nn, 1)
 *     if idnn_in_ars is NULL:             # <<<<<<<<<<<<<<
 *         return NULL
 *     cdef Py_ssize_t rs, i, j, k, n
 */
  }

  /* "fmsne_implem.pyx":3438
 *         return NULL
 *     cdef Py_ssize_t rs, i, j, k, n
 *     for rs in range(n_rs):             # <<<<<<<<<<<<<<
 *         for i in range(N_1):
 *             k = 0
 */
  __pyx_t_2 = __pyx_v_n_rs;
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_rs = __pyx_t_4;

    /* "fmsne_implem.pyx":3439
 *     cdef Py_ssize_t rs, i, j, k, n
 *     for rs in range(n_rs):
 *         for i in range(N_1):             # <<<<<<<<<<<<<<
 *             k = 0
 *             for j in range(3, m_nn[rs][i][0], 4):
 */
    __pyx_t_5 = __pyx_v_N_1;
    __pyx_t_6 = __pyx_t_5;
    for (__pyx_t_7 = 0; __pyx_t_7 < __pyx_t_6; __pyx_t_7+=1) {
      __pyx_v_i = __pyx_t_7;

      /* "fmsne_implem.pyx":3440
 *     for rs in range(n_rs):
 *         for i in range(N_1):
 *             k = 0             # <<<<<<<<<<<<<<
 *             for j in range(3, m_nn[rs][i][0], 4):
 *                 for n in range(nnn_all_rs[i]):
 */
      __pyx_v_k = 0;

      /* "fmsne_implem.pyx":3441
 *         for i in range(N_1):
 *             k = 0
 *             for j in range(3, m_nn[rs][i][0], 4):             # <<<<<<<<<<<<<<
 *                 for n in range(nnn_all_rs[i]):
 *                     if inn_all_rs[i][n] == m_nn[rs][i][j]:
 */
      __pyx_t_8 = (((__pyx_v_m_nn[__pyx_v_rs])[__pyx_v_i])[0]);
      __pyx_t_9 = __pyx_t_8;
      for (__pyx_t_10 = 3; __pyx_t_10 < __pyx_t_9; __pyx_t_10+=4) {
        __pyx_v_j = __pyx_t_10;

        /* "fmsne_implem.pyx":3442
 *             k = 0
 *             for j in range(3, m_nn[rs][i][0], 4):
 *                 for n in range(nnn_all_rs[i]):             # <<<<<<<<<<<<<<
 *                     if inn_all_rs[i][n] == m_nn[rs][i][j]:
 *                         idnn_in_ars[rs][i][k] = n
 */
        __pyx_t_11 = (__pyx_v_nnn_all_rs[__pyx_v_i]);
        __pyx_t_12 = __pyx_t_11;
        for (__pyx_t_13 = 0; __pyx_t_13 < __pyx_t_12; __pyx_t_13+=1) {
          __pyx_v_n = __pyx_t_13;

          /* "fmsne_implem.pyx":3443
 *             for j in range(3, m_nn[rs][i][0], 4):
 *                 for n in range(nnn_all_rs[i]):
 *                     if inn_all_rs[i][n] == m_nn[rs][i][j]:             # <<<<<<<<<<<<<<
 *                         idnn_in_ars[rs][i][k] = n
 *                         k += 1
 */
          __pyx_t_1 = ((((__pyx_v_inn_all_rs[__pyx_v_i])[__pyx_v_n]) == (((__pyx_v_m_nn[__pyx_v_rs])[__pyx_v_i])[__pyx_v_j])) != 0);
          if (__pyx_t_1) {

            /* "fmsne_implem.pyx":3444
 *                 for n in range(nnn_all_rs[i]):
 *                     if inn_all_rs[i][n] == m_nn[rs][i][j]:
 *                         idnn_in_ars[rs][i][k] = n             # <<<<<<<<<<<<<<
 *                         k += 1
 *                         break
 */
            (((__pyx_v_idnn_in_ars[__pyx_v_rs])[__pyx_v_i])[__pyx_v_k]) = __pyx_v_n;

            /* "fmsne_implem.pyx":3445
 *                     if inn_all_rs[i][n] == m_nn[rs][i][j]:
 *                         idnn_in_ars[rs][i][k] = n
 *                         k += 1             # <<<<<<<<<<<<<<
 *                         break
 *                 else:
 */
            __pyx_v_k = (__pyx_v_k + 1);

            /* "fmsne_implem.pyx":3446
 *                         idnn_in_ars[rs][i][k] = n
 *                         k += 1
 *                         break             # <<<<<<<<<<<<<<
 *                 else:
 *                     free_Pysst_3dmat(idnn_in_ars, n_rs, N_1)
 */
            goto __pyx_L11_break;

            /* "fmsne_implem.pyx":3443
 *             for j in range(3, m_nn[rs][i][0], 4):
 *                 for n in range(nnn_all_rs[i]):
 *                     if inn_all_rs[i][n] == m_nn[rs][i][j]:             # <<<<<<<<<<<<<<
 *                         idnn_in_ars[rs][i][k] = n
 *                         k += 1
 */
          }
        }
        /*else*/ {

          /* "fmsne_implem.pyx":3448
 *                         break
 *                 else:
 *                     free_Pysst_3dmat(idnn_in_ars, n_rs, N_1)             # <<<<<<<<<<<<<<
 *                     return NULL
 *     return idnn_in_ars
 */
          __pyx_f_12fmsne_implem_free_Pysst_3dmat(__pyx_v_idnn_in_ars, __pyx_v_n_rs, __pyx_v_N_1);

          /* "fmsne_implem.pyx":3449
 *                 else:
 *                     free_Pysst_3dmat(idnn_in_ars, n_rs, N_1)
 *                     return NULL             # <<<<<<<<<<<<<<
 *     return idnn_in_ars
 * 
 */
          __pyx_r = NULL;
          goto __pyx_L0;
        }
        __pyx_L11_break:;
      }
    }
  }

  /* "fmsne_implem.pyx":3450
 *                     free_Pysst_3dmat(idnn_in_ars, n_rs, N_1)
 *                     return NULL
 *     return idnn_in_ars             # <<<<<<<<<<<<<<
 * 
 * cdef inline void fmstsne_symmetrize(Py_ssize_t n_rs, Py_ssize_t N_1, double*** sim_hd, Py_ssize_t*** m_nn, double*** sim_hd_sym) nogil:
 */
  __pyx_r = __pyx_v_idnn_in_ars;
  goto __pyx_L0;

  /* "fmsne_implem.pyx":3431
 *     return inn_all_rs
 * 
 * cdef inline Py_ssize_t*** fms_nn_rs_match_all_rs(Py_ssize_t n_rs, Py_ssize_t N_1, Py_ssize_t** inn_all_rs, Py_ssize_t* nnn_all_rs, Py_ssize_t*** m_nn):             # <<<<<<<<<<<<<<
 *     """
 *     """
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "fmsne_implem.pyx":3452
 *     return idnn_in_ars
 * 
 * cdef inline void fmstsne_symmetrize(Py_ssize_t n_rs, Py_ssize_t N_1, double*** sim_hd, Py_ssize_t*** m_nn, double*** sim_hd_sym) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     This assumes that the nearest neighbor sets are symmetric: if i is in the neighbors of j (ie in arr_nn_i_rs[rs][j]), then j must be in the neighbors of i (ie in arr_nn_i_rs[rs][i]).
 */

static CYTHON_INLINE void __pyx_f_12fmsne_implem_fmstsne_symmetrize(Py_ssize_t __pyx_v_n_rs, Py_ssize_t __pyx_v_N_1, double ***__pyx_v_sim_hd, Py_ssize_t ***__pyx_v_m_nn, double ***__pyx_v_sim_hd_sym) {
  double __pyx_v_tot;
  Py_ssize_t __pyx_v_rs;
  Py_ssize_t __pyx_v_i;
  Py_ssize_t __pyx_v_idj;
  Py_ssize_t __pyx_v_inn;
  Py_ssize_t __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  Py_ssize_t __pyx_t_7;
  Py_ssize_t __pyx_t_8;
  Py_ssize_t __pyx_t_9;
  Py_ssize_t __pyx_t_10;
  Py_ssize_t __pyx_t_11;
  Py_ssize_t __pyx_t_12;

  /* "fmsne_implem.pyx":3459
 *     cdef double tot
 *     cdef Py_ssize_t rs, i, idj, inn
 *     for rs in range(n_rs):             # <<<<<<<<<<<<<<
 *         tot = 0.0
 *         for i in range(N_1):
 */
  __pyx_t_1 = __pyx_v_n_rs;
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_rs = __pyx_t_3;

    /* "fmsne_implem.pyx":3460
 *     cdef Py_ssize_t rs, i, idj, inn
 *     for rs in range(n_rs):
 *         tot = 0.0             # <<<<<<<<<<<<<<
 *         for i in range(N_1):
 *             for inn in range(2, m_nn[rs][i][0], 4):
 */
    __pyx_v_tot = 0.0;

    /* "fmsne_implem.pyx":3461
 *     for rs in range(n_rs):
 *         tot = 0.0
 *         for i in range(N_1):             # <<<<<<<<<<<<<<
 *             for inn in range(2, m_nn[rs][i][0], 4):
 *                 idj = m_nn[rs][i][inn]
 */
    __pyx_t_4 = __pyx_v_N_1;
    __pyx_t_5 = __pyx_t_4;
    for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
      __pyx_v_i = __pyx_t_6;

      /* "fmsne_implem.pyx":3462
 *         tot = 0.0
 *         for i in range(N_1):
 *             for inn in range(2, m_nn[rs][i][0], 4):             # <<<<<<<<<<<<<<
 *                 idj = m_nn[rs][i][inn]
 *                 sim_hd_sym[rs][i][idj] = sim_hd[rs][i][idj] + sim_hd[rs][m_nn[rs][i][inn+3]][m_nn[rs][i][inn+2]]
 */
      __pyx_t_7 = (((__pyx_v_m_nn[__pyx_v_rs])[__pyx_v_i])[0]);
      __pyx_t_8 = __pyx_t_7;
      for (__pyx_t_9 = 2; __pyx_t_9 < __pyx_t_8; __pyx_t_9+=4) {
        __pyx_v_inn = __pyx_t_9;

        /* "fmsne_implem.pyx":3463
 *         for i in range(N_1):
 *             for inn in range(2, m_nn[rs][i][0], 4):
 *                 idj = m_nn[rs][i][inn]             # <<<<<<<<<<<<<<
 *                 sim_hd_sym[rs][i][idj] = sim_hd[rs][i][idj] + sim_hd[rs][m_nn[rs][i][inn+3]][m_nn[rs][i][inn+2]]
 *                 tot += sim_hd_sym[rs][i][idj]
 */
        __pyx_v_idj = (((__pyx_v_m_nn[__pyx_v_rs])[__pyx_v_i])[__pyx_v_inn]);

        /* "fmsne_implem.pyx":3464
 *             for inn in range(2, m_nn[rs][i][0], 4):
 *                 idj = m_nn[rs][i][inn]
 *                 sim_hd_sym[rs][i][idj] = sim_hd[rs][i][idj] + sim_hd[rs][m_nn[rs][i][inn+3]][m_nn[rs][i][inn+2]]             # <<<<<<<<<<<<<<
 *                 tot += sim_hd_sym[rs][i][idj]
 *         tot = 1.0/(2.0*tot)
 */
        (((__pyx_v_sim_hd_sym[__pyx_v_rs])[__pyx_v_i])[__pyx_v_idj]) = ((((__pyx_v_sim_hd[__pyx_v_rs])[__pyx_v_i])[__pyx_v_idj]) + (((__pyx_v_sim_hd[__pyx_v_rs])[(((__pyx_v_m_nn[__pyx_v_rs])[__pyx_v_i])[(__pyx_v_inn + 3)])])[(((__pyx_v_m_nn[__pyx_v_rs])[__pyx_v_i])[(__pyx_v_inn + 2)])]));

        /* "fmsne_implem.pyx":3465
 *                 idj = m_nn[rs][i][inn]
 *                 sim_hd_sym[rs][i][idj] = sim_hd[rs][i][idj] + sim_hd[rs][m_nn[rs][i][inn+3]][m_nn[rs][i][inn+2]]
 *                 tot += sim_hd_sym[rs][i][idj]             # <<<<<<<<<<<<<<
 *         tot = 1.0/(2.0*tot)
 *         for i in range(N_1):
 */
        __pyx_v_tot = (__pyx_v_tot + (((__pyx_v_sim_hd_sym[__pyx_v_rs])[__pyx_v_i])[__pyx_v_idj]));
      }
    }

    /* "fmsne_implem.pyx":3466
 *                 sim_hd_sym[rs][i][idj] = sim_hd[rs][i][idj] + sim_hd[rs][m_nn[rs][i][inn+3]][m_nn[rs][i][inn+2]]
 *                 tot += sim_hd_sym[rs][i][idj]
 *         tot = 1.0/(2.0*tot)             # <<<<<<<<<<<<<<
 *         for i in range(N_1):
 *             for inn in range(2, m_nn[rs][i][0], 4):
 */
    __pyx_v_tot = (1.0 / (2.0 * __pyx_v_tot));

    /* "fmsne_implem.pyx":3467
 *                 tot += sim_hd_sym[rs][i][idj]
 *         tot = 1.0/(2.0*tot)
 *         for i in range(N_1):             # <<<<<<<<<<<<<<
 *             for inn in range(2, m_nn[rs][i][0], 4):
 *                 sim_hd_sym[rs][i][m_nn[rs][i][inn]] *= tot
 */
    __pyx_t_4 = __pyx_v_N_1;
    __pyx_t_5 = __pyx_t_4;
    for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
      __pyx_v_i = __pyx_t_6;

      /* "fmsne_implem.pyx":3468
 *         tot = 1.0/(2.0*tot)
 *         for i in range(N_1):
 *             for inn in range(2, m_nn[rs][i][0], 4):             # <<<<<<<<<<<<<<
 *                 sim_hd_sym[rs][i][m_nn[rs][i][inn]] *= tot
 * 
 */
      __pyx_t_7 = (((__pyx_v_m_nn[__pyx_v_rs])[__pyx_v_i])[0]);
      __pyx_t_8 = __pyx_t_7;
      for (__pyx_t_9 = 2; __pyx_t_9 < __pyx_t_8; __pyx_t_9+=4) {
        __pyx_v_inn = __pyx_t_9;

        /* "fmsne_implem.pyx":3469
 *         for i in range(N_1):
 *             for inn in range(2, m_nn[rs][i][0], 4):
 *                 sim_hd_sym[rs][i][m_nn[rs][i][inn]] *= tot             # <<<<<<<<<<<<<<
 * 
 * cdef struct Opfmstsne:
 */
        __pyx_t_10 = __pyx_v_rs;
        __pyx_t_11 = __pyx_v_i;
        __pyx_t_12 = (((__pyx_v_m_nn[__pyx_v_rs])[__pyx_v_i])[__pyx_v_inn]);
        (((__pyx_v_sim_hd_sym[__pyx_t_10])[__pyx_t_11])[__pyx_t_12]) = ((((__pyx_v_sim_hd_sym[__pyx_t_10])[__pyx_t_11])[__pyx_t_12]) * __pyx_v_tot);
      }
    }
  }

  /* "fmsne_implem.pyx":3452
 *     return idnn_in_ars
 * 
 * cdef inline void fmstsne_symmetrize(Py_ssize_t n_rs, Py_ssize_t N_1, double*** sim_hd, Py_ssize_t*** m_nn, double*** sim_hd_sym) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     This assumes that the nearest neighbor sets are symmetric: if i is in the neighbors of j (ie in arr_nn_i_rs[rs][j]), then j must be in the neighbors of i (ie in arr_nn_i_rs[rs][i]).
 */

  /* function exit code */
}

/* "fmsne_implem.pyx":3491
 *     double* qdiff               # Array with n_components elements to store intermediate computations when traversing the tree
 * 
 * cdef inline lbfgsfloatval_t fmstsne_evaluate(void* instance, const lbfgsfloatval_t* x, lbfgsfloatval_t* g, const int n, const lbfgsfloatval_t step):             # <<<<<<<<<<<<<<
 *     """
 *     Computes cost function and gradient for the current LD coordinates.
 */

static CYTHON_INLINE lbfgsfloatval_t __pyx_f_12fmsne_implem_fmstsne_evaluate(void *__pyx_v_instance, lbfgsfloatval_t const *__pyx_v_x, lbfgsfloatval_t *__pyx_v_g, int const __pyx_v_n, CYTHON_UNUSED lbfgsfloatval_t const __pyx_v_step) {
  struct __pyx_t_12fmsne_implem_Opfmstsne *__pyx_v_popt;
  struct __pyx_t_12fmsne_implem_SpTree *__pyx_v_tree;
  Py_ssize_t __pyx_v_i;
  Py_ssize_t __pyx_v_rs;
  Py_ssize_t __pyx_v_idx;
  Py_ssize_t __pyx_v_k;
  Py_ssize_t __pyx_v_inn;
  Py_ssize_t __pyx_v_j;
  Py_ssize_t __pyx_v_idj;
  double __pyx_v_Z;
  double __pyx_v_cfx;
  double __pyx_v_a;
  double const *__pyx_v_xi;
  lbfgsfloatval_t __pyx_v_fx;
  lbfgsfloatval_t __pyx_r;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  Py_ssize_t __pyx_t_7;
  Py_ssize_t __pyx_t_8;
  Py_ssize_t __pyx_t_9;
  Py_ssize_t __pyx_t_10;
  Py_ssize_t __pyx_t_11;
  Py_ssize_t __pyx_t_12;
  Py_ssize_t __pyx_t_13;
  Py_ssize_t __pyx_t_14;
  Py_ssize_t __pyx_t_15;
  Py_ssize_t __pyx_t_16;
  __Pyx_RefNannySetupContext("fmstsne_evaluate", 0);

  /* "fmsne_implem.pyx":3498
 *     We exploit the fact that the nearest neighbor sets are symmetric.
 *     """
 *     cdef Opfmstsne* popt = <Opfmstsne*> instance             # <<<<<<<<<<<<<<
 *     # Initializing the gradient to 0
 *     memset(g, 0, popt.sstx)
 */
  __pyx_v_popt = ((struct __pyx_t_12fmsne_implem_Opfmstsne *)__pyx_v_instance);

  /* "fmsne_implem.pyx":3500
 *     cdef Opfmstsne* popt = <Opfmstsne*> instance
 *     # Initializing the gradient to 0
 *     memset(g, 0, popt.sstx)             # <<<<<<<<<<<<<<
 *     # Creating the space-partitioning tree without supplementary attributes
 *     cdef SpTree* tree = cinit_SpTree(x, popt.N, popt.n_components, False, NULL, 0, popt.inter_fct)
 */
  (void)(memset(__pyx_v_g, 0, __pyx_v_popt->sstx));

  /* "fmsne_implem.pyx":3502
 *     memset(g, 0, popt.sstx)
 *     # Creating the space-partitioning tree without supplementary attributes
 *     cdef SpTree* tree = cinit_SpTree(x, popt.N, popt.n_components, False, NULL, 0, popt.inter_fct)             # <<<<<<<<<<<<<<
 *     # Index variables
 *     cdef Py_ssize_t i, rs, idx, k, inn, j, idj
 */
  __pyx_v_tree = __pyx_f_12fmsne_implem_cinit_SpTree(__pyx_v_x, __pyx_v_popt->N, __pyx_v_popt->n_components, 0, NULL, 0, __pyx_v_popt->inter_fct);

  /* "fmsne_implem.pyx":3507
 *     # Intermediate variables. Z will store the denominator of the LD similarities, as computed by the Barnes-Hut algorithm
 *     cdef double Z, cfx, a
 *     Z = 0.0             # <<<<<<<<<<<<<<
 *     # Stores the index of the currently considered data point in x
 *     idx = 0
 */
  __pyx_v_Z = 0.0;

  /* "fmsne_implem.pyx":3509
 *     Z = 0.0
 *     # Stores the index of the currently considered data point in x
 *     idx = 0             # <<<<<<<<<<<<<<
 *     # For each data point
 *     for i in range(popt.N):
 */
  __pyx_v_idx = 0;

  /* "fmsne_implem.pyx":3511
 *     idx = 0
 *     # For each data point
 *     for i in range(popt.N):             # <<<<<<<<<<<<<<
 *         Z += approxInteractions_SpTree(tree, &x[idx], popt.theta_s, &g[idx], NULL, NULL, NULL, NULL, popt.qdiff, popt.n_components, 0)
 *         idx += popt.n_components
 */
  __pyx_t_1 = __pyx_v_popt->N;
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "fmsne_implem.pyx":3512
 *     # For each data point
 *     for i in range(popt.N):
 *         Z += approxInteractions_SpTree(tree, &x[idx], popt.theta_s, &g[idx], NULL, NULL, NULL, NULL, popt.qdiff, popt.n_components, 0)             # <<<<<<<<<<<<<<
 *         idx += popt.n_components
 *     # Free the ressources allocated for the tree
 */
    __pyx_v_Z = (__pyx_v_Z + __pyx_f_12fmsne_implem_approxInteractions_SpTree(__pyx_v_tree, (&(__pyx_v_x[__pyx_v_idx])), __pyx_v_popt->theta_s, (&(__pyx_v_g[__pyx_v_idx])), NULL, NULL, NULL, NULL, __pyx_v_popt->qdiff, __pyx_v_popt->n_components, 0));

    /* "fmsne_implem.pyx":3513
 *     for i in range(popt.N):
 *         Z += approxInteractions_SpTree(tree, &x[idx], popt.theta_s, &g[idx], NULL, NULL, NULL, NULL, popt.qdiff, popt.n_components, 0)
 *         idx += popt.n_components             # <<<<<<<<<<<<<<
 *     # Free the ressources allocated for the tree
 *     free_SpTree(tree)
 */
    __pyx_v_idx = (__pyx_v_idx + __pyx_v_popt->n_components);
  }

  /* "fmsne_implem.pyx":3515
 *         idx += popt.n_components
 *     # Free the ressources allocated for the tree
 *     free_SpTree(tree)             # <<<<<<<<<<<<<<
 *     # Check whether Z is not too small
 *     if Z < FLOAT64_EPS:
 */
  __pyx_f_12fmsne_implem_free_SpTree(__pyx_v_tree);

  /* "fmsne_implem.pyx":3517
 *     free_SpTree(tree)
 *     # Check whether Z is not too small
 *     if Z < FLOAT64_EPS:             # <<<<<<<<<<<<<<
 *         Z = FLOAT64_EPS
 *     cfx = log(Z)
 */
  __pyx_t_4 = ((__pyx_v_Z < __pyx_v_12fmsne_implem_FLOAT64_EPS) != 0);
  if (__pyx_t_4) {

    /* "fmsne_implem.pyx":3518
 *     # Check whether Z is not too small
 *     if Z < FLOAT64_EPS:
 *         Z = FLOAT64_EPS             # <<<<<<<<<<<<<<
 *     cfx = log(Z)
 *     Z = popt.n_rs_f/Z
 */
    __pyx_v_Z = __pyx_v_12fmsne_implem_FLOAT64_EPS;

    /* "fmsne_implem.pyx":3517
 *     free_SpTree(tree)
 *     # Check whether Z is not too small
 *     if Z < FLOAT64_EPS:             # <<<<<<<<<<<<<<
 *         Z = FLOAT64_EPS
 *     cfx = log(Z)
 */
  }

  /* "fmsne_implem.pyx":3519
 *     if Z < FLOAT64_EPS:
 *         Z = FLOAT64_EPS
 *     cfx = log(Z)             # <<<<<<<<<<<<<<
 *     Z = popt.n_rs_f/Z
 *     # Normalizing the repulsive forces by Z
 */
  __pyx_v_cfx = log(__pyx_v_Z);

  /* "fmsne_implem.pyx":3520
 *         Z = FLOAT64_EPS
 *     cfx = log(Z)
 *     Z = popt.n_rs_f/Z             # <<<<<<<<<<<<<<
 *     # Normalizing the repulsive forces by Z
 *     for i in range(n):
 */
  __pyx_v_Z = (__pyx_v_popt->n_rs_f / __pyx_v_Z);

  /* "fmsne_implem.pyx":3522
 *     Z = popt.n_rs_f/Z
 *     # Normalizing the repulsive forces by Z
 *     for i in range(n):             # <<<<<<<<<<<<<<
 *         g[i] *= Z
 *     # Pointer toward the considered data point
 */
  __pyx_t_5 = __pyx_v_n;
  __pyx_t_6 = __pyx_t_5;
  for (__pyx_t_1 = 0; __pyx_t_1 < __pyx_t_6; __pyx_t_1+=1) {
    __pyx_v_i = __pyx_t_1;

    /* "fmsne_implem.pyx":3523
 *     # Normalizing the repulsive forces by Z
 *     for i in range(n):
 *         g[i] *= Z             # <<<<<<<<<<<<<<
 *     # Pointer toward the considered data point
 *     cdef const double* xi
 */
    __pyx_t_2 = __pyx_v_i;
    (__pyx_v_g[__pyx_t_2]) = ((__pyx_v_g[__pyx_t_2]) * __pyx_v_Z);
  }

  /* "fmsne_implem.pyx":3527
 *     cdef const double* xi
 *     # Cost function value to return
 *     cdef lbfgsfloatval_t fx = 0.0             # <<<<<<<<<<<<<<
 *     # For each data point
 *     idx = 0
 */
  __pyx_v_fx = 0.0;

  /* "fmsne_implem.pyx":3529
 *     cdef lbfgsfloatval_t fx = 0.0
 *     # For each data point
 *     idx = 0             # <<<<<<<<<<<<<<
 *     if popt.n_rs_geq1:
 *         for i in range(popt.N_1):
 */
  __pyx_v_idx = 0;

  /* "fmsne_implem.pyx":3530
 *     # For each data point
 *     idx = 0
 *     if popt.n_rs_geq1:             # <<<<<<<<<<<<<<
 *         for i in range(popt.N_1):
 *             # Currently considered data point
 */
  __pyx_t_4 = (__pyx_v_popt->n_rs_geq1 != 0);
  if (__pyx_t_4) {

    /* "fmsne_implem.pyx":3531
 *     idx = 0
 *     if popt.n_rs_geq1:
 *         for i in range(popt.N_1):             # <<<<<<<<<<<<<<
 *             # Currently considered data point
 *             xi = &x[idx]
 */
    __pyx_t_1 = __pyx_v_popt->N_1;
    __pyx_t_2 = __pyx_t_1;
    for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
      __pyx_v_i = __pyx_t_3;

      /* "fmsne_implem.pyx":3533
 *         for i in range(popt.N_1):
 *             # Currently considered data point
 *             xi = &x[idx]             # <<<<<<<<<<<<<<
 *             # Computing the LD distances which are needed
 *             for k in range(popt.nnn_all_rs[i]):
 */
      __pyx_v_xi = (&(__pyx_v_x[__pyx_v_idx]));

      /* "fmsne_implem.pyx":3535
 *             xi = &x[idx]
 *             # Computing the LD distances which are needed
 *             for k in range(popt.nnn_all_rs[i]):             # <<<<<<<<<<<<<<
 *                 # Storing the distance
 *                 popt.dsld_all_rs[k] = 1.0 + sqeucl_dist_ptr(xi, &x[popt.inn_all_rs[i][k]], popt.n_components)
 */
      __pyx_t_7 = (__pyx_v_popt->nnn_all_rs[__pyx_v_i]);
      __pyx_t_8 = __pyx_t_7;
      for (__pyx_t_9 = 0; __pyx_t_9 < __pyx_t_8; __pyx_t_9+=1) {
        __pyx_v_k = __pyx_t_9;

        /* "fmsne_implem.pyx":3537
 *             for k in range(popt.nnn_all_rs[i]):
 *                 # Storing the distance
 *                 popt.dsld_all_rs[k] = 1.0 + sqeucl_dist_ptr(xi, &x[popt.inn_all_rs[i][k]], popt.n_components)             # <<<<<<<<<<<<<<
 *             # For each random sampling
 *             for rs in range(popt.n_rs):
 */
        (__pyx_v_popt->dsld_all_rs[__pyx_v_k]) = (1.0 + __pyx_f_12fmsne_implem_sqeucl_dist_ptr(__pyx_v_xi, (&(__pyx_v_x[((__pyx_v_popt->inn_all_rs[__pyx_v_i])[__pyx_v_k])])), __pyx_v_popt->n_components));
      }

      /* "fmsne_implem.pyx":3539
 *                 popt.dsld_all_rs[k] = 1.0 + sqeucl_dist_ptr(xi, &x[popt.inn_all_rs[i][k]], popt.n_components)
 *             # For each random sampling
 *             for rs in range(popt.n_rs):             # <<<<<<<<<<<<<<
 *                 k = 0
 *                 for inn in range(2, popt.m_nn[rs][i][0], 4):
 */
      __pyx_t_7 = __pyx_v_popt->n_rs;
      __pyx_t_8 = __pyx_t_7;
      for (__pyx_t_9 = 0; __pyx_t_9 < __pyx_t_8; __pyx_t_9+=1) {
        __pyx_v_rs = __pyx_t_9;

        /* "fmsne_implem.pyx":3540
 *             # For each random sampling
 *             for rs in range(popt.n_rs):
 *                 k = 0             # <<<<<<<<<<<<<<
 *                 for inn in range(2, popt.m_nn[rs][i][0], 4):
 *                     a = popt.dsld_all_rs[popt.idnn_in_ars[rs][i][k]]
 */
        __pyx_v_k = 0;

        /* "fmsne_implem.pyx":3541
 *             for rs in range(popt.n_rs):
 *                 k = 0
 *                 for inn in range(2, popt.m_nn[rs][i][0], 4):             # <<<<<<<<<<<<<<
 *                     a = popt.dsld_all_rs[popt.idnn_in_ars[rs][i][k]]
 *                     Z = popt.sim_hd_ms[rs][i][popt.m_nn[rs][i][inn]]
 */
        __pyx_t_10 = (((__pyx_v_popt->m_nn[__pyx_v_rs])[__pyx_v_i])[0]);
        __pyx_t_11 = __pyx_t_10;
        for (__pyx_t_12 = 2; __pyx_t_12 < __pyx_t_11; __pyx_t_12+=4) {
          __pyx_v_inn = __pyx_t_12;

          /* "fmsne_implem.pyx":3542
 *                 k = 0
 *                 for inn in range(2, popt.m_nn[rs][i][0], 4):
 *                     a = popt.dsld_all_rs[popt.idnn_in_ars[rs][i][k]]             # <<<<<<<<<<<<<<
 *                     Z = popt.sim_hd_ms[rs][i][popt.m_nn[rs][i][inn]]
 *                     # Updating the cost function
 */
          __pyx_v_a = (__pyx_v_popt->dsld_all_rs[(((__pyx_v_popt->idnn_in_ars[__pyx_v_rs])[__pyx_v_i])[__pyx_v_k])]);

          /* "fmsne_implem.pyx":3543
 *                 for inn in range(2, popt.m_nn[rs][i][0], 4):
 *                     a = popt.dsld_all_rs[popt.idnn_in_ars[rs][i][k]]
 *                     Z = popt.sim_hd_ms[rs][i][popt.m_nn[rs][i][inn]]             # <<<<<<<<<<<<<<
 *                     # Updating the cost function
 *                     fx += Z * log(a)
 */
          __pyx_v_Z = (((__pyx_v_popt->sim_hd_ms[__pyx_v_rs])[__pyx_v_i])[(((__pyx_v_popt->m_nn[__pyx_v_rs])[__pyx_v_i])[__pyx_v_inn])]);

          /* "fmsne_implem.pyx":3545
 *                     Z = popt.sim_hd_ms[rs][i][popt.m_nn[rs][i][inn]]
 *                     # Updating the cost function
 *                     fx += Z * log(a)             # <<<<<<<<<<<<<<
 *                     # Updating the gradient
 *                     Z /= a
 */
          __pyx_v_fx = (__pyx_v_fx + (__pyx_v_Z * log(__pyx_v_a)));

          /* "fmsne_implem.pyx":3547
 *                     fx += Z * log(a)
 *                     # Updating the gradient
 *                     Z /= a             # <<<<<<<<<<<<<<
 *                     idj = popt.m_nn[rs][i][inn+1]
 *                     for j in range(popt.n_components):
 */
          __pyx_v_Z = (__pyx_v_Z / __pyx_v_a);

          /* "fmsne_implem.pyx":3548
 *                     # Updating the gradient
 *                     Z /= a
 *                     idj = popt.m_nn[rs][i][inn+1]             # <<<<<<<<<<<<<<
 *                     for j in range(popt.n_components):
 *                         a = Z * (xi[j] - x[idj])
 */
          __pyx_v_idj = (((__pyx_v_popt->m_nn[__pyx_v_rs])[__pyx_v_i])[(__pyx_v_inn + 1)]);

          /* "fmsne_implem.pyx":3549
 *                     Z /= a
 *                     idj = popt.m_nn[rs][i][inn+1]
 *                     for j in range(popt.n_components):             # <<<<<<<<<<<<<<
 *                         a = Z * (xi[j] - x[idj])
 *                         g[idx+j] += a
 */
          __pyx_t_13 = __pyx_v_popt->n_components;
          __pyx_t_14 = __pyx_t_13;
          for (__pyx_t_15 = 0; __pyx_t_15 < __pyx_t_14; __pyx_t_15+=1) {
            __pyx_v_j = __pyx_t_15;

            /* "fmsne_implem.pyx":3550
 *                     idj = popt.m_nn[rs][i][inn+1]
 *                     for j in range(popt.n_components):
 *                         a = Z * (xi[j] - x[idj])             # <<<<<<<<<<<<<<
 *                         g[idx+j] += a
 *                         g[idj] -= a
 */
            __pyx_v_a = (__pyx_v_Z * ((__pyx_v_xi[__pyx_v_j]) - (__pyx_v_x[__pyx_v_idj])));

            /* "fmsne_implem.pyx":3551
 *                     for j in range(popt.n_components):
 *                         a = Z * (xi[j] - x[idj])
 *                         g[idx+j] += a             # <<<<<<<<<<<<<<
 *                         g[idj] -= a
 *                         idj += 1
 */
            __pyx_t_16 = (__pyx_v_idx + __pyx_v_j);
            (__pyx_v_g[__pyx_t_16]) = ((__pyx_v_g[__pyx_t_16]) + __pyx_v_a);

            /* "fmsne_implem.pyx":3552
 *                         a = Z * (xi[j] - x[idj])
 *                         g[idx+j] += a
 *                         g[idj] -= a             # <<<<<<<<<<<<<<
 *                         idj += 1
 *                     k += 1
 */
            __pyx_t_16 = __pyx_v_idj;
            (__pyx_v_g[__pyx_t_16]) = ((__pyx_v_g[__pyx_t_16]) - __pyx_v_a);

            /* "fmsne_implem.pyx":3553
 *                         g[idx+j] += a
 *                         g[idj] -= a
 *                         idj += 1             # <<<<<<<<<<<<<<
 *                     k += 1
 *             idx += popt.n_components
 */
            __pyx_v_idj = (__pyx_v_idj + 1);
          }

          /* "fmsne_implem.pyx":3554
 *                         g[idj] -= a
 *                         idj += 1
 *                     k += 1             # <<<<<<<<<<<<<<
 *             idx += popt.n_components
 *     else:
 */
          __pyx_v_k = (__pyx_v_k + 1);
        }
      }

      /* "fmsne_implem.pyx":3555
 *                         idj += 1
 *                     k += 1
 *             idx += popt.n_components             # <<<<<<<<<<<<<<
 *     else:
 *         for i in range(popt.N_1):
 */
      __pyx_v_idx = (__pyx_v_idx + __pyx_v_popt->n_components);
    }

    /* "fmsne_implem.pyx":3530
 *     # For each data point
 *     idx = 0
 *     if popt.n_rs_geq1:             # <<<<<<<<<<<<<<
 *         for i in range(popt.N_1):
 *             # Currently considered data point
 */
    goto __pyx_L8;
  }

  /* "fmsne_implem.pyx":3557
 *             idx += popt.n_components
 *     else:
 *         for i in range(popt.N_1):             # <<<<<<<<<<<<<<
 *             # Currently considered data point
 *             xi = &x[idx]
 */
  /*else*/ {
    __pyx_t_1 = __pyx_v_popt->N_1;
    __pyx_t_2 = __pyx_t_1;
    for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
      __pyx_v_i = __pyx_t_3;

      /* "fmsne_implem.pyx":3559
 *         for i in range(popt.N_1):
 *             # Currently considered data point
 *             xi = &x[idx]             # <<<<<<<<<<<<<<
 *             for inn in range(2, popt.m_nn[0][i][0], 4):
 *                 idj = popt.m_nn[0][i][inn+1]
 */
      __pyx_v_xi = (&(__pyx_v_x[__pyx_v_idx]));

      /* "fmsne_implem.pyx":3560
 *             # Currently considered data point
 *             xi = &x[idx]
 *             for inn in range(2, popt.m_nn[0][i][0], 4):             # <<<<<<<<<<<<<<
 *                 idj = popt.m_nn[0][i][inn+1]
 *                 a = 1.0 + sqeucl_dist_ptr(xi, &x[idj], popt.n_components)
 */
      __pyx_t_7 = (((__pyx_v_popt->m_nn[0])[__pyx_v_i])[0]);
      __pyx_t_8 = __pyx_t_7;
      for (__pyx_t_9 = 2; __pyx_t_9 < __pyx_t_8; __pyx_t_9+=4) {
        __pyx_v_inn = __pyx_t_9;

        /* "fmsne_implem.pyx":3561
 *             xi = &x[idx]
 *             for inn in range(2, popt.m_nn[0][i][0], 4):
 *                 idj = popt.m_nn[0][i][inn+1]             # <<<<<<<<<<<<<<
 *                 a = 1.0 + sqeucl_dist_ptr(xi, &x[idj], popt.n_components)
 *                 Z = popt.sim_hd_ms[0][i][popt.m_nn[0][i][inn]]
 */
        __pyx_v_idj = (((__pyx_v_popt->m_nn[0])[__pyx_v_i])[(__pyx_v_inn + 1)]);

        /* "fmsne_implem.pyx":3562
 *             for inn in range(2, popt.m_nn[0][i][0], 4):
 *                 idj = popt.m_nn[0][i][inn+1]
 *                 a = 1.0 + sqeucl_dist_ptr(xi, &x[idj], popt.n_components)             # <<<<<<<<<<<<<<
 *                 Z = popt.sim_hd_ms[0][i][popt.m_nn[0][i][inn]]
 *                 # Updating the cost function
 */
        __pyx_v_a = (1.0 + __pyx_f_12fmsne_implem_sqeucl_dist_ptr(__pyx_v_xi, (&(__pyx_v_x[__pyx_v_idj])), __pyx_v_popt->n_components));

        /* "fmsne_implem.pyx":3563
 *                 idj = popt.m_nn[0][i][inn+1]
 *                 a = 1.0 + sqeucl_dist_ptr(xi, &x[idj], popt.n_components)
 *                 Z = popt.sim_hd_ms[0][i][popt.m_nn[0][i][inn]]             # <<<<<<<<<<<<<<
 *                 # Updating the cost function
 *                 fx += Z * log(a)
 */
        __pyx_v_Z = (((__pyx_v_popt->sim_hd_ms[0])[__pyx_v_i])[(((__pyx_v_popt->m_nn[0])[__pyx_v_i])[__pyx_v_inn])]);

        /* "fmsne_implem.pyx":3565
 *                 Z = popt.sim_hd_ms[0][i][popt.m_nn[0][i][inn]]
 *                 # Updating the cost function
 *                 fx += Z * log(a)             # <<<<<<<<<<<<<<
 *                 # Updating the gradient
 *                 Z /= a
 */
        __pyx_v_fx = (__pyx_v_fx + (__pyx_v_Z * log(__pyx_v_a)));

        /* "fmsne_implem.pyx":3567
 *                 fx += Z * log(a)
 *                 # Updating the gradient
 *                 Z /= a             # <<<<<<<<<<<<<<
 *                 for j in range(popt.n_components):
 *                     a = Z * (xi[j] - x[idj])
 */
        __pyx_v_Z = (__pyx_v_Z / __pyx_v_a);

        /* "fmsne_implem.pyx":3568
 *                 # Updating the gradient
 *                 Z /= a
 *                 for j in range(popt.n_components):             # <<<<<<<<<<<<<<
 *                     a = Z * (xi[j] - x[idj])
 *                     g[idx+j] += a
 */
        __pyx_t_10 = __pyx_v_popt->n_components;
        __pyx_t_11 = __pyx_t_10;
        for (__pyx_t_12 = 0; __pyx_t_12 < __pyx_t_11; __pyx_t_12+=1) {
          __pyx_v_j = __pyx_t_12;

          /* "fmsne_implem.pyx":3569
 *                 Z /= a
 *                 for j in range(popt.n_components):
 *                     a = Z * (xi[j] - x[idj])             # <<<<<<<<<<<<<<
 *                     g[idx+j] += a
 *                     g[idj] -= a
 */
          __pyx_v_a = (__pyx_v_Z * ((__pyx_v_xi[__pyx_v_j]) - (__pyx_v_x[__pyx_v_idj])));

          /* "fmsne_implem.pyx":3570
 *                 for j in range(popt.n_components):
 *                     a = Z * (xi[j] - x[idj])
 *                     g[idx+j] += a             # <<<<<<<<<<<<<<
 *                     g[idj] -= a
 *                     idj += 1
 */
          __pyx_t_13 = (__pyx_v_idx + __pyx_v_j);
          (__pyx_v_g[__pyx_t_13]) = ((__pyx_v_g[__pyx_t_13]) + __pyx_v_a);

          /* "fmsne_implem.pyx":3571
 *                     a = Z * (xi[j] - x[idj])
 *                     g[idx+j] += a
 *                     g[idj] -= a             # <<<<<<<<<<<<<<
 *                     idj += 1
 *             idx += popt.n_components
 */
          __pyx_t_13 = __pyx_v_idj;
          (__pyx_v_g[__pyx_t_13]) = ((__pyx_v_g[__pyx_t_13]) - __pyx_v_a);

          /* "fmsne_implem.pyx":3572
 *                     g[idx+j] += a
 *                     g[idj] -= a
 *                     idj += 1             # <<<<<<<<<<<<<<
 *             idx += popt.n_components
 *     # Normalizing the gradient
 */
          __pyx_v_idj = (__pyx_v_idj + 1);
        }
      }

      /* "fmsne_implem.pyx":3573
 *                     g[idj] -= a
 *                     idj += 1
 *             idx += popt.n_components             # <<<<<<<<<<<<<<
 *     # Normalizing the gradient
 *     for i in range(n):
 */
      __pyx_v_idx = (__pyx_v_idx + __pyx_v_popt->n_components);
    }
  }
  __pyx_L8:;

  /* "fmsne_implem.pyx":3575
 *             idx += popt.n_components
 *     # Normalizing the gradient
 *     for i in range(n):             # <<<<<<<<<<<<<<
 *         g[i] *= popt.inv_n_rs_4f
 *     # Returning the cost function value
 */
  __pyx_t_5 = __pyx_v_n;
  __pyx_t_6 = __pyx_t_5;
  for (__pyx_t_1 = 0; __pyx_t_1 < __pyx_t_6; __pyx_t_1+=1) {
    __pyx_v_i = __pyx_t_1;

    /* "fmsne_implem.pyx":3576
 *     # Normalizing the gradient
 *     for i in range(n):
 *         g[i] *= popt.inv_n_rs_4f             # <<<<<<<<<<<<<<
 *     # Returning the cost function value
 *     return fx*popt.inv_n_rs_2f + cfx
 */
    __pyx_t_2 = __pyx_v_i;
    (__pyx_v_g[__pyx_t_2]) = ((__pyx_v_g[__pyx_t_2]) * __pyx_v_popt->inv_n_rs_4f);
  }

  /* "fmsne_implem.pyx":3578
 *         g[i] *= popt.inv_n_rs_4f
 *     # Returning the cost function value
 *     return fx*popt.inv_n_rs_2f + cfx             # <<<<<<<<<<<<<<
 * 
 * cpdef inline void fmstsne_implem(double[::1] X_hds, double[::1] X_lds, int N, int d_hds, int n_components, bint cperp, int n_rs, double ms_thetha, int nit_max, double gtol, double ftol, int maxls, int maxcor, int L_min, int rseed):
 */
  __pyx_r = ((__pyx_v_fx * __pyx_v_popt->inv_n_rs_2f) + __pyx_v_cfx);
  goto __pyx_L0;

  /* "fmsne_implem.pyx":3491
 *     double* qdiff               # Array with n_components elements to store intermediate computations when traversing the tree
 * 
 * cdef inline lbfgsfloatval_t fmstsne_evaluate(void* instance, const lbfgsfloatval_t* x, lbfgsfloatval_t* g, const int n, const lbfgsfloatval_t step):             # <<<<<<<<<<<<<<
 *     """
 *     Computes cost function and gradient for the current LD coordinates.
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "fmsne_implem.pyx":3580
 *     return fx*popt.inv_n_rs_2f + cfx
 * 
 * cpdef inline void fmstsne_implem(double[::1] X_hds, double[::1] X_lds, int N, int d_hds, int n_components, bint cperp, int n_rs, double ms_thetha, int nit_max, double gtol, double ftol, int maxls, int maxcor, int L_min, int rseed):             # <<<<<<<<<<<<<<
 *     """
 *     Cython implementation of FMs t-SNE.
 */

static PyObject *__pyx_pw_12fmsne_implem_7fmstsne_implem(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static CYTHON_INLINE void __pyx_f_12fmsne_implem_fmstsne_implem(__Pyx_memviewslice __pyx_v_X_hds, __Pyx_memviewslice __pyx_v_X_lds, int __pyx_v_N, int __pyx_v_d_hds, int __pyx_v_n_components, int __pyx_v_cperp, int __pyx_v_n_rs, double __pyx_v_ms_thetha, int __pyx_v_nit_max, double __pyx_v_gtol, double __pyx_v_ftol, int __pyx_v_maxls, int __pyx_v_maxcor, int __pyx_v_L_min, int __pyx_v_rseed, CYTHON_UNUSED int __pyx_skip_dispatch) {
  double __pyx_v_Nd;
  int __pyx_v_K_star;
  int __pyx_v_isLmin1;
  int __pyx_v_isnotLmin1;
  int __pyx_v_L;
  int __pyx_v_sLm_nt;
  int *__pyx_v_K_h;
  int *__pyx_v_n_ds_h;
  int *__pyx_v_all_ind;
  int *__pyx_v_nnn_h;
  int ***__pyx_v_arr_nn_i_rs;
  int **__pyx_v_nnn_i_rs;
  double ***__pyx_v_ds_nn_i_rs;
  double ***__pyx_v_tau_h_i_rs;
  Py_ssize_t ***__pyx_v_m_nn;
  double ***__pyx_v_simhd_ms_nn_i_rs;
  double ***__pyx_v_simhd_h_nn_i_rs;
  Py_ssize_t *__pyx_v_nnn_all_rs;
  Py_ssize_t **__pyx_v_inn_all_rs;
  double *__pyx_v_dsld_all_rs;
  Py_ssize_t ***__pyx_v_idnn_in_ars;
  double *__pyx_v_xlds;
  int __pyx_v_prod_N_nc;
  size_t __pyx_v_shdp;
  lbfgsfloatval_t *__pyx_v_xopt;
  struct __pyx_t_12fmsne_implem_Opfmstsne *__pyx_v_popt;
  lbfgs_parameter_t __pyx_v_param;
  lbfgs_parameter_t *__pyx_v_pparam;
  Py_ssize_t __pyx_v_k;
  Py_ssize_t __pyx_v_h;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  long __pyx_t_3;
  long __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  __Pyx_RefNannySetupContext("fmstsne_implem", 0);

  /* "fmsne_implem.pyx":3587
 *     """
 *     # Fix the random seed
 *     srand(rseed)             # <<<<<<<<<<<<<<
 *     # Number of data points in double
 *     cdef double Nd = <double> N
 */
  srand(__pyx_v_rseed);

  /* "fmsne_implem.pyx":3589
 *     srand(rseed)
 *     # Number of data points in double
 *     cdef double Nd = <double> N             # <<<<<<<<<<<<<<
 * 
 *     #####
 */
  __pyx_v_Nd = ((double)__pyx_v_N);

  /* "fmsne_implem.pyx":3595
 *     #####
 * 
 *     cdef int K_star = 2             # <<<<<<<<<<<<<<
 *     cdef bint isLmin1 = L_min == 1
 *     cdef bint isnotLmin1 = not isLmin1
 */
  __pyx_v_K_star = 2;

  /* "fmsne_implem.pyx":3596
 * 
 *     cdef int K_star = 2
 *     cdef bint isLmin1 = L_min == 1             # <<<<<<<<<<<<<<
 *     cdef bint isnotLmin1 = not isLmin1
 *     # Number of scales
 */
  __pyx_v_isLmin1 = (__pyx_v_L_min == 1);

  /* "fmsne_implem.pyx":3597
 *     cdef int K_star = 2
 *     cdef bint isLmin1 = L_min == 1
 *     cdef bint isnotLmin1 = not isLmin1             # <<<<<<<<<<<<<<
 *     # Number of scales
 *     cdef int L = ms_def_n_scales(Nd, K_star, L_min, isLmin1)
 */
  __pyx_v_isnotLmin1 = (!(__pyx_v_isLmin1 != 0));

  /* "fmsne_implem.pyx":3599
 *     cdef bint isnotLmin1 = not isLmin1
 *     # Number of scales
 *     cdef int L = ms_def_n_scales(Nd, K_star, L_min, isLmin1)             # <<<<<<<<<<<<<<
 * 
 *     # Just a shift for the perplexity at first scale when L_min != 1
 */
  __pyx_v_L = __pyx_f_12fmsne_implem_ms_def_n_scales(__pyx_v_Nd, __pyx_v_K_star, __pyx_v_L_min, __pyx_v_isLmin1);

  /* "fmsne_implem.pyx":3602
 * 
 *     # Just a shift for the perplexity at first scale when L_min != 1
 *     cdef int sLm_nt = ms_def_shift_Lmin(isnotLmin1, L_min)             # <<<<<<<<<<<<<<
 * 
 *     # Perplexity at each scale
 */
  __pyx_v_sLm_nt = __pyx_f_12fmsne_implem_ms_def_shift_Lmin(__pyx_v_isnotLmin1, __pyx_v_L_min);

  /* "fmsne_implem.pyx":3605
 * 
 *     # Perplexity at each scale
 *     cdef int* K_h = ms_def_Kh(K_star, isnotLmin1, sLm_nt, L)             # <<<<<<<<<<<<<<
 *     if K_h is NULL:
 *         printf("Error in fmssne_implem function of fmsne_implem.pyx: out of memory for K_h.")
 */
  __pyx_v_K_h = __pyx_f_12fmsne_implem_ms_def_Kh(__pyx_v_K_star, __pyx_v_isnotLmin1, __pyx_v_sLm_nt, __pyx_v_L);

  /* "fmsne_implem.pyx":3606
 *     # Perplexity at each scale
 *     cdef int* K_h = ms_def_Kh(K_star, isnotLmin1, sLm_nt, L)
 *     if K_h is NULL:             # <<<<<<<<<<<<<<
 *         printf("Error in fmssne_implem function of fmsne_implem.pyx: out of memory for K_h.")
 *         exit(EXIT_FAILURE)
 */
  __pyx_t_1 = ((__pyx_v_K_h == NULL) != 0);
  if (__pyx_t_1) {

    /* "fmsne_implem.pyx":3607
 *     cdef int* K_h = ms_def_Kh(K_star, isnotLmin1, sLm_nt, L)
 *     if K_h is NULL:
 *         printf("Error in fmssne_implem function of fmsne_implem.pyx: out of memory for K_h.")             # <<<<<<<<<<<<<<
 *         exit(EXIT_FAILURE)
 * 
 */
    (void)(printf(((char const *)"Error in fmssne_implem function of fmsne_implem.pyx: out of memory for K_h.")));

    /* "fmsne_implem.pyx":3608
 *     if K_h is NULL:
 *         printf("Error in fmssne_implem function of fmsne_implem.pyx: out of memory for K_h.")
 *         exit(EXIT_FAILURE)             # <<<<<<<<<<<<<<
 * 
 *     #####
 */
    exit(EXIT_FAILURE);

    /* "fmsne_implem.pyx":3606
 *     # Perplexity at each scale
 *     cdef int* K_h = ms_def_Kh(K_star, isnotLmin1, sLm_nt, L)
 *     if K_h is NULL:             # <<<<<<<<<<<<<<
 *         printf("Error in fmssne_implem function of fmsne_implem.pyx: out of memory for K_h.")
 *         exit(EXIT_FAILURE)
 */
  }

  /* "fmsne_implem.pyx":3615
 * 
 *     # Size of the subsampled data set at each scale (except the first scale if L_min==1)
 *     cdef int* n_ds_h = f_def_n_ds_h(isLmin1, N, sLm_nt, Nd, L)             # <<<<<<<<<<<<<<
 *     if n_ds_h is NULL:
 *         PyMem_Free(K_h)
 */
  __pyx_v_n_ds_h = __pyx_f_12fmsne_implem_f_def_n_ds_h(__pyx_v_isLmin1, __pyx_v_N, __pyx_v_sLm_nt, __pyx_v_Nd, __pyx_v_L);

  /* "fmsne_implem.pyx":3616
 *     # Size of the subsampled data set at each scale (except the first scale if L_min==1)
 *     cdef int* n_ds_h = f_def_n_ds_h(isLmin1, N, sLm_nt, Nd, L)
 *     if n_ds_h is NULL:             # <<<<<<<<<<<<<<
 *         PyMem_Free(K_h)
 *         printf("Error in fmssne_implem function of fmsne_implem.pyx: out of memory for n_ds_h.")
 */
  __pyx_t_1 = ((__pyx_v_n_ds_h == NULL) != 0);
  if (__pyx_t_1) {

    /* "fmsne_implem.pyx":3617
 *     cdef int* n_ds_h = f_def_n_ds_h(isLmin1, N, sLm_nt, Nd, L)
 *     if n_ds_h is NULL:
 *         PyMem_Free(K_h)             # <<<<<<<<<<<<<<
 *         printf("Error in fmssne_implem function of fmsne_implem.pyx: out of memory for n_ds_h.")
 *         exit(EXIT_FAILURE)
 */
    PyMem_Free(__pyx_v_K_h);

    /* "fmsne_implem.pyx":3618
 *     if n_ds_h is NULL:
 *         PyMem_Free(K_h)
 *         printf("Error in fmssne_implem function of fmsne_implem.pyx: out of memory for n_ds_h.")             # <<<<<<<<<<<<<<
 *         exit(EXIT_FAILURE)
 * 
 */
    (void)(printf(((char const *)"Error in fmssne_implem function of fmsne_implem.pyx: out of memory for n_ds_h.")));

    /* "fmsne_implem.pyx":3619
 *         PyMem_Free(K_h)
 *         printf("Error in fmssne_implem function of fmsne_implem.pyx: out of memory for n_ds_h.")
 *         exit(EXIT_FAILURE)             # <<<<<<<<<<<<<<
 * 
 *     #####
 */
    exit(EXIT_FAILURE);

    /* "fmsne_implem.pyx":3616
 *     # Size of the subsampled data set at each scale (except the first scale if L_min==1)
 *     cdef int* n_ds_h = f_def_n_ds_h(isLmin1, N, sLm_nt, Nd, L)
 *     if n_ds_h is NULL:             # <<<<<<<<<<<<<<
 *         PyMem_Free(K_h)
 *         printf("Error in fmssne_implem function of fmsne_implem.pyx: out of memory for n_ds_h.")
 */
  }

  /* "fmsne_implem.pyx":3625
 *     #####
 * 
 *     cdef int* all_ind = seq_1step(N)             # <<<<<<<<<<<<<<
 *     if all_ind is NULL:
 *         PyMem_Free(K_h)
 */
  __pyx_v_all_ind = __pyx_f_12fmsne_implem_seq_1step(__pyx_v_N);

  /* "fmsne_implem.pyx":3626
 * 
 *     cdef int* all_ind = seq_1step(N)
 *     if all_ind is NULL:             # <<<<<<<<<<<<<<
 *         PyMem_Free(K_h)
 *         PyMem_Free(n_ds_h)
 */
  __pyx_t_1 = ((__pyx_v_all_ind == NULL) != 0);
  if (__pyx_t_1) {

    /* "fmsne_implem.pyx":3627
 *     cdef int* all_ind = seq_1step(N)
 *     if all_ind is NULL:
 *         PyMem_Free(K_h)             # <<<<<<<<<<<<<<
 *         PyMem_Free(n_ds_h)
 *         printf("Error in fmssne_implem function of fmsne_implem.pyx: out of memory for all_ind.")
 */
    PyMem_Free(__pyx_v_K_h);

    /* "fmsne_implem.pyx":3628
 *     if all_ind is NULL:
 *         PyMem_Free(K_h)
 *         PyMem_Free(n_ds_h)             # <<<<<<<<<<<<<<
 *         printf("Error in fmssne_implem function of fmsne_implem.pyx: out of memory for all_ind.")
 *         exit(EXIT_FAILURE)
 */
    PyMem_Free(__pyx_v_n_ds_h);

    /* "fmsne_implem.pyx":3629
 *         PyMem_Free(K_h)
 *         PyMem_Free(n_ds_h)
 *         printf("Error in fmssne_implem function of fmsne_implem.pyx: out of memory for all_ind.")             # <<<<<<<<<<<<<<
 *         exit(EXIT_FAILURE)
 * 
 */
    (void)(printf(((char const *)"Error in fmssne_implem function of fmsne_implem.pyx: out of memory for all_ind.")));

    /* "fmsne_implem.pyx":3630
 *         PyMem_Free(n_ds_h)
 *         printf("Error in fmssne_implem function of fmsne_implem.pyx: out of memory for all_ind.")
 *         exit(EXIT_FAILURE)             # <<<<<<<<<<<<<<
 * 
 *     #####
 */
    exit(EXIT_FAILURE);

    /* "fmsne_implem.pyx":3626
 * 
 *     cdef int* all_ind = seq_1step(N)
 *     if all_ind is NULL:             # <<<<<<<<<<<<<<
 *         PyMem_Free(K_h)
 *         PyMem_Free(n_ds_h)
 */
  }

  /* "fmsne_implem.pyx":3636
 *     #####
 * 
 *     cdef int* nnn_h = f_def_nnn_h(L, K_h, n_ds_h, cperp)             # <<<<<<<<<<<<<<
 *     if nnn_h is NULL:
 *         PyMem_Free(K_h)
 */
  __pyx_v_nnn_h = __pyx_f_12fmsne_implem_f_def_nnn_h(__pyx_v_L, __pyx_v_K_h, __pyx_v_n_ds_h, __pyx_v_cperp);

  /* "fmsne_implem.pyx":3637
 * 
 *     cdef int* nnn_h = f_def_nnn_h(L, K_h, n_ds_h, cperp)
 *     if nnn_h is NULL:             # <<<<<<<<<<<<<<
 *         PyMem_Free(K_h)
 *         PyMem_Free(n_ds_h)
 */
  __pyx_t_1 = ((__pyx_v_nnn_h == NULL) != 0);
  if (__pyx_t_1) {

    /* "fmsne_implem.pyx":3638
 *     cdef int* nnn_h = f_def_nnn_h(L, K_h, n_ds_h, cperp)
 *     if nnn_h is NULL:
 *         PyMem_Free(K_h)             # <<<<<<<<<<<<<<
 *         PyMem_Free(n_ds_h)
 *         PyMem_Free(all_ind)
 */
    PyMem_Free(__pyx_v_K_h);

    /* "fmsne_implem.pyx":3639
 *     if nnn_h is NULL:
 *         PyMem_Free(K_h)
 *         PyMem_Free(n_ds_h)             # <<<<<<<<<<<<<<
 *         PyMem_Free(all_ind)
 *         printf("Error in fmssne_implem function of fmsne_implem.pyx: out of memory for nnn_h.")
 */
    PyMem_Free(__pyx_v_n_ds_h);

    /* "fmsne_implem.pyx":3640
 *         PyMem_Free(K_h)
 *         PyMem_Free(n_ds_h)
 *         PyMem_Free(all_ind)             # <<<<<<<<<<<<<<
 *         printf("Error in fmssne_implem function of fmsne_implem.pyx: out of memory for nnn_h.")
 *         exit(EXIT_FAILURE)
 */
    PyMem_Free(__pyx_v_all_ind);

    /* "fmsne_implem.pyx":3641
 *         PyMem_Free(n_ds_h)
 *         PyMem_Free(all_ind)
 *         printf("Error in fmssne_implem function of fmsne_implem.pyx: out of memory for nnn_h.")             # <<<<<<<<<<<<<<
 *         exit(EXIT_FAILURE)
 *     # Sum of the elements of nnn_h
 */
    (void)(printf(((char const *)"Error in fmssne_implem function of fmsne_implem.pyx: out of memory for nnn_h.")));

    /* "fmsne_implem.pyx":3642
 *         PyMem_Free(all_ind)
 *         printf("Error in fmssne_implem function of fmsne_implem.pyx: out of memory for nnn_h.")
 *         exit(EXIT_FAILURE)             # <<<<<<<<<<<<<<
 *     # Sum of the elements of nnn_h
 *     sLm_nt = f_nnn_tot(nnn_h, L)
 */
    exit(EXIT_FAILURE);

    /* "fmsne_implem.pyx":3637
 * 
 *     cdef int* nnn_h = f_def_nnn_h(L, K_h, n_ds_h, cperp)
 *     if nnn_h is NULL:             # <<<<<<<<<<<<<<
 *         PyMem_Free(K_h)
 *         PyMem_Free(n_ds_h)
 */
  }

  /* "fmsne_implem.pyx":3644
 *         exit(EXIT_FAILURE)
 *     # Sum of the elements of nnn_h
 *     sLm_nt = f_nnn_tot(nnn_h, L)             # <<<<<<<<<<<<<<
 * 
 *     #####
 */
  __pyx_v_sLm_nt = __pyx_f_12fmsne_implem_f_nnn_tot(__pyx_v_nnn_h, __pyx_v_L);

  /* "fmsne_implem.pyx":3655
 *     # function f_nn_ds_hdprec, arr_nn_i_rs will be reallocated so that
 *     # its third dimension may be smaller than sLm_nt.
 *     cdef int*** arr_nn_i_rs = alloc_int_3dmat(n_rs, N, sLm_nt)             # <<<<<<<<<<<<<<
 *     if arr_nn_i_rs is NULL:
 *         PyMem_Free(K_h)
 */
  __pyx_v_arr_nn_i_rs = __pyx_f_12fmsne_implem_alloc_int_3dmat(__pyx_v_n_rs, __pyx_v_N, __pyx_v_sLm_nt);

  /* "fmsne_implem.pyx":3656
 *     # its third dimension may be smaller than sLm_nt.
 *     cdef int*** arr_nn_i_rs = alloc_int_3dmat(n_rs, N, sLm_nt)
 *     if arr_nn_i_rs is NULL:             # <<<<<<<<<<<<<<
 *         PyMem_Free(K_h)
 *         PyMem_Free(n_ds_h)
 */
  __pyx_t_1 = ((__pyx_v_arr_nn_i_rs == NULL) != 0);
  if (__pyx_t_1) {

    /* "fmsne_implem.pyx":3657
 *     cdef int*** arr_nn_i_rs = alloc_int_3dmat(n_rs, N, sLm_nt)
 *     if arr_nn_i_rs is NULL:
 *         PyMem_Free(K_h)             # <<<<<<<<<<<<<<
 *         PyMem_Free(n_ds_h)
 *         PyMem_Free(all_ind)
 */
    PyMem_Free(__pyx_v_K_h);

    /* "fmsne_implem.pyx":3658
 *     if arr_nn_i_rs is NULL:
 *         PyMem_Free(K_h)
 *         PyMem_Free(n_ds_h)             # <<<<<<<<<<<<<<
 *         PyMem_Free(all_ind)
 *         PyMem_Free(nnn_h)
 */
    PyMem_Free(__pyx_v_n_ds_h);

    /* "fmsne_implem.pyx":3659
 *         PyMem_Free(K_h)
 *         PyMem_Free(n_ds_h)
 *         PyMem_Free(all_ind)             # <<<<<<<<<<<<<<
 *         PyMem_Free(nnn_h)
 *         printf("Error in fmssne_implem function of fmsne_implem.pyx: out of memory for arr_nn_i_rs.")
 */
    PyMem_Free(__pyx_v_all_ind);

    /* "fmsne_implem.pyx":3660
 *         PyMem_Free(n_ds_h)
 *         PyMem_Free(all_ind)
 *         PyMem_Free(nnn_h)             # <<<<<<<<<<<<<<
 *         printf("Error in fmssne_implem function of fmsne_implem.pyx: out of memory for arr_nn_i_rs.")
 *         exit(EXIT_FAILURE)
 */
    PyMem_Free(__pyx_v_nnn_h);

    /* "fmsne_implem.pyx":3661
 *         PyMem_Free(all_ind)
 *         PyMem_Free(nnn_h)
 *         printf("Error in fmssne_implem function of fmsne_implem.pyx: out of memory for arr_nn_i_rs.")             # <<<<<<<<<<<<<<
 *         exit(EXIT_FAILURE)
 * 
 */
    (void)(printf(((char const *)"Error in fmssne_implem function of fmsne_implem.pyx: out of memory for arr_nn_i_rs.")));

    /* "fmsne_implem.pyx":3662
 *         PyMem_Free(nnn_h)
 *         printf("Error in fmssne_implem function of fmsne_implem.pyx: out of memory for arr_nn_i_rs.")
 *         exit(EXIT_FAILURE)             # <<<<<<<<<<<<<<
 * 
 *     # Allocating memory to store the number of considered neighbors
 */
    exit(EXIT_FAILURE);

    /* "fmsne_implem.pyx":3656
 *     # its third dimension may be smaller than sLm_nt.
 *     cdef int*** arr_nn_i_rs = alloc_int_3dmat(n_rs, N, sLm_nt)
 *     if arr_nn_i_rs is NULL:             # <<<<<<<<<<<<<<
 *         PyMem_Free(K_h)
 *         PyMem_Free(n_ds_h)
 */
  }

  /* "fmsne_implem.pyx":3666
 *     # Allocating memory to store the number of considered neighbors
 *     # for each data point, for each random sampling
 *     cdef int** nnn_i_rs = calloc_int_2dmat(n_rs, N)             # <<<<<<<<<<<<<<
 *     if nnn_i_rs is NULL:
 *         PyMem_Free(K_h)
 */
  __pyx_v_nnn_i_rs = __pyx_f_12fmsne_implem_calloc_int_2dmat(__pyx_v_n_rs, __pyx_v_N);

  /* "fmsne_implem.pyx":3667
 *     # for each data point, for each random sampling
 *     cdef int** nnn_i_rs = calloc_int_2dmat(n_rs, N)
 *     if nnn_i_rs is NULL:             # <<<<<<<<<<<<<<
 *         PyMem_Free(K_h)
 *         PyMem_Free(n_ds_h)
 */
  __pyx_t_1 = ((__pyx_v_nnn_i_rs == NULL) != 0);
  if (__pyx_t_1) {

    /* "fmsne_implem.pyx":3668
 *     cdef int** nnn_i_rs = calloc_int_2dmat(n_rs, N)
 *     if nnn_i_rs is NULL:
 *         PyMem_Free(K_h)             # <<<<<<<<<<<<<<
 *         PyMem_Free(n_ds_h)
 *         PyMem_Free(all_ind)
 */
    PyMem_Free(__pyx_v_K_h);

    /* "fmsne_implem.pyx":3669
 *     if nnn_i_rs is NULL:
 *         PyMem_Free(K_h)
 *         PyMem_Free(n_ds_h)             # <<<<<<<<<<<<<<
 *         PyMem_Free(all_ind)
 *         PyMem_Free(nnn_h)
 */
    PyMem_Free(__pyx_v_n_ds_h);

    /* "fmsne_implem.pyx":3670
 *         PyMem_Free(K_h)
 *         PyMem_Free(n_ds_h)
 *         PyMem_Free(all_ind)             # <<<<<<<<<<<<<<
 *         PyMem_Free(nnn_h)
 *         free_int_3dmat(arr_nn_i_rs, n_rs, N)
 */
    PyMem_Free(__pyx_v_all_ind);

    /* "fmsne_implem.pyx":3671
 *         PyMem_Free(n_ds_h)
 *         PyMem_Free(all_ind)
 *         PyMem_Free(nnn_h)             # <<<<<<<<<<<<<<
 *         free_int_3dmat(arr_nn_i_rs, n_rs, N)
 *         printf("Error in fmssne_implem function of fmsne_implem.pyx: out of memory for nnn_i_rs.")
 */
    PyMem_Free(__pyx_v_nnn_h);

    /* "fmsne_implem.pyx":3672
 *         PyMem_Free(all_ind)
 *         PyMem_Free(nnn_h)
 *         free_int_3dmat(arr_nn_i_rs, n_rs, N)             # <<<<<<<<<<<<<<
 *         printf("Error in fmssne_implem function of fmsne_implem.pyx: out of memory for nnn_i_rs.")
 *         exit(EXIT_FAILURE)
 */
    __pyx_f_12fmsne_implem_free_int_3dmat(__pyx_v_arr_nn_i_rs, __pyx_v_n_rs, __pyx_v_N);

    /* "fmsne_implem.pyx":3673
 *         PyMem_Free(nnn_h)
 *         free_int_3dmat(arr_nn_i_rs, n_rs, N)
 *         printf("Error in fmssne_implem function of fmsne_implem.pyx: out of memory for nnn_i_rs.")             # <<<<<<<<<<<<<<
 *         exit(EXIT_FAILURE)
 * 
 */
    (void)(printf(((char const *)"Error in fmssne_implem function of fmsne_implem.pyx: out of memory for nnn_i_rs.")));

    /* "fmsne_implem.pyx":3674
 *         free_int_3dmat(arr_nn_i_rs, n_rs, N)
 *         printf("Error in fmssne_implem function of fmsne_implem.pyx: out of memory for nnn_i_rs.")
 *         exit(EXIT_FAILURE)             # <<<<<<<<<<<<<<
 * 
 *     # Allocating memory to store the squared distances between the
 */
    exit(EXIT_FAILURE);

    /* "fmsne_implem.pyx":3667
 *     # for each data point, for each random sampling
 *     cdef int** nnn_i_rs = calloc_int_2dmat(n_rs, N)
 *     if nnn_i_rs is NULL:             # <<<<<<<<<<<<<<
 *         PyMem_Free(K_h)
 *         PyMem_Free(n_ds_h)
 */
  }

  /* "fmsne_implem.pyx":3684
 *     # function f_nn_ds_hdprec, ds_nn_i_rs will be reallocated so that
 *     # its third dimension may be smaller than sLm_nt.
 *     cdef double*** ds_nn_i_rs = alloc_dble_3dmat(n_rs, N, sLm_nt)             # <<<<<<<<<<<<<<
 *     if ds_nn_i_rs is NULL:
 *         PyMem_Free(K_h)
 */
  __pyx_v_ds_nn_i_rs = __pyx_f_12fmsne_implem_alloc_dble_3dmat(__pyx_v_n_rs, __pyx_v_N, __pyx_v_sLm_nt);

  /* "fmsne_implem.pyx":3685
 *     # its third dimension may be smaller than sLm_nt.
 *     cdef double*** ds_nn_i_rs = alloc_dble_3dmat(n_rs, N, sLm_nt)
 *     if ds_nn_i_rs is NULL:             # <<<<<<<<<<<<<<
 *         PyMem_Free(K_h)
 *         PyMem_Free(n_ds_h)
 */
  __pyx_t_1 = ((__pyx_v_ds_nn_i_rs == NULL) != 0);
  if (__pyx_t_1) {

    /* "fmsne_implem.pyx":3686
 *     cdef double*** ds_nn_i_rs = alloc_dble_3dmat(n_rs, N, sLm_nt)
 *     if ds_nn_i_rs is NULL:
 *         PyMem_Free(K_h)             # <<<<<<<<<<<<<<
 *         PyMem_Free(n_ds_h)
 *         PyMem_Free(all_ind)
 */
    PyMem_Free(__pyx_v_K_h);

    /* "fmsne_implem.pyx":3687
 *     if ds_nn_i_rs is NULL:
 *         PyMem_Free(K_h)
 *         PyMem_Free(n_ds_h)             # <<<<<<<<<<<<<<
 *         PyMem_Free(all_ind)
 *         PyMem_Free(nnn_h)
 */
    PyMem_Free(__pyx_v_n_ds_h);

    /* "fmsne_implem.pyx":3688
 *         PyMem_Free(K_h)
 *         PyMem_Free(n_ds_h)
 *         PyMem_Free(all_ind)             # <<<<<<<<<<<<<<
 *         PyMem_Free(nnn_h)
 *         free_int_3dmat(arr_nn_i_rs, n_rs, N)
 */
    PyMem_Free(__pyx_v_all_ind);

    /* "fmsne_implem.pyx":3689
 *         PyMem_Free(n_ds_h)
 *         PyMem_Free(all_ind)
 *         PyMem_Free(nnn_h)             # <<<<<<<<<<<<<<
 *         free_int_3dmat(arr_nn_i_rs, n_rs, N)
 *         free_int_2dmat(nnn_i_rs, n_rs)
 */
    PyMem_Free(__pyx_v_nnn_h);

    /* "fmsne_implem.pyx":3690
 *         PyMem_Free(all_ind)
 *         PyMem_Free(nnn_h)
 *         free_int_3dmat(arr_nn_i_rs, n_rs, N)             # <<<<<<<<<<<<<<
 *         free_int_2dmat(nnn_i_rs, n_rs)
 *         printf("Error in fmssne_implem function of fmsne_implem.pyx: out of memory for ds_nn_i_rs.")
 */
    __pyx_f_12fmsne_implem_free_int_3dmat(__pyx_v_arr_nn_i_rs, __pyx_v_n_rs, __pyx_v_N);

    /* "fmsne_implem.pyx":3691
 *         PyMem_Free(nnn_h)
 *         free_int_3dmat(arr_nn_i_rs, n_rs, N)
 *         free_int_2dmat(nnn_i_rs, n_rs)             # <<<<<<<<<<<<<<
 *         printf("Error in fmssne_implem function of fmsne_implem.pyx: out of memory for ds_nn_i_rs.")
 *         exit(EXIT_FAILURE)
 */
    __pyx_f_12fmsne_implem_free_int_2dmat(__pyx_v_nnn_i_rs, __pyx_v_n_rs);

    /* "fmsne_implem.pyx":3692
 *         free_int_3dmat(arr_nn_i_rs, n_rs, N)
 *         free_int_2dmat(nnn_i_rs, n_rs)
 *         printf("Error in fmssne_implem function of fmsne_implem.pyx: out of memory for ds_nn_i_rs.")             # <<<<<<<<<<<<<<
 *         exit(EXIT_FAILURE)
 * 
 */
    (void)(printf(((char const *)"Error in fmssne_implem function of fmsne_implem.pyx: out of memory for ds_nn_i_rs.")));

    /* "fmsne_implem.pyx":3693
 *         free_int_2dmat(nnn_i_rs, n_rs)
 *         printf("Error in fmssne_implem function of fmsne_implem.pyx: out of memory for ds_nn_i_rs.")
 *         exit(EXIT_FAILURE)             # <<<<<<<<<<<<<<
 * 
 *     # Allocating memory to store the HD bandwidths for each scale,
 */
    exit(EXIT_FAILURE);

    /* "fmsne_implem.pyx":3685
 *     # its third dimension may be smaller than sLm_nt.
 *     cdef double*** ds_nn_i_rs = alloc_dble_3dmat(n_rs, N, sLm_nt)
 *     if ds_nn_i_rs is NULL:             # <<<<<<<<<<<<<<
 *         PyMem_Free(K_h)
 *         PyMem_Free(n_ds_h)
 */
  }

  /* "fmsne_implem.pyx":3697
 *     # Allocating memory to store the HD bandwidths for each scale,
 *     # data point and random sampling
 *     cdef double*** tau_h_i_rs = alloc_dble_3dmat(L, n_rs, N)             # <<<<<<<<<<<<<<
 *     if tau_h_i_rs is NULL:
 *         PyMem_Free(K_h)
 */
  __pyx_v_tau_h_i_rs = __pyx_f_12fmsne_implem_alloc_dble_3dmat(__pyx_v_L, __pyx_v_n_rs, __pyx_v_N);

  /* "fmsne_implem.pyx":3698
 *     # data point and random sampling
 *     cdef double*** tau_h_i_rs = alloc_dble_3dmat(L, n_rs, N)
 *     if tau_h_i_rs is NULL:             # <<<<<<<<<<<<<<
 *         PyMem_Free(K_h)
 *         PyMem_Free(n_ds_h)
 */
  __pyx_t_1 = ((__pyx_v_tau_h_i_rs == NULL) != 0);
  if (__pyx_t_1) {

    /* "fmsne_implem.pyx":3699
 *     cdef double*** tau_h_i_rs = alloc_dble_3dmat(L, n_rs, N)
 *     if tau_h_i_rs is NULL:
 *         PyMem_Free(K_h)             # <<<<<<<<<<<<<<
 *         PyMem_Free(n_ds_h)
 *         PyMem_Free(all_ind)
 */
    PyMem_Free(__pyx_v_K_h);

    /* "fmsne_implem.pyx":3700
 *     if tau_h_i_rs is NULL:
 *         PyMem_Free(K_h)
 *         PyMem_Free(n_ds_h)             # <<<<<<<<<<<<<<
 *         PyMem_Free(all_ind)
 *         PyMem_Free(nnn_h)
 */
    PyMem_Free(__pyx_v_n_ds_h);

    /* "fmsne_implem.pyx":3701
 *         PyMem_Free(K_h)
 *         PyMem_Free(n_ds_h)
 *         PyMem_Free(all_ind)             # <<<<<<<<<<<<<<
 *         PyMem_Free(nnn_h)
 *         free_int_3dmat(arr_nn_i_rs, n_rs, N)
 */
    PyMem_Free(__pyx_v_all_ind);

    /* "fmsne_implem.pyx":3702
 *         PyMem_Free(n_ds_h)
 *         PyMem_Free(all_ind)
 *         PyMem_Free(nnn_h)             # <<<<<<<<<<<<<<
 *         free_int_3dmat(arr_nn_i_rs, n_rs, N)
 *         free_int_2dmat(nnn_i_rs, n_rs)
 */
    PyMem_Free(__pyx_v_nnn_h);

    /* "fmsne_implem.pyx":3703
 *         PyMem_Free(all_ind)
 *         PyMem_Free(nnn_h)
 *         free_int_3dmat(arr_nn_i_rs, n_rs, N)             # <<<<<<<<<<<<<<
 *         free_int_2dmat(nnn_i_rs, n_rs)
 *         free_dble_3dmat(ds_nn_i_rs, n_rs, N)
 */
    __pyx_f_12fmsne_implem_free_int_3dmat(__pyx_v_arr_nn_i_rs, __pyx_v_n_rs, __pyx_v_N);

    /* "fmsne_implem.pyx":3704
 *         PyMem_Free(nnn_h)
 *         free_int_3dmat(arr_nn_i_rs, n_rs, N)
 *         free_int_2dmat(nnn_i_rs, n_rs)             # <<<<<<<<<<<<<<
 *         free_dble_3dmat(ds_nn_i_rs, n_rs, N)
 *         printf("Error in fmssne_implem function of fmsne_implem.pyx: out of memory for tau_h_i_rs.")
 */
    __pyx_f_12fmsne_implem_free_int_2dmat(__pyx_v_nnn_i_rs, __pyx_v_n_rs);

    /* "fmsne_implem.pyx":3705
 *         free_int_3dmat(arr_nn_i_rs, n_rs, N)
 *         free_int_2dmat(nnn_i_rs, n_rs)
 *         free_dble_3dmat(ds_nn_i_rs, n_rs, N)             # <<<<<<<<<<<<<<
 *         printf("Error in fmssne_implem function of fmsne_implem.pyx: out of memory for tau_h_i_rs.")
 *         exit(EXIT_FAILURE)
 */
    __pyx_f_12fmsne_implem_free_dble_3dmat(__pyx_v_ds_nn_i_rs, __pyx_v_n_rs, __pyx_v_N);

    /* "fmsne_implem.pyx":3706
 *         free_int_2dmat(nnn_i_rs, n_rs)
 *         free_dble_3dmat(ds_nn_i_rs, n_rs, N)
 *         printf("Error in fmssne_implem function of fmsne_implem.pyx: out of memory for tau_h_i_rs.")             # <<<<<<<<<<<<<<
 *         exit(EXIT_FAILURE)
 * 
 */
    (void)(printf(((char const *)"Error in fmssne_implem function of fmsne_implem.pyx: out of memory for tau_h_i_rs.")));

    /* "fmsne_implem.pyx":3707
 *         free_dble_3dmat(ds_nn_i_rs, n_rs, N)
 *         printf("Error in fmssne_implem function of fmsne_implem.pyx: out of memory for tau_h_i_rs.")
 *         exit(EXIT_FAILURE)             # <<<<<<<<<<<<<<
 * 
 *     # Computing the considered nearest neighbors of each data point
 */
    exit(EXIT_FAILURE);

    /* "fmsne_implem.pyx":3698
 *     # data point and random sampling
 *     cdef double*** tau_h_i_rs = alloc_dble_3dmat(L, n_rs, N)
 *     if tau_h_i_rs is NULL:             # <<<<<<<<<<<<<<
 *         PyMem_Free(K_h)
 *         PyMem_Free(n_ds_h)
 */
  }

  /* "fmsne_implem.pyx":3715
 *     # (i.e. if i is in the considered nearest neighbors of j, than j
 *     # must also be in the considered nearest neighbors of i).
 *     if f_nn_ds_hdprec(d_hds, K_h, N, L, n_ds_h, all_ind, nnn_h, isLmin1, &X_hds[0], n_rs, arr_nn_i_rs, nnn_i_rs, ds_nn_i_rs, tau_h_i_rs, sLm_nt, True):             # <<<<<<<<<<<<<<
 *         PyMem_Free(K_h)
 *         PyMem_Free(n_ds_h)
 */
  __pyx_t_2 = 0;
  __pyx_t_1 = (__pyx_f_12fmsne_implem_f_nn_ds_hdprec(__pyx_v_d_hds, __pyx_v_K_h, __pyx_v_N, __pyx_v_L, __pyx_v_n_ds_h, __pyx_v_all_ind, __pyx_v_nnn_h, __pyx_v_isLmin1, (&(*((double *) ( /* dim=0 */ ((char *) (((double *) __pyx_v_X_hds.data) + __pyx_t_2)) )))), __pyx_v_n_rs, __pyx_v_arr_nn_i_rs, __pyx_v_nnn_i_rs, __pyx_v_ds_nn_i_rs, __pyx_v_tau_h_i_rs, __pyx_v_sLm_nt, 1) != 0);
  if (__pyx_t_1) {

    /* "fmsne_implem.pyx":3716
 *     # must also be in the considered nearest neighbors of i).
 *     if f_nn_ds_hdprec(d_hds, K_h, N, L, n_ds_h, all_ind, nnn_h, isLmin1, &X_hds[0], n_rs, arr_nn_i_rs, nnn_i_rs, ds_nn_i_rs, tau_h_i_rs, sLm_nt, True):
 *         PyMem_Free(K_h)             # <<<<<<<<<<<<<<
 *         PyMem_Free(n_ds_h)
 *         PyMem_Free(all_ind)
 */
    PyMem_Free(__pyx_v_K_h);

    /* "fmsne_implem.pyx":3717
 *     if f_nn_ds_hdprec(d_hds, K_h, N, L, n_ds_h, all_ind, nnn_h, isLmin1, &X_hds[0], n_rs, arr_nn_i_rs, nnn_i_rs, ds_nn_i_rs, tau_h_i_rs, sLm_nt, True):
 *         PyMem_Free(K_h)
 *         PyMem_Free(n_ds_h)             # <<<<<<<<<<<<<<
 *         PyMem_Free(all_ind)
 *         PyMem_Free(nnn_h)
 */
    PyMem_Free(__pyx_v_n_ds_h);

    /* "fmsne_implem.pyx":3718
 *         PyMem_Free(K_h)
 *         PyMem_Free(n_ds_h)
 *         PyMem_Free(all_ind)             # <<<<<<<<<<<<<<
 *         PyMem_Free(nnn_h)
 *         free_int_3dmat(arr_nn_i_rs, n_rs, N)
 */
    PyMem_Free(__pyx_v_all_ind);

    /* "fmsne_implem.pyx":3719
 *         PyMem_Free(n_ds_h)
 *         PyMem_Free(all_ind)
 *         PyMem_Free(nnn_h)             # <<<<<<<<<<<<<<
 *         free_int_3dmat(arr_nn_i_rs, n_rs, N)
 *         free_int_2dmat(nnn_i_rs, n_rs)
 */
    PyMem_Free(__pyx_v_nnn_h);

    /* "fmsne_implem.pyx":3720
 *         PyMem_Free(all_ind)
 *         PyMem_Free(nnn_h)
 *         free_int_3dmat(arr_nn_i_rs, n_rs, N)             # <<<<<<<<<<<<<<
 *         free_int_2dmat(nnn_i_rs, n_rs)
 *         free_dble_3dmat(ds_nn_i_rs, n_rs, N)
 */
    __pyx_f_12fmsne_implem_free_int_3dmat(__pyx_v_arr_nn_i_rs, __pyx_v_n_rs, __pyx_v_N);

    /* "fmsne_implem.pyx":3721
 *         PyMem_Free(nnn_h)
 *         free_int_3dmat(arr_nn_i_rs, n_rs, N)
 *         free_int_2dmat(nnn_i_rs, n_rs)             # <<<<<<<<<<<<<<
 *         free_dble_3dmat(ds_nn_i_rs, n_rs, N)
 *         free_dble_3dmat(tau_h_i_rs, L, n_rs)
 */
    __pyx_f_12fmsne_implem_free_int_2dmat(__pyx_v_nnn_i_rs, __pyx_v_n_rs);

    /* "fmsne_implem.pyx":3722
 *         free_int_3dmat(arr_nn_i_rs, n_rs, N)
 *         free_int_2dmat(nnn_i_rs, n_rs)
 *         free_dble_3dmat(ds_nn_i_rs, n_rs, N)             # <<<<<<<<<<<<<<
 *         free_dble_3dmat(tau_h_i_rs, L, n_rs)
 *         printf("Error in fmssne_implem function of fmsne_implem.pyx: out of memory in function f_nn_ds_hdprec.")
 */
    __pyx_f_12fmsne_implem_free_dble_3dmat(__pyx_v_ds_nn_i_rs, __pyx_v_n_rs, __pyx_v_N);

    /* "fmsne_implem.pyx":3723
 *         free_int_2dmat(nnn_i_rs, n_rs)
 *         free_dble_3dmat(ds_nn_i_rs, n_rs, N)
 *         free_dble_3dmat(tau_h_i_rs, L, n_rs)             # <<<<<<<<<<<<<<
 *         printf("Error in fmssne_implem function of fmsne_implem.pyx: out of memory in function f_nn_ds_hdprec.")
 *         exit(EXIT_FAILURE)
 */
    __pyx_f_12fmsne_implem_free_dble_3dmat(__pyx_v_tau_h_i_rs, __pyx_v_L, __pyx_v_n_rs);

    /* "fmsne_implem.pyx":3724
 *         free_dble_3dmat(ds_nn_i_rs, n_rs, N)
 *         free_dble_3dmat(tau_h_i_rs, L, n_rs)
 *         printf("Error in fmssne_implem function of fmsne_implem.pyx: out of memory in function f_nn_ds_hdprec.")             # <<<<<<<<<<<<<<
 *         exit(EXIT_FAILURE)
 * 
 */
    (void)(printf(((char const *)"Error in fmssne_implem function of fmsne_implem.pyx: out of memory in function f_nn_ds_hdprec.")));

    /* "fmsne_implem.pyx":3725
 *         free_dble_3dmat(tau_h_i_rs, L, n_rs)
 *         printf("Error in fmssne_implem function of fmsne_implem.pyx: out of memory in function f_nn_ds_hdprec.")
 *         exit(EXIT_FAILURE)             # <<<<<<<<<<<<<<
 * 
 *     # Free stuffs which will not be used anymore
 */
    exit(EXIT_FAILURE);

    /* "fmsne_implem.pyx":3715
 *     # (i.e. if i is in the considered nearest neighbors of j, than j
 *     # must also be in the considered nearest neighbors of i).
 *     if f_nn_ds_hdprec(d_hds, K_h, N, L, n_ds_h, all_ind, nnn_h, isLmin1, &X_hds[0], n_rs, arr_nn_i_rs, nnn_i_rs, ds_nn_i_rs, tau_h_i_rs, sLm_nt, True):             # <<<<<<<<<<<<<<
 *         PyMem_Free(K_h)
 *         PyMem_Free(n_ds_h)
 */
  }

  /* "fmsne_implem.pyx":3728
 * 
 *     # Free stuffs which will not be used anymore
 *     PyMem_Free(K_h)             # <<<<<<<<<<<<<<
 *     PyMem_Free(n_ds_h)
 *     PyMem_Free(all_ind)
 */
  PyMem_Free(__pyx_v_K_h);

  /* "fmsne_implem.pyx":3729
 *     # Free stuffs which will not be used anymore
 *     PyMem_Free(K_h)
 *     PyMem_Free(n_ds_h)             # <<<<<<<<<<<<<<
 *     PyMem_Free(all_ind)
 *     PyMem_Free(nnn_h)
 */
  PyMem_Free(__pyx_v_n_ds_h);

  /* "fmsne_implem.pyx":3730
 *     PyMem_Free(K_h)
 *     PyMem_Free(n_ds_h)
 *     PyMem_Free(all_ind)             # <<<<<<<<<<<<<<
 *     PyMem_Free(nnn_h)
 * 
 */
  PyMem_Free(__pyx_v_all_ind);

  /* "fmsne_implem.pyx":3731
 *     PyMem_Free(n_ds_h)
 *     PyMem_Free(all_ind)
 *     PyMem_Free(nnn_h)             # <<<<<<<<<<<<<<
 * 
 *     #####
 */
  PyMem_Free(__pyx_v_nnn_h);

  /* "fmsne_implem.pyx":3738
 * 
 *     # sLm_nt now refers to N-1
 *     sLm_nt = N-1             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t*** m_nn = fms_sym_nn_match(n_rs, sLm_nt, arr_nn_i_rs, nnn_i_rs, n_components)
 *     if m_nn is NULL:
 */
  __pyx_v_sLm_nt = (__pyx_v_N - 1);

  /* "fmsne_implem.pyx":3739
 *     # sLm_nt now refers to N-1
 *     sLm_nt = N-1
 *     cdef Py_ssize_t*** m_nn = fms_sym_nn_match(n_rs, sLm_nt, arr_nn_i_rs, nnn_i_rs, n_components)             # <<<<<<<<<<<<<<
 *     if m_nn is NULL:
 *         free_int_3dmat(arr_nn_i_rs, n_rs, N)
 */
  __pyx_v_m_nn = __pyx_f_12fmsne_implem_fms_sym_nn_match(__pyx_v_n_rs, __pyx_v_sLm_nt, __pyx_v_arr_nn_i_rs, __pyx_v_nnn_i_rs, __pyx_v_n_components);

  /* "fmsne_implem.pyx":3740
 *     sLm_nt = N-1
 *     cdef Py_ssize_t*** m_nn = fms_sym_nn_match(n_rs, sLm_nt, arr_nn_i_rs, nnn_i_rs, n_components)
 *     if m_nn is NULL:             # <<<<<<<<<<<<<<
 *         free_int_3dmat(arr_nn_i_rs, n_rs, N)
 *         free_int_2dmat(nnn_i_rs, n_rs)
 */
  __pyx_t_1 = ((__pyx_v_m_nn == NULL) != 0);
  if (__pyx_t_1) {

    /* "fmsne_implem.pyx":3741
 *     cdef Py_ssize_t*** m_nn = fms_sym_nn_match(n_rs, sLm_nt, arr_nn_i_rs, nnn_i_rs, n_components)
 *     if m_nn is NULL:
 *         free_int_3dmat(arr_nn_i_rs, n_rs, N)             # <<<<<<<<<<<<<<
 *         free_int_2dmat(nnn_i_rs, n_rs)
 *         free_dble_3dmat(ds_nn_i_rs, n_rs, N)
 */
    __pyx_f_12fmsne_implem_free_int_3dmat(__pyx_v_arr_nn_i_rs, __pyx_v_n_rs, __pyx_v_N);

    /* "fmsne_implem.pyx":3742
 *     if m_nn is NULL:
 *         free_int_3dmat(arr_nn_i_rs, n_rs, N)
 *         free_int_2dmat(nnn_i_rs, n_rs)             # <<<<<<<<<<<<<<
 *         free_dble_3dmat(ds_nn_i_rs, n_rs, N)
 *         free_dble_3dmat(tau_h_i_rs, L, n_rs)
 */
    __pyx_f_12fmsne_implem_free_int_2dmat(__pyx_v_nnn_i_rs, __pyx_v_n_rs);

    /* "fmsne_implem.pyx":3743
 *         free_int_3dmat(arr_nn_i_rs, n_rs, N)
 *         free_int_2dmat(nnn_i_rs, n_rs)
 *         free_dble_3dmat(ds_nn_i_rs, n_rs, N)             # <<<<<<<<<<<<<<
 *         free_dble_3dmat(tau_h_i_rs, L, n_rs)
 *         printf('Error in function fmstsne_implem of module fmsne_implem.pyx: out of memory in function fms_sym_nn_match.')
 */
    __pyx_f_12fmsne_implem_free_dble_3dmat(__pyx_v_ds_nn_i_rs, __pyx_v_n_rs, __pyx_v_N);

    /* "fmsne_implem.pyx":3744
 *         free_int_2dmat(nnn_i_rs, n_rs)
 *         free_dble_3dmat(ds_nn_i_rs, n_rs, N)
 *         free_dble_3dmat(tau_h_i_rs, L, n_rs)             # <<<<<<<<<<<<<<
 *         printf('Error in function fmstsne_implem of module fmsne_implem.pyx: out of memory in function fms_sym_nn_match.')
 *         exit(EXIT_FAILURE)
 */
    __pyx_f_12fmsne_implem_free_dble_3dmat(__pyx_v_tau_h_i_rs, __pyx_v_L, __pyx_v_n_rs);

    /* "fmsne_implem.pyx":3745
 *         free_dble_3dmat(ds_nn_i_rs, n_rs, N)
 *         free_dble_3dmat(tau_h_i_rs, L, n_rs)
 *         printf('Error in function fmstsne_implem of module fmsne_implem.pyx: out of memory in function fms_sym_nn_match.')             # <<<<<<<<<<<<<<
 *         exit(EXIT_FAILURE)
 * 
 */
    (void)(printf(((char const *)"Error in function fmstsne_implem of module fmsne_implem.pyx: out of memory in function fms_sym_nn_match.")));

    /* "fmsne_implem.pyx":3746
 *         free_dble_3dmat(tau_h_i_rs, L, n_rs)
 *         printf('Error in function fmstsne_implem of module fmsne_implem.pyx: out of memory in function fms_sym_nn_match.')
 *         exit(EXIT_FAILURE)             # <<<<<<<<<<<<<<
 * 
 *     # Free resources which are not needed anymore
 */
    exit(EXIT_FAILURE);

    /* "fmsne_implem.pyx":3740
 *     sLm_nt = N-1
 *     cdef Py_ssize_t*** m_nn = fms_sym_nn_match(n_rs, sLm_nt, arr_nn_i_rs, nnn_i_rs, n_components)
 *     if m_nn is NULL:             # <<<<<<<<<<<<<<
 *         free_int_3dmat(arr_nn_i_rs, n_rs, N)
 *         free_int_2dmat(nnn_i_rs, n_rs)
 */
  }

  /* "fmsne_implem.pyx":3749
 * 
 *     # Free resources which are not needed anymore
 *     free_int_3dmat(arr_nn_i_rs, n_rs, N)             # <<<<<<<<<<<<<<
 * 
 *     #####
 */
  __pyx_f_12fmsne_implem_free_int_3dmat(__pyx_v_arr_nn_i_rs, __pyx_v_n_rs, __pyx_v_N);

  /* "fmsne_implem.pyx":3756
 * 
 *     # Array storing the multi-scale HD similarities, as computed during the multi-scale optimization
 *     cdef double*** simhd_ms_nn_i_rs = alloc_dble_3dmat_varK(n_rs, N, nnn_i_rs)             # <<<<<<<<<<<<<<
 *     if simhd_ms_nn_i_rs is NULL:
 *         free_int_2dmat(nnn_i_rs, n_rs)
 */
  __pyx_v_simhd_ms_nn_i_rs = __pyx_f_12fmsne_implem_alloc_dble_3dmat_varK(__pyx_v_n_rs, __pyx_v_N, __pyx_v_nnn_i_rs);

  /* "fmsne_implem.pyx":3757
 *     # Array storing the multi-scale HD similarities, as computed during the multi-scale optimization
 *     cdef double*** simhd_ms_nn_i_rs = alloc_dble_3dmat_varK(n_rs, N, nnn_i_rs)
 *     if simhd_ms_nn_i_rs is NULL:             # <<<<<<<<<<<<<<
 *         free_int_2dmat(nnn_i_rs, n_rs)
 *         free_dble_3dmat(ds_nn_i_rs, n_rs, N)
 */
  __pyx_t_1 = ((__pyx_v_simhd_ms_nn_i_rs == NULL) != 0);
  if (__pyx_t_1) {

    /* "fmsne_implem.pyx":3758
 *     cdef double*** simhd_ms_nn_i_rs = alloc_dble_3dmat_varK(n_rs, N, nnn_i_rs)
 *     if simhd_ms_nn_i_rs is NULL:
 *         free_int_2dmat(nnn_i_rs, n_rs)             # <<<<<<<<<<<<<<
 *         free_dble_3dmat(ds_nn_i_rs, n_rs, N)
 *         free_dble_3dmat(tau_h_i_rs, L, n_rs)
 */
    __pyx_f_12fmsne_implem_free_int_2dmat(__pyx_v_nnn_i_rs, __pyx_v_n_rs);

    /* "fmsne_implem.pyx":3759
 *     if simhd_ms_nn_i_rs is NULL:
 *         free_int_2dmat(nnn_i_rs, n_rs)
 *         free_dble_3dmat(ds_nn_i_rs, n_rs, N)             # <<<<<<<<<<<<<<
 *         free_dble_3dmat(tau_h_i_rs, L, n_rs)
 *         free_Pysst_3dmat(m_nn, n_rs, sLm_nt)
 */
    __pyx_f_12fmsne_implem_free_dble_3dmat(__pyx_v_ds_nn_i_rs, __pyx_v_n_rs, __pyx_v_N);

    /* "fmsne_implem.pyx":3760
 *         free_int_2dmat(nnn_i_rs, n_rs)
 *         free_dble_3dmat(ds_nn_i_rs, n_rs, N)
 *         free_dble_3dmat(tau_h_i_rs, L, n_rs)             # <<<<<<<<<<<<<<
 *         free_Pysst_3dmat(m_nn, n_rs, sLm_nt)
 *         printf("Error in fmssne_implem function of fmsne_implem.pyx: out of memory for simhd_ms_nn_i_rs.")
 */
    __pyx_f_12fmsne_implem_free_dble_3dmat(__pyx_v_tau_h_i_rs, __pyx_v_L, __pyx_v_n_rs);

    /* "fmsne_implem.pyx":3761
 *         free_dble_3dmat(ds_nn_i_rs, n_rs, N)
 *         free_dble_3dmat(tau_h_i_rs, L, n_rs)
 *         free_Pysst_3dmat(m_nn, n_rs, sLm_nt)             # <<<<<<<<<<<<<<
 *         printf("Error in fmssne_implem function of fmsne_implem.pyx: out of memory for simhd_ms_nn_i_rs.")
 *         exit(EXIT_FAILURE)
 */
    __pyx_f_12fmsne_implem_free_Pysst_3dmat(__pyx_v_m_nn, __pyx_v_n_rs, __pyx_v_sLm_nt);

    /* "fmsne_implem.pyx":3762
 *         free_dble_3dmat(tau_h_i_rs, L, n_rs)
 *         free_Pysst_3dmat(m_nn, n_rs, sLm_nt)
 *         printf("Error in fmssne_implem function of fmsne_implem.pyx: out of memory for simhd_ms_nn_i_rs.")             # <<<<<<<<<<<<<<
 *         exit(EXIT_FAILURE)
 * 
 */
    (void)(printf(((char const *)"Error in fmssne_implem function of fmsne_implem.pyx: out of memory for simhd_ms_nn_i_rs.")));

    /* "fmsne_implem.pyx":3763
 *         free_Pysst_3dmat(m_nn, n_rs, sLm_nt)
 *         printf("Error in fmssne_implem function of fmsne_implem.pyx: out of memory for simhd_ms_nn_i_rs.")
 *         exit(EXIT_FAILURE)             # <<<<<<<<<<<<<<
 * 
 *     # Array storing the HD similarities at some scale h, during the multi-scale optimization
 */
    exit(EXIT_FAILURE);

    /* "fmsne_implem.pyx":3757
 *     # Array storing the multi-scale HD similarities, as computed during the multi-scale optimization
 *     cdef double*** simhd_ms_nn_i_rs = alloc_dble_3dmat_varK(n_rs, N, nnn_i_rs)
 *     if simhd_ms_nn_i_rs is NULL:             # <<<<<<<<<<<<<<
 *         free_int_2dmat(nnn_i_rs, n_rs)
 *         free_dble_3dmat(ds_nn_i_rs, n_rs, N)
 */
  }

  /* "fmsne_implem.pyx":3766
 * 
 *     # Array storing the HD similarities at some scale h, during the multi-scale optimization
 *     cdef double*** simhd_h_nn_i_rs = alloc_dble_3dmat_varK(n_rs, N, nnn_i_rs)             # <<<<<<<<<<<<<<
 *     if simhd_h_nn_i_rs is NULL:
 *         free_int_2dmat(nnn_i_rs, n_rs)
 */
  __pyx_v_simhd_h_nn_i_rs = __pyx_f_12fmsne_implem_alloc_dble_3dmat_varK(__pyx_v_n_rs, __pyx_v_N, __pyx_v_nnn_i_rs);

  /* "fmsne_implem.pyx":3767
 *     # Array storing the HD similarities at some scale h, during the multi-scale optimization
 *     cdef double*** simhd_h_nn_i_rs = alloc_dble_3dmat_varK(n_rs, N, nnn_i_rs)
 *     if simhd_h_nn_i_rs is NULL:             # <<<<<<<<<<<<<<
 *         free_int_2dmat(nnn_i_rs, n_rs)
 *         free_dble_3dmat(ds_nn_i_rs, n_rs, N)
 */
  __pyx_t_1 = ((__pyx_v_simhd_h_nn_i_rs == NULL) != 0);
  if (__pyx_t_1) {

    /* "fmsne_implem.pyx":3768
 *     cdef double*** simhd_h_nn_i_rs = alloc_dble_3dmat_varK(n_rs, N, nnn_i_rs)
 *     if simhd_h_nn_i_rs is NULL:
 *         free_int_2dmat(nnn_i_rs, n_rs)             # <<<<<<<<<<<<<<
 *         free_dble_3dmat(ds_nn_i_rs, n_rs, N)
 *         free_dble_3dmat(simhd_ms_nn_i_rs, n_rs, N)
 */
    __pyx_f_12fmsne_implem_free_int_2dmat(__pyx_v_nnn_i_rs, __pyx_v_n_rs);

    /* "fmsne_implem.pyx":3769
 *     if simhd_h_nn_i_rs is NULL:
 *         free_int_2dmat(nnn_i_rs, n_rs)
 *         free_dble_3dmat(ds_nn_i_rs, n_rs, N)             # <<<<<<<<<<<<<<
 *         free_dble_3dmat(simhd_ms_nn_i_rs, n_rs, N)
 *         free_dble_3dmat(tau_h_i_rs, L, n_rs)
 */
    __pyx_f_12fmsne_implem_free_dble_3dmat(__pyx_v_ds_nn_i_rs, __pyx_v_n_rs, __pyx_v_N);

    /* "fmsne_implem.pyx":3770
 *         free_int_2dmat(nnn_i_rs, n_rs)
 *         free_dble_3dmat(ds_nn_i_rs, n_rs, N)
 *         free_dble_3dmat(simhd_ms_nn_i_rs, n_rs, N)             # <<<<<<<<<<<<<<
 *         free_dble_3dmat(tau_h_i_rs, L, n_rs)
 *         free_Pysst_3dmat(m_nn, n_rs, sLm_nt)
 */
    __pyx_f_12fmsne_implem_free_dble_3dmat(__pyx_v_simhd_ms_nn_i_rs, __pyx_v_n_rs, __pyx_v_N);

    /* "fmsne_implem.pyx":3771
 *         free_dble_3dmat(ds_nn_i_rs, n_rs, N)
 *         free_dble_3dmat(simhd_ms_nn_i_rs, n_rs, N)
 *         free_dble_3dmat(tau_h_i_rs, L, n_rs)             # <<<<<<<<<<<<<<
 *         free_Pysst_3dmat(m_nn, n_rs, sLm_nt)
 *         printf("Error in fmssne_implem function of fmsne_implem.pyx: out of memory for simhd_h_nn_i_rs.")
 */
    __pyx_f_12fmsne_implem_free_dble_3dmat(__pyx_v_tau_h_i_rs, __pyx_v_L, __pyx_v_n_rs);

    /* "fmsne_implem.pyx":3772
 *         free_dble_3dmat(simhd_ms_nn_i_rs, n_rs, N)
 *         free_dble_3dmat(tau_h_i_rs, L, n_rs)
 *         free_Pysst_3dmat(m_nn, n_rs, sLm_nt)             # <<<<<<<<<<<<<<
 *         printf("Error in fmssne_implem function of fmsne_implem.pyx: out of memory for simhd_h_nn_i_rs.")
 *         exit(EXIT_FAILURE)
 */
    __pyx_f_12fmsne_implem_free_Pysst_3dmat(__pyx_v_m_nn, __pyx_v_n_rs, __pyx_v_sLm_nt);

    /* "fmsne_implem.pyx":3773
 *         free_dble_3dmat(tau_h_i_rs, L, n_rs)
 *         free_Pysst_3dmat(m_nn, n_rs, sLm_nt)
 *         printf("Error in fmssne_implem function of fmsne_implem.pyx: out of memory for simhd_h_nn_i_rs.")             # <<<<<<<<<<<<<<
 *         exit(EXIT_FAILURE)
 * 
 */
    (void)(printf(((char const *)"Error in fmssne_implem function of fmsne_implem.pyx: out of memory for simhd_h_nn_i_rs.")));

    /* "fmsne_implem.pyx":3774
 *         free_Pysst_3dmat(m_nn, n_rs, sLm_nt)
 *         printf("Error in fmssne_implem function of fmsne_implem.pyx: out of memory for simhd_h_nn_i_rs.")
 *         exit(EXIT_FAILURE)             # <<<<<<<<<<<<<<
 * 
 *     #####
 */
    exit(EXIT_FAILURE);

    /* "fmsne_implem.pyx":3767
 *     # Array storing the HD similarities at some scale h, during the multi-scale optimization
 *     cdef double*** simhd_h_nn_i_rs = alloc_dble_3dmat_varK(n_rs, N, nnn_i_rs)
 *     if simhd_h_nn_i_rs is NULL:             # <<<<<<<<<<<<<<
 *         free_int_2dmat(nnn_i_rs, n_rs)
 *         free_dble_3dmat(ds_nn_i_rs, n_rs, N)
 */
  }

  /* "fmsne_implem.pyx":3781
 * 
 *     # isLmin1 now refers to n_rs > 1
 *     isLmin1 = n_rs > 1             # <<<<<<<<<<<<<<
 * 
 *     # nnn_all_rs[i] will contain the total number of neighbors considered for i over all random samplings.
 */
  __pyx_v_isLmin1 = (__pyx_v_n_rs > 1);

  /* "fmsne_implem.pyx":3791
 *     # idnn_in_ars[rs][i][j] contains the index of the distance between i and its jth neighbor in random sampling rs in dsld_all_rs.
 *     cdef Py_ssize_t*** idnn_in_ars
 *     if isLmin1:             # <<<<<<<<<<<<<<
 *         # nnn_all_rs will be filled in function gather_nn_all_rs
 *         nnn_all_rs =  <Py_ssize_t*> PyMem_Malloc(sLm_nt*sizeof(Py_ssize_t))
 */
  __pyx_t_1 = (__pyx_v_isLmin1 != 0);
  if (__pyx_t_1) {

    /* "fmsne_implem.pyx":3793
 *     if isLmin1:
 *         # nnn_all_rs will be filled in function gather_nn_all_rs
 *         nnn_all_rs =  <Py_ssize_t*> PyMem_Malloc(sLm_nt*sizeof(Py_ssize_t))             # <<<<<<<<<<<<<<
 *         if nnn_all_rs is NULL:
 *             free_int_2dmat(nnn_i_rs, n_rs)
 */
    __pyx_v_nnn_all_rs = ((Py_ssize_t *)PyMem_Malloc((__pyx_v_sLm_nt * (sizeof(Py_ssize_t)))));

    /* "fmsne_implem.pyx":3794
 *         # nnn_all_rs will be filled in function gather_nn_all_rs
 *         nnn_all_rs =  <Py_ssize_t*> PyMem_Malloc(sLm_nt*sizeof(Py_ssize_t))
 *         if nnn_all_rs is NULL:             # <<<<<<<<<<<<<<
 *             free_int_2dmat(nnn_i_rs, n_rs)
 *             free_dble_3dmat(ds_nn_i_rs, n_rs, N)
 */
    __pyx_t_1 = ((__pyx_v_nnn_all_rs == NULL) != 0);
    if (__pyx_t_1) {

      /* "fmsne_implem.pyx":3795
 *         nnn_all_rs =  <Py_ssize_t*> PyMem_Malloc(sLm_nt*sizeof(Py_ssize_t))
 *         if nnn_all_rs is NULL:
 *             free_int_2dmat(nnn_i_rs, n_rs)             # <<<<<<<<<<<<<<
 *             free_dble_3dmat(ds_nn_i_rs, n_rs, N)
 *             free_dble_3dmat(simhd_ms_nn_i_rs, n_rs, N)
 */
      __pyx_f_12fmsne_implem_free_int_2dmat(__pyx_v_nnn_i_rs, __pyx_v_n_rs);

      /* "fmsne_implem.pyx":3796
 *         if nnn_all_rs is NULL:
 *             free_int_2dmat(nnn_i_rs, n_rs)
 *             free_dble_3dmat(ds_nn_i_rs, n_rs, N)             # <<<<<<<<<<<<<<
 *             free_dble_3dmat(simhd_ms_nn_i_rs, n_rs, N)
 *             free_dble_3dmat(simhd_h_nn_i_rs, n_rs, N)
 */
      __pyx_f_12fmsne_implem_free_dble_3dmat(__pyx_v_ds_nn_i_rs, __pyx_v_n_rs, __pyx_v_N);

      /* "fmsne_implem.pyx":3797
 *             free_int_2dmat(nnn_i_rs, n_rs)
 *             free_dble_3dmat(ds_nn_i_rs, n_rs, N)
 *             free_dble_3dmat(simhd_ms_nn_i_rs, n_rs, N)             # <<<<<<<<<<<<<<
 *             free_dble_3dmat(simhd_h_nn_i_rs, n_rs, N)
 *             free_dble_3dmat(tau_h_i_rs, L, n_rs)
 */
      __pyx_f_12fmsne_implem_free_dble_3dmat(__pyx_v_simhd_ms_nn_i_rs, __pyx_v_n_rs, __pyx_v_N);

      /* "fmsne_implem.pyx":3798
 *             free_dble_3dmat(ds_nn_i_rs, n_rs, N)
 *             free_dble_3dmat(simhd_ms_nn_i_rs, n_rs, N)
 *             free_dble_3dmat(simhd_h_nn_i_rs, n_rs, N)             # <<<<<<<<<<<<<<
 *             free_dble_3dmat(tau_h_i_rs, L, n_rs)
 *             free_Pysst_3dmat(m_nn, n_rs, sLm_nt)
 */
      __pyx_f_12fmsne_implem_free_dble_3dmat(__pyx_v_simhd_h_nn_i_rs, __pyx_v_n_rs, __pyx_v_N);

      /* "fmsne_implem.pyx":3799
 *             free_dble_3dmat(simhd_ms_nn_i_rs, n_rs, N)
 *             free_dble_3dmat(simhd_h_nn_i_rs, n_rs, N)
 *             free_dble_3dmat(tau_h_i_rs, L, n_rs)             # <<<<<<<<<<<<<<
 *             free_Pysst_3dmat(m_nn, n_rs, sLm_nt)
 *             printf('Error in function fmstsne_implem of module fmsne_implem.pyx: out of memory for nnn_all_rs.')
 */
      __pyx_f_12fmsne_implem_free_dble_3dmat(__pyx_v_tau_h_i_rs, __pyx_v_L, __pyx_v_n_rs);

      /* "fmsne_implem.pyx":3800
 *             free_dble_3dmat(simhd_h_nn_i_rs, n_rs, N)
 *             free_dble_3dmat(tau_h_i_rs, L, n_rs)
 *             free_Pysst_3dmat(m_nn, n_rs, sLm_nt)             # <<<<<<<<<<<<<<
 *             printf('Error in function fmstsne_implem of module fmsne_implem.pyx: out of memory for nnn_all_rs.')
 *             exit(EXIT_FAILURE)
 */
      __pyx_f_12fmsne_implem_free_Pysst_3dmat(__pyx_v_m_nn, __pyx_v_n_rs, __pyx_v_sLm_nt);

      /* "fmsne_implem.pyx":3801
 *             free_dble_3dmat(tau_h_i_rs, L, n_rs)
 *             free_Pysst_3dmat(m_nn, n_rs, sLm_nt)
 *             printf('Error in function fmstsne_implem of module fmsne_implem.pyx: out of memory for nnn_all_rs.')             # <<<<<<<<<<<<<<
 *             exit(EXIT_FAILURE)
 *         inn_all_rs = gather_nn_all_rs(nnn_all_rs, n_rs, sLm_nt, m_nn)
 */
      (void)(printf(((char const *)"Error in function fmstsne_implem of module fmsne_implem.pyx: out of memory for nnn_all_rs.")));

      /* "fmsne_implem.pyx":3802
 *             free_Pysst_3dmat(m_nn, n_rs, sLm_nt)
 *             printf('Error in function fmstsne_implem of module fmsne_implem.pyx: out of memory for nnn_all_rs.')
 *             exit(EXIT_FAILURE)             # <<<<<<<<<<<<<<
 *         inn_all_rs = gather_nn_all_rs(nnn_all_rs, n_rs, sLm_nt, m_nn)
 *         if inn_all_rs is NULL:
 */
      exit(EXIT_FAILURE);

      /* "fmsne_implem.pyx":3794
 *         # nnn_all_rs will be filled in function gather_nn_all_rs
 *         nnn_all_rs =  <Py_ssize_t*> PyMem_Malloc(sLm_nt*sizeof(Py_ssize_t))
 *         if nnn_all_rs is NULL:             # <<<<<<<<<<<<<<
 *             free_int_2dmat(nnn_i_rs, n_rs)
 *             free_dble_3dmat(ds_nn_i_rs, n_rs, N)
 */
    }

    /* "fmsne_implem.pyx":3803
 *             printf('Error in function fmstsne_implem of module fmsne_implem.pyx: out of memory for nnn_all_rs.')
 *             exit(EXIT_FAILURE)
 *         inn_all_rs = gather_nn_all_rs(nnn_all_rs, n_rs, sLm_nt, m_nn)             # <<<<<<<<<<<<<<
 *         if inn_all_rs is NULL:
 *             free_int_2dmat(nnn_i_rs, n_rs)
 */
    __pyx_v_inn_all_rs = __pyx_f_12fmsne_implem_gather_nn_all_rs(__pyx_v_nnn_all_rs, __pyx_v_n_rs, __pyx_v_sLm_nt, __pyx_v_m_nn);

    /* "fmsne_implem.pyx":3804
 *             exit(EXIT_FAILURE)
 *         inn_all_rs = gather_nn_all_rs(nnn_all_rs, n_rs, sLm_nt, m_nn)
 *         if inn_all_rs is NULL:             # <<<<<<<<<<<<<<
 *             free_int_2dmat(nnn_i_rs, n_rs)
 *             free_dble_3dmat(ds_nn_i_rs, n_rs, N)
 */
    __pyx_t_1 = ((__pyx_v_inn_all_rs == NULL) != 0);
    if (__pyx_t_1) {

      /* "fmsne_implem.pyx":3805
 *         inn_all_rs = gather_nn_all_rs(nnn_all_rs, n_rs, sLm_nt, m_nn)
 *         if inn_all_rs is NULL:
 *             free_int_2dmat(nnn_i_rs, n_rs)             # <<<<<<<<<<<<<<
 *             free_dble_3dmat(ds_nn_i_rs, n_rs, N)
 *             free_dble_3dmat(simhd_ms_nn_i_rs, n_rs, N)
 */
      __pyx_f_12fmsne_implem_free_int_2dmat(__pyx_v_nnn_i_rs, __pyx_v_n_rs);

      /* "fmsne_implem.pyx":3806
 *         if inn_all_rs is NULL:
 *             free_int_2dmat(nnn_i_rs, n_rs)
 *             free_dble_3dmat(ds_nn_i_rs, n_rs, N)             # <<<<<<<<<<<<<<
 *             free_dble_3dmat(simhd_ms_nn_i_rs, n_rs, N)
 *             free_dble_3dmat(simhd_h_nn_i_rs, n_rs, N)
 */
      __pyx_f_12fmsne_implem_free_dble_3dmat(__pyx_v_ds_nn_i_rs, __pyx_v_n_rs, __pyx_v_N);

      /* "fmsne_implem.pyx":3807
 *             free_int_2dmat(nnn_i_rs, n_rs)
 *             free_dble_3dmat(ds_nn_i_rs, n_rs, N)
 *             free_dble_3dmat(simhd_ms_nn_i_rs, n_rs, N)             # <<<<<<<<<<<<<<
 *             free_dble_3dmat(simhd_h_nn_i_rs, n_rs, N)
 *             free_dble_3dmat(tau_h_i_rs, L, n_rs)
 */
      __pyx_f_12fmsne_implem_free_dble_3dmat(__pyx_v_simhd_ms_nn_i_rs, __pyx_v_n_rs, __pyx_v_N);

      /* "fmsne_implem.pyx":3808
 *             free_dble_3dmat(ds_nn_i_rs, n_rs, N)
 *             free_dble_3dmat(simhd_ms_nn_i_rs, n_rs, N)
 *             free_dble_3dmat(simhd_h_nn_i_rs, n_rs, N)             # <<<<<<<<<<<<<<
 *             free_dble_3dmat(tau_h_i_rs, L, n_rs)
 *             free_Pysst_3dmat(m_nn, n_rs, sLm_nt)
 */
      __pyx_f_12fmsne_implem_free_dble_3dmat(__pyx_v_simhd_h_nn_i_rs, __pyx_v_n_rs, __pyx_v_N);

      /* "fmsne_implem.pyx":3809
 *             free_dble_3dmat(simhd_ms_nn_i_rs, n_rs, N)
 *             free_dble_3dmat(simhd_h_nn_i_rs, n_rs, N)
 *             free_dble_3dmat(tau_h_i_rs, L, n_rs)             # <<<<<<<<<<<<<<
 *             free_Pysst_3dmat(m_nn, n_rs, sLm_nt)
 *             PyMem_Free(nnn_all_rs)
 */
      __pyx_f_12fmsne_implem_free_dble_3dmat(__pyx_v_tau_h_i_rs, __pyx_v_L, __pyx_v_n_rs);

      /* "fmsne_implem.pyx":3810
 *             free_dble_3dmat(simhd_h_nn_i_rs, n_rs, N)
 *             free_dble_3dmat(tau_h_i_rs, L, n_rs)
 *             free_Pysst_3dmat(m_nn, n_rs, sLm_nt)             # <<<<<<<<<<<<<<
 *             PyMem_Free(nnn_all_rs)
 *             printf('Error in function fmstsne_implem of module fmsne_implem.pyx: out of memory in function gather_nn_all_rs.')
 */
      __pyx_f_12fmsne_implem_free_Pysst_3dmat(__pyx_v_m_nn, __pyx_v_n_rs, __pyx_v_sLm_nt);

      /* "fmsne_implem.pyx":3811
 *             free_dble_3dmat(tau_h_i_rs, L, n_rs)
 *             free_Pysst_3dmat(m_nn, n_rs, sLm_nt)
 *             PyMem_Free(nnn_all_rs)             # <<<<<<<<<<<<<<
 *             printf('Error in function fmstsne_implem of module fmsne_implem.pyx: out of memory in function gather_nn_all_rs.')
 *             exit(EXIT_FAILURE)
 */
      PyMem_Free(__pyx_v_nnn_all_rs);

      /* "fmsne_implem.pyx":3812
 *             free_Pysst_3dmat(m_nn, n_rs, sLm_nt)
 *             PyMem_Free(nnn_all_rs)
 *             printf('Error in function fmstsne_implem of module fmsne_implem.pyx: out of memory in function gather_nn_all_rs.')             # <<<<<<<<<<<<<<
 *             exit(EXIT_FAILURE)
 *         dsld_all_rs = <double*> PyMem_Malloc(max_arr_ptr_Pysst(nnn_all_rs, sLm_nt)*sizeof(double))
 */
      (void)(printf(((char const *)"Error in function fmstsne_implem of module fmsne_implem.pyx: out of memory in function gather_nn_all_rs.")));

      /* "fmsne_implem.pyx":3813
 *             PyMem_Free(nnn_all_rs)
 *             printf('Error in function fmstsne_implem of module fmsne_implem.pyx: out of memory in function gather_nn_all_rs.')
 *             exit(EXIT_FAILURE)             # <<<<<<<<<<<<<<
 *         dsld_all_rs = <double*> PyMem_Malloc(max_arr_ptr_Pysst(nnn_all_rs, sLm_nt)*sizeof(double))
 *         if dsld_all_rs is NULL:
 */
      exit(EXIT_FAILURE);

      /* "fmsne_implem.pyx":3804
 *             exit(EXIT_FAILURE)
 *         inn_all_rs = gather_nn_all_rs(nnn_all_rs, n_rs, sLm_nt, m_nn)
 *         if inn_all_rs is NULL:             # <<<<<<<<<<<<<<
 *             free_int_2dmat(nnn_i_rs, n_rs)
 *             free_dble_3dmat(ds_nn_i_rs, n_rs, N)
 */
    }

    /* "fmsne_implem.pyx":3814
 *             printf('Error in function fmstsne_implem of module fmsne_implem.pyx: out of memory in function gather_nn_all_rs.')
 *             exit(EXIT_FAILURE)
 *         dsld_all_rs = <double*> PyMem_Malloc(max_arr_ptr_Pysst(nnn_all_rs, sLm_nt)*sizeof(double))             # <<<<<<<<<<<<<<
 *         if dsld_all_rs is NULL:
 *             free_int_2dmat(nnn_i_rs, n_rs)
 */
    __pyx_v_dsld_all_rs = ((double *)PyMem_Malloc((__pyx_f_12fmsne_implem_max_arr_ptr_Pysst(__pyx_v_nnn_all_rs, __pyx_v_sLm_nt) * (sizeof(double)))));

    /* "fmsne_implem.pyx":3815
 *             exit(EXIT_FAILURE)
 *         dsld_all_rs = <double*> PyMem_Malloc(max_arr_ptr_Pysst(nnn_all_rs, sLm_nt)*sizeof(double))
 *         if dsld_all_rs is NULL:             # <<<<<<<<<<<<<<
 *             free_int_2dmat(nnn_i_rs, n_rs)
 *             free_dble_3dmat(ds_nn_i_rs, n_rs, N)
 */
    __pyx_t_1 = ((__pyx_v_dsld_all_rs == NULL) != 0);
    if (__pyx_t_1) {

      /* "fmsne_implem.pyx":3816
 *         dsld_all_rs = <double*> PyMem_Malloc(max_arr_ptr_Pysst(nnn_all_rs, sLm_nt)*sizeof(double))
 *         if dsld_all_rs is NULL:
 *             free_int_2dmat(nnn_i_rs, n_rs)             # <<<<<<<<<<<<<<
 *             free_dble_3dmat(ds_nn_i_rs, n_rs, N)
 *             free_dble_3dmat(simhd_ms_nn_i_rs, n_rs, N)
 */
      __pyx_f_12fmsne_implem_free_int_2dmat(__pyx_v_nnn_i_rs, __pyx_v_n_rs);

      /* "fmsne_implem.pyx":3817
 *         if dsld_all_rs is NULL:
 *             free_int_2dmat(nnn_i_rs, n_rs)
 *             free_dble_3dmat(ds_nn_i_rs, n_rs, N)             # <<<<<<<<<<<<<<
 *             free_dble_3dmat(simhd_ms_nn_i_rs, n_rs, N)
 *             free_dble_3dmat(simhd_h_nn_i_rs, n_rs, N)
 */
      __pyx_f_12fmsne_implem_free_dble_3dmat(__pyx_v_ds_nn_i_rs, __pyx_v_n_rs, __pyx_v_N);

      /* "fmsne_implem.pyx":3818
 *             free_int_2dmat(nnn_i_rs, n_rs)
 *             free_dble_3dmat(ds_nn_i_rs, n_rs, N)
 *             free_dble_3dmat(simhd_ms_nn_i_rs, n_rs, N)             # <<<<<<<<<<<<<<
 *             free_dble_3dmat(simhd_h_nn_i_rs, n_rs, N)
 *             free_dble_3dmat(tau_h_i_rs, L, n_rs)
 */
      __pyx_f_12fmsne_implem_free_dble_3dmat(__pyx_v_simhd_ms_nn_i_rs, __pyx_v_n_rs, __pyx_v_N);

      /* "fmsne_implem.pyx":3819
 *             free_dble_3dmat(ds_nn_i_rs, n_rs, N)
 *             free_dble_3dmat(simhd_ms_nn_i_rs, n_rs, N)
 *             free_dble_3dmat(simhd_h_nn_i_rs, n_rs, N)             # <<<<<<<<<<<<<<
 *             free_dble_3dmat(tau_h_i_rs, L, n_rs)
 *             free_Pysst_3dmat(m_nn, n_rs, sLm_nt)
 */
      __pyx_f_12fmsne_implem_free_dble_3dmat(__pyx_v_simhd_h_nn_i_rs, __pyx_v_n_rs, __pyx_v_N);

      /* "fmsne_implem.pyx":3820
 *             free_dble_3dmat(simhd_ms_nn_i_rs, n_rs, N)
 *             free_dble_3dmat(simhd_h_nn_i_rs, n_rs, N)
 *             free_dble_3dmat(tau_h_i_rs, L, n_rs)             # <<<<<<<<<<<<<<
 *             free_Pysst_3dmat(m_nn, n_rs, sLm_nt)
 *             PyMem_Free(nnn_all_rs)
 */
      __pyx_f_12fmsne_implem_free_dble_3dmat(__pyx_v_tau_h_i_rs, __pyx_v_L, __pyx_v_n_rs);

      /* "fmsne_implem.pyx":3821
 *             free_dble_3dmat(simhd_h_nn_i_rs, n_rs, N)
 *             free_dble_3dmat(tau_h_i_rs, L, n_rs)
 *             free_Pysst_3dmat(m_nn, n_rs, sLm_nt)             # <<<<<<<<<<<<<<
 *             PyMem_Free(nnn_all_rs)
 *             free_Pysst_2dmat(inn_all_rs, sLm_nt)
 */
      __pyx_f_12fmsne_implem_free_Pysst_3dmat(__pyx_v_m_nn, __pyx_v_n_rs, __pyx_v_sLm_nt);

      /* "fmsne_implem.pyx":3822
 *             free_dble_3dmat(tau_h_i_rs, L, n_rs)
 *             free_Pysst_3dmat(m_nn, n_rs, sLm_nt)
 *             PyMem_Free(nnn_all_rs)             # <<<<<<<<<<<<<<
 *             free_Pysst_2dmat(inn_all_rs, sLm_nt)
 *             printf('Error in function fmstsne_implem of module fmsne_implem.pyx: out of memory for dsld_all_rs.')
 */
      PyMem_Free(__pyx_v_nnn_all_rs);

      /* "fmsne_implem.pyx":3823
 *             free_Pysst_3dmat(m_nn, n_rs, sLm_nt)
 *             PyMem_Free(nnn_all_rs)
 *             free_Pysst_2dmat(inn_all_rs, sLm_nt)             # <<<<<<<<<<<<<<
 *             printf('Error in function fmstsne_implem of module fmsne_implem.pyx: out of memory for dsld_all_rs.')
 *             exit(EXIT_FAILURE)
 */
      __pyx_f_12fmsne_implem_free_Pysst_2dmat(__pyx_v_inn_all_rs, __pyx_v_sLm_nt);

      /* "fmsne_implem.pyx":3824
 *             PyMem_Free(nnn_all_rs)
 *             free_Pysst_2dmat(inn_all_rs, sLm_nt)
 *             printf('Error in function fmstsne_implem of module fmsne_implem.pyx: out of memory for dsld_all_rs.')             # <<<<<<<<<<<<<<
 *             exit(EXIT_FAILURE)
 *         idnn_in_ars = fms_nn_rs_match_all_rs(n_rs, sLm_nt, inn_all_rs, nnn_all_rs, m_nn)
 */
      (void)(printf(((char const *)"Error in function fmstsne_implem of module fmsne_implem.pyx: out of memory for dsld_all_rs.")));

      /* "fmsne_implem.pyx":3825
 *             free_Pysst_2dmat(inn_all_rs, sLm_nt)
 *             printf('Error in function fmstsne_implem of module fmsne_implem.pyx: out of memory for dsld_all_rs.')
 *             exit(EXIT_FAILURE)             # <<<<<<<<<<<<<<
 *         idnn_in_ars = fms_nn_rs_match_all_rs(n_rs, sLm_nt, inn_all_rs, nnn_all_rs, m_nn)
 *         if idnn_in_ars is NULL:
 */
      exit(EXIT_FAILURE);

      /* "fmsne_implem.pyx":3815
 *             exit(EXIT_FAILURE)
 *         dsld_all_rs = <double*> PyMem_Malloc(max_arr_ptr_Pysst(nnn_all_rs, sLm_nt)*sizeof(double))
 *         if dsld_all_rs is NULL:             # <<<<<<<<<<<<<<
 *             free_int_2dmat(nnn_i_rs, n_rs)
 *             free_dble_3dmat(ds_nn_i_rs, n_rs, N)
 */
    }

    /* "fmsne_implem.pyx":3826
 *             printf('Error in function fmstsne_implem of module fmsne_implem.pyx: out of memory for dsld_all_rs.')
 *             exit(EXIT_FAILURE)
 *         idnn_in_ars = fms_nn_rs_match_all_rs(n_rs, sLm_nt, inn_all_rs, nnn_all_rs, m_nn)             # <<<<<<<<<<<<<<
 *         if idnn_in_ars is NULL:
 *             free_int_2dmat(nnn_i_rs, n_rs)
 */
    __pyx_v_idnn_in_ars = __pyx_f_12fmsne_implem_fms_nn_rs_match_all_rs(__pyx_v_n_rs, __pyx_v_sLm_nt, __pyx_v_inn_all_rs, __pyx_v_nnn_all_rs, __pyx_v_m_nn);

    /* "fmsne_implem.pyx":3827
 *             exit(EXIT_FAILURE)
 *         idnn_in_ars = fms_nn_rs_match_all_rs(n_rs, sLm_nt, inn_all_rs, nnn_all_rs, m_nn)
 *         if idnn_in_ars is NULL:             # <<<<<<<<<<<<<<
 *             free_int_2dmat(nnn_i_rs, n_rs)
 *             free_dble_3dmat(ds_nn_i_rs, n_rs, N)
 */
    __pyx_t_1 = ((__pyx_v_idnn_in_ars == NULL) != 0);
    if (__pyx_t_1) {

      /* "fmsne_implem.pyx":3828
 *         idnn_in_ars = fms_nn_rs_match_all_rs(n_rs, sLm_nt, inn_all_rs, nnn_all_rs, m_nn)
 *         if idnn_in_ars is NULL:
 *             free_int_2dmat(nnn_i_rs, n_rs)             # <<<<<<<<<<<<<<
 *             free_dble_3dmat(ds_nn_i_rs, n_rs, N)
 *             free_dble_3dmat(simhd_ms_nn_i_rs, n_rs, N)
 */
      __pyx_f_12fmsne_implem_free_int_2dmat(__pyx_v_nnn_i_rs, __pyx_v_n_rs);

      /* "fmsne_implem.pyx":3829
 *         if idnn_in_ars is NULL:
 *             free_int_2dmat(nnn_i_rs, n_rs)
 *             free_dble_3dmat(ds_nn_i_rs, n_rs, N)             # <<<<<<<<<<<<<<
 *             free_dble_3dmat(simhd_ms_nn_i_rs, n_rs, N)
 *             free_dble_3dmat(simhd_h_nn_i_rs, n_rs, N)
 */
      __pyx_f_12fmsne_implem_free_dble_3dmat(__pyx_v_ds_nn_i_rs, __pyx_v_n_rs, __pyx_v_N);

      /* "fmsne_implem.pyx":3830
 *             free_int_2dmat(nnn_i_rs, n_rs)
 *             free_dble_3dmat(ds_nn_i_rs, n_rs, N)
 *             free_dble_3dmat(simhd_ms_nn_i_rs, n_rs, N)             # <<<<<<<<<<<<<<
 *             free_dble_3dmat(simhd_h_nn_i_rs, n_rs, N)
 *             free_dble_3dmat(tau_h_i_rs, L, n_rs)
 */
      __pyx_f_12fmsne_implem_free_dble_3dmat(__pyx_v_simhd_ms_nn_i_rs, __pyx_v_n_rs, __pyx_v_N);

      /* "fmsne_implem.pyx":3831
 *             free_dble_3dmat(ds_nn_i_rs, n_rs, N)
 *             free_dble_3dmat(simhd_ms_nn_i_rs, n_rs, N)
 *             free_dble_3dmat(simhd_h_nn_i_rs, n_rs, N)             # <<<<<<<<<<<<<<
 *             free_dble_3dmat(tau_h_i_rs, L, n_rs)
 *             free_Pysst_3dmat(m_nn, n_rs, sLm_nt)
 */
      __pyx_f_12fmsne_implem_free_dble_3dmat(__pyx_v_simhd_h_nn_i_rs, __pyx_v_n_rs, __pyx_v_N);

      /* "fmsne_implem.pyx":3832
 *             free_dble_3dmat(simhd_ms_nn_i_rs, n_rs, N)
 *             free_dble_3dmat(simhd_h_nn_i_rs, n_rs, N)
 *             free_dble_3dmat(tau_h_i_rs, L, n_rs)             # <<<<<<<<<<<<<<
 *             free_Pysst_3dmat(m_nn, n_rs, sLm_nt)
 *             PyMem_Free(nnn_all_rs)
 */
      __pyx_f_12fmsne_implem_free_dble_3dmat(__pyx_v_tau_h_i_rs, __pyx_v_L, __pyx_v_n_rs);

      /* "fmsne_implem.pyx":3833
 *             free_dble_3dmat(simhd_h_nn_i_rs, n_rs, N)
 *             free_dble_3dmat(tau_h_i_rs, L, n_rs)
 *             free_Pysst_3dmat(m_nn, n_rs, sLm_nt)             # <<<<<<<<<<<<<<
 *             PyMem_Free(nnn_all_rs)
 *             free_Pysst_2dmat(inn_all_rs, sLm_nt)
 */
      __pyx_f_12fmsne_implem_free_Pysst_3dmat(__pyx_v_m_nn, __pyx_v_n_rs, __pyx_v_sLm_nt);

      /* "fmsne_implem.pyx":3834
 *             free_dble_3dmat(tau_h_i_rs, L, n_rs)
 *             free_Pysst_3dmat(m_nn, n_rs, sLm_nt)
 *             PyMem_Free(nnn_all_rs)             # <<<<<<<<<<<<<<
 *             free_Pysst_2dmat(inn_all_rs, sLm_nt)
 *             PyMem_Free(dsld_all_rs)
 */
      PyMem_Free(__pyx_v_nnn_all_rs);

      /* "fmsne_implem.pyx":3835
 *             free_Pysst_3dmat(m_nn, n_rs, sLm_nt)
 *             PyMem_Free(nnn_all_rs)
 *             free_Pysst_2dmat(inn_all_rs, sLm_nt)             # <<<<<<<<<<<<<<
 *             PyMem_Free(dsld_all_rs)
 *             printf('Error in function fmstsne_implem of module fmsne_implem.pyx: out of memory in function fms_nn_rs_match_all_rs.')
 */
      __pyx_f_12fmsne_implem_free_Pysst_2dmat(__pyx_v_inn_all_rs, __pyx_v_sLm_nt);

      /* "fmsne_implem.pyx":3836
 *             PyMem_Free(nnn_all_rs)
 *             free_Pysst_2dmat(inn_all_rs, sLm_nt)
 *             PyMem_Free(dsld_all_rs)             # <<<<<<<<<<<<<<
 *             printf('Error in function fmstsne_implem of module fmsne_implem.pyx: out of memory in function fms_nn_rs_match_all_rs.')
 *             exit(EXIT_FAILURE)
 */
      PyMem_Free(__pyx_v_dsld_all_rs);

      /* "fmsne_implem.pyx":3837
 *             free_Pysst_2dmat(inn_all_rs, sLm_nt)
 *             PyMem_Free(dsld_all_rs)
 *             printf('Error in function fmstsne_implem of module fmsne_implem.pyx: out of memory in function fms_nn_rs_match_all_rs.')             # <<<<<<<<<<<<<<
 *             exit(EXIT_FAILURE)
 *     else:
 */
      (void)(printf(((char const *)"Error in function fmstsne_implem of module fmsne_implem.pyx: out of memory in function fms_nn_rs_match_all_rs.")));

      /* "fmsne_implem.pyx":3838
 *             PyMem_Free(dsld_all_rs)
 *             printf('Error in function fmstsne_implem of module fmsne_implem.pyx: out of memory in function fms_nn_rs_match_all_rs.')
 *             exit(EXIT_FAILURE)             # <<<<<<<<<<<<<<
 *     else:
 *         nnn_all_rs = NULL
 */
      exit(EXIT_FAILURE);

      /* "fmsne_implem.pyx":3827
 *             exit(EXIT_FAILURE)
 *         idnn_in_ars = fms_nn_rs_match_all_rs(n_rs, sLm_nt, inn_all_rs, nnn_all_rs, m_nn)
 *         if idnn_in_ars is NULL:             # <<<<<<<<<<<<<<
 *             free_int_2dmat(nnn_i_rs, n_rs)
 *             free_dble_3dmat(ds_nn_i_rs, n_rs, N)
 */
    }

    /* "fmsne_implem.pyx":3791
 *     # idnn_in_ars[rs][i][j] contains the index of the distance between i and its jth neighbor in random sampling rs in dsld_all_rs.
 *     cdef Py_ssize_t*** idnn_in_ars
 *     if isLmin1:             # <<<<<<<<<<<<<<
 *         # nnn_all_rs will be filled in function gather_nn_all_rs
 *         nnn_all_rs =  <Py_ssize_t*> PyMem_Malloc(sLm_nt*sizeof(Py_ssize_t))
 */
    goto __pyx_L15;
  }

  /* "fmsne_implem.pyx":3840
 *             exit(EXIT_FAILURE)
 *     else:
 *         nnn_all_rs = NULL             # <<<<<<<<<<<<<<
 *         inn_all_rs = NULL
 *         dsld_all_rs = NULL
 */
  /*else*/ {
    __pyx_v_nnn_all_rs = NULL;

    /* "fmsne_implem.pyx":3841
 *     else:
 *         nnn_all_rs = NULL
 *         inn_all_rs = NULL             # <<<<<<<<<<<<<<
 *         dsld_all_rs = NULL
 *         idnn_in_ars = NULL
 */
    __pyx_v_inn_all_rs = NULL;

    /* "fmsne_implem.pyx":3842
 *         nnn_all_rs = NULL
 *         inn_all_rs = NULL
 *         dsld_all_rs = NULL             # <<<<<<<<<<<<<<
 *         idnn_in_ars = NULL
 * 
 */
    __pyx_v_dsld_all_rs = NULL;

    /* "fmsne_implem.pyx":3843
 *         inn_all_rs = NULL
 *         dsld_all_rs = NULL
 *         idnn_in_ars = NULL             # <<<<<<<<<<<<<<
 * 
 *     #####
 */
    __pyx_v_idnn_in_ars = NULL;
  }
  __pyx_L15:;

  /* "fmsne_implem.pyx":3850
 * 
 *     # Pointer toward the start of the LDS
 *     cdef double* xlds = &X_lds[0]             # <<<<<<<<<<<<<<
 *     cdef int prod_N_nc = N*n_components
 *     # Number of bytes of the array for the optimization
 */
  __pyx_t_2 = 0;
  __pyx_v_xlds = (&(*((double *) ( /* dim=0 */ ((char *) (((double *) __pyx_v_X_lds.data) + __pyx_t_2)) ))));

  /* "fmsne_implem.pyx":3851
 *     # Pointer toward the start of the LDS
 *     cdef double* xlds = &X_lds[0]
 *     cdef int prod_N_nc = N*n_components             # <<<<<<<<<<<<<<
 *     # Number of bytes of the array for the optimization
 *     cdef size_t shdp = prod_N_nc*sizeof(double)
 */
  __pyx_v_prod_N_nc = (__pyx_v_N * __pyx_v_n_components);

  /* "fmsne_implem.pyx":3853
 *     cdef int prod_N_nc = N*n_components
 *     # Number of bytes of the array for the optimization
 *     cdef size_t shdp = prod_N_nc*sizeof(double)             # <<<<<<<<<<<<<<
 *     # Variables for the optimization, initialized to the current LDS.
 *     cdef lbfgsfloatval_t* xopt = init_lbfgs_var(shdp, prod_N_nc, xlds)
 */
  __pyx_v_shdp = (__pyx_v_prod_N_nc * (sizeof(double)));

  /* "fmsne_implem.pyx":3855
 *     cdef size_t shdp = prod_N_nc*sizeof(double)
 *     # Variables for the optimization, initialized to the current LDS.
 *     cdef lbfgsfloatval_t* xopt = init_lbfgs_var(shdp, prod_N_nc, xlds)             # <<<<<<<<<<<<<<
 *     if xopt is NULL:
 *         free_int_2dmat(nnn_i_rs, n_rs)
 */
  __pyx_v_xopt = __pyx_f_12fmsne_implem_init_lbfgs_var(__pyx_v_shdp, __pyx_v_prod_N_nc, __pyx_v_xlds);

  /* "fmsne_implem.pyx":3856
 *     # Variables for the optimization, initialized to the current LDS.
 *     cdef lbfgsfloatval_t* xopt = init_lbfgs_var(shdp, prod_N_nc, xlds)
 *     if xopt is NULL:             # <<<<<<<<<<<<<<
 *         free_int_2dmat(nnn_i_rs, n_rs)
 *         free_dble_3dmat(ds_nn_i_rs, n_rs, N)
 */
  __pyx_t_1 = ((__pyx_v_xopt == NULL) != 0);
  if (__pyx_t_1) {

    /* "fmsne_implem.pyx":3857
 *     cdef lbfgsfloatval_t* xopt = init_lbfgs_var(shdp, prod_N_nc, xlds)
 *     if xopt is NULL:
 *         free_int_2dmat(nnn_i_rs, n_rs)             # <<<<<<<<<<<<<<
 *         free_dble_3dmat(ds_nn_i_rs, n_rs, N)
 *         free_dble_3dmat(simhd_ms_nn_i_rs, n_rs, N)
 */
    __pyx_f_12fmsne_implem_free_int_2dmat(__pyx_v_nnn_i_rs, __pyx_v_n_rs);

    /* "fmsne_implem.pyx":3858
 *     if xopt is NULL:
 *         free_int_2dmat(nnn_i_rs, n_rs)
 *         free_dble_3dmat(ds_nn_i_rs, n_rs, N)             # <<<<<<<<<<<<<<
 *         free_dble_3dmat(simhd_ms_nn_i_rs, n_rs, N)
 *         free_dble_3dmat(simhd_h_nn_i_rs, n_rs, N)
 */
    __pyx_f_12fmsne_implem_free_dble_3dmat(__pyx_v_ds_nn_i_rs, __pyx_v_n_rs, __pyx_v_N);

    /* "fmsne_implem.pyx":3859
 *         free_int_2dmat(nnn_i_rs, n_rs)
 *         free_dble_3dmat(ds_nn_i_rs, n_rs, N)
 *         free_dble_3dmat(simhd_ms_nn_i_rs, n_rs, N)             # <<<<<<<<<<<<<<
 *         free_dble_3dmat(simhd_h_nn_i_rs, n_rs, N)
 *         free_dble_3dmat(tau_h_i_rs, L, n_rs)
 */
    __pyx_f_12fmsne_implem_free_dble_3dmat(__pyx_v_simhd_ms_nn_i_rs, __pyx_v_n_rs, __pyx_v_N);

    /* "fmsne_implem.pyx":3860
 *         free_dble_3dmat(ds_nn_i_rs, n_rs, N)
 *         free_dble_3dmat(simhd_ms_nn_i_rs, n_rs, N)
 *         free_dble_3dmat(simhd_h_nn_i_rs, n_rs, N)             # <<<<<<<<<<<<<<
 *         free_dble_3dmat(tau_h_i_rs, L, n_rs)
 *         free_Pysst_3dmat(m_nn, n_rs, sLm_nt)
 */
    __pyx_f_12fmsne_implem_free_dble_3dmat(__pyx_v_simhd_h_nn_i_rs, __pyx_v_n_rs, __pyx_v_N);

    /* "fmsne_implem.pyx":3861
 *         free_dble_3dmat(simhd_ms_nn_i_rs, n_rs, N)
 *         free_dble_3dmat(simhd_h_nn_i_rs, n_rs, N)
 *         free_dble_3dmat(tau_h_i_rs, L, n_rs)             # <<<<<<<<<<<<<<
 *         free_Pysst_3dmat(m_nn, n_rs, sLm_nt)
 *         if isLmin1:
 */
    __pyx_f_12fmsne_implem_free_dble_3dmat(__pyx_v_tau_h_i_rs, __pyx_v_L, __pyx_v_n_rs);

    /* "fmsne_implem.pyx":3862
 *         free_dble_3dmat(simhd_h_nn_i_rs, n_rs, N)
 *         free_dble_3dmat(tau_h_i_rs, L, n_rs)
 *         free_Pysst_3dmat(m_nn, n_rs, sLm_nt)             # <<<<<<<<<<<<<<
 *         if isLmin1:
 *             PyMem_Free(nnn_all_rs)
 */
    __pyx_f_12fmsne_implem_free_Pysst_3dmat(__pyx_v_m_nn, __pyx_v_n_rs, __pyx_v_sLm_nt);

    /* "fmsne_implem.pyx":3863
 *         free_dble_3dmat(tau_h_i_rs, L, n_rs)
 *         free_Pysst_3dmat(m_nn, n_rs, sLm_nt)
 *         if isLmin1:             # <<<<<<<<<<<<<<
 *             PyMem_Free(nnn_all_rs)
 *             free_Pysst_2dmat(inn_all_rs, sLm_nt)
 */
    __pyx_t_1 = (__pyx_v_isLmin1 != 0);
    if (__pyx_t_1) {

      /* "fmsne_implem.pyx":3864
 *         free_Pysst_3dmat(m_nn, n_rs, sLm_nt)
 *         if isLmin1:
 *             PyMem_Free(nnn_all_rs)             # <<<<<<<<<<<<<<
 *             free_Pysst_2dmat(inn_all_rs, sLm_nt)
 *             PyMem_Free(dsld_all_rs)
 */
      PyMem_Free(__pyx_v_nnn_all_rs);

      /* "fmsne_implem.pyx":3865
 *         if isLmin1:
 *             PyMem_Free(nnn_all_rs)
 *             free_Pysst_2dmat(inn_all_rs, sLm_nt)             # <<<<<<<<<<<<<<
 *             PyMem_Free(dsld_all_rs)
 *             free_Pysst_3dmat(idnn_in_ars, n_rs, sLm_nt)
 */
      __pyx_f_12fmsne_implem_free_Pysst_2dmat(__pyx_v_inn_all_rs, __pyx_v_sLm_nt);

      /* "fmsne_implem.pyx":3866
 *             PyMem_Free(nnn_all_rs)
 *             free_Pysst_2dmat(inn_all_rs, sLm_nt)
 *             PyMem_Free(dsld_all_rs)             # <<<<<<<<<<<<<<
 *             free_Pysst_3dmat(idnn_in_ars, n_rs, sLm_nt)
 *         printf('Out of memory for xopt')
 */
      PyMem_Free(__pyx_v_dsld_all_rs);

      /* "fmsne_implem.pyx":3867
 *             free_Pysst_2dmat(inn_all_rs, sLm_nt)
 *             PyMem_Free(dsld_all_rs)
 *             free_Pysst_3dmat(idnn_in_ars, n_rs, sLm_nt)             # <<<<<<<<<<<<<<
 *         printf('Out of memory for xopt')
 *         exit(EXIT_FAILURE)
 */
      __pyx_f_12fmsne_implem_free_Pysst_3dmat(__pyx_v_idnn_in_ars, __pyx_v_n_rs, __pyx_v_sLm_nt);

      /* "fmsne_implem.pyx":3863
 *         free_dble_3dmat(tau_h_i_rs, L, n_rs)
 *         free_Pysst_3dmat(m_nn, n_rs, sLm_nt)
 *         if isLmin1:             # <<<<<<<<<<<<<<
 *             PyMem_Free(nnn_all_rs)
 *             free_Pysst_2dmat(inn_all_rs, sLm_nt)
 */
    }

    /* "fmsne_implem.pyx":3868
 *             PyMem_Free(dsld_all_rs)
 *             free_Pysst_3dmat(idnn_in_ars, n_rs, sLm_nt)
 *         printf('Out of memory for xopt')             # <<<<<<<<<<<<<<
 *         exit(EXIT_FAILURE)
 * 
 */
    (void)(printf(((char const *)"Out of memory for xopt")));

    /* "fmsne_implem.pyx":3869
 *             free_Pysst_3dmat(idnn_in_ars, n_rs, sLm_nt)
 *         printf('Out of memory for xopt')
 *         exit(EXIT_FAILURE)             # <<<<<<<<<<<<<<
 * 
 *     # Structure gathering the data which are necessary to evaluate the cost function and the gradient
 */
    exit(EXIT_FAILURE);

    /* "fmsne_implem.pyx":3856
 *     # Variables for the optimization, initialized to the current LDS.
 *     cdef lbfgsfloatval_t* xopt = init_lbfgs_var(shdp, prod_N_nc, xlds)
 *     if xopt is NULL:             # <<<<<<<<<<<<<<
 *         free_int_2dmat(nnn_i_rs, n_rs)
 *         free_dble_3dmat(ds_nn_i_rs, n_rs, N)
 */
  }

  /* "fmsne_implem.pyx":3872
 * 
 *     # Structure gathering the data which are necessary to evaluate the cost function and the gradient
 *     cdef Opfmstsne* popt = <Opfmstsne*> PyMem_Malloc(sizeof(Opfmstsne))             # <<<<<<<<<<<<<<
 *     if popt is NULL:
 *         free_int_2dmat(nnn_i_rs, n_rs)
 */
  __pyx_v_popt = ((struct __pyx_t_12fmsne_implem_Opfmstsne *)PyMem_Malloc((sizeof(struct __pyx_t_12fmsne_implem_Opfmstsne))));

  /* "fmsne_implem.pyx":3873
 *     # Structure gathering the data which are necessary to evaluate the cost function and the gradient
 *     cdef Opfmstsne* popt = <Opfmstsne*> PyMem_Malloc(sizeof(Opfmstsne))
 *     if popt is NULL:             # <<<<<<<<<<<<<<
 *         free_int_2dmat(nnn_i_rs, n_rs)
 *         free_dble_3dmat(ds_nn_i_rs, n_rs, N)
 */
  __pyx_t_1 = ((__pyx_v_popt == NULL) != 0);
  if (__pyx_t_1) {

    /* "fmsne_implem.pyx":3874
 *     cdef Opfmstsne* popt = <Opfmstsne*> PyMem_Malloc(sizeof(Opfmstsne))
 *     if popt is NULL:
 *         free_int_2dmat(nnn_i_rs, n_rs)             # <<<<<<<<<<<<<<
 *         free_dble_3dmat(ds_nn_i_rs, n_rs, N)
 *         free_dble_3dmat(simhd_ms_nn_i_rs, n_rs, N)
 */
    __pyx_f_12fmsne_implem_free_int_2dmat(__pyx_v_nnn_i_rs, __pyx_v_n_rs);

    /* "fmsne_implem.pyx":3875
 *     if popt is NULL:
 *         free_int_2dmat(nnn_i_rs, n_rs)
 *         free_dble_3dmat(ds_nn_i_rs, n_rs, N)             # <<<<<<<<<<<<<<
 *         free_dble_3dmat(simhd_ms_nn_i_rs, n_rs, N)
 *         free_dble_3dmat(simhd_h_nn_i_rs, n_rs, N)
 */
    __pyx_f_12fmsne_implem_free_dble_3dmat(__pyx_v_ds_nn_i_rs, __pyx_v_n_rs, __pyx_v_N);

    /* "fmsne_implem.pyx":3876
 *         free_int_2dmat(nnn_i_rs, n_rs)
 *         free_dble_3dmat(ds_nn_i_rs, n_rs, N)
 *         free_dble_3dmat(simhd_ms_nn_i_rs, n_rs, N)             # <<<<<<<<<<<<<<
 *         free_dble_3dmat(simhd_h_nn_i_rs, n_rs, N)
 *         free_dble_3dmat(tau_h_i_rs, L, n_rs)
 */
    __pyx_f_12fmsne_implem_free_dble_3dmat(__pyx_v_simhd_ms_nn_i_rs, __pyx_v_n_rs, __pyx_v_N);

    /* "fmsne_implem.pyx":3877
 *         free_dble_3dmat(ds_nn_i_rs, n_rs, N)
 *         free_dble_3dmat(simhd_ms_nn_i_rs, n_rs, N)
 *         free_dble_3dmat(simhd_h_nn_i_rs, n_rs, N)             # <<<<<<<<<<<<<<
 *         free_dble_3dmat(tau_h_i_rs, L, n_rs)
 *         free_Pysst_3dmat(m_nn, n_rs, sLm_nt)
 */
    __pyx_f_12fmsne_implem_free_dble_3dmat(__pyx_v_simhd_h_nn_i_rs, __pyx_v_n_rs, __pyx_v_N);

    /* "fmsne_implem.pyx":3878
 *         free_dble_3dmat(simhd_ms_nn_i_rs, n_rs, N)
 *         free_dble_3dmat(simhd_h_nn_i_rs, n_rs, N)
 *         free_dble_3dmat(tau_h_i_rs, L, n_rs)             # <<<<<<<<<<<<<<
 *         free_Pysst_3dmat(m_nn, n_rs, sLm_nt)
 *         if isLmin1:
 */
    __pyx_f_12fmsne_implem_free_dble_3dmat(__pyx_v_tau_h_i_rs, __pyx_v_L, __pyx_v_n_rs);

    /* "fmsne_implem.pyx":3879
 *         free_dble_3dmat(simhd_h_nn_i_rs, n_rs, N)
 *         free_dble_3dmat(tau_h_i_rs, L, n_rs)
 *         free_Pysst_3dmat(m_nn, n_rs, sLm_nt)             # <<<<<<<<<<<<<<
 *         if isLmin1:
 *             PyMem_Free(nnn_all_rs)
 */
    __pyx_f_12fmsne_implem_free_Pysst_3dmat(__pyx_v_m_nn, __pyx_v_n_rs, __pyx_v_sLm_nt);

    /* "fmsne_implem.pyx":3880
 *         free_dble_3dmat(tau_h_i_rs, L, n_rs)
 *         free_Pysst_3dmat(m_nn, n_rs, sLm_nt)
 *         if isLmin1:             # <<<<<<<<<<<<<<
 *             PyMem_Free(nnn_all_rs)
 *             free_Pysst_2dmat(inn_all_rs, sLm_nt)
 */
    __pyx_t_1 = (__pyx_v_isLmin1 != 0);
    if (__pyx_t_1) {

      /* "fmsne_implem.pyx":3881
 *         free_Pysst_3dmat(m_nn, n_rs, sLm_nt)
 *         if isLmin1:
 *             PyMem_Free(nnn_all_rs)             # <<<<<<<<<<<<<<
 *             free_Pysst_2dmat(inn_all_rs, sLm_nt)
 *             PyMem_Free(dsld_all_rs)
 */
      PyMem_Free(__pyx_v_nnn_all_rs);

      /* "fmsne_implem.pyx":3882
 *         if isLmin1:
 *             PyMem_Free(nnn_all_rs)
 *             free_Pysst_2dmat(inn_all_rs, sLm_nt)             # <<<<<<<<<<<<<<
 *             PyMem_Free(dsld_all_rs)
 *             free_Pysst_3dmat(idnn_in_ars, n_rs, sLm_nt)
 */
      __pyx_f_12fmsne_implem_free_Pysst_2dmat(__pyx_v_inn_all_rs, __pyx_v_sLm_nt);

      /* "fmsne_implem.pyx":3883
 *             PyMem_Free(nnn_all_rs)
 *             free_Pysst_2dmat(inn_all_rs, sLm_nt)
 *             PyMem_Free(dsld_all_rs)             # <<<<<<<<<<<<<<
 *             free_Pysst_3dmat(idnn_in_ars, n_rs, sLm_nt)
 *         lbfgs_free(xopt)
 */
      PyMem_Free(__pyx_v_dsld_all_rs);

      /* "fmsne_implem.pyx":3884
 *             free_Pysst_2dmat(inn_all_rs, sLm_nt)
 *             PyMem_Free(dsld_all_rs)
 *             free_Pysst_3dmat(idnn_in_ars, n_rs, sLm_nt)             # <<<<<<<<<<<<<<
 *         lbfgs_free(xopt)
 *         printf("Out of memory for popt")
 */
      __pyx_f_12fmsne_implem_free_Pysst_3dmat(__pyx_v_idnn_in_ars, __pyx_v_n_rs, __pyx_v_sLm_nt);

      /* "fmsne_implem.pyx":3880
 *         free_dble_3dmat(tau_h_i_rs, L, n_rs)
 *         free_Pysst_3dmat(m_nn, n_rs, sLm_nt)
 *         if isLmin1:             # <<<<<<<<<<<<<<
 *             PyMem_Free(nnn_all_rs)
 *             free_Pysst_2dmat(inn_all_rs, sLm_nt)
 */
    }

    /* "fmsne_implem.pyx":3885
 *             PyMem_Free(dsld_all_rs)
 *             free_Pysst_3dmat(idnn_in_ars, n_rs, sLm_nt)
 *         lbfgs_free(xopt)             # <<<<<<<<<<<<<<
 *         printf("Out of memory for popt")
 *         exit(EXIT_FAILURE)
 */
    lbfgs_free(__pyx_v_xopt);

    /* "fmsne_implem.pyx":3886
 *             free_Pysst_3dmat(idnn_in_ars, n_rs, sLm_nt)
 *         lbfgs_free(xopt)
 *         printf("Out of memory for popt")             # <<<<<<<<<<<<<<
 *         exit(EXIT_FAILURE)
 *     # Filling popt
 */
    (void)(printf(((char const *)"Out of memory for popt")));

    /* "fmsne_implem.pyx":3887
 *         lbfgs_free(xopt)
 *         printf("Out of memory for popt")
 *         exit(EXIT_FAILURE)             # <<<<<<<<<<<<<<
 *     # Filling popt
 *     popt.N = N
 */
    exit(EXIT_FAILURE);

    /* "fmsne_implem.pyx":3873
 *     # Structure gathering the data which are necessary to evaluate the cost function and the gradient
 *     cdef Opfmstsne* popt = <Opfmstsne*> PyMem_Malloc(sizeof(Opfmstsne))
 *     if popt is NULL:             # <<<<<<<<<<<<<<
 *         free_int_2dmat(nnn_i_rs, n_rs)
 *         free_dble_3dmat(ds_nn_i_rs, n_rs, N)
 */
  }

  /* "fmsne_implem.pyx":3889
 *         exit(EXIT_FAILURE)
 *     # Filling popt
 *     popt.N = N             # <<<<<<<<<<<<<<
 *     popt.N_1 = sLm_nt
 *     popt.n_components = n_components
 */
  __pyx_v_popt->N = __pyx_v_N;

  /* "fmsne_implem.pyx":3890
 *     # Filling popt
 *     popt.N = N
 *     popt.N_1 = sLm_nt             # <<<<<<<<<<<<<<
 *     popt.n_components = n_components
 *     popt.sstx = shdp
 */
  __pyx_v_popt->N_1 = __pyx_v_sLm_nt;

  /* "fmsne_implem.pyx":3891
 *     popt.N = N
 *     popt.N_1 = sLm_nt
 *     popt.n_components = n_components             # <<<<<<<<<<<<<<
 *     popt.sstx = shdp
 *     popt.n_rs = n_rs
 */
  __pyx_v_popt->n_components = __pyx_v_n_components;

  /* "fmsne_implem.pyx":3892
 *     popt.N_1 = sLm_nt
 *     popt.n_components = n_components
 *     popt.sstx = shdp             # <<<<<<<<<<<<<<
 *     popt.n_rs = n_rs
 *     popt.n_rs_geq1 = isLmin1
 */
  __pyx_v_popt->sstx = __pyx_v_shdp;

  /* "fmsne_implem.pyx":3893
 *     popt.n_components = n_components
 *     popt.sstx = shdp
 *     popt.n_rs = n_rs             # <<<<<<<<<<<<<<
 *     popt.n_rs_geq1 = isLmin1
 *     popt.n_rs_f = <double> n_rs
 */
  __pyx_v_popt->n_rs = __pyx_v_n_rs;

  /* "fmsne_implem.pyx":3894
 *     popt.sstx = shdp
 *     popt.n_rs = n_rs
 *     popt.n_rs_geq1 = isLmin1             # <<<<<<<<<<<<<<
 *     popt.n_rs_f = <double> n_rs
 *     popt.inv_n_rs_2f = 2.0/popt.n_rs_f
 */
  __pyx_v_popt->n_rs_geq1 = __pyx_v_isLmin1;

  /* "fmsne_implem.pyx":3895
 *     popt.n_rs = n_rs
 *     popt.n_rs_geq1 = isLmin1
 *     popt.n_rs_f = <double> n_rs             # <<<<<<<<<<<<<<
 *     popt.inv_n_rs_2f = 2.0/popt.n_rs_f
 *     popt.inv_n_rs_4f = 2.0*popt.inv_n_rs_2f
 */
  __pyx_v_popt->n_rs_f = ((double)__pyx_v_n_rs);

  /* "fmsne_implem.pyx":3896
 *     popt.n_rs_geq1 = isLmin1
 *     popt.n_rs_f = <double> n_rs
 *     popt.inv_n_rs_2f = 2.0/popt.n_rs_f             # <<<<<<<<<<<<<<
 *     popt.inv_n_rs_4f = 2.0*popt.inv_n_rs_2f
 *     popt.sim_hd_ms = simhd_h_nn_i_rs
 */
  __pyx_v_popt->inv_n_rs_2f = (2.0 / __pyx_v_popt->n_rs_f);

  /* "fmsne_implem.pyx":3897
 *     popt.n_rs_f = <double> n_rs
 *     popt.inv_n_rs_2f = 2.0/popt.n_rs_f
 *     popt.inv_n_rs_4f = 2.0*popt.inv_n_rs_2f             # <<<<<<<<<<<<<<
 *     popt.sim_hd_ms = simhd_h_nn_i_rs
 *     popt.m_nn = m_nn
 */
  __pyx_v_popt->inv_n_rs_4f = (2.0 * __pyx_v_popt->inv_n_rs_2f);

  /* "fmsne_implem.pyx":3898
 *     popt.inv_n_rs_2f = 2.0/popt.n_rs_f
 *     popt.inv_n_rs_4f = 2.0*popt.inv_n_rs_2f
 *     popt.sim_hd_ms = simhd_h_nn_i_rs             # <<<<<<<<<<<<<<
 *     popt.m_nn = m_nn
 *     popt.nnn_all_rs = nnn_all_rs
 */
  __pyx_v_popt->sim_hd_ms = __pyx_v_simhd_h_nn_i_rs;

  /* "fmsne_implem.pyx":3899
 *     popt.inv_n_rs_4f = 2.0*popt.inv_n_rs_2f
 *     popt.sim_hd_ms = simhd_h_nn_i_rs
 *     popt.m_nn = m_nn             # <<<<<<<<<<<<<<
 *     popt.nnn_all_rs = nnn_all_rs
 *     popt.inn_all_rs = inn_all_rs
 */
  __pyx_v_popt->m_nn = __pyx_v_m_nn;

  /* "fmsne_implem.pyx":3900
 *     popt.sim_hd_ms = simhd_h_nn_i_rs
 *     popt.m_nn = m_nn
 *     popt.nnn_all_rs = nnn_all_rs             # <<<<<<<<<<<<<<
 *     popt.inn_all_rs = inn_all_rs
 *     popt.dsld_all_rs = dsld_all_rs
 */
  __pyx_v_popt->nnn_all_rs = __pyx_v_nnn_all_rs;

  /* "fmsne_implem.pyx":3901
 *     popt.m_nn = m_nn
 *     popt.nnn_all_rs = nnn_all_rs
 *     popt.inn_all_rs = inn_all_rs             # <<<<<<<<<<<<<<
 *     popt.dsld_all_rs = dsld_all_rs
 *     popt.idnn_in_ars = idnn_in_ars
 */
  __pyx_v_popt->inn_all_rs = __pyx_v_inn_all_rs;

  /* "fmsne_implem.pyx":3902
 *     popt.nnn_all_rs = nnn_all_rs
 *     popt.inn_all_rs = inn_all_rs
 *     popt.dsld_all_rs = dsld_all_rs             # <<<<<<<<<<<<<<
 *     popt.idnn_in_ars = idnn_in_ars
 *     # Space-partitioning trees are working with the squared threshold to save the computation time of computing the square root for the Euclidean distance
 */
  __pyx_v_popt->dsld_all_rs = __pyx_v_dsld_all_rs;

  /* "fmsne_implem.pyx":3903
 *     popt.inn_all_rs = inn_all_rs
 *     popt.dsld_all_rs = dsld_all_rs
 *     popt.idnn_in_ars = idnn_in_ars             # <<<<<<<<<<<<<<
 *     # Space-partitioning trees are working with the squared threshold to save the computation time of computing the square root for the Euclidean distance
 *     popt.theta_s = ms_thetha*ms_thetha
 */
  __pyx_v_popt->idnn_in_ars = __pyx_v_idnn_in_ars;

  /* "fmsne_implem.pyx":3905
 *     popt.idnn_in_ars = idnn_in_ars
 *     # Space-partitioning trees are working with the squared threshold to save the computation time of computing the square root for the Euclidean distance
 *     popt.theta_s = ms_thetha*ms_thetha             # <<<<<<<<<<<<<<
 *     popt.inter_fct = 7
 *     K_star = n_components*sizeof(double)
 */
  __pyx_v_popt->theta_s = (__pyx_v_ms_thetha * __pyx_v_ms_thetha);

  /* "fmsne_implem.pyx":3906
 *     # Space-partitioning trees are working with the squared threshold to save the computation time of computing the square root for the Euclidean distance
 *     popt.theta_s = ms_thetha*ms_thetha
 *     popt.inter_fct = 7             # <<<<<<<<<<<<<<
 *     K_star = n_components*sizeof(double)
 *     popt.qdiff = <double*> PyMem_Malloc(K_star)
 */
  __pyx_v_popt->inter_fct = 7;

  /* "fmsne_implem.pyx":3907
 *     popt.theta_s = ms_thetha*ms_thetha
 *     popt.inter_fct = 7
 *     K_star = n_components*sizeof(double)             # <<<<<<<<<<<<<<
 *     popt.qdiff = <double*> PyMem_Malloc(K_star)
 *     if popt.qdiff is NULL:
 */
  __pyx_v_K_star = (__pyx_v_n_components * (sizeof(double)));

  /* "fmsne_implem.pyx":3908
 *     popt.inter_fct = 7
 *     K_star = n_components*sizeof(double)
 *     popt.qdiff = <double*> PyMem_Malloc(K_star)             # <<<<<<<<<<<<<<
 *     if popt.qdiff is NULL:
 *         free_int_2dmat(nnn_i_rs, n_rs)
 */
  __pyx_v_popt->qdiff = ((double *)PyMem_Malloc(__pyx_v_K_star));

  /* "fmsne_implem.pyx":3909
 *     K_star = n_components*sizeof(double)
 *     popt.qdiff = <double*> PyMem_Malloc(K_star)
 *     if popt.qdiff is NULL:             # <<<<<<<<<<<<<<
 *         free_int_2dmat(nnn_i_rs, n_rs)
 *         free_dble_3dmat(ds_nn_i_rs, n_rs, N)
 */
  __pyx_t_1 = ((__pyx_v_popt->qdiff == NULL) != 0);
  if (__pyx_t_1) {

    /* "fmsne_implem.pyx":3910
 *     popt.qdiff = <double*> PyMem_Malloc(K_star)
 *     if popt.qdiff is NULL:
 *         free_int_2dmat(nnn_i_rs, n_rs)             # <<<<<<<<<<<<<<
 *         free_dble_3dmat(ds_nn_i_rs, n_rs, N)
 *         free_dble_3dmat(simhd_ms_nn_i_rs, n_rs, N)
 */
    __pyx_f_12fmsne_implem_free_int_2dmat(__pyx_v_nnn_i_rs, __pyx_v_n_rs);

    /* "fmsne_implem.pyx":3911
 *     if popt.qdiff is NULL:
 *         free_int_2dmat(nnn_i_rs, n_rs)
 *         free_dble_3dmat(ds_nn_i_rs, n_rs, N)             # <<<<<<<<<<<<<<
 *         free_dble_3dmat(simhd_ms_nn_i_rs, n_rs, N)
 *         free_dble_3dmat(simhd_h_nn_i_rs, n_rs, N)
 */
    __pyx_f_12fmsne_implem_free_dble_3dmat(__pyx_v_ds_nn_i_rs, __pyx_v_n_rs, __pyx_v_N);

    /* "fmsne_implem.pyx":3912
 *         free_int_2dmat(nnn_i_rs, n_rs)
 *         free_dble_3dmat(ds_nn_i_rs, n_rs, N)
 *         free_dble_3dmat(simhd_ms_nn_i_rs, n_rs, N)             # <<<<<<<<<<<<<<
 *         free_dble_3dmat(simhd_h_nn_i_rs, n_rs, N)
 *         free_dble_3dmat(tau_h_i_rs, L, n_rs)
 */
    __pyx_f_12fmsne_implem_free_dble_3dmat(__pyx_v_simhd_ms_nn_i_rs, __pyx_v_n_rs, __pyx_v_N);

    /* "fmsne_implem.pyx":3913
 *         free_dble_3dmat(ds_nn_i_rs, n_rs, N)
 *         free_dble_3dmat(simhd_ms_nn_i_rs, n_rs, N)
 *         free_dble_3dmat(simhd_h_nn_i_rs, n_rs, N)             # <<<<<<<<<<<<<<
 *         free_dble_3dmat(tau_h_i_rs, L, n_rs)
 *         free_Pysst_3dmat(m_nn, n_rs, sLm_nt)
 */
    __pyx_f_12fmsne_implem_free_dble_3dmat(__pyx_v_simhd_h_nn_i_rs, __pyx_v_n_rs, __pyx_v_N);

    /* "fmsne_implem.pyx":3914
 *         free_dble_3dmat(simhd_ms_nn_i_rs, n_rs, N)
 *         free_dble_3dmat(simhd_h_nn_i_rs, n_rs, N)
 *         free_dble_3dmat(tau_h_i_rs, L, n_rs)             # <<<<<<<<<<<<<<
 *         free_Pysst_3dmat(m_nn, n_rs, sLm_nt)
 *         if isLmin1:
 */
    __pyx_f_12fmsne_implem_free_dble_3dmat(__pyx_v_tau_h_i_rs, __pyx_v_L, __pyx_v_n_rs);

    /* "fmsne_implem.pyx":3915
 *         free_dble_3dmat(simhd_h_nn_i_rs, n_rs, N)
 *         free_dble_3dmat(tau_h_i_rs, L, n_rs)
 *         free_Pysst_3dmat(m_nn, n_rs, sLm_nt)             # <<<<<<<<<<<<<<
 *         if isLmin1:
 *             PyMem_Free(nnn_all_rs)
 */
    __pyx_f_12fmsne_implem_free_Pysst_3dmat(__pyx_v_m_nn, __pyx_v_n_rs, __pyx_v_sLm_nt);

    /* "fmsne_implem.pyx":3916
 *         free_dble_3dmat(tau_h_i_rs, L, n_rs)
 *         free_Pysst_3dmat(m_nn, n_rs, sLm_nt)
 *         if isLmin1:             # <<<<<<<<<<<<<<
 *             PyMem_Free(nnn_all_rs)
 *             free_Pysst_2dmat(inn_all_rs, sLm_nt)
 */
    __pyx_t_1 = (__pyx_v_isLmin1 != 0);
    if (__pyx_t_1) {

      /* "fmsne_implem.pyx":3917
 *         free_Pysst_3dmat(m_nn, n_rs, sLm_nt)
 *         if isLmin1:
 *             PyMem_Free(nnn_all_rs)             # <<<<<<<<<<<<<<
 *             free_Pysst_2dmat(inn_all_rs, sLm_nt)
 *             PyMem_Free(dsld_all_rs)
 */
      PyMem_Free(__pyx_v_nnn_all_rs);

      /* "fmsne_implem.pyx":3918
 *         if isLmin1:
 *             PyMem_Free(nnn_all_rs)
 *             free_Pysst_2dmat(inn_all_rs, sLm_nt)             # <<<<<<<<<<<<<<
 *             PyMem_Free(dsld_all_rs)
 *             free_Pysst_3dmat(idnn_in_ars, n_rs, sLm_nt)
 */
      __pyx_f_12fmsne_implem_free_Pysst_2dmat(__pyx_v_inn_all_rs, __pyx_v_sLm_nt);

      /* "fmsne_implem.pyx":3919
 *             PyMem_Free(nnn_all_rs)
 *             free_Pysst_2dmat(inn_all_rs, sLm_nt)
 *             PyMem_Free(dsld_all_rs)             # <<<<<<<<<<<<<<
 *             free_Pysst_3dmat(idnn_in_ars, n_rs, sLm_nt)
 *         lbfgs_free(xopt)
 */
      PyMem_Free(__pyx_v_dsld_all_rs);

      /* "fmsne_implem.pyx":3920
 *             free_Pysst_2dmat(inn_all_rs, sLm_nt)
 *             PyMem_Free(dsld_all_rs)
 *             free_Pysst_3dmat(idnn_in_ars, n_rs, sLm_nt)             # <<<<<<<<<<<<<<
 *         lbfgs_free(xopt)
 *         PyMem_Free(popt)
 */
      __pyx_f_12fmsne_implem_free_Pysst_3dmat(__pyx_v_idnn_in_ars, __pyx_v_n_rs, __pyx_v_sLm_nt);

      /* "fmsne_implem.pyx":3916
 *         free_dble_3dmat(tau_h_i_rs, L, n_rs)
 *         free_Pysst_3dmat(m_nn, n_rs, sLm_nt)
 *         if isLmin1:             # <<<<<<<<<<<<<<
 *             PyMem_Free(nnn_all_rs)
 *             free_Pysst_2dmat(inn_all_rs, sLm_nt)
 */
    }

    /* "fmsne_implem.pyx":3921
 *             PyMem_Free(dsld_all_rs)
 *             free_Pysst_3dmat(idnn_in_ars, n_rs, sLm_nt)
 *         lbfgs_free(xopt)             # <<<<<<<<<<<<<<
 *         PyMem_Free(popt)
 *         printf("Out of memory for popt.qdiff.\n")
 */
    lbfgs_free(__pyx_v_xopt);

    /* "fmsne_implem.pyx":3922
 *             free_Pysst_3dmat(idnn_in_ars, n_rs, sLm_nt)
 *         lbfgs_free(xopt)
 *         PyMem_Free(popt)             # <<<<<<<<<<<<<<
 *         printf("Out of memory for popt.qdiff.\n")
 *         exit(EXIT_FAILURE)
 */
    PyMem_Free(__pyx_v_popt);

    /* "fmsne_implem.pyx":3923
 *         lbfgs_free(xopt)
 *         PyMem_Free(popt)
 *         printf("Out of memory for popt.qdiff.\n")             # <<<<<<<<<<<<<<
 *         exit(EXIT_FAILURE)
 * 
 */
    (void)(printf(((char const *)"Out of memory for popt.qdiff.\n")));

    /* "fmsne_implem.pyx":3924
 *         PyMem_Free(popt)
 *         printf("Out of memory for popt.qdiff.\n")
 *         exit(EXIT_FAILURE)             # <<<<<<<<<<<<<<
 * 
 *     # Parameters of the L-BFGS optimization
 */
    exit(EXIT_FAILURE);

    /* "fmsne_implem.pyx":3909
 *     K_star = n_components*sizeof(double)
 *     popt.qdiff = <double*> PyMem_Malloc(K_star)
 *     if popt.qdiff is NULL:             # <<<<<<<<<<<<<<
 *         free_int_2dmat(nnn_i_rs, n_rs)
 *         free_dble_3dmat(ds_nn_i_rs, n_rs, N)
 */
  }

  /* "fmsne_implem.pyx":3928
 *     # Parameters of the L-BFGS optimization
 *     cdef lbfgs_parameter_t param
 *     cdef lbfgs_parameter_t* pparam = &param             # <<<<<<<<<<<<<<
 *     # Initializing param with default values
 *     lbfgs_parameter_init(pparam)
 */
  __pyx_v_pparam = (&__pyx_v_param);

  /* "fmsne_implem.pyx":3930
 *     cdef lbfgs_parameter_t* pparam = &param
 *     # Initializing param with default values
 *     lbfgs_parameter_init(pparam)             # <<<<<<<<<<<<<<
 *     # Updating some parameters
 *     param.m = maxcor
 */
  lbfgs_parameter_init(__pyx_v_pparam);

  /* "fmsne_implem.pyx":3932
 *     lbfgs_parameter_init(pparam)
 *     # Updating some parameters
 *     param.m = maxcor             # <<<<<<<<<<<<<<
 *     param.epsilon = gtol
 *     param.delta = ftol
 */
  __pyx_v_param.m = __pyx_v_maxcor;

  /* "fmsne_implem.pyx":3933
 *     # Updating some parameters
 *     param.m = maxcor
 *     param.epsilon = gtol             # <<<<<<<<<<<<<<
 *     param.delta = ftol
 *     param.max_iterations = nit_max
 */
  __pyx_v_param.epsilon = __pyx_v_gtol;

  /* "fmsne_implem.pyx":3934
 *     param.m = maxcor
 *     param.epsilon = gtol
 *     param.delta = ftol             # <<<<<<<<<<<<<<
 *     param.max_iterations = nit_max
 *     param.max_linesearch = maxls
 */
  __pyx_v_param.delta = __pyx_v_ftol;

  /* "fmsne_implem.pyx":3935
 *     param.epsilon = gtol
 *     param.delta = ftol
 *     param.max_iterations = nit_max             # <<<<<<<<<<<<<<
 *     param.max_linesearch = maxls
 *     param.past = 1
 */
  __pyx_v_param.max_iterations = __pyx_v_nit_max;

  /* "fmsne_implem.pyx":3936
 *     param.delta = ftol
 *     param.max_iterations = nit_max
 *     param.max_linesearch = maxls             # <<<<<<<<<<<<<<
 *     param.past = 1
 *     # We modify the default values of the minimum and maximum step sizes of the line search because the problem is badly scaled
 */
  __pyx_v_param.max_linesearch = __pyx_v_maxls;

  /* "fmsne_implem.pyx":3937
 *     param.max_iterations = nit_max
 *     param.max_linesearch = maxls
 *     param.past = 1             # <<<<<<<<<<<<<<
 *     # We modify the default values of the minimum and maximum step sizes of the line search because the problem is badly scaled
 *     param.max_step = DBL_MAX
 */
  __pyx_v_param.past = 1;

  /* "fmsne_implem.pyx":3939
 *     param.past = 1
 *     # We modify the default values of the minimum and maximum step sizes of the line search because the problem is badly scaled
 *     param.max_step = DBL_MAX             # <<<<<<<<<<<<<<
 *     param.min_step = DBL_MIN
 * 
 */
  __pyx_v_param.max_step = DBL_MAX;

  /* "fmsne_implem.pyx":3940
 *     # We modify the default values of the minimum and maximum step sizes of the line search because the problem is badly scaled
 *     param.max_step = DBL_MAX
 *     param.min_step = DBL_MIN             # <<<<<<<<<<<<<<
 * 
 *     # k refers to the number of currently considered scales and h to
 */
  __pyx_v_param.min_step = DBL_MIN;

  /* "fmsne_implem.pyx":3946
 *     # number of currently considered scales.
 *     cdef Py_ssize_t k, h
 *     h = L-1             # <<<<<<<<<<<<<<
 *     for k in range(1, L+1, 1):
 *         # Updates related to the current multi-scale optimization step
 */
  __pyx_v_h = (__pyx_v_L - 1);

  /* "fmsne_implem.pyx":3947
 *     cdef Py_ssize_t k, h
 *     h = L-1
 *     for k in range(1, L+1, 1):             # <<<<<<<<<<<<<<
 *         # Updates related to the current multi-scale optimization step
 *         f_update_mso_step(k, h, n_rs, N, nnn_i_rs, ds_nn_i_rs, tau_h_i_rs, simhd_ms_nn_i_rs, simhd_h_nn_i_rs)
 */
  __pyx_t_3 = (__pyx_v_L + 1);
  __pyx_t_4 = __pyx_t_3;
  for (__pyx_t_5 = 1; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
    __pyx_v_k = __pyx_t_5;

    /* "fmsne_implem.pyx":3949
 *     for k in range(1, L+1, 1):
 *         # Updates related to the current multi-scale optimization step
 *         f_update_mso_step(k, h, n_rs, N, nnn_i_rs, ds_nn_i_rs, tau_h_i_rs, simhd_ms_nn_i_rs, simhd_h_nn_i_rs)             # <<<<<<<<<<<<<<
 *         # Symmetrizing the multi-scale HD similarities. Be careful
 *         # that only the similarities between i and j such that j>i are
 */
    (void)(__pyx_f_12fmsne_implem_f_update_mso_step(__pyx_v_k, __pyx_v_h, __pyx_v_n_rs, __pyx_v_N, __pyx_v_nnn_i_rs, __pyx_v_ds_nn_i_rs, __pyx_v_tau_h_i_rs, __pyx_v_simhd_ms_nn_i_rs, __pyx_v_simhd_h_nn_i_rs));

    /* "fmsne_implem.pyx":3954
 *         # actually symetrized, since only these are used in the
 *         # evaluate function.
 *         fmstsne_symmetrize(n_rs, sLm_nt, simhd_ms_nn_i_rs, m_nn, simhd_h_nn_i_rs)             # <<<<<<<<<<<<<<
 *         # Performing the optimization
 *         lbfgs(prod_N_nc, xopt, NULL, fmstsne_evaluate, NULL, popt, pparam)
 */
    __pyx_f_12fmsne_implem_fmstsne_symmetrize(__pyx_v_n_rs, __pyx_v_sLm_nt, __pyx_v_simhd_ms_nn_i_rs, __pyx_v_m_nn, __pyx_v_simhd_h_nn_i_rs);

    /* "fmsne_implem.pyx":3956
 *         fmstsne_symmetrize(n_rs, sLm_nt, simhd_ms_nn_i_rs, m_nn, simhd_h_nn_i_rs)
 *         # Performing the optimization
 *         lbfgs(prod_N_nc, xopt, NULL, fmstsne_evaluate, NULL, popt, pparam)             # <<<<<<<<<<<<<<
 *         h -= 1
 * 
 */
    (void)(lbfgs(__pyx_v_prod_N_nc, __pyx_v_xopt, NULL, __pyx_f_12fmsne_implem_fmstsne_evaluate, NULL, __pyx_v_popt, __pyx_v_pparam));

    /* "fmsne_implem.pyx":3957
 *         # Performing the optimization
 *         lbfgs(prod_N_nc, xopt, NULL, fmstsne_evaluate, NULL, popt, pparam)
 *         h -= 1             # <<<<<<<<<<<<<<
 * 
 *     # Gathering the optimized LD coordinates
 */
    __pyx_v_h = (__pyx_v_h - 1);
  }

  /* "fmsne_implem.pyx":3960
 * 
 *     # Gathering the optimized LD coordinates
 *     memcpy(xlds, xopt, shdp)             # <<<<<<<<<<<<<<
 * 
 *     # Free the ressources
 */
  (void)(memcpy(__pyx_v_xlds, __pyx_v_xopt, __pyx_v_shdp));

  /* "fmsne_implem.pyx":3963
 * 
 *     # Free the ressources
 *     free_int_2dmat(nnn_i_rs, n_rs)             # <<<<<<<<<<<<<<
 *     free_dble_3dmat(ds_nn_i_rs, n_rs, N)
 *     free_dble_3dmat(simhd_ms_nn_i_rs, n_rs, N)
 */
  __pyx_f_12fmsne_implem_free_int_2dmat(__pyx_v_nnn_i_rs, __pyx_v_n_rs);

  /* "fmsne_implem.pyx":3964
 *     # Free the ressources
 *     free_int_2dmat(nnn_i_rs, n_rs)
 *     free_dble_3dmat(ds_nn_i_rs, n_rs, N)             # <<<<<<<<<<<<<<
 *     free_dble_3dmat(simhd_ms_nn_i_rs, n_rs, N)
 *     free_dble_3dmat(simhd_h_nn_i_rs, n_rs, N)
 */
  __pyx_f_12fmsne_implem_free_dble_3dmat(__pyx_v_ds_nn_i_rs, __pyx_v_n_rs, __pyx_v_N);

  /* "fmsne_implem.pyx":3965
 *     free_int_2dmat(nnn_i_rs, n_rs)
 *     free_dble_3dmat(ds_nn_i_rs, n_rs, N)
 *     free_dble_3dmat(simhd_ms_nn_i_rs, n_rs, N)             # <<<<<<<<<<<<<<
 *     free_dble_3dmat(simhd_h_nn_i_rs, n_rs, N)
 *     free_dble_3dmat(tau_h_i_rs, L, n_rs)
 */
  __pyx_f_12fmsne_implem_free_dble_3dmat(__pyx_v_simhd_ms_nn_i_rs, __pyx_v_n_rs, __pyx_v_N);

  /* "fmsne_implem.pyx":3966
 *     free_dble_3dmat(ds_nn_i_rs, n_rs, N)
 *     free_dble_3dmat(simhd_ms_nn_i_rs, n_rs, N)
 *     free_dble_3dmat(simhd_h_nn_i_rs, n_rs, N)             # <<<<<<<<<<<<<<
 *     free_dble_3dmat(tau_h_i_rs, L, n_rs)
 *     free_Pysst_3dmat(m_nn, n_rs, sLm_nt)
 */
  __pyx_f_12fmsne_implem_free_dble_3dmat(__pyx_v_simhd_h_nn_i_rs, __pyx_v_n_rs, __pyx_v_N);

  /* "fmsne_implem.pyx":3967
 *     free_dble_3dmat(simhd_ms_nn_i_rs, n_rs, N)
 *     free_dble_3dmat(simhd_h_nn_i_rs, n_rs, N)
 *     free_dble_3dmat(tau_h_i_rs, L, n_rs)             # <<<<<<<<<<<<<<
 *     free_Pysst_3dmat(m_nn, n_rs, sLm_nt)
 *     if isLmin1:
 */
  __pyx_f_12fmsne_implem_free_dble_3dmat(__pyx_v_tau_h_i_rs, __pyx_v_L, __pyx_v_n_rs);

  /* "fmsne_implem.pyx":3968
 *     free_dble_3dmat(simhd_h_nn_i_rs, n_rs, N)
 *     free_dble_3dmat(tau_h_i_rs, L, n_rs)
 *     free_Pysst_3dmat(m_nn, n_rs, sLm_nt)             # <<<<<<<<<<<<<<
 *     if isLmin1:
 *         PyMem_Free(nnn_all_rs)
 */
  __pyx_f_12fmsne_implem_free_Pysst_3dmat(__pyx_v_m_nn, __pyx_v_n_rs, __pyx_v_sLm_nt);

  /* "fmsne_implem.pyx":3969
 *     free_dble_3dmat(tau_h_i_rs, L, n_rs)
 *     free_Pysst_3dmat(m_nn, n_rs, sLm_nt)
 *     if isLmin1:             # <<<<<<<<<<<<<<
 *         PyMem_Free(nnn_all_rs)
 *         free_Pysst_2dmat(inn_all_rs, sLm_nt)
 */
  __pyx_t_1 = (__pyx_v_isLmin1 != 0);
  if (__pyx_t_1) {

    /* "fmsne_implem.pyx":3970
 *     free_Pysst_3dmat(m_nn, n_rs, sLm_nt)
 *     if isLmin1:
 *         PyMem_Free(nnn_all_rs)             # <<<<<<<<<<<<<<
 *         free_Pysst_2dmat(inn_all_rs, sLm_nt)
 *         PyMem_Free(dsld_all_rs)
 */
    PyMem_Free(__pyx_v_nnn_all_rs);

    /* "fmsne_implem.pyx":3971
 *     if isLmin1:
 *         PyMem_Free(nnn_all_rs)
 *         free_Pysst_2dmat(inn_all_rs, sLm_nt)             # <<<<<<<<<<<<<<
 *         PyMem_Free(dsld_all_rs)
 *         free_Pysst_3dmat(idnn_in_ars, n_rs, sLm_nt)
 */
    __pyx_f_12fmsne_implem_free_Pysst_2dmat(__pyx_v_inn_all_rs, __pyx_v_sLm_nt);

    /* "fmsne_implem.pyx":3972
 *         PyMem_Free(nnn_all_rs)
 *         free_Pysst_2dmat(inn_all_rs, sLm_nt)
 *         PyMem_Free(dsld_all_rs)             # <<<<<<<<<<<<<<
 *         free_Pysst_3dmat(idnn_in_ars, n_rs, sLm_nt)
 *     lbfgs_free(xopt)
 */
    PyMem_Free(__pyx_v_dsld_all_rs);

    /* "fmsne_implem.pyx":3973
 *         free_Pysst_2dmat(inn_all_rs, sLm_nt)
 *         PyMem_Free(dsld_all_rs)
 *         free_Pysst_3dmat(idnn_in_ars, n_rs, sLm_nt)             # <<<<<<<<<<<<<<
 *     lbfgs_free(xopt)
 *     PyMem_Free(popt.qdiff)
 */
    __pyx_f_12fmsne_implem_free_Pysst_3dmat(__pyx_v_idnn_in_ars, __pyx_v_n_rs, __pyx_v_sLm_nt);

    /* "fmsne_implem.pyx":3969
 *     free_dble_3dmat(tau_h_i_rs, L, n_rs)
 *     free_Pysst_3dmat(m_nn, n_rs, sLm_nt)
 *     if isLmin1:             # <<<<<<<<<<<<<<
 *         PyMem_Free(nnn_all_rs)
 *         free_Pysst_2dmat(inn_all_rs, sLm_nt)
 */
  }

  /* "fmsne_implem.pyx":3974
 *         PyMem_Free(dsld_all_rs)
 *         free_Pysst_3dmat(idnn_in_ars, n_rs, sLm_nt)
 *     lbfgs_free(xopt)             # <<<<<<<<<<<<<<
 *     PyMem_Free(popt.qdiff)
 *     PyMem_Free(popt)
 */
  lbfgs_free(__pyx_v_xopt);

  /* "fmsne_implem.pyx":3975
 *         free_Pysst_3dmat(idnn_in_ars, n_rs, sLm_nt)
 *     lbfgs_free(xopt)
 *     PyMem_Free(popt.qdiff)             # <<<<<<<<<<<<<<
 *     PyMem_Free(popt)
 * 
 */
  PyMem_Free(__pyx_v_popt->qdiff);

  /* "fmsne_implem.pyx":3976
 *     lbfgs_free(xopt)
 *     PyMem_Free(popt.qdiff)
 *     PyMem_Free(popt)             # <<<<<<<<<<<<<<
 * 
 * #######################################################
 */
  PyMem_Free(__pyx_v_popt);

  /* "fmsne_implem.pyx":3580
 *     return fx*popt.inv_n_rs_2f + cfx
 * 
 * cpdef inline void fmstsne_implem(double[::1] X_hds, double[::1] X_lds, int N, int d_hds, int n_components, bint cperp, int n_rs, double ms_thetha, int nit_max, double gtol, double ftol, int maxls, int maxcor, int L_min, int rseed):             # <<<<<<<<<<<<<<
 *     """
 *     Cython implementation of FMs t-SNE.
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* Python wrapper */
static PyObject *__pyx_pw_12fmsne_implem_7fmstsne_implem(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12fmsne_implem_6fmstsne_implem[] = "\n    Cython implementation of FMs t-SNE.\n    L_min is provided in argument.\n    X_hds and X_lds must both be in a 1d array\n    ";
static PyObject *__pyx_pw_12fmsne_implem_7fmstsne_implem(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  __Pyx_memviewslice __pyx_v_X_hds = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_X_lds = { 0, 0, { 0 }, { 0 }, { 0 } };
  int __pyx_v_N;
  int __pyx_v_d_hds;
  int __pyx_v_n_components;
  int __pyx_v_cperp;
  int __pyx_v_n_rs;
  double __pyx_v_ms_thetha;
  int __pyx_v_nit_max;
  double __pyx_v_gtol;
  double __pyx_v_ftol;
  int __pyx_v_maxls;
  int __pyx_v_maxcor;
  int __pyx_v_L_min;
  int __pyx_v_rseed;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("fmstsne_implem (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_X_hds,&__pyx_n_s_X_lds,&__pyx_n_s_N,&__pyx_n_s_d_hds,&__pyx_n_s_n_components,&__pyx_n_s_cperp,&__pyx_n_s_n_rs,&__pyx_n_s_ms_thetha,&__pyx_n_s_nit_max,&__pyx_n_s_gtol,&__pyx_n_s_ftol,&__pyx_n_s_maxls,&__pyx_n_s_maxcor,&__pyx_n_s_L_min,&__pyx_n_s_rseed,0};
    PyObject* values[15] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case 15: values[14] = PyTuple_GET_ITEM(__pyx_args, 14);
        CYTHON_FALLTHROUGH;
        case 14: values[13] = PyTuple_GET_ITEM(__pyx_args, 13);
        CYTHON_FALLTHROUGH;
        case 13: values[12] = PyTuple_GET_ITEM(__pyx_args, 12);
        CYTHON_FALLTHROUGH;
        case 12: values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
        CYTHON_FALLTHROUGH;
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        CYTHON_FALLTHROUGH;
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        CYTHON_FALLTHROUGH;
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_X_hds)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_X_lds)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("fmstsne_implem", 1, 15, 15, 1); __PYX_ERR(0, 3580, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_N)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("fmstsne_implem", 1, 15, 15, 2); __PYX_ERR(0, 3580, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_d_hds)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("fmstsne_implem", 1, 15, 15, 3); __PYX_ERR(0, 3580, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_n_components)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("fmstsne_implem", 1, 15, 15, 4); __PYX_ERR(0, 3580, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_cperp)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("fmstsne_implem", 1, 15, 15, 5); __PYX_ERR(0, 3580, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (likely((values[6] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_n_rs)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("fmstsne_implem", 1, 15, 15, 6); __PYX_ERR(0, 3580, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (likely((values[7] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ms_thetha)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("fmstsne_implem", 1, 15, 15, 7); __PYX_ERR(0, 3580, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  8:
        if (likely((values[8] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_nit_max)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("fmstsne_implem", 1, 15, 15, 8); __PYX_ERR(0, 3580, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  9:
        if (likely((values[9] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_gtol)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("fmstsne_implem", 1, 15, 15, 9); __PYX_ERR(0, 3580, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 10:
        if (likely((values[10] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ftol)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("fmstsne_implem", 1, 15, 15, 10); __PYX_ERR(0, 3580, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 11:
        if (likely((values[11] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_maxls)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("fmstsne_implem", 1, 15, 15, 11); __PYX_ERR(0, 3580, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 12:
        if (likely((values[12] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_maxcor)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("fmstsne_implem", 1, 15, 15, 12); __PYX_ERR(0, 3580, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 13:
        if (likely((values[13] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_L_min)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("fmstsne_implem", 1, 15, 15, 13); __PYX_ERR(0, 3580, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 14:
        if (likely((values[14] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_rseed)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("fmstsne_implem", 1, 15, 15, 14); __PYX_ERR(0, 3580, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "fmstsne_implem") < 0)) __PYX_ERR(0, 3580, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 15) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
      values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
      values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
      values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
      values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
      values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
      values[12] = PyTuple_GET_ITEM(__pyx_args, 12);
      values[13] = PyTuple_GET_ITEM(__pyx_args, 13);
      values[14] = PyTuple_GET_ITEM(__pyx_args, 14);
    }
    __pyx_v_X_hds = __Pyx_PyObject_to_MemoryviewSlice_dc_double(values[0], PyBUF_WRITABLE); if (unlikely(!__pyx_v_X_hds.memview)) __PYX_ERR(0, 3580, __pyx_L3_error)
    __pyx_v_X_lds = __Pyx_PyObject_to_MemoryviewSlice_dc_double(values[1], PyBUF_WRITABLE); if (unlikely(!__pyx_v_X_lds.memview)) __PYX_ERR(0, 3580, __pyx_L3_error)
    __pyx_v_N = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_N == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 3580, __pyx_L3_error)
    __pyx_v_d_hds = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_d_hds == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 3580, __pyx_L3_error)
    __pyx_v_n_components = __Pyx_PyInt_As_int(values[4]); if (unlikely((__pyx_v_n_components == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 3580, __pyx_L3_error)
    __pyx_v_cperp = __Pyx_PyObject_IsTrue(values[5]); if (unlikely((__pyx_v_cperp == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 3580, __pyx_L3_error)
    __pyx_v_n_rs = __Pyx_PyInt_As_int(values[6]); if (unlikely((__pyx_v_n_rs == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 3580, __pyx_L3_error)
    __pyx_v_ms_thetha = __pyx_PyFloat_AsDouble(values[7]); if (unlikely((__pyx_v_ms_thetha == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 3580, __pyx_L3_error)
    __pyx_v_nit_max = __Pyx_PyInt_As_int(values[8]); if (unlikely((__pyx_v_nit_max == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 3580, __pyx_L3_error)
    __pyx_v_gtol = __pyx_PyFloat_AsDouble(values[9]); if (unlikely((__pyx_v_gtol == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 3580, __pyx_L3_error)
    __pyx_v_ftol = __pyx_PyFloat_AsDouble(values[10]); if (unlikely((__pyx_v_ftol == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 3580, __pyx_L3_error)
    __pyx_v_maxls = __Pyx_PyInt_As_int(values[11]); if (unlikely((__pyx_v_maxls == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 3580, __pyx_L3_error)
    __pyx_v_maxcor = __Pyx_PyInt_As_int(values[12]); if (unlikely((__pyx_v_maxcor == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 3580, __pyx_L3_error)
    __pyx_v_L_min = __Pyx_PyInt_As_int(values[13]); if (unlikely((__pyx_v_L_min == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 3580, __pyx_L3_error)
    __pyx_v_rseed = __Pyx_PyInt_As_int(values[14]); if (unlikely((__pyx_v_rseed == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 3580, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("fmstsne_implem", 1, 15, 15, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 3580, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("fmsne_implem.fmstsne_implem", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_12fmsne_implem_6fmstsne_implem(__pyx_self, __pyx_v_X_hds, __pyx_v_X_lds, __pyx_v_N, __pyx_v_d_hds, __pyx_v_n_components, __pyx_v_cperp, __pyx_v_n_rs, __pyx_v_ms_thetha, __pyx_v_nit_max, __pyx_v_gtol, __pyx_v_ftol, __pyx_v_maxls, __pyx_v_maxcor, __pyx_v_L_min, __pyx_v_rseed);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12fmsne_implem_6fmstsne_implem(CYTHON_UNUSED PyObject *__pyx_self, __Pyx_memviewslice __pyx_v_X_hds, __Pyx_memviewslice __pyx_v_X_lds, int __pyx_v_N, int __pyx_v_d_hds, int __pyx_v_n_components, int __pyx_v_cperp, int __pyx_v_n_rs, double __pyx_v_ms_thetha, int __pyx_v_nit_max, double __pyx_v_gtol, double __pyx_v_ftol, int __pyx_v_maxls, int __pyx_v_maxcor, int __pyx_v_L_min, int __pyx_v_rseed) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("fmstsne_implem", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_void_to_None(__pyx_f_12fmsne_implem_fmstsne_implem(__pyx_v_X_hds, __pyx_v_X_lds, __pyx_v_N, __pyx_v_d_hds, __pyx_v_n_components, __pyx_v_cperp, __pyx_v_n_rs, __pyx_v_ms_thetha, __pyx_v_nit_max, __pyx_v_gtol, __pyx_v_ftol, __pyx_v_maxls, __pyx_v_maxcor, __pyx_v_L_min, __pyx_v_rseed, 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3580, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("fmsne_implem.fmstsne_implem", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __PYX_XDEC_MEMVIEW(&__pyx_v_X_hds, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_X_lds, 1);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "fmsne_implem.pyx":3986
 *     int rank              # Rank of the sample
 * 
 * cdef inline bint sortByInd(const nnRank v, const nnRank w) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     Returns True when v.nn is < than w.nn.
 */

static CYTHON_INLINE int __pyx_f_12fmsne_implem_sortByInd(struct __pyx_t_12fmsne_implem_nnRank const __pyx_v_v, struct __pyx_t_12fmsne_implem_nnRank const __pyx_v_w) {
  int __pyx_r;

  /* "fmsne_implem.pyx":3990
 *     Returns True when v.nn is < than w.nn.
 *     """
 *     return v.nn < w.nn             # <<<<<<<<<<<<<<
 * 
 * cpdef inline double drqa_qnx_rnx_auc(double[::1] X_hds, double[::1] X_lds, int N, int d_hds, int d_lds, int Kup, double[::1] qnxk, double[::1] rnxk, int rnxk_size):
 */
  __pyx_r = (__pyx_v_v.nn < __pyx_v_w.nn);
  goto __pyx_L0;

  /* "fmsne_implem.pyx":3986
 *     int rank              # Rank of the sample
 * 
 * cdef inline bint sortByInd(const nnRank v, const nnRank w) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     Returns True when v.nn is < than w.nn.
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "fmsne_implem.pyx":3992
 *     return v.nn < w.nn
 * 
 * cpdef inline double drqa_qnx_rnx_auc(double[::1] X_hds, double[::1] X_lds, int N, int d_hds, int d_lds, int Kup, double[::1] qnxk, double[::1] rnxk, int rnxk_size):             # <<<<<<<<<<<<<<
 *     """
 *     Compute the quality criteria curves Q_NX(K) and R_NX(K) with the neighborhood size K ranging from 1 to Kup. The AUC of the reduced R_NX(K) curve is returned.
 */

static PyObject *__pyx_pw_12fmsne_implem_9drqa_qnx_rnx_auc(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static CYTHON_INLINE double __pyx_f_12fmsne_implem_drqa_qnx_rnx_auc(__Pyx_memviewslice __pyx_v_X_hds, __Pyx_memviewslice __pyx_v_X_lds, int __pyx_v_N, int __pyx_v_d_hds, int __pyx_v_d_lds, int __pyx_v_Kup, __Pyx_memviewslice __pyx_v_qnxk, __Pyx_memviewslice __pyx_v_rnxk, int __pyx_v_rnxk_size, CYTHON_UNUSED int __pyx_skip_dispatch) {
  VpTree *__pyx_v_vpt_hd;
  VpTree *__pyx_v_vpt_ld;
  int __pyx_v_Kupadd;
  int *__pyx_v_nn_hd;
  int *__pyx_v_nn_ld;
  struct __pyx_t_12fmsne_implem_nnRank *__pyx_v_nnrk_hd;
  Py_ssize_t __pyx_v_i;
  Py_ssize_t __pyx_v_ihd;
  Py_ssize_t __pyx_v_ild;
  Py_ssize_t __pyx_v_j;
  Py_ssize_t __pyx_v_lb;
  Py_ssize_t __pyx_v_ub;
  Py_ssize_t __pyx_v_mid;
  int __pyx_v_jr;
  int __pyx_v_Kupsub;
  double __pyx_v_cs;
  double __pyx_v_Nd;
  double __pyx_v_K;
  double __pyx_v_iK;
  double __pyx_v_siK;
  double __pyx_v_auc;
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  Py_ssize_t __pyx_t_8;
  int __pyx_t_9;
  Py_ssize_t __pyx_t_10;
  __Pyx_RefNannySetupContext("drqa_qnx_rnx_auc", 0);

  /* "fmsne_implem.pyx":4013
 *     """
 *     # Initializing qnxk to zero
 *     memset(&qnxk[0], 0, Kup*sizeof(double))             # <<<<<<<<<<<<<<
 * 
 *     # Constructing the VP trees in the HDS and LDS
 */
  __pyx_t_1 = 0;
  (void)(memset((&(*((double *) ( /* dim=0 */ ((char *) (((double *) __pyx_v_qnxk.data) + __pyx_t_1)) )))), 0, (__pyx_v_Kup * (sizeof(double)))));

  /* "fmsne_implem.pyx":4016
 * 
 *     # Constructing the VP trees in the HDS and LDS
 *     cdef VpTree* vpt_hd = new VpTree(&X_hds[0], N, d_hds)             # <<<<<<<<<<<<<<
 *     cdef VpTree* vpt_ld = new VpTree(&X_lds[0], N, d_lds)
 * 
 */
  __pyx_t_1 = 0;
  __pyx_v_vpt_hd = new VpTree((&(*((double *) ( /* dim=0 */ ((char *) (((double *) __pyx_v_X_hds.data) + __pyx_t_1)) )))), __pyx_v_N, __pyx_v_d_hds);

  /* "fmsne_implem.pyx":4017
 *     # Constructing the VP trees in the HDS and LDS
 *     cdef VpTree* vpt_hd = new VpTree(&X_hds[0], N, d_hds)
 *     cdef VpTree* vpt_ld = new VpTree(&X_lds[0], N, d_lds)             # <<<<<<<<<<<<<<
 * 
 *     # Kup + 1
 */
  __pyx_t_1 = 0;
  __pyx_v_vpt_ld = new VpTree((&(*((double *) ( /* dim=0 */ ((char *) (((double *) __pyx_v_X_lds.data) + __pyx_t_1)) )))), __pyx_v_N, __pyx_v_d_lds);

  /* "fmsne_implem.pyx":4020
 * 
 *     # Kup + 1
 *     cdef int Kupadd = Kup + 1             # <<<<<<<<<<<<<<
 * 
 *     # Allocating an array to store the Kupadd nearest HD neighbor of a data point
 */
  __pyx_v_Kupadd = (__pyx_v_Kup + 1);

  /* "fmsne_implem.pyx":4023
 * 
 *     # Allocating an array to store the Kupadd nearest HD neighbor of a data point
 *     cdef int* nn_hd = <int*> PyMem_Malloc(Kupadd*sizeof(int))             # <<<<<<<<<<<<<<
 *     if nn_hd is NULL:
 *         del vpt_hd
 */
  __pyx_v_nn_hd = ((int *)PyMem_Malloc((__pyx_v_Kupadd * (sizeof(int)))));

  /* "fmsne_implem.pyx":4024
 *     # Allocating an array to store the Kupadd nearest HD neighbor of a data point
 *     cdef int* nn_hd = <int*> PyMem_Malloc(Kupadd*sizeof(int))
 *     if nn_hd is NULL:             # <<<<<<<<<<<<<<
 *         del vpt_hd
 *         del vpt_ld
 */
  __pyx_t_2 = ((__pyx_v_nn_hd == NULL) != 0);
  if (__pyx_t_2) {

    /* "fmsne_implem.pyx":4025
 *     cdef int* nn_hd = <int*> PyMem_Malloc(Kupadd*sizeof(int))
 *     if nn_hd is NULL:
 *         del vpt_hd             # <<<<<<<<<<<<<<
 *         del vpt_ld
 *         printf("Error in drqa_qnx_rnx_auc function of fmsne_implem.pyx: out of memory for nn_hd.")
 */
    delete __pyx_v_vpt_hd;

    /* "fmsne_implem.pyx":4026
 *     if nn_hd is NULL:
 *         del vpt_hd
 *         del vpt_ld             # <<<<<<<<<<<<<<
 *         printf("Error in drqa_qnx_rnx_auc function of fmsne_implem.pyx: out of memory for nn_hd.")
 *         exit(EXIT_FAILURE)
 */
    delete __pyx_v_vpt_ld;

    /* "fmsne_implem.pyx":4027
 *         del vpt_hd
 *         del vpt_ld
 *         printf("Error in drqa_qnx_rnx_auc function of fmsne_implem.pyx: out of memory for nn_hd.")             # <<<<<<<<<<<<<<
 *         exit(EXIT_FAILURE)
 *     # Allocating an array to store the Kupadd nearest LD neighbor of a data point
 */
    (void)(printf(((char const *)"Error in drqa_qnx_rnx_auc function of fmsne_implem.pyx: out of memory for nn_hd.")));

    /* "fmsne_implem.pyx":4028
 *         del vpt_ld
 *         printf("Error in drqa_qnx_rnx_auc function of fmsne_implem.pyx: out of memory for nn_hd.")
 *         exit(EXIT_FAILURE)             # <<<<<<<<<<<<<<
 *     # Allocating an array to store the Kupadd nearest LD neighbor of a data point
 *     cdef int* nn_ld = <int*> PyMem_Malloc(Kupadd*sizeof(int))
 */
    exit(EXIT_FAILURE);

    /* "fmsne_implem.pyx":4024
 *     # Allocating an array to store the Kupadd nearest HD neighbor of a data point
 *     cdef int* nn_hd = <int*> PyMem_Malloc(Kupadd*sizeof(int))
 *     if nn_hd is NULL:             # <<<<<<<<<<<<<<
 *         del vpt_hd
 *         del vpt_ld
 */
  }

  /* "fmsne_implem.pyx":4030
 *         exit(EXIT_FAILURE)
 *     # Allocating an array to store the Kupadd nearest LD neighbor of a data point
 *     cdef int* nn_ld = <int*> PyMem_Malloc(Kupadd*sizeof(int))             # <<<<<<<<<<<<<<
 *     if nn_ld is NULL:
 *         del vpt_hd
 */
  __pyx_v_nn_ld = ((int *)PyMem_Malloc((__pyx_v_Kupadd * (sizeof(int)))));

  /* "fmsne_implem.pyx":4031
 *     # Allocating an array to store the Kupadd nearest LD neighbor of a data point
 *     cdef int* nn_ld = <int*> PyMem_Malloc(Kupadd*sizeof(int))
 *     if nn_ld is NULL:             # <<<<<<<<<<<<<<
 *         del vpt_hd
 *         del vpt_ld
 */
  __pyx_t_2 = ((__pyx_v_nn_ld == NULL) != 0);
  if (__pyx_t_2) {

    /* "fmsne_implem.pyx":4032
 *     cdef int* nn_ld = <int*> PyMem_Malloc(Kupadd*sizeof(int))
 *     if nn_ld is NULL:
 *         del vpt_hd             # <<<<<<<<<<<<<<
 *         del vpt_ld
 *         PyMem_Free(nn_hd)
 */
    delete __pyx_v_vpt_hd;

    /* "fmsne_implem.pyx":4033
 *     if nn_ld is NULL:
 *         del vpt_hd
 *         del vpt_ld             # <<<<<<<<<<<<<<
 *         PyMem_Free(nn_hd)
 *         printf("Error in drqa_qnx_rnx_auc function of fmsne_implem.pyx: out of memory for nn_ld.")
 */
    delete __pyx_v_vpt_ld;

    /* "fmsne_implem.pyx":4034
 *         del vpt_hd
 *         del vpt_ld
 *         PyMem_Free(nn_hd)             # <<<<<<<<<<<<<<
 *         printf("Error in drqa_qnx_rnx_auc function of fmsne_implem.pyx: out of memory for nn_ld.")
 *         exit(EXIT_FAILURE)
 */
    PyMem_Free(__pyx_v_nn_hd);

    /* "fmsne_implem.pyx":4035
 *         del vpt_ld
 *         PyMem_Free(nn_hd)
 *         printf("Error in drqa_qnx_rnx_auc function of fmsne_implem.pyx: out of memory for nn_ld.")             # <<<<<<<<<<<<<<
 *         exit(EXIT_FAILURE)
 * 
 */
    (void)(printf(((char const *)"Error in drqa_qnx_rnx_auc function of fmsne_implem.pyx: out of memory for nn_ld.")));

    /* "fmsne_implem.pyx":4036
 *         PyMem_Free(nn_hd)
 *         printf("Error in drqa_qnx_rnx_auc function of fmsne_implem.pyx: out of memory for nn_ld.")
 *         exit(EXIT_FAILURE)             # <<<<<<<<<<<<<<
 * 
 *     # Allocating an array of structure to store the indexes of the HD neighbors and their ranks
 */
    exit(EXIT_FAILURE);

    /* "fmsne_implem.pyx":4031
 *     # Allocating an array to store the Kupadd nearest LD neighbor of a data point
 *     cdef int* nn_ld = <int*> PyMem_Malloc(Kupadd*sizeof(int))
 *     if nn_ld is NULL:             # <<<<<<<<<<<<<<
 *         del vpt_hd
 *         del vpt_ld
 */
  }

  /* "fmsne_implem.pyx":4039
 * 
 *     # Allocating an array of structure to store the indexes of the HD neighbors and their ranks
 *     cdef nnRank* nnrk_hd = <nnRank*> PyMem_Malloc(Kup*sizeof(nnRank))             # <<<<<<<<<<<<<<
 *     if nnrk_hd is NULL:
 *         del vpt_hd
 */
  __pyx_v_nnrk_hd = ((struct __pyx_t_12fmsne_implem_nnRank *)PyMem_Malloc((__pyx_v_Kup * (sizeof(struct __pyx_t_12fmsne_implem_nnRank)))));

  /* "fmsne_implem.pyx":4040
 *     # Allocating an array of structure to store the indexes of the HD neighbors and their ranks
 *     cdef nnRank* nnrk_hd = <nnRank*> PyMem_Malloc(Kup*sizeof(nnRank))
 *     if nnrk_hd is NULL:             # <<<<<<<<<<<<<<
 *         del vpt_hd
 *         del vpt_ld
 */
  __pyx_t_2 = ((__pyx_v_nnrk_hd == NULL) != 0);
  if (__pyx_t_2) {

    /* "fmsne_implem.pyx":4041
 *     cdef nnRank* nnrk_hd = <nnRank*> PyMem_Malloc(Kup*sizeof(nnRank))
 *     if nnrk_hd is NULL:
 *         del vpt_hd             # <<<<<<<<<<<<<<
 *         del vpt_ld
 *         PyMem_Free(nn_hd)
 */
    delete __pyx_v_vpt_hd;

    /* "fmsne_implem.pyx":4042
 *     if nnrk_hd is NULL:
 *         del vpt_hd
 *         del vpt_ld             # <<<<<<<<<<<<<<
 *         PyMem_Free(nn_hd)
 *         PyMem_Free(nn_ld)
 */
    delete __pyx_v_vpt_ld;

    /* "fmsne_implem.pyx":4043
 *         del vpt_hd
 *         del vpt_ld
 *         PyMem_Free(nn_hd)             # <<<<<<<<<<<<<<
 *         PyMem_Free(nn_ld)
 *         printf("Error in drqa_qnx_rnx_auc function of fmsne_implem.pyx: out of memory for nnrk_hd.")
 */
    PyMem_Free(__pyx_v_nn_hd);

    /* "fmsne_implem.pyx":4044
 *         del vpt_ld
 *         PyMem_Free(nn_hd)
 *         PyMem_Free(nn_ld)             # <<<<<<<<<<<<<<
 *         printf("Error in drqa_qnx_rnx_auc function of fmsne_implem.pyx: out of memory for nnrk_hd.")
 *         exit(EXIT_FAILURE)
 */
    PyMem_Free(__pyx_v_nn_ld);

    /* "fmsne_implem.pyx":4045
 *         PyMem_Free(nn_hd)
 *         PyMem_Free(nn_ld)
 *         printf("Error in drqa_qnx_rnx_auc function of fmsne_implem.pyx: out of memory for nnrk_hd.")             # <<<<<<<<<<<<<<
 *         exit(EXIT_FAILURE)
 * 
 */
    (void)(printf(((char const *)"Error in drqa_qnx_rnx_auc function of fmsne_implem.pyx: out of memory for nnrk_hd.")));

    /* "fmsne_implem.pyx":4046
 *         PyMem_Free(nn_ld)
 *         printf("Error in drqa_qnx_rnx_auc function of fmsne_implem.pyx: out of memory for nnrk_hd.")
 *         exit(EXIT_FAILURE)             # <<<<<<<<<<<<<<
 * 
 *     # Variable to iterate over the samples
 */
    exit(EXIT_FAILURE);

    /* "fmsne_implem.pyx":4040
 *     # Allocating an array of structure to store the indexes of the HD neighbors and their ranks
 *     cdef nnRank* nnrk_hd = <nnRank*> PyMem_Malloc(Kup*sizeof(nnRank))
 *     if nnrk_hd is NULL:             # <<<<<<<<<<<<<<
 *         del vpt_hd
 *         del vpt_ld
 */
  }

  /* "fmsne_implem.pyx":4050
 *     # Variable to iterate over the samples
 *     cdef Py_ssize_t i, ihd, ild, j, lb, ub, mid
 *     ihd = 0             # <<<<<<<<<<<<<<
 *     ild = 0
 *     cdef int jr, Kupsub
 */
  __pyx_v_ihd = 0;

  /* "fmsne_implem.pyx":4051
 *     cdef Py_ssize_t i, ihd, ild, j, lb, ub, mid
 *     ihd = 0
 *     ild = 0             # <<<<<<<<<<<<<<
 *     cdef int jr, Kupsub
 *     Kupsub = Kup - 1
 */
  __pyx_v_ild = 0;

  /* "fmsne_implem.pyx":4053
 *     ild = 0
 *     cdef int jr, Kupsub
 *     Kupsub = Kup - 1             # <<<<<<<<<<<<<<
 * 
 *     # For each data point
 */
  __pyx_v_Kupsub = (__pyx_v_Kup - 1);

  /* "fmsne_implem.pyx":4056
 * 
 *     # For each data point
 *     for i in range(N):             # <<<<<<<<<<<<<<
 *         # Searching the Kupadd nearest neighbors of sample i in HDS and LDS
 *         vpt_hd.search(&X_hds[ihd], Kupadd, nn_hd)
 */
  __pyx_t_3 = __pyx_v_N;
  __pyx_t_4 = __pyx_t_3;
  for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
    __pyx_v_i = __pyx_t_5;

    /* "fmsne_implem.pyx":4058
 *     for i in range(N):
 *         # Searching the Kupadd nearest neighbors of sample i in HDS and LDS
 *         vpt_hd.search(&X_hds[ihd], Kupadd, nn_hd)             # <<<<<<<<<<<<<<
 *         vpt_ld.search(&X_lds[ild], Kupadd, nn_ld)
 * 
 */
    __pyx_t_1 = __pyx_v_ihd;
    __pyx_v_vpt_hd->search((&(*((double *) ( /* dim=0 */ ((char *) (((double *) __pyx_v_X_hds.data) + __pyx_t_1)) )))), __pyx_v_Kupadd, __pyx_v_nn_hd);

    /* "fmsne_implem.pyx":4059
 *         # Searching the Kupadd nearest neighbors of sample i in HDS and LDS
 *         vpt_hd.search(&X_hds[ihd], Kupadd, nn_hd)
 *         vpt_ld.search(&X_lds[ild], Kupadd, nn_ld)             # <<<<<<<<<<<<<<
 * 
 *         # Filling nnrk_hd
 */
    __pyx_t_1 = __pyx_v_ild;
    __pyx_v_vpt_ld->search((&(*((double *) ( /* dim=0 */ ((char *) (((double *) __pyx_v_X_lds.data) + __pyx_t_1)) )))), __pyx_v_Kupadd, __pyx_v_nn_ld);

    /* "fmsne_implem.pyx":4062
 * 
 *         # Filling nnrk_hd
 *         jr = 0             # <<<<<<<<<<<<<<
 *         for j in range(Kupadd):
 *             if nn_hd[j] != i:
 */
    __pyx_v_jr = 0;

    /* "fmsne_implem.pyx":4063
 *         # Filling nnrk_hd
 *         jr = 0
 *         for j in range(Kupadd):             # <<<<<<<<<<<<<<
 *             if nn_hd[j] != i:
 *                 nnrk_hd[jr].nn = nn_hd[j]
 */
    __pyx_t_6 = __pyx_v_Kupadd;
    __pyx_t_7 = __pyx_t_6;
    for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_7; __pyx_t_8+=1) {
      __pyx_v_j = __pyx_t_8;

      /* "fmsne_implem.pyx":4064
 *         jr = 0
 *         for j in range(Kupadd):
 *             if nn_hd[j] != i:             # <<<<<<<<<<<<<<
 *                 nnrk_hd[jr].nn = nn_hd[j]
 *                 nnrk_hd[jr].rank = jr
 */
      __pyx_t_2 = (((__pyx_v_nn_hd[__pyx_v_j]) != __pyx_v_i) != 0);
      if (__pyx_t_2) {

        /* "fmsne_implem.pyx":4065
 *         for j in range(Kupadd):
 *             if nn_hd[j] != i:
 *                 nnrk_hd[jr].nn = nn_hd[j]             # <<<<<<<<<<<<<<
 *                 nnrk_hd[jr].rank = jr
 *                 jr += 1
 */
        (__pyx_v_nnrk_hd[__pyx_v_jr]).nn = (__pyx_v_nn_hd[__pyx_v_j]);

        /* "fmsne_implem.pyx":4066
 *             if nn_hd[j] != i:
 *                 nnrk_hd[jr].nn = nn_hd[j]
 *                 nnrk_hd[jr].rank = jr             # <<<<<<<<<<<<<<
 *                 jr += 1
 * 
 */
        (__pyx_v_nnrk_hd[__pyx_v_jr]).rank = __pyx_v_jr;

        /* "fmsne_implem.pyx":4067
 *                 nnrk_hd[jr].nn = nn_hd[j]
 *                 nnrk_hd[jr].rank = jr
 *                 jr += 1             # <<<<<<<<<<<<<<
 * 
 *         # Sorting nnrk_hd according to the nn keys
 */
        __pyx_v_jr = (__pyx_v_jr + 1);

        /* "fmsne_implem.pyx":4064
 *         jr = 0
 *         for j in range(Kupadd):
 *             if nn_hd[j] != i:             # <<<<<<<<<<<<<<
 *                 nnrk_hd[jr].nn = nn_hd[j]
 *                 nnrk_hd[jr].rank = jr
 */
      }
    }

    /* "fmsne_implem.pyx":4070
 * 
 *         # Sorting nnrk_hd according to the nn keys
 *         sort(nnrk_hd, nnrk_hd + Kup, sortByInd)             # <<<<<<<<<<<<<<
 * 
 *         # LD rank
 */
    std::sort<struct __pyx_t_12fmsne_implem_nnRank *,int (struct __pyx_t_12fmsne_implem_nnRank const , struct __pyx_t_12fmsne_implem_nnRank const )>(__pyx_v_nnrk_hd, (__pyx_v_nnrk_hd + __pyx_v_Kup), __pyx_f_12fmsne_implem_sortByInd);

    /* "fmsne_implem.pyx":4073
 * 
 *         # LD rank
 *         jr = 0             # <<<<<<<<<<<<<<
 *         # For each LD neighbor
 *         for j in range(Kupadd):
 */
    __pyx_v_jr = 0;

    /* "fmsne_implem.pyx":4075
 *         jr = 0
 *         # For each LD neighbor
 *         for j in range(Kupadd):             # <<<<<<<<<<<<<<
 *             if nn_ld[j] != i:
 *                 # If nn_ld[j] is in the range of nnrk_hd
 */
    __pyx_t_6 = __pyx_v_Kupadd;
    __pyx_t_7 = __pyx_t_6;
    for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_7; __pyx_t_8+=1) {
      __pyx_v_j = __pyx_t_8;

      /* "fmsne_implem.pyx":4076
 *         # For each LD neighbor
 *         for j in range(Kupadd):
 *             if nn_ld[j] != i:             # <<<<<<<<<<<<<<
 *                 # If nn_ld[j] is in the range of nnrk_hd
 *                 if (nn_ld[j] >= nnrk_hd[0].nn) and (nn_ld[j] <= nnrk_hd[Kupsub].nn):
 */
      __pyx_t_2 = (((__pyx_v_nn_ld[__pyx_v_j]) != __pyx_v_i) != 0);
      if (__pyx_t_2) {

        /* "fmsne_implem.pyx":4078
 *             if nn_ld[j] != i:
 *                 # If nn_ld[j] is in the range of nnrk_hd
 *                 if (nn_ld[j] >= nnrk_hd[0].nn) and (nn_ld[j] <= nnrk_hd[Kupsub].nn):             # <<<<<<<<<<<<<<
 *                     # Searching for nn_ld[j] in nnrk_hd using binary search
 *                     lb = 0
 */
        __pyx_t_9 = (((__pyx_v_nn_ld[__pyx_v_j]) >= (__pyx_v_nnrk_hd[0]).nn) != 0);
        if (__pyx_t_9) {
        } else {
          __pyx_t_2 = __pyx_t_9;
          goto __pyx_L15_bool_binop_done;
        }
        __pyx_t_9 = (((__pyx_v_nn_ld[__pyx_v_j]) <= (__pyx_v_nnrk_hd[__pyx_v_Kupsub]).nn) != 0);
        __pyx_t_2 = __pyx_t_9;
        __pyx_L15_bool_binop_done:;
        if (__pyx_t_2) {

          /* "fmsne_implem.pyx":4080
 *                 if (nn_ld[j] >= nnrk_hd[0].nn) and (nn_ld[j] <= nnrk_hd[Kupsub].nn):
 *                     # Searching for nn_ld[j] in nnrk_hd using binary search
 *                     lb = 0             # <<<<<<<<<<<<<<
 *                     ub = Kup
 *                     while ub - lb > 1:
 */
          __pyx_v_lb = 0;

          /* "fmsne_implem.pyx":4081
 *                     # Searching for nn_ld[j] in nnrk_hd using binary search
 *                     lb = 0
 *                     ub = Kup             # <<<<<<<<<<<<<<
 *                     while ub - lb > 1:
 *                         mid = (ub + lb)//2
 */
          __pyx_v_ub = __pyx_v_Kup;

          /* "fmsne_implem.pyx":4082
 *                     lb = 0
 *                     ub = Kup
 *                     while ub - lb > 1:             # <<<<<<<<<<<<<<
 *                         mid = (ub + lb)//2
 *                         if nn_ld[j] == nnrk_hd[mid].nn:
 */
          while (1) {
            __pyx_t_2 = (((__pyx_v_ub - __pyx_v_lb) > 1) != 0);
            if (!__pyx_t_2) break;

            /* "fmsne_implem.pyx":4083
 *                     ub = Kup
 *                     while ub - lb > 1:
 *                         mid = (ub + lb)//2             # <<<<<<<<<<<<<<
 *                         if nn_ld[j] == nnrk_hd[mid].nn:
 *                             lb = mid
 */
            __pyx_v_mid = ((__pyx_v_ub + __pyx_v_lb) / 2);

            /* "fmsne_implem.pyx":4084
 *                     while ub - lb > 1:
 *                         mid = (ub + lb)//2
 *                         if nn_ld[j] == nnrk_hd[mid].nn:             # <<<<<<<<<<<<<<
 *                             lb = mid
 *                             break
 */
            __pyx_t_2 = (((__pyx_v_nn_ld[__pyx_v_j]) == (__pyx_v_nnrk_hd[__pyx_v_mid]).nn) != 0);
            if (__pyx_t_2) {

              /* "fmsne_implem.pyx":4085
 *                         mid = (ub + lb)//2
 *                         if nn_ld[j] == nnrk_hd[mid].nn:
 *                             lb = mid             # <<<<<<<<<<<<<<
 *                             break
 *                         elif nn_ld[j] < nnrk_hd[mid].nn:
 */
              __pyx_v_lb = __pyx_v_mid;

              /* "fmsne_implem.pyx":4086
 *                         if nn_ld[j] == nnrk_hd[mid].nn:
 *                             lb = mid
 *                             break             # <<<<<<<<<<<<<<
 *                         elif nn_ld[j] < nnrk_hd[mid].nn:
 *                             ub = mid
 */
              goto __pyx_L18_break;

              /* "fmsne_implem.pyx":4084
 *                     while ub - lb > 1:
 *                         mid = (ub + lb)//2
 *                         if nn_ld[j] == nnrk_hd[mid].nn:             # <<<<<<<<<<<<<<
 *                             lb = mid
 *                             break
 */
            }

            /* "fmsne_implem.pyx":4087
 *                             lb = mid
 *                             break
 *                         elif nn_ld[j] < nnrk_hd[mid].nn:             # <<<<<<<<<<<<<<
 *                             ub = mid
 *                         else:
 */
            __pyx_t_2 = (((__pyx_v_nn_ld[__pyx_v_j]) < (__pyx_v_nnrk_hd[__pyx_v_mid]).nn) != 0);
            if (__pyx_t_2) {

              /* "fmsne_implem.pyx":4088
 *                             break
 *                         elif nn_ld[j] < nnrk_hd[mid].nn:
 *                             ub = mid             # <<<<<<<<<<<<<<
 *                         else:
 *                             lb = mid + 1
 */
              __pyx_v_ub = __pyx_v_mid;

              /* "fmsne_implem.pyx":4087
 *                             lb = mid
 *                             break
 *                         elif nn_ld[j] < nnrk_hd[mid].nn:             # <<<<<<<<<<<<<<
 *                             ub = mid
 *                         else:
 */
              goto __pyx_L19;
            }

            /* "fmsne_implem.pyx":4090
 *                             ub = mid
 *                         else:
 *                             lb = mid + 1             # <<<<<<<<<<<<<<
 *                     # Updating qnxk only if nn_ld[j] == nnrk_hd[lb].nn
 *                     if nn_ld[j] == nnrk_hd[lb].nn:
 */
            /*else*/ {
              __pyx_v_lb = (__pyx_v_mid + 1);
            }
            __pyx_L19:;
          }
          __pyx_L18_break:;

          /* "fmsne_implem.pyx":4092
 *                             lb = mid + 1
 *                     # Updating qnxk only if nn_ld[j] == nnrk_hd[lb].nn
 *                     if nn_ld[j] == nnrk_hd[lb].nn:             # <<<<<<<<<<<<<<
 *                         # Updating at the biggest rank between the HD and LD ones
 *                         if jr < nnrk_hd[lb].rank:
 */
          __pyx_t_2 = (((__pyx_v_nn_ld[__pyx_v_j]) == (__pyx_v_nnrk_hd[__pyx_v_lb]).nn) != 0);
          if (__pyx_t_2) {

            /* "fmsne_implem.pyx":4094
 *                     if nn_ld[j] == nnrk_hd[lb].nn:
 *                         # Updating at the biggest rank between the HD and LD ones
 *                         if jr < nnrk_hd[lb].rank:             # <<<<<<<<<<<<<<
 *                             qnxk[nnrk_hd[lb].rank] += 1.0
 *                         else:
 */
            __pyx_t_2 = ((__pyx_v_jr < (__pyx_v_nnrk_hd[__pyx_v_lb]).rank) != 0);
            if (__pyx_t_2) {

              /* "fmsne_implem.pyx":4095
 *                         # Updating at the biggest rank between the HD and LD ones
 *                         if jr < nnrk_hd[lb].rank:
 *                             qnxk[nnrk_hd[lb].rank] += 1.0             # <<<<<<<<<<<<<<
 *                         else:
 *                             qnxk[jr] += 1.0
 */
              __pyx_t_1 = (__pyx_v_nnrk_hd[__pyx_v_lb]).rank;
              *((double *) ( /* dim=0 */ ((char *) (((double *) __pyx_v_qnxk.data) + __pyx_t_1)) )) += 1.0;

              /* "fmsne_implem.pyx":4094
 *                     if nn_ld[j] == nnrk_hd[lb].nn:
 *                         # Updating at the biggest rank between the HD and LD ones
 *                         if jr < nnrk_hd[lb].rank:             # <<<<<<<<<<<<<<
 *                             qnxk[nnrk_hd[lb].rank] += 1.0
 *                         else:
 */
              goto __pyx_L21;
            }

            /* "fmsne_implem.pyx":4097
 *                             qnxk[nnrk_hd[lb].rank] += 1.0
 *                         else:
 *                             qnxk[jr] += 1.0             # <<<<<<<<<<<<<<
 *                 # Incrementing the LD rank
 *                 jr += 1
 */
            /*else*/ {
              __pyx_t_1 = __pyx_v_jr;
              *((double *) ( /* dim=0 */ ((char *) (((double *) __pyx_v_qnxk.data) + __pyx_t_1)) )) += 1.0;
            }
            __pyx_L21:;

            /* "fmsne_implem.pyx":4092
 *                             lb = mid + 1
 *                     # Updating qnxk only if nn_ld[j] == nnrk_hd[lb].nn
 *                     if nn_ld[j] == nnrk_hd[lb].nn:             # <<<<<<<<<<<<<<
 *                         # Updating at the biggest rank between the HD and LD ones
 *                         if jr < nnrk_hd[lb].rank:
 */
          }

          /* "fmsne_implem.pyx":4078
 *             if nn_ld[j] != i:
 *                 # If nn_ld[j] is in the range of nnrk_hd
 *                 if (nn_ld[j] >= nnrk_hd[0].nn) and (nn_ld[j] <= nnrk_hd[Kupsub].nn):             # <<<<<<<<<<<<<<
 *                     # Searching for nn_ld[j] in nnrk_hd using binary search
 *                     lb = 0
 */
        }

        /* "fmsne_implem.pyx":4099
 *                             qnxk[jr] += 1.0
 *                 # Incrementing the LD rank
 *                 jr += 1             # <<<<<<<<<<<<<<
 * 
 *         # Updating ihd and ild
 */
        __pyx_v_jr = (__pyx_v_jr + 1);

        /* "fmsne_implem.pyx":4076
 *         # For each LD neighbor
 *         for j in range(Kupadd):
 *             if nn_ld[j] != i:             # <<<<<<<<<<<<<<
 *                 # If nn_ld[j] is in the range of nnrk_hd
 *                 if (nn_ld[j] >= nnrk_hd[0].nn) and (nn_ld[j] <= nnrk_hd[Kupsub].nn):
 */
      }
    }

    /* "fmsne_implem.pyx":4102
 * 
 *         # Updating ihd and ild
 *         ihd += d_hds             # <<<<<<<<<<<<<<
 *         ild += d_lds
 * 
 */
    __pyx_v_ihd = (__pyx_v_ihd + __pyx_v_d_hds);

    /* "fmsne_implem.pyx":4103
 *         # Updating ihd and ild
 *         ihd += d_hds
 *         ild += d_lds             # <<<<<<<<<<<<<<
 * 
 *     # Free the ressources
 */
    __pyx_v_ild = (__pyx_v_ild + __pyx_v_d_lds);
  }

  /* "fmsne_implem.pyx":4106
 * 
 *     # Free the ressources
 *     del vpt_hd             # <<<<<<<<<<<<<<
 *     del vpt_ld
 *     PyMem_Free(nn_hd)
 */
  delete __pyx_v_vpt_hd;

  /* "fmsne_implem.pyx":4107
 *     # Free the ressources
 *     del vpt_hd
 *     del vpt_ld             # <<<<<<<<<<<<<<
 *     PyMem_Free(nn_hd)
 *     PyMem_Free(nn_ld)
 */
  delete __pyx_v_vpt_ld;

  /* "fmsne_implem.pyx":4108
 *     del vpt_hd
 *     del vpt_ld
 *     PyMem_Free(nn_hd)             # <<<<<<<<<<<<<<
 *     PyMem_Free(nn_ld)
 *     PyMem_Free(nnrk_hd)
 */
  PyMem_Free(__pyx_v_nn_hd);

  /* "fmsne_implem.pyx":4109
 *     del vpt_ld
 *     PyMem_Free(nn_hd)
 *     PyMem_Free(nn_ld)             # <<<<<<<<<<<<<<
 *     PyMem_Free(nnrk_hd)
 * 
 */
  PyMem_Free(__pyx_v_nn_ld);

  /* "fmsne_implem.pyx":4110
 *     PyMem_Free(nn_hd)
 *     PyMem_Free(nn_ld)
 *     PyMem_Free(nnrk_hd)             # <<<<<<<<<<<<<<
 * 
 *     # Computing the cumulative sum of qnxk and normalizing it
 */
  PyMem_Free(__pyx_v_nnrk_hd);

  /* "fmsne_implem.pyx":4113
 * 
 *     # Computing the cumulative sum of qnxk and normalizing it
 *     cdef double cs = 0.0             # <<<<<<<<<<<<<<
 *     cdef double Nd = <double> N
 *     for i in range(Kup):
 */
  __pyx_v_cs = 0.0;

  /* "fmsne_implem.pyx":4114
 *     # Computing the cumulative sum of qnxk and normalizing it
 *     cdef double cs = 0.0
 *     cdef double Nd = <double> N             # <<<<<<<<<<<<<<
 *     for i in range(Kup):
 *         cs += qnxk[i]
 */
  __pyx_v_Nd = ((double)__pyx_v_N);

  /* "fmsne_implem.pyx":4115
 *     cdef double cs = 0.0
 *     cdef double Nd = <double> N
 *     for i in range(Kup):             # <<<<<<<<<<<<<<
 *         cs += qnxk[i]
 *         qnxk[i] = cs/Nd
 */
  __pyx_t_3 = __pyx_v_Kup;
  __pyx_t_4 = __pyx_t_3;
  for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
    __pyx_v_i = __pyx_t_5;

    /* "fmsne_implem.pyx":4116
 *     cdef double Nd = <double> N
 *     for i in range(Kup):
 *         cs += qnxk[i]             # <<<<<<<<<<<<<<
 *         qnxk[i] = cs/Nd
 *         Nd += N
 */
    __pyx_t_1 = __pyx_v_i;
    __pyx_v_cs = (__pyx_v_cs + (*((double *) ( /* dim=0 */ ((char *) (((double *) __pyx_v_qnxk.data) + __pyx_t_1)) ))));

    /* "fmsne_implem.pyx":4117
 *     for i in range(Kup):
 *         cs += qnxk[i]
 *         qnxk[i] = cs/Nd             # <<<<<<<<<<<<<<
 *         Nd += N
 * 
 */
    __pyx_t_1 = __pyx_v_i;
    *((double *) ( /* dim=0 */ ((char *) (((double *) __pyx_v_qnxk.data) + __pyx_t_1)) )) = (__pyx_v_cs / __pyx_v_Nd);

    /* "fmsne_implem.pyx":4118
 *         cs += qnxk[i]
 *         qnxk[i] = cs/Nd
 *         Nd += N             # <<<<<<<<<<<<<<
 * 
 *     # Computing rnxk and its AUC
 */
    __pyx_v_Nd = (__pyx_v_Nd + __pyx_v_N);
  }

  /* "fmsne_implem.pyx":4121
 * 
 *     # Computing rnxk and its AUC
 *     Nd = <double> (N-1)             # <<<<<<<<<<<<<<
 *     cs = Nd - 1.0
 *     cdef double K = 1.0
 */
  __pyx_v_Nd = ((double)(__pyx_v_N - 1));

  /* "fmsne_implem.pyx":4122
 *     # Computing rnxk and its AUC
 *     Nd = <double> (N-1)
 *     cs = Nd - 1.0             # <<<<<<<<<<<<<<
 *     cdef double K = 1.0
 *     cdef double iK = 1.0
 */
  __pyx_v_cs = (__pyx_v_Nd - 1.0);

  /* "fmsne_implem.pyx":4123
 *     Nd = <double> (N-1)
 *     cs = Nd - 1.0
 *     cdef double K = 1.0             # <<<<<<<<<<<<<<
 *     cdef double iK = 1.0
 *     cdef double siK = 0.0
 */
  __pyx_v_K = 1.0;

  /* "fmsne_implem.pyx":4124
 *     cs = Nd - 1.0
 *     cdef double K = 1.0
 *     cdef double iK = 1.0             # <<<<<<<<<<<<<<
 *     cdef double siK = 0.0
 *     cdef double auc = 0.0
 */
  __pyx_v_iK = 1.0;

  /* "fmsne_implem.pyx":4125
 *     cdef double K = 1.0
 *     cdef double iK = 1.0
 *     cdef double siK = 0.0             # <<<<<<<<<<<<<<
 *     cdef double auc = 0.0
 *     for i in range(rnxk_size):
 */
  __pyx_v_siK = 0.0;

  /* "fmsne_implem.pyx":4126
 *     cdef double iK = 1.0
 *     cdef double siK = 0.0
 *     cdef double auc = 0.0             # <<<<<<<<<<<<<<
 *     for i in range(rnxk_size):
 *         siK += iK
 */
  __pyx_v_auc = 0.0;

  /* "fmsne_implem.pyx":4127
 *     cdef double siK = 0.0
 *     cdef double auc = 0.0
 *     for i in range(rnxk_size):             # <<<<<<<<<<<<<<
 *         siK += iK
 *         rnxk[i] = (Nd*qnxk[i] - K)/cs
 */
  __pyx_t_3 = __pyx_v_rnxk_size;
  __pyx_t_4 = __pyx_t_3;
  for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
    __pyx_v_i = __pyx_t_5;

    /* "fmsne_implem.pyx":4128
 *     cdef double auc = 0.0
 *     for i in range(rnxk_size):
 *         siK += iK             # <<<<<<<<<<<<<<
 *         rnxk[i] = (Nd*qnxk[i] - K)/cs
 *         auc += (rnxk[i]*iK)
 */
    __pyx_v_siK = (__pyx_v_siK + __pyx_v_iK);

    /* "fmsne_implem.pyx":4129
 *     for i in range(rnxk_size):
 *         siK += iK
 *         rnxk[i] = (Nd*qnxk[i] - K)/cs             # <<<<<<<<<<<<<<
 *         auc += (rnxk[i]*iK)
 *         K += 1.0
 */
    __pyx_t_1 = __pyx_v_i;
    __pyx_t_10 = __pyx_v_i;
    *((double *) ( /* dim=0 */ ((char *) (((double *) __pyx_v_rnxk.data) + __pyx_t_10)) )) = (((__pyx_v_Nd * (*((double *) ( /* dim=0 */ ((char *) (((double *) __pyx_v_qnxk.data) + __pyx_t_1)) )))) - __pyx_v_K) / __pyx_v_cs);

    /* "fmsne_implem.pyx":4130
 *         siK += iK
 *         rnxk[i] = (Nd*qnxk[i] - K)/cs
 *         auc += (rnxk[i]*iK)             # <<<<<<<<<<<<<<
 *         K += 1.0
 *         iK = 1.0/K
 */
    __pyx_t_1 = __pyx_v_i;
    __pyx_v_auc = (__pyx_v_auc + ((*((double *) ( /* dim=0 */ ((char *) (((double *) __pyx_v_rnxk.data) + __pyx_t_1)) ))) * __pyx_v_iK));

    /* "fmsne_implem.pyx":4131
 *         rnxk[i] = (Nd*qnxk[i] - K)/cs
 *         auc += (rnxk[i]*iK)
 *         K += 1.0             # <<<<<<<<<<<<<<
 *         iK = 1.0/K
 *         cs -= 1.0
 */
    __pyx_v_K = (__pyx_v_K + 1.0);

    /* "fmsne_implem.pyx":4132
 *         auc += (rnxk[i]*iK)
 *         K += 1.0
 *         iK = 1.0/K             # <<<<<<<<<<<<<<
 *         cs -= 1.0
 * 
 */
    __pyx_v_iK = (1.0 / __pyx_v_K);

    /* "fmsne_implem.pyx":4133
 *         K += 1.0
 *         iK = 1.0/K
 *         cs -= 1.0             # <<<<<<<<<<<<<<
 * 
 *     # Normalizing the AUC
 */
    __pyx_v_cs = (__pyx_v_cs - 1.0);
  }

  /* "fmsne_implem.pyx":4136
 * 
 *     # Normalizing the AUC
 *     auc /= siK             # <<<<<<<<<<<<<<
 * 
 *     # Returning the AUC
 */
  __pyx_v_auc = (__pyx_v_auc / __pyx_v_siK);

  /* "fmsne_implem.pyx":4139
 * 
 *     # Returning the AUC
 *     return auc             # <<<<<<<<<<<<<<
 */
  __pyx_r = __pyx_v_auc;
  goto __pyx_L0;

  /* "fmsne_implem.pyx":3992
 *     return v.nn < w.nn
 * 
 * cpdef inline double drqa_qnx_rnx_auc(double[::1] X_hds, double[::1] X_lds, int N, int d_hds, int d_lds, int Kup, double[::1] qnxk, double[::1] rnxk, int rnxk_size):             # <<<<<<<<<<<<<<
 *     """
 *     Compute the quality criteria curves Q_NX(K) and R_NX(K) with the neighborhood size K ranging from 1 to Kup. The AUC of the reduced R_NX(K) curve is returned.
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_12fmsne_implem_9drqa_qnx_rnx_auc(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12fmsne_implem_8drqa_qnx_rnx_auc[] = "\n    Compute the quality criteria curves Q_NX(K) and R_NX(K) with the neighborhood size K ranging from 1 to Kup. The AUC of the reduced R_NX(K) curve is returned.\n    In:\n    - X_hds: one-dimensional array with the HD samples stacked one after the other.\n    - X_lds: one-dimensional array with the LD samples stacked one after the other.\n    - N: number of samples.\n    - d_hds: dimension of the HDS.\n    - d_lds: dimension of the LDS.\n    - Kup: greatest neighborhood size to consider.\n    - qnxk: array to store the Q_NX(K) values for K = 1, ..., Kup.\n    - rnxk: array to store the R_NX(K) values for K = 1, ..., min(N-2, Kup).\n    - rnxk_size: min(N-2, Kup).\n    This function modifies the arrays qnxk and rnxk.\n    Out:\n    - A double being the AUC of the reduced R_NX curve.\n    Remark:\n    - the time complexity to compute these criteria scales as O(N*Kup*log(N)).\n    - the Euclidean distance is employed to compute the quality criteria.\n    ";
static PyObject *__pyx_pw_12fmsne_implem_9drqa_qnx_rnx_auc(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  __Pyx_memviewslice __pyx_v_X_hds = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_X_lds = { 0, 0, { 0 }, { 0 }, { 0 } };
  int __pyx_v_N;
  int __pyx_v_d_hds;
  int __pyx_v_d_lds;
  int __pyx_v_Kup;
  __Pyx_memviewslice __pyx_v_qnxk = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_rnxk = { 0, 0, { 0 }, { 0 }, { 0 } };
  int __pyx_v_rnxk_size;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("drqa_qnx_rnx_auc (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_X_hds,&__pyx_n_s_X_lds,&__pyx_n_s_N,&__pyx_n_s_d_hds,&__pyx_n_s_d_lds,&__pyx_n_s_Kup,&__pyx_n_s_qnxk,&__pyx_n_s_rnxk,&__pyx_n_s_rnxk_size,0};
    PyObject* values[9] = {0,0,0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_X_hds)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_X_lds)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("drqa_qnx_rnx_auc", 1, 9, 9, 1); __PYX_ERR(0, 3992, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_N)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("drqa_qnx_rnx_auc", 1, 9, 9, 2); __PYX_ERR(0, 3992, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_d_hds)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("drqa_qnx_rnx_auc", 1, 9, 9, 3); __PYX_ERR(0, 3992, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_d_lds)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("drqa_qnx_rnx_auc", 1, 9, 9, 4); __PYX_ERR(0, 3992, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_Kup)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("drqa_qnx_rnx_auc", 1, 9, 9, 5); __PYX_ERR(0, 3992, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (likely((values[6] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_qnxk)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("drqa_qnx_rnx_auc", 1, 9, 9, 6); __PYX_ERR(0, 3992, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (likely((values[7] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_rnxk)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("drqa_qnx_rnx_auc", 1, 9, 9, 7); __PYX_ERR(0, 3992, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  8:
        if (likely((values[8] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_rnxk_size)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("drqa_qnx_rnx_auc", 1, 9, 9, 8); __PYX_ERR(0, 3992, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "drqa_qnx_rnx_auc") < 0)) __PYX_ERR(0, 3992, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 9) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
      values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
      values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
    }
    __pyx_v_X_hds = __Pyx_PyObject_to_MemoryviewSlice_dc_double(values[0], PyBUF_WRITABLE); if (unlikely(!__pyx_v_X_hds.memview)) __PYX_ERR(0, 3992, __pyx_L3_error)
    __pyx_v_X_lds = __Pyx_PyObject_to_MemoryviewSlice_dc_double(values[1], PyBUF_WRITABLE); if (unlikely(!__pyx_v_X_lds.memview)) __PYX_ERR(0, 3992, __pyx_L3_error)
    __pyx_v_N = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_N == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 3992, __pyx_L3_error)
    __pyx_v_d_hds = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_d_hds == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 3992, __pyx_L3_error)
    __pyx_v_d_lds = __Pyx_PyInt_As_int(values[4]); if (unlikely((__pyx_v_d_lds == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 3992, __pyx_L3_error)
    __pyx_v_Kup = __Pyx_PyInt_As_int(values[5]); if (unlikely((__pyx_v_Kup == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 3992, __pyx_L3_error)
    __pyx_v_qnxk = __Pyx_PyObject_to_MemoryviewSlice_dc_double(values[6], PyBUF_WRITABLE); if (unlikely(!__pyx_v_qnxk.memview)) __PYX_ERR(0, 3992, __pyx_L3_error)
    __pyx_v_rnxk = __Pyx_PyObject_to_MemoryviewSlice_dc_double(values[7], PyBUF_WRITABLE); if (unlikely(!__pyx_v_rnxk.memview)) __PYX_ERR(0, 3992, __pyx_L3_error)
    __pyx_v_rnxk_size = __Pyx_PyInt_As_int(values[8]); if (unlikely((__pyx_v_rnxk_size == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 3992, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("drqa_qnx_rnx_auc", 1, 9, 9, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 3992, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("fmsne_implem.drqa_qnx_rnx_auc", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_12fmsne_implem_8drqa_qnx_rnx_auc(__pyx_self, __pyx_v_X_hds, __pyx_v_X_lds, __pyx_v_N, __pyx_v_d_hds, __pyx_v_d_lds, __pyx_v_Kup, __pyx_v_qnxk, __pyx_v_rnxk, __pyx_v_rnxk_size);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12fmsne_implem_8drqa_qnx_rnx_auc(CYTHON_UNUSED PyObject *__pyx_self, __Pyx_memviewslice __pyx_v_X_hds, __Pyx_memviewslice __pyx_v_X_lds, int __pyx_v_N, int __pyx_v_d_hds, int __pyx_v_d_lds, int __pyx_v_Kup, __Pyx_memviewslice __pyx_v_qnxk, __Pyx_memviewslice __pyx_v_rnxk, int __pyx_v_rnxk_size) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("drqa_qnx_rnx_auc", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_f_12fmsne_implem_drqa_qnx_rnx_auc(__pyx_v_X_hds, __pyx_v_X_lds, __pyx_v_N, __pyx_v_d_hds, __pyx_v_d_lds, __pyx_v_Kup, __pyx_v_qnxk, __pyx_v_rnxk, __pyx_v_rnxk_size, 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3992, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("fmsne_implem.drqa_qnx_rnx_auc", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __PYX_XDEC_MEMVIEW(&__pyx_v_X_hds, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_X_lds, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_qnxk, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_rnxk, 1);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../anaconda3/lib/python3.10/site-packages/numpy/__init__.pxd":734
 * ctypedef npy_cdouble     complex_t
 * 
 * cdef inline object PyArray_MultiIterNew1(a):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew1(PyObject *__pyx_v_a) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew1", 0);

  /* "../../anaconda3/lib/python3.10/site-packages/numpy/__init__.pxd":735
 * 
 * cdef inline object PyArray_MultiIterNew1(a):
 *     return PyArray_MultiIterNew(1, <void*>a)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(1, ((void *)__pyx_v_a)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 735, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../anaconda3/lib/python3.10/site-packages/numpy/__init__.pxd":734
 * ctypedef npy_cdouble     complex_t
 * 
 * cdef inline object PyArray_MultiIterNew1(a):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew1", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../anaconda3/lib/python3.10/site-packages/numpy/__init__.pxd":737
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew2(PyObject *__pyx_v_a, PyObject *__pyx_v_b) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew2", 0);

  /* "../../anaconda3/lib/python3.10/site-packages/numpy/__init__.pxd":738
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(2, ((void *)__pyx_v_a), ((void *)__pyx_v_b)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 738, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../anaconda3/lib/python3.10/site-packages/numpy/__init__.pxd":737
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../anaconda3/lib/python3.10/site-packages/numpy/__init__.pxd":740
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew3(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew3", 0);

  /* "../../anaconda3/lib/python3.10/site-packages/numpy/__init__.pxd":741
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(3, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 741, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../anaconda3/lib/python3.10/site-packages/numpy/__init__.pxd":740
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew3", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../anaconda3/lib/python3.10/site-packages/numpy/__init__.pxd":743
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew4(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c, PyObject *__pyx_v_d) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew4", 0);

  /* "../../anaconda3/lib/python3.10/site-packages/numpy/__init__.pxd":744
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(4, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c), ((void *)__pyx_v_d)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 744, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../anaconda3/lib/python3.10/site-packages/numpy/__init__.pxd":743
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew4", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../anaconda3/lib/python3.10/site-packages/numpy/__init__.pxd":746
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew5(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c, PyObject *__pyx_v_d, PyObject *__pyx_v_e) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew5", 0);

  /* "../../anaconda3/lib/python3.10/site-packages/numpy/__init__.pxd":747
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)             # <<<<<<<<<<<<<<
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(5, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c), ((void *)__pyx_v_d), ((void *)__pyx_v_e)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 747, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../anaconda3/lib/python3.10/site-packages/numpy/__init__.pxd":746
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew5", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../anaconda3/lib/python3.10/site-packages/numpy/__init__.pxd":749
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):             # <<<<<<<<<<<<<<
 *     if PyDataType_HASSUBARRAY(d):
 *         return <tuple>d.subarray.shape
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyDataType_SHAPE(PyArray_Descr *__pyx_v_d) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("PyDataType_SHAPE", 0);

  /* "../../anaconda3/lib/python3.10/site-packages/numpy/__init__.pxd":750
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 *     if PyDataType_HASSUBARRAY(d):             # <<<<<<<<<<<<<<
 *         return <tuple>d.subarray.shape
 *     else:
 */
  __pyx_t_1 = (PyDataType_HASSUBARRAY(__pyx_v_d) != 0);
  if (__pyx_t_1) {

    /* "../../anaconda3/lib/python3.10/site-packages/numpy/__init__.pxd":751
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 *     if PyDataType_HASSUBARRAY(d):
 *         return <tuple>d.subarray.shape             # <<<<<<<<<<<<<<
 *     else:
 *         return ()
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject*)__pyx_v_d->subarray->shape));
    __pyx_r = ((PyObject*)__pyx_v_d->subarray->shape);
    goto __pyx_L0;

    /* "../../anaconda3/lib/python3.10/site-packages/numpy/__init__.pxd":750
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 *     if PyDataType_HASSUBARRAY(d):             # <<<<<<<<<<<<<<
 *         return <tuple>d.subarray.shape
 *     else:
 */
  }

  /* "../../anaconda3/lib/python3.10/site-packages/numpy/__init__.pxd":753
 *         return <tuple>d.subarray.shape
 *     else:
 *         return ()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_empty_tuple);
    __pyx_r = __pyx_empty_tuple;
    goto __pyx_L0;
  }

  /* "../../anaconda3/lib/python3.10/site-packages/numpy/__init__.pxd":749
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):             # <<<<<<<<<<<<<<
 *     if PyDataType_HASSUBARRAY(d):
 *         return <tuple>d.subarray.shape
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../anaconda3/lib/python3.10/site-packages/numpy/__init__.pxd":928
 *     int _import_umath() except -1
 * 
 * cdef inline void set_array_base(ndarray arr, object base):             # <<<<<<<<<<<<<<
 *     Py_INCREF(base) # important to do this before stealing the reference below!
 *     PyArray_SetBaseObject(arr, base)
 */

static CYTHON_INLINE void __pyx_f_5numpy_set_array_base(PyArrayObject *__pyx_v_arr, PyObject *__pyx_v_base) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_array_base", 0);

  /* "../../anaconda3/lib/python3.10/site-packages/numpy/__init__.pxd":929
 * 
 * cdef inline void set_array_base(ndarray arr, object base):
 *     Py_INCREF(base) # important to do this before stealing the reference below!             # <<<<<<<<<<<<<<
 *     PyArray_SetBaseObject(arr, base)
 * 
 */
  Py_INCREF(__pyx_v_base);

  /* "../../anaconda3/lib/python3.10/site-packages/numpy/__init__.pxd":930
 * cdef inline void set_array_base(ndarray arr, object base):
 *     Py_INCREF(base) # important to do this before stealing the reference below!
 *     PyArray_SetBaseObject(arr, base)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object get_array_base(ndarray arr):
 */
  (void)(PyArray_SetBaseObject(__pyx_v_arr, __pyx_v_base));

  /* "../../anaconda3/lib/python3.10/site-packages/numpy/__init__.pxd":928
 *     int _import_umath() except -1
 * 
 * cdef inline void set_array_base(ndarray arr, object base):             # <<<<<<<<<<<<<<
 *     Py_INCREF(base) # important to do this before stealing the reference below!
 *     PyArray_SetBaseObject(arr, base)
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "../../anaconda3/lib/python3.10/site-packages/numpy/__init__.pxd":932
 *     PyArray_SetBaseObject(arr, base)
 * 
 * cdef inline object get_array_base(ndarray arr):             # <<<<<<<<<<<<<<
 *     base = PyArray_BASE(arr)
 *     if base is NULL:
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_get_array_base(PyArrayObject *__pyx_v_arr) {
  PyObject *__pyx_v_base;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("get_array_base", 0);

  /* "../../anaconda3/lib/python3.10/site-packages/numpy/__init__.pxd":933
 * 
 * cdef inline object get_array_base(ndarray arr):
 *     base = PyArray_BASE(arr)             # <<<<<<<<<<<<<<
 *     if base is NULL:
 *         return None
 */
  __pyx_v_base = PyArray_BASE(__pyx_v_arr);

  /* "../../anaconda3/lib/python3.10/site-packages/numpy/__init__.pxd":934
 * cdef inline object get_array_base(ndarray arr):
 *     base = PyArray_BASE(arr)
 *     if base is NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     return <object>base
 */
  __pyx_t_1 = ((__pyx_v_base == NULL) != 0);
  if (__pyx_t_1) {

    /* "../../anaconda3/lib/python3.10/site-packages/numpy/__init__.pxd":935
 *     base = PyArray_BASE(arr)
 *     if base is NULL:
 *         return None             # <<<<<<<<<<<<<<
 *     return <object>base
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "../../anaconda3/lib/python3.10/site-packages/numpy/__init__.pxd":934
 * cdef inline object get_array_base(ndarray arr):
 *     base = PyArray_BASE(arr)
 *     if base is NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     return <object>base
 */
  }

  /* "../../anaconda3/lib/python3.10/site-packages/numpy/__init__.pxd":936
 *     if base is NULL:
 *         return None
 *     return <object>base             # <<<<<<<<<<<<<<
 * 
 * # Versions of the import_* functions which are more suitable for
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_base));
  __pyx_r = ((PyObject *)__pyx_v_base);
  goto __pyx_L0;

  /* "../../anaconda3/lib/python3.10/site-packages/numpy/__init__.pxd":932
 *     PyArray_SetBaseObject(arr, base)
 * 
 * cdef inline object get_array_base(ndarray arr):             # <<<<<<<<<<<<<<
 *     base = PyArray_BASE(arr)
 *     if base is NULL:
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../anaconda3/lib/python3.10/site-packages/numpy/__init__.pxd":940
 * # Versions of the import_* functions which are more suitable for
 * # Cython code.
 * cdef inline int import_array() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         __pyx_import_array()
 */

static CYTHON_INLINE int __pyx_f_5numpy_import_array(void) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("import_array", 0);

  /* "../../anaconda3/lib/python3.10/site-packages/numpy/__init__.pxd":941
 * # Cython code.
 * cdef inline int import_array() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         __pyx_import_array()
 *     except Exception:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "../../anaconda3/lib/python3.10/site-packages/numpy/__init__.pxd":942
 * cdef inline int import_array() except -1:
 *     try:
 *         __pyx_import_array()             # <<<<<<<<<<<<<<
 *     except Exception:
 *         raise ImportError("numpy.core.multiarray failed to import")
 */
      __pyx_t_4 = _import_array(); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(1, 942, __pyx_L3_error)

      /* "../../anaconda3/lib/python3.10/site-packages/numpy/__init__.pxd":941
 * # Cython code.
 * cdef inline int import_array() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         __pyx_import_array()
 *     except Exception:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;

    /* "../../anaconda3/lib/python3.10/site-packages/numpy/__init__.pxd":943
 *     try:
 *         __pyx_import_array()
 *     except Exception:             # <<<<<<<<<<<<<<
 *         raise ImportError("numpy.core.multiarray failed to import")
 * 
 */
    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_4) {
      __Pyx_AddTraceback("numpy.import_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(1, 943, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_7);

      /* "../../anaconda3/lib/python3.10/site-packages/numpy/__init__.pxd":944
 *         __pyx_import_array()
 *     except Exception:
 *         raise ImportError("numpy.core.multiarray failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_umath() except -1:
 */
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple_, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 944, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __PYX_ERR(1, 944, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "../../anaconda3/lib/python3.10/site-packages/numpy/__init__.pxd":941
 * # Cython code.
 * cdef inline int import_array() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         __pyx_import_array()
 *     except Exception:
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L8_try_end:;
  }

  /* "../../anaconda3/lib/python3.10/site-packages/numpy/__init__.pxd":940
 * # Versions of the import_* functions which are more suitable for
 * # Cython code.
 * cdef inline int import_array() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         __pyx_import_array()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("numpy.import_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../anaconda3/lib/python3.10/site-packages/numpy/__init__.pxd":946
 *         raise ImportError("numpy.core.multiarray failed to import")
 * 
 * cdef inline int import_umath() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

static CYTHON_INLINE int __pyx_f_5numpy_import_umath(void) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("import_umath", 0);

  /* "../../anaconda3/lib/python3.10/site-packages/numpy/__init__.pxd":947
 * 
 * cdef inline int import_umath() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "../../anaconda3/lib/python3.10/site-packages/numpy/__init__.pxd":948
 * cdef inline int import_umath() except -1:
 *     try:
 *         _import_umath()             # <<<<<<<<<<<<<<
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")
 */
      __pyx_t_4 = _import_umath(); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(1, 948, __pyx_L3_error)

      /* "../../anaconda3/lib/python3.10/site-packages/numpy/__init__.pxd":947
 * 
 * cdef inline int import_umath() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;

    /* "../../anaconda3/lib/python3.10/site-packages/numpy/__init__.pxd":949
 *     try:
 *         _import_umath()
 *     except Exception:             # <<<<<<<<<<<<<<
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 */
    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_4) {
      __Pyx_AddTraceback("numpy.import_umath", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(1, 949, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_7);

      /* "../../anaconda3/lib/python3.10/site-packages/numpy/__init__.pxd":950
 *         _import_umath()
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_ufunc() except -1:
 */
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 950, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __PYX_ERR(1, 950, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "../../anaconda3/lib/python3.10/site-packages/numpy/__init__.pxd":947
 * 
 * cdef inline int import_umath() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L8_try_end:;
  }

  /* "../../anaconda3/lib/python3.10/site-packages/numpy/__init__.pxd":946
 *         raise ImportError("numpy.core.multiarray failed to import")
 * 
 * cdef inline int import_umath() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("numpy.import_umath", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../anaconda3/lib/python3.10/site-packages/numpy/__init__.pxd":952
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 * cdef inline int import_ufunc() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

static CYTHON_INLINE int __pyx_f_5numpy_import_ufunc(void) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("import_ufunc", 0);

  /* "../../anaconda3/lib/python3.10/site-packages/numpy/__init__.pxd":953
 * 
 * cdef inline int import_ufunc() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "../../anaconda3/lib/python3.10/site-packages/numpy/__init__.pxd":954
 * cdef inline int import_ufunc() except -1:
 *     try:
 *         _import_umath()             # <<<<<<<<<<<<<<
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")
 */
      __pyx_t_4 = _import_umath(); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(1, 954, __pyx_L3_error)

      /* "../../anaconda3/lib/python3.10/site-packages/numpy/__init__.pxd":953
 * 
 * cdef inline int import_ufunc() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;

    /* "../../anaconda3/lib/python3.10/site-packages/numpy/__init__.pxd":955
 *     try:
 *         _import_umath()
 *     except Exception:             # <<<<<<<<<<<<<<
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 */
    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_4) {
      __Pyx_AddTraceback("numpy.import_ufunc", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(1, 955, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_7);

      /* "../../anaconda3/lib/python3.10/site-packages/numpy/__init__.pxd":956
 *         _import_umath()
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef extern from *:
 */
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 956, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __PYX_ERR(1, 956, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "../../anaconda3/lib/python3.10/site-packages/numpy/__init__.pxd":953
 * 
 * cdef inline int import_ufunc() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L8_try_end:;
  }

  /* "../../anaconda3/lib/python3.10/site-packages/numpy/__init__.pxd":952
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 * cdef inline int import_ufunc() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("numpy.import_ufunc", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../anaconda3/lib/python3.10/site-packages/numpy/__init__.pxd":966
 * 
 * 
 * cdef inline bint is_timedelta64_object(object obj):             # <<<<<<<<<<<<<<
 *     """
 *     Cython equivalent of `isinstance(obj, np.timedelta64)`
 */

static CYTHON_INLINE int __pyx_f_5numpy_is_timedelta64_object(PyObject *__pyx_v_obj) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_timedelta64_object", 0);

  /* "../../anaconda3/lib/python3.10/site-packages/numpy/__init__.pxd":978
 *     bool
 *     """
 *     return PyObject_TypeCheck(obj, &PyTimedeltaArrType_Type)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = PyObject_TypeCheck(__pyx_v_obj, (&PyTimedeltaArrType_Type));
  goto __pyx_L0;

  /* "../../anaconda3/lib/python3.10/site-packages/numpy/__init__.pxd":966
 * 
 * 
 * cdef inline bint is_timedelta64_object(object obj):             # <<<<<<<<<<<<<<
 *     """
 *     Cython equivalent of `isinstance(obj, np.timedelta64)`
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../anaconda3/lib/python3.10/site-packages/numpy/__init__.pxd":981
 * 
 * 
 * cdef inline bint is_datetime64_object(object obj):             # <<<<<<<<<<<<<<
 *     """
 *     Cython equivalent of `isinstance(obj, np.datetime64)`
 */

static CYTHON_INLINE int __pyx_f_5numpy_is_datetime64_object(PyObject *__pyx_v_obj) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_datetime64_object", 0);

  /* "../../anaconda3/lib/python3.10/site-packages/numpy/__init__.pxd":993
 *     bool
 *     """
 *     return PyObject_TypeCheck(obj, &PyDatetimeArrType_Type)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = PyObject_TypeCheck(__pyx_v_obj, (&PyDatetimeArrType_Type));
  goto __pyx_L0;

  /* "../../anaconda3/lib/python3.10/site-packages/numpy/__init__.pxd":981
 * 
 * 
 * cdef inline bint is_datetime64_object(object obj):             # <<<<<<<<<<<<<<
 *     """
 *     Cython equivalent of `isinstance(obj, np.datetime64)`
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../anaconda3/lib/python3.10/site-packages/numpy/__init__.pxd":996
 * 
 * 
 * cdef inline npy_datetime get_datetime64_value(object obj) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the int64 value underlying scalar numpy datetime64 object
 */

static CYTHON_INLINE npy_datetime __pyx_f_5numpy_get_datetime64_value(PyObject *__pyx_v_obj) {
  npy_datetime __pyx_r;

  /* "../../anaconda3/lib/python3.10/site-packages/numpy/__init__.pxd":1003
 *     also needed.  That can be found using `get_datetime64_unit`.
 *     """
 *     return (<PyDatetimeScalarObject*>obj).obval             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = ((PyDatetimeScalarObject *)__pyx_v_obj)->obval;
  goto __pyx_L0;

  /* "../../anaconda3/lib/python3.10/site-packages/numpy/__init__.pxd":996
 * 
 * 
 * cdef inline npy_datetime get_datetime64_value(object obj) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the int64 value underlying scalar numpy datetime64 object
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "../../anaconda3/lib/python3.10/site-packages/numpy/__init__.pxd":1006
 * 
 * 
 * cdef inline npy_timedelta get_timedelta64_value(object obj) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the int64 value underlying scalar numpy timedelta64 object
 */

static CYTHON_INLINE npy_timedelta __pyx_f_5numpy_get_timedelta64_value(PyObject *__pyx_v_obj) {
  npy_timedelta __pyx_r;

  /* "../../anaconda3/lib/python3.10/site-packages/numpy/__init__.pxd":1010
 *     returns the int64 value underlying scalar numpy timedelta64 object
 *     """
 *     return (<PyTimedeltaScalarObject*>obj).obval             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = ((PyTimedeltaScalarObject *)__pyx_v_obj)->obval;
  goto __pyx_L0;

  /* "../../anaconda3/lib/python3.10/site-packages/numpy/__init__.pxd":1006
 * 
 * 
 * cdef inline npy_timedelta get_timedelta64_value(object obj) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the int64 value underlying scalar numpy timedelta64 object
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "../../anaconda3/lib/python3.10/site-packages/numpy/__init__.pxd":1013
 * 
 * 
 * cdef inline NPY_DATETIMEUNIT get_datetime64_unit(object obj) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the unit part of the dtype for a numpy datetime64 object.
 */

static CYTHON_INLINE NPY_DATETIMEUNIT __pyx_f_5numpy_get_datetime64_unit(PyObject *__pyx_v_obj) {
  NPY_DATETIMEUNIT __pyx_r;

  /* "../../anaconda3/lib/python3.10/site-packages/numpy/__init__.pxd":1017
 *     returns the unit part of the dtype for a numpy datetime64 object.
 *     """
 *     return <NPY_DATETIMEUNIT>(<PyDatetimeScalarObject*>obj).obmeta.base             # <<<<<<<<<<<<<<
 */
  __pyx_r = ((NPY_DATETIMEUNIT)((PyDatetimeScalarObject *)__pyx_v_obj)->obmeta.base);
  goto __pyx_L0;

  /* "../../anaconda3/lib/python3.10/site-packages/numpy/__init__.pxd":1013
 * 
 * 
 * cdef inline NPY_DATETIMEUNIT get_datetime64_unit(object obj) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the unit part of the dtype for a numpy datetime64 object.
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "View.MemoryView":123
 *         cdef bint dtype_is_object
 * 
 *     def __cinit__(array self, tuple shape, Py_ssize_t itemsize, format not None,             # <<<<<<<<<<<<<<
 *                   mode="c", bint allocate_buffer=True):
 * 
 */

/* Python wrapper */
static int __pyx_array___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_array___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_shape = 0;
  Py_ssize_t __pyx_v_itemsize;
  PyObject *__pyx_v_format = 0;
  PyObject *__pyx_v_mode = 0;
  int __pyx_v_allocate_buffer;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_shape,&__pyx_n_s_itemsize,&__pyx_n_s_format,&__pyx_n_s_mode,&__pyx_n_s_allocate_buffer,0};
    PyObject* values[5] = {0,0,0,0,0};
    values[3] = ((PyObject *)__pyx_n_s_c);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_shape)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_itemsize)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 3, 5, 1); __PYX_ERR(2, 123, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_format)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 3, 5, 2); __PYX_ERR(2, 123, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_mode);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_allocate_buffer);
          if (value) { values[4] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(2, 123, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_shape = ((PyObject*)values[0]);
    __pyx_v_itemsize = __Pyx_PyIndex_AsSsize_t(values[1]); if (unlikely((__pyx_v_itemsize == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(2, 123, __pyx_L3_error)
    __pyx_v_format = values[2];
    __pyx_v_mode = values[3];
    if (values[4]) {
      __pyx_v_allocate_buffer = __Pyx_PyObject_IsTrue(values[4]); if (unlikely((__pyx_v_allocate_buffer == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 124, __pyx_L3_error)
    } else {

      /* "View.MemoryView":124
 * 
 *     def __cinit__(array self, tuple shape, Py_ssize_t itemsize, format not None,
 *                   mode="c", bint allocate_buffer=True):             # <<<<<<<<<<<<<<
 * 
 *         cdef int idx
 */
      __pyx_v_allocate_buffer = ((int)1);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 3, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(2, 123, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("View.MemoryView.array.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_shape), (&PyTuple_Type), 1, "shape", 1))) __PYX_ERR(2, 123, __pyx_L1_error)
  if (unlikely(((PyObject *)__pyx_v_format) == Py_None)) {
    PyErr_Format(PyExc_TypeError, "Argument '%.200s' must not be None", "format"); __PYX_ERR(2, 123, __pyx_L1_error)
  }
  __pyx_r = __pyx_array___pyx_pf_15View_dot_MemoryView_5array___cinit__(((struct __pyx_array_obj *)__pyx_v_self), __pyx_v_shape, __pyx_v_itemsize, __pyx_v_format, __pyx_v_mode, __pyx_v_allocate_buffer);

  /* "View.MemoryView":123
 *         cdef bint dtype_is_object
 * 
 *     def __cinit__(array self, tuple shape, Py_ssize_t itemsize, format not None,             # <<<<<<<<<<<<<<
 *                   mode="c", bint allocate_buffer=True):
 * 
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_array___pyx_pf_15View_dot_MemoryView_5array___cinit__(struct __pyx_array_obj *__pyx_v_self, PyObject *__pyx_v_shape, Py_ssize_t __pyx_v_itemsize, PyObject *__pyx_v_format, PyObject *__pyx_v_mode, int __pyx_v_allocate_buffer) {
  int __pyx_v_idx;
  Py_ssize_t __pyx_v_i;
  Py_ssize_t __pyx_v_dim;
  PyObject **__pyx_v_p;
  char __pyx_v_order;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  char *__pyx_t_7;
  int __pyx_t_8;
  Py_ssize_t __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  Py_ssize_t __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);
  __Pyx_INCREF(__pyx_v_format);

  /* "View.MemoryView":130
 *         cdef PyObject **p
 * 
 *         self.ndim = <int> len(shape)             # <<<<<<<<<<<<<<
 *         self.itemsize = itemsize
 * 
 */
  if (unlikely(__pyx_v_shape == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(2, 130, __pyx_L1_error)
  }
  __pyx_t_1 = PyTuple_GET_SIZE(__pyx_v_shape); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(2, 130, __pyx_L1_error)
  __pyx_v_self->ndim = ((int)__pyx_t_1);

  /* "View.MemoryView":131
 * 
 *         self.ndim = <int> len(shape)
 *         self.itemsize = itemsize             # <<<<<<<<<<<<<<
 * 
 *         if not self.ndim:
 */
  __pyx_v_self->itemsize = __pyx_v_itemsize;

  /* "View.MemoryView":133
 *         self.itemsize = itemsize
 * 
 *         if not self.ndim:             # <<<<<<<<<<<<<<
 *             raise ValueError("Empty shape tuple for cython.array")
 * 
 */
  __pyx_t_2 = ((!(__pyx_v_self->ndim != 0)) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "View.MemoryView":134
 * 
 *         if not self.ndim:
 *             raise ValueError("Empty shape tuple for cython.array")             # <<<<<<<<<<<<<<
 * 
 *         if itemsize <= 0:
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__3, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 134, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(2, 134, __pyx_L1_error)

    /* "View.MemoryView":133
 *         self.itemsize = itemsize
 * 
 *         if not self.ndim:             # <<<<<<<<<<<<<<
 *             raise ValueError("Empty shape tuple for cython.array")
 * 
 */
  }

  /* "View.MemoryView":136
 *             raise ValueError("Empty shape tuple for cython.array")
 * 
 *         if itemsize <= 0:             # <<<<<<<<<<<<<<
 *             raise ValueError("itemsize <= 0 for cython.array")
 * 
 */
  __pyx_t_2 = ((__pyx_v_itemsize <= 0) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "View.MemoryView":137
 * 
 *         if itemsize <= 0:
 *             raise ValueError("itemsize <= 0 for cython.array")             # <<<<<<<<<<<<<<
 * 
 *         if not isinstance(format, bytes):
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 137, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(2, 137, __pyx_L1_error)

    /* "View.MemoryView":136
 *             raise ValueError("Empty shape tuple for cython.array")
 * 
 *         if itemsize <= 0:             # <<<<<<<<<<<<<<
 *             raise ValueError("itemsize <= 0 for cython.array")
 * 
 */
  }

  /* "View.MemoryView":139
 *             raise ValueError("itemsize <= 0 for cython.array")
 * 
 *         if not isinstance(format, bytes):             # <<<<<<<<<<<<<<
 *             format = format.encode('ASCII')
 *         self._format = format  # keep a reference to the byte string
 */
  __pyx_t_2 = PyBytes_Check(__pyx_v_format); 
  __pyx_t_4 = ((!(__pyx_t_2 != 0)) != 0);
  if (__pyx_t_4) {

    /* "View.MemoryView":140
 * 
 *         if not isinstance(format, bytes):
 *             format = format.encode('ASCII')             # <<<<<<<<<<<<<<
 *         self._format = format  # keep a reference to the byte string
 *         self.format = self._format
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_format, __pyx_n_s_encode); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 140, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    __pyx_t_3 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_6, __pyx_n_s_ASCII) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_n_s_ASCII);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 140, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF_SET(__pyx_v_format, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "View.MemoryView":139
 *             raise ValueError("itemsize <= 0 for cython.array")
 * 
 *         if not isinstance(format, bytes):             # <<<<<<<<<<<<<<
 *             format = format.encode('ASCII')
 *         self._format = format  # keep a reference to the byte string
 */
  }

  /* "View.MemoryView":141
 *         if not isinstance(format, bytes):
 *             format = format.encode('ASCII')
 *         self._format = format  # keep a reference to the byte string             # <<<<<<<<<<<<<<
 *         self.format = self._format
 * 
 */
  if (!(likely(PyBytes_CheckExact(__pyx_v_format))||((__pyx_v_format) == Py_None)||((void)PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "bytes", Py_TYPE(__pyx_v_format)->tp_name), 0))) __PYX_ERR(2, 141, __pyx_L1_error)
  __pyx_t_3 = __pyx_v_format;
  __Pyx_INCREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __Pyx_GOTREF(__pyx_v_self->_format);
  __Pyx_DECREF(__pyx_v_self->_format);
  __pyx_v_self->_format = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "View.MemoryView":142
 *             format = format.encode('ASCII')
 *         self._format = format  # keep a reference to the byte string
 *         self.format = self._format             # <<<<<<<<<<<<<<
 * 
 * 
 */
  if (unlikely(__pyx_v_self->_format == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(2, 142, __pyx_L1_error)
  }
  __pyx_t_7 = __Pyx_PyBytes_AsWritableString(__pyx_v_self->_format); if (unlikely((!__pyx_t_7) && PyErr_Occurred())) __PYX_ERR(2, 142, __pyx_L1_error)
  __pyx_v_self->format = __pyx_t_7;

  /* "View.MemoryView":145
 * 
 * 
 *         self._shape = <Py_ssize_t *> PyObject_Malloc(sizeof(Py_ssize_t)*self.ndim*2)             # <<<<<<<<<<<<<<
 *         self._strides = self._shape + self.ndim
 * 
 */
  __pyx_v_self->_shape = ((Py_ssize_t *)PyObject_Malloc((((sizeof(Py_ssize_t)) * __pyx_v_self->ndim) * 2)));

  /* "View.MemoryView":146
 * 
 *         self._shape = <Py_ssize_t *> PyObject_Malloc(sizeof(Py_ssize_t)*self.ndim*2)
 *         self._strides = self._shape + self.ndim             # <<<<<<<<<<<<<<
 * 
 *         if not self._shape:
 */
  __pyx_v_self->_strides = (__pyx_v_self->_shape + __pyx_v_self->ndim);

  /* "View.MemoryView":148
 *         self._strides = self._shape + self.ndim
 * 
 *         if not self._shape:             # <<<<<<<<<<<<<<
 *             raise MemoryError("unable to allocate shape and strides.")
 * 
 */
  __pyx_t_4 = ((!(__pyx_v_self->_shape != 0)) != 0);
  if (unlikely(__pyx_t_4)) {

    /* "View.MemoryView":149
 * 
 *         if not self._shape:
 *             raise MemoryError("unable to allocate shape and strides.")             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_MemoryError, __pyx_tuple__5, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 149, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(2, 149, __pyx_L1_error)

    /* "View.MemoryView":148
 *         self._strides = self._shape + self.ndim
 * 
 *         if not self._shape:             # <<<<<<<<<<<<<<
 *             raise MemoryError("unable to allocate shape and strides.")
 * 
 */
  }

  /* "View.MemoryView":152
 * 
 * 
 *         for idx, dim in enumerate(shape):             # <<<<<<<<<<<<<<
 *             if dim <= 0:
 *                 raise ValueError("Invalid shape in axis %d: %d." % (idx, dim))
 */
  __pyx_t_8 = 0;
  __pyx_t_3 = __pyx_v_shape; __Pyx_INCREF(__pyx_t_3); __pyx_t_1 = 0;
  for (;;) {
    if (__pyx_t_1 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_1); __Pyx_INCREF(__pyx_t_5); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(2, 152, __pyx_L1_error)
    #else
    __pyx_t_5 = PySequence_ITEM(__pyx_t_3, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 152, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    #endif
    __pyx_t_9 = __Pyx_PyIndex_AsSsize_t(__pyx_t_5); if (unlikely((__pyx_t_9 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(2, 152, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_v_dim = __pyx_t_9;
    __pyx_v_idx = __pyx_t_8;
    __pyx_t_8 = (__pyx_t_8 + 1);

    /* "View.MemoryView":153
 * 
 *         for idx, dim in enumerate(shape):
 *             if dim <= 0:             # <<<<<<<<<<<<<<
 *                 raise ValueError("Invalid shape in axis %d: %d." % (idx, dim))
 *             self._shape[idx] = dim
 */
    __pyx_t_4 = ((__pyx_v_dim <= 0) != 0);
    if (unlikely(__pyx_t_4)) {

      /* "View.MemoryView":154
 *         for idx, dim in enumerate(shape):
 *             if dim <= 0:
 *                 raise ValueError("Invalid shape in axis %d: %d." % (idx, dim))             # <<<<<<<<<<<<<<
 *             self._shape[idx] = dim
 * 
 */
      __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_idx); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 154, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = PyInt_FromSsize_t(__pyx_v_dim); if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 154, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_10 = PyTuple_New(2); if (unlikely(!__pyx_t_10)) __PYX_ERR(2, 154, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_GIVEREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_6);
      PyTuple_SET_ITEM(__pyx_t_10, 1, __pyx_t_6);
      __pyx_t_5 = 0;
      __pyx_t_6 = 0;
      __pyx_t_6 = __Pyx_PyString_Format(__pyx_kp_s_Invalid_shape_in_axis_d_d, __pyx_t_10); if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 154, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_10 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_6); if (unlikely(!__pyx_t_10)) __PYX_ERR(2, 154, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_Raise(__pyx_t_10, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __PYX_ERR(2, 154, __pyx_L1_error)

      /* "View.MemoryView":153
 * 
 *         for idx, dim in enumerate(shape):
 *             if dim <= 0:             # <<<<<<<<<<<<<<
 *                 raise ValueError("Invalid shape in axis %d: %d." % (idx, dim))
 *             self._shape[idx] = dim
 */
    }

    /* "View.MemoryView":155
 *             if dim <= 0:
 *                 raise ValueError("Invalid shape in axis %d: %d." % (idx, dim))
 *             self._shape[idx] = dim             # <<<<<<<<<<<<<<
 * 
 *         cdef char order
 */
    (__pyx_v_self->_shape[__pyx_v_idx]) = __pyx_v_dim;

    /* "View.MemoryView":152
 * 
 * 
 *         for idx, dim in enumerate(shape):             # <<<<<<<<<<<<<<
 *             if dim <= 0:
 *                 raise ValueError("Invalid shape in axis %d: %d." % (idx, dim))
 */
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "View.MemoryView":158
 * 
 *         cdef char order
 *         if mode == 'fortran':             # <<<<<<<<<<<<<<
 *             order = b'F'
 *             self.mode = u'fortran'
 */
  __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_v_mode, __pyx_n_s_fortran, Py_EQ)); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(2, 158, __pyx_L1_error)
  if (__pyx_t_4) {

    /* "View.MemoryView":159
 *         cdef char order
 *         if mode == 'fortran':
 *             order = b'F'             # <<<<<<<<<<<<<<
 *             self.mode = u'fortran'
 *         elif mode == 'c':
 */
    __pyx_v_order = 'F';

    /* "View.MemoryView":160
 *         if mode == 'fortran':
 *             order = b'F'
 *             self.mode = u'fortran'             # <<<<<<<<<<<<<<
 *         elif mode == 'c':
 *             order = b'C'
 */
    __Pyx_INCREF(__pyx_n_u_fortran);
    __Pyx_GIVEREF(__pyx_n_u_fortran);
    __Pyx_GOTREF(__pyx_v_self->mode);
    __Pyx_DECREF(__pyx_v_self->mode);
    __pyx_v_self->mode = __pyx_n_u_fortran;

    /* "View.MemoryView":158
 * 
 *         cdef char order
 *         if mode == 'fortran':             # <<<<<<<<<<<<<<
 *             order = b'F'
 *             self.mode = u'fortran'
 */
    goto __pyx_L10;
  }

  /* "View.MemoryView":161
 *             order = b'F'
 *             self.mode = u'fortran'
 *         elif mode == 'c':             # <<<<<<<<<<<<<<
 *             order = b'C'
 *             self.mode = u'c'
 */
  __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_v_mode, __pyx_n_s_c, Py_EQ)); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(2, 161, __pyx_L1_error)
  if (likely(__pyx_t_4)) {

    /* "View.MemoryView":162
 *             self.mode = u'fortran'
 *         elif mode == 'c':
 *             order = b'C'             # <<<<<<<<<<<<<<
 *             self.mode = u'c'
 *         else:
 */
    __pyx_v_order = 'C';

    /* "View.MemoryView":163
 *         elif mode == 'c':
 *             order = b'C'
 *             self.mode = u'c'             # <<<<<<<<<<<<<<
 *         else:
 *             raise ValueError("Invalid mode, expected 'c' or 'fortran', got %s" % mode)
 */
    __Pyx_INCREF(__pyx_n_u_c);
    __Pyx_GIVEREF(__pyx_n_u_c);
    __Pyx_GOTREF(__pyx_v_self->mode);
    __Pyx_DECREF(__pyx_v_self->mode);
    __pyx_v_self->mode = __pyx_n_u_c;

    /* "View.MemoryView":161
 *             order = b'F'
 *             self.mode = u'fortran'
 *         elif mode == 'c':             # <<<<<<<<<<<<<<
 *             order = b'C'
 *             self.mode = u'c'
 */
    goto __pyx_L10;
  }

  /* "View.MemoryView":165
 *             self.mode = u'c'
 *         else:
 *             raise ValueError("Invalid mode, expected 'c' or 'fortran', got %s" % mode)             # <<<<<<<<<<<<<<
 * 
 *         self.len = fill_contig_strides_array(self._shape, self._strides,
 */
  /*else*/ {
    __pyx_t_3 = __Pyx_PyString_FormatSafe(__pyx_kp_s_Invalid_mode_expected_c_or_fortr, __pyx_v_mode); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 165, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_10 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_3); if (unlikely(!__pyx_t_10)) __PYX_ERR(2, 165, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_Raise(__pyx_t_10, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __PYX_ERR(2, 165, __pyx_L1_error)
  }
  __pyx_L10:;

  /* "View.MemoryView":167
 *             raise ValueError("Invalid mode, expected 'c' or 'fortran', got %s" % mode)
 * 
 *         self.len = fill_contig_strides_array(self._shape, self._strides,             # <<<<<<<<<<<<<<
 *                                              itemsize, self.ndim, order)
 * 
 */
  __pyx_v_self->len = __pyx_fill_contig_strides_array(__pyx_v_self->_shape, __pyx_v_self->_strides, __pyx_v_itemsize, __pyx_v_self->ndim, __pyx_v_order);

  /* "View.MemoryView":170
 *                                              itemsize, self.ndim, order)
 * 
 *         self.free_data = allocate_buffer             # <<<<<<<<<<<<<<
 *         self.dtype_is_object = format == b'O'
 *         if allocate_buffer:
 */
  __pyx_v_self->free_data = __pyx_v_allocate_buffer;

  /* "View.MemoryView":171
 * 
 *         self.free_data = allocate_buffer
 *         self.dtype_is_object = format == b'O'             # <<<<<<<<<<<<<<
 *         if allocate_buffer:
 * 
 */
  __pyx_t_10 = PyObject_RichCompare(__pyx_v_format, __pyx_n_b_O, Py_EQ); __Pyx_XGOTREF(__pyx_t_10); if (unlikely(!__pyx_t_10)) __PYX_ERR(2, 171, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_10); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 171, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __pyx_v_self->dtype_is_object = __pyx_t_4;

  /* "View.MemoryView":172
 *         self.free_data = allocate_buffer
 *         self.dtype_is_object = format == b'O'
 *         if allocate_buffer:             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_4 = (__pyx_v_allocate_buffer != 0);
  if (__pyx_t_4) {

    /* "View.MemoryView":175
 * 
 * 
 *             self.data = <char *>malloc(self.len)             # <<<<<<<<<<<<<<
 *             if not self.data:
 *                 raise MemoryError("unable to allocate array data.")
 */
    __pyx_v_self->data = ((char *)malloc(__pyx_v_self->len));

    /* "View.MemoryView":176
 * 
 *             self.data = <char *>malloc(self.len)
 *             if not self.data:             # <<<<<<<<<<<<<<
 *                 raise MemoryError("unable to allocate array data.")
 * 
 */
    __pyx_t_4 = ((!(__pyx_v_self->data != 0)) != 0);
    if (unlikely(__pyx_t_4)) {

      /* "View.MemoryView":177
 *             self.data = <char *>malloc(self.len)
 *             if not self.data:
 *                 raise MemoryError("unable to allocate array data.")             # <<<<<<<<<<<<<<
 * 
 *             if self.dtype_is_object:
 */
      __pyx_t_10 = __Pyx_PyObject_Call(__pyx_builtin_MemoryError, __pyx_tuple__6, NULL); if (unlikely(!__pyx_t_10)) __PYX_ERR(2, 177, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_Raise(__pyx_t_10, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __PYX_ERR(2, 177, __pyx_L1_error)

      /* "View.MemoryView":176
 * 
 *             self.data = <char *>malloc(self.len)
 *             if not self.data:             # <<<<<<<<<<<<<<
 *                 raise MemoryError("unable to allocate array data.")
 * 
 */
    }

    /* "View.MemoryView":179
 *                 raise MemoryError("unable to allocate array data.")
 * 
 *             if self.dtype_is_object:             # <<<<<<<<<<<<<<
 *                 p = <PyObject **> self.data
 *                 for i in range(self.len / itemsize):
 */
    __pyx_t_4 = (__pyx_v_self->dtype_is_object != 0);
    if (__pyx_t_4) {

      /* "View.MemoryView":180
 * 
 *             if self.dtype_is_object:
 *                 p = <PyObject **> self.data             # <<<<<<<<<<<<<<
 *                 for i in range(self.len / itemsize):
 *                     p[i] = Py_None
 */
      __pyx_v_p = ((PyObject **)__pyx_v_self->data);

      /* "View.MemoryView":181
 *             if self.dtype_is_object:
 *                 p = <PyObject **> self.data
 *                 for i in range(self.len / itemsize):             # <<<<<<<<<<<<<<
 *                     p[i] = Py_None
 *                     Py_INCREF(Py_None)
 */
      if (unlikely(__pyx_v_itemsize == 0)) {
        PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
        __PYX_ERR(2, 181, __pyx_L1_error)
      }
      else if (sizeof(Py_ssize_t) == sizeof(long) && (!(((Py_ssize_t)-1) > 0)) && unlikely(__pyx_v_itemsize == (Py_ssize_t)-1)  && unlikely(UNARY_NEG_WOULD_OVERFLOW(__pyx_v_self->len))) {
        PyErr_SetString(PyExc_OverflowError, "value too large to perform division");
        __PYX_ERR(2, 181, __pyx_L1_error)
      }
      __pyx_t_1 = (__pyx_v_self->len / __pyx_v_itemsize);
      __pyx_t_9 = __pyx_t_1;
      for (__pyx_t_11 = 0; __pyx_t_11 < __pyx_t_9; __pyx_t_11+=1) {
        __pyx_v_i = __pyx_t_11;

        /* "View.MemoryView":182
 *                 p = <PyObject **> self.data
 *                 for i in range(self.len / itemsize):
 *                     p[i] = Py_None             # <<<<<<<<<<<<<<
 *                     Py_INCREF(Py_None)
 * 
 */
        (__pyx_v_p[__pyx_v_i]) = Py_None;

        /* "View.MemoryView":183
 *                 for i in range(self.len / itemsize):
 *                     p[i] = Py_None
 *                     Py_INCREF(Py_None)             # <<<<<<<<<<<<<<
 * 
 *     @cname('getbuffer')
 */
        Py_INCREF(Py_None);
      }

      /* "View.MemoryView":179
 *                 raise MemoryError("unable to allocate array data.")
 * 
 *             if self.dtype_is_object:             # <<<<<<<<<<<<<<
 *                 p = <PyObject **> self.data
 *                 for i in range(self.len / itemsize):
 */
    }

    /* "View.MemoryView":172
 *         self.free_data = allocate_buffer
 *         self.dtype_is_object = format == b'O'
 *         if allocate_buffer:             # <<<<<<<<<<<<<<
 * 
 * 
 */
  }

  /* "View.MemoryView":123
 *         cdef bint dtype_is_object
 * 
 *     def __cinit__(array self, tuple shape, Py_ssize_t itemsize, format not None,             # <<<<<<<<<<<<<<
 *                   mode="c", bint allocate_buffer=True):
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("View.MemoryView.array.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_format);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":186
 * 
 *     @cname('getbuffer')
 *     def __getbuffer__(self, Py_buffer *info, int flags):             # <<<<<<<<<<<<<<
 *         cdef int bufmode = -1
 *         if self.mode == u"c":
 */

/* Python wrapper */
static CYTHON_UNUSED int __pyx_array_getbuffer(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /*proto*/
static CYTHON_UNUSED int __pyx_array_getbuffer(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getbuffer__ (wrapper)", 0);
  __pyx_r = __pyx_array___pyx_pf_15View_dot_MemoryView_5array_2__getbuffer__(((struct __pyx_array_obj *)__pyx_v_self), ((Py_buffer *)__pyx_v_info), ((int)__pyx_v_flags));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_array___pyx_pf_15View_dot_MemoryView_5array_2__getbuffer__(struct __pyx_array_obj *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {
  int __pyx_v_bufmode;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  char *__pyx_t_4;
  Py_ssize_t __pyx_t_5;
  int __pyx_t_6;
  Py_ssize_t *__pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  if (__pyx_v_info == NULL) {
    PyErr_SetString(PyExc_BufferError, "PyObject_GetBuffer: view==NULL argument is obsolete");
    return -1;
  }
  __Pyx_RefNannySetupContext("__getbuffer__", 0);
  __pyx_v_info->obj = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(__pyx_v_info->obj);

  /* "View.MemoryView":187
 *     @cname('getbuffer')
 *     def __getbuffer__(self, Py_buffer *info, int flags):
 *         cdef int bufmode = -1             # <<<<<<<<<<<<<<
 *         if self.mode == u"c":
 *             bufmode = PyBUF_C_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 */
  __pyx_v_bufmode = -1;

  /* "View.MemoryView":188
 *     def __getbuffer__(self, Py_buffer *info, int flags):
 *         cdef int bufmode = -1
 *         if self.mode == u"c":             # <<<<<<<<<<<<<<
 *             bufmode = PyBUF_C_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         elif self.mode == u"fortran":
 */
  __pyx_t_1 = (__Pyx_PyUnicode_Equals(__pyx_v_self->mode, __pyx_n_u_c, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(2, 188, __pyx_L1_error)
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":189
 *         cdef int bufmode = -1
 *         if self.mode == u"c":
 *             bufmode = PyBUF_C_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS             # <<<<<<<<<<<<<<
 *         elif self.mode == u"fortran":
 *             bufmode = PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 */
    __pyx_v_bufmode = (PyBUF_C_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS);

    /* "View.MemoryView":188
 *     def __getbuffer__(self, Py_buffer *info, int flags):
 *         cdef int bufmode = -1
 *         if self.mode == u"c":             # <<<<<<<<<<<<<<
 *             bufmode = PyBUF_C_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         elif self.mode == u"fortran":
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":190
 *         if self.mode == u"c":
 *             bufmode = PyBUF_C_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         elif self.mode == u"fortran":             # <<<<<<<<<<<<<<
 *             bufmode = PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         if not (flags & bufmode):
 */
  __pyx_t_2 = (__Pyx_PyUnicode_Equals(__pyx_v_self->mode, __pyx_n_u_fortran, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(2, 190, __pyx_L1_error)
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":191
 *             bufmode = PyBUF_C_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         elif self.mode == u"fortran":
 *             bufmode = PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS             # <<<<<<<<<<<<<<
 *         if not (flags & bufmode):
 *             raise ValueError("Can only create a buffer that is contiguous in memory.")
 */
    __pyx_v_bufmode = (PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS);

    /* "View.MemoryView":190
 *         if self.mode == u"c":
 *             bufmode = PyBUF_C_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         elif self.mode == u"fortran":             # <<<<<<<<<<<<<<
 *             bufmode = PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         if not (flags & bufmode):
 */
  }
  __pyx_L3:;

  /* "View.MemoryView":192
 *         elif self.mode == u"fortran":
 *             bufmode = PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         if not (flags & bufmode):             # <<<<<<<<<<<<<<
 *             raise ValueError("Can only create a buffer that is contiguous in memory.")
 *         info.buf = self.data
 */
  __pyx_t_1 = ((!((__pyx_v_flags & __pyx_v_bufmode) != 0)) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "View.MemoryView":193
 *             bufmode = PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         if not (flags & bufmode):
 *             raise ValueError("Can only create a buffer that is contiguous in memory.")             # <<<<<<<<<<<<<<
 *         info.buf = self.data
 *         info.len = self.len
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__7, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 193, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(2, 193, __pyx_L1_error)

    /* "View.MemoryView":192
 *         elif self.mode == u"fortran":
 *             bufmode = PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         if not (flags & bufmode):             # <<<<<<<<<<<<<<
 *             raise ValueError("Can only create a buffer that is contiguous in memory.")
 *         info.buf = self.data
 */
  }

  /* "View.MemoryView":194
 *         if not (flags & bufmode):
 *             raise ValueError("Can only create a buffer that is contiguous in memory.")
 *         info.buf = self.data             # <<<<<<<<<<<<<<
 *         info.len = self.len
 *         info.ndim = self.ndim
 */
  __pyx_t_4 = __pyx_v_self->data;
  __pyx_v_info->buf = __pyx_t_4;

  /* "View.MemoryView":195
 *             raise ValueError("Can only create a buffer that is contiguous in memory.")
 *         info.buf = self.data
 *         info.len = self.len             # <<<<<<<<<<<<<<
 *         info.ndim = self.ndim
 *         info.shape = self._shape
 */
  __pyx_t_5 = __pyx_v_self->len;
  __pyx_v_info->len = __pyx_t_5;

  /* "View.MemoryView":196
 *         info.buf = self.data
 *         info.len = self.len
 *         info.ndim = self.ndim             # <<<<<<<<<<<<<<
 *         info.shape = self._shape
 *         info.strides = self._strides
 */
  __pyx_t_6 = __pyx_v_self->ndim;
  __pyx_v_info->ndim = __pyx_t_6;

  /* "View.MemoryView":197
 *         info.len = self.len
 *         info.ndim = self.ndim
 *         info.shape = self._shape             # <<<<<<<<<<<<<<
 *         info.strides = self._strides
 *         info.suboffsets = NULL
 */
  __pyx_t_7 = __pyx_v_self->_shape;
  __pyx_v_info->shape = __pyx_t_7;

  /* "View.MemoryView":198
 *         info.ndim = self.ndim
 *         info.shape = self._shape
 *         info.strides = self._strides             # <<<<<<<<<<<<<<
 *         info.suboffsets = NULL
 *         info.itemsize = self.itemsize
 */
  __pyx_t_7 = __pyx_v_self->_strides;
  __pyx_v_info->strides = __pyx_t_7;

  /* "View.MemoryView":199
 *         info.shape = self._shape
 *         info.strides = self._strides
 *         info.suboffsets = NULL             # <<<<<<<<<<<<<<
 *         info.itemsize = self.itemsize
 *         info.readonly = 0
 */
  __pyx_v_info->suboffsets = NULL;

  /* "View.MemoryView":200
 *         info.strides = self._strides
 *         info.suboffsets = NULL
 *         info.itemsize = self.itemsize             # <<<<<<<<<<<<<<
 *         info.readonly = 0
 * 
 */
  __pyx_t_5 = __pyx_v_self->itemsize;
  __pyx_v_info->itemsize = __pyx_t_5;

  /* "View.MemoryView":201
 *         info.suboffsets = NULL
 *         info.itemsize = self.itemsize
 *         info.readonly = 0             # <<<<<<<<<<<<<<
 * 
 *         if flags & PyBUF_FORMAT:
 */
  __pyx_v_info->readonly = 0;

  /* "View.MemoryView":203
 *         info.readonly = 0
 * 
 *         if flags & PyBUF_FORMAT:             # <<<<<<<<<<<<<<
 *             info.format = self.format
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_flags & PyBUF_FORMAT) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":204
 * 
 *         if flags & PyBUF_FORMAT:
 *             info.format = self.format             # <<<<<<<<<<<<<<
 *         else:
 *             info.format = NULL
 */
    __pyx_t_4 = __pyx_v_self->format;
    __pyx_v_info->format = __pyx_t_4;

    /* "View.MemoryView":203
 *         info.readonly = 0
 * 
 *         if flags & PyBUF_FORMAT:             # <<<<<<<<<<<<<<
 *             info.format = self.format
 *         else:
 */
    goto __pyx_L5;
  }

  /* "View.MemoryView":206
 *             info.format = self.format
 *         else:
 *             info.format = NULL             # <<<<<<<<<<<<<<
 * 
 *         info.obj = self
 */
  /*else*/ {
    __pyx_v_info->format = NULL;
  }
  __pyx_L5:;

  /* "View.MemoryView":208
 *             info.format = NULL
 * 
 *         info.obj = self             # <<<<<<<<<<<<<<
 * 
 *     __pyx_getbuffer = capsule(<void *> &__pyx_array_getbuffer, "getbuffer(obj, view, flags)")
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  __Pyx_GOTREF(__pyx_v_info->obj);
  __Pyx_DECREF(__pyx_v_info->obj);
  __pyx_v_info->obj = ((PyObject *)__pyx_v_self);

  /* "View.MemoryView":186
 * 
 *     @cname('getbuffer')
 *     def __getbuffer__(self, Py_buffer *info, int flags):             # <<<<<<<<<<<<<<
 *         cdef int bufmode = -1
 *         if self.mode == u"c":
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.array.__getbuffer__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  if (__pyx_v_info->obj != NULL) {
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj); __pyx_v_info->obj = 0;
  }
  goto __pyx_L2;
  __pyx_L0:;
  if (__pyx_v_info->obj == Py_None) {
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj); __pyx_v_info->obj = 0;
  }
  __pyx_L2:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":212
 *     __pyx_getbuffer = capsule(<void *> &__pyx_array_getbuffer, "getbuffer(obj, view, flags)")
 * 
 *     def __dealloc__(array self):             # <<<<<<<<<<<<<<
 *         if self.callback_free_data != NULL:
 *             self.callback_free_data(self.data)
 */

/* Python wrapper */
static void __pyx_array___dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_array___dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_array___pyx_pf_15View_dot_MemoryView_5array_4__dealloc__(((struct __pyx_array_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_array___pyx_pf_15View_dot_MemoryView_5array_4__dealloc__(struct __pyx_array_obj *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "View.MemoryView":213
 * 
 *     def __dealloc__(array self):
 *         if self.callback_free_data != NULL:             # <<<<<<<<<<<<<<
 *             self.callback_free_data(self.data)
 *         elif self.free_data:
 */
  __pyx_t_1 = ((__pyx_v_self->callback_free_data != NULL) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":214
 *     def __dealloc__(array self):
 *         if self.callback_free_data != NULL:
 *             self.callback_free_data(self.data)             # <<<<<<<<<<<<<<
 *         elif self.free_data:
 *             if self.dtype_is_object:
 */
    __pyx_v_self->callback_free_data(__pyx_v_self->data);

    /* "View.MemoryView":213
 * 
 *     def __dealloc__(array self):
 *         if self.callback_free_data != NULL:             # <<<<<<<<<<<<<<
 *             self.callback_free_data(self.data)
 *         elif self.free_data:
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":215
 *         if self.callback_free_data != NULL:
 *             self.callback_free_data(self.data)
 *         elif self.free_data:             # <<<<<<<<<<<<<<
 *             if self.dtype_is_object:
 *                 refcount_objects_in_slice(self.data, self._shape,
 */
  __pyx_t_1 = (__pyx_v_self->free_data != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":216
 *             self.callback_free_data(self.data)
 *         elif self.free_data:
 *             if self.dtype_is_object:             # <<<<<<<<<<<<<<
 *                 refcount_objects_in_slice(self.data, self._shape,
 *                                           self._strides, self.ndim, False)
 */
    __pyx_t_1 = (__pyx_v_self->dtype_is_object != 0);
    if (__pyx_t_1) {

      /* "View.MemoryView":217
 *         elif self.free_data:
 *             if self.dtype_is_object:
 *                 refcount_objects_in_slice(self.data, self._shape,             # <<<<<<<<<<<<<<
 *                                           self._strides, self.ndim, False)
 *             free(self.data)
 */
      __pyx_memoryview_refcount_objects_in_slice(__pyx_v_self->data, __pyx_v_self->_shape, __pyx_v_self->_strides, __pyx_v_self->ndim, 0);

      /* "View.MemoryView":216
 *             self.callback_free_data(self.data)
 *         elif self.free_data:
 *             if self.dtype_is_object:             # <<<<<<<<<<<<<<
 *                 refcount_objects_in_slice(self.data, self._shape,
 *                                           self._strides, self.ndim, False)
 */
    }

    /* "View.MemoryView":219
 *                 refcount_objects_in_slice(self.data, self._shape,
 *                                           self._strides, self.ndim, False)
 *             free(self.data)             # <<<<<<<<<<<<<<
 *         PyObject_Free(self._shape)
 * 
 */
    free(__pyx_v_self->data);

    /* "View.MemoryView":215
 *         if self.callback_free_data != NULL:
 *             self.callback_free_data(self.data)
 *         elif self.free_data:             # <<<<<<<<<<<<<<
 *             if self.dtype_is_object:
 *                 refcount_objects_in_slice(self.data, self._shape,
 */
  }
  __pyx_L3:;

  /* "View.MemoryView":220
 *                                           self._strides, self.ndim, False)
 *             free(self.data)
 *         PyObject_Free(self._shape)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  PyObject_Free(__pyx_v_self->_shape);

  /* "View.MemoryView":212
 *     __pyx_getbuffer = capsule(<void *> &__pyx_array_getbuffer, "getbuffer(obj, view, flags)")
 * 
 *     def __dealloc__(array self):             # <<<<<<<<<<<<<<
 *         if self.callback_free_data != NULL:
 *             self.callback_free_data(self.data)
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "View.MemoryView":223
 * 
 *     @property
 *     def memview(self):             # <<<<<<<<<<<<<<
 *         return self.get_memview()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_5array_7memview_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_5array_7memview_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_5array_7memview___get__(((struct __pyx_array_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_5array_7memview___get__(struct __pyx_array_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":224
 *     @property
 *     def memview(self):
 *         return self.get_memview()             # <<<<<<<<<<<<<<
 * 
 *     @cname('get_memview')
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_array *)__pyx_v_self->__pyx_vtab)->get_memview(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 224, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":223
 * 
 *     @property
 *     def memview(self):             # <<<<<<<<<<<<<<
 *         return self.get_memview()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.array.memview.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":227
 * 
 *     @cname('get_memview')
 *     cdef get_memview(self):             # <<<<<<<<<<<<<<
 *         flags =  PyBUF_ANY_CONTIGUOUS|PyBUF_FORMAT|PyBUF_WRITABLE
 *         return  memoryview(self, flags, self.dtype_is_object)
 */

static PyObject *__pyx_array_get_memview(struct __pyx_array_obj *__pyx_v_self) {
  int __pyx_v_flags;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_memview", 0);

  /* "View.MemoryView":228
 *     @cname('get_memview')
 *     cdef get_memview(self):
 *         flags =  PyBUF_ANY_CONTIGUOUS|PyBUF_FORMAT|PyBUF_WRITABLE             # <<<<<<<<<<<<<<
 *         return  memoryview(self, flags, self.dtype_is_object)
 * 
 */
  __pyx_v_flags = ((PyBUF_ANY_CONTIGUOUS | PyBUF_FORMAT) | PyBUF_WRITABLE);

  /* "View.MemoryView":229
 *     cdef get_memview(self):
 *         flags =  PyBUF_ANY_CONTIGUOUS|PyBUF_FORMAT|PyBUF_WRITABLE
 *         return  memoryview(self, flags, self.dtype_is_object)             # <<<<<<<<<<<<<<
 * 
 *     def __len__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_flags); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 229, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_self->dtype_is_object); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 229, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 229, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_memoryview_type), __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 229, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":227
 * 
 *     @cname('get_memview')
 *     cdef get_memview(self):             # <<<<<<<<<<<<<<
 *         flags =  PyBUF_ANY_CONTIGUOUS|PyBUF_FORMAT|PyBUF_WRITABLE
 *         return  memoryview(self, flags, self.dtype_is_object)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.array.get_memview", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":231
 *         return  memoryview(self, flags, self.dtype_is_object)
 * 
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         return self._shape[0]
 * 
 */

/* Python wrapper */
static Py_ssize_t __pyx_array___len__(PyObject *__pyx_v_self); /*proto*/
static Py_ssize_t __pyx_array___len__(PyObject *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__ (wrapper)", 0);
  __pyx_r = __pyx_array___pyx_pf_15View_dot_MemoryView_5array_6__len__(((struct __pyx_array_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static Py_ssize_t __pyx_array___pyx_pf_15View_dot_MemoryView_5array_6__len__(struct __pyx_array_obj *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__", 0);

  /* "View.MemoryView":232
 * 
 *     def __len__(self):
 *         return self._shape[0]             # <<<<<<<<<<<<<<
 * 
 *     def __getattr__(self, attr):
 */
  __pyx_r = (__pyx_v_self->_shape[0]);
  goto __pyx_L0;

  /* "View.MemoryView":231
 *         return  memoryview(self, flags, self.dtype_is_object)
 * 
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         return self._shape[0]
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":234
 *         return self._shape[0]
 * 
 *     def __getattr__(self, attr):             # <<<<<<<<<<<<<<
 *         return getattr(self.memview, attr)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_array___getattr__(PyObject *__pyx_v_self, PyObject *__pyx_v_attr); /*proto*/
static PyObject *__pyx_array___getattr__(PyObject *__pyx_v_self, PyObject *__pyx_v_attr) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getattr__ (wrapper)", 0);
  __pyx_r = __pyx_array___pyx_pf_15View_dot_MemoryView_5array_8__getattr__(((struct __pyx_array_obj *)__pyx_v_self), ((PyObject *)__pyx_v_attr));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_array___pyx_pf_15View_dot_MemoryView_5array_8__getattr__(struct __pyx_array_obj *__pyx_v_self, PyObject *__pyx_v_attr) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getattr__", 0);

  /* "View.MemoryView":235
 * 
 *     def __getattr__(self, attr):
 *         return getattr(self.memview, attr)             # <<<<<<<<<<<<<<
 * 
 *     def __getitem__(self, item):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_memview); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 235, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_GetAttr(__pyx_t_1, __pyx_v_attr); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 235, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":234
 *         return self._shape[0]
 * 
 *     def __getattr__(self, attr):             # <<<<<<<<<<<<<<
 *         return getattr(self.memview, attr)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("View.MemoryView.array.__getattr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":237
 *         return getattr(self.memview, attr)
 * 
 *     def __getitem__(self, item):             # <<<<<<<<<<<<<<
 *         return self.memview[item]
 * 
 */

/* Python wrapper */
static PyObject *__pyx_array___getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_item); /*proto*/
static PyObject *__pyx_array___getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_item) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  __pyx_r = __pyx_array___pyx_pf_15View_dot_MemoryView_5array_10__getitem__(((struct __pyx_array_obj *)__pyx_v_self), ((PyObject *)__pyx_v_item));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_array___pyx_pf_15View_dot_MemoryView_5array_10__getitem__(struct __pyx_array_obj *__pyx_v_self, PyObject *__pyx_v_item) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getitem__", 0);

  /* "View.MemoryView":238
 * 
 *     def __getitem__(self, item):
 *         return self.memview[item]             # <<<<<<<<<<<<<<
 * 
 *     def __setitem__(self, item, value):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_memview); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 238, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetItem(__pyx_t_1, __pyx_v_item); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 238, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":237
 *         return getattr(self.memview, attr)
 * 
 *     def __getitem__(self, item):             # <<<<<<<<<<<<<<
 *         return self.memview[item]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("View.MemoryView.array.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":240
 *         return self.memview[item]
 * 
 *     def __setitem__(self, item, value):             # <<<<<<<<<<<<<<
 *         self.memview[item] = value
 * 
 */

/* Python wrapper */
static int __pyx_array___setitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_item, PyObject *__pyx_v_value); /*proto*/
static int __pyx_array___setitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_item, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setitem__ (wrapper)", 0);
  __pyx_r = __pyx_array___pyx_pf_15View_dot_MemoryView_5array_12__setitem__(((struct __pyx_array_obj *)__pyx_v_self), ((PyObject *)__pyx_v_item), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_array___pyx_pf_15View_dot_MemoryView_5array_12__setitem__(struct __pyx_array_obj *__pyx_v_self, PyObject *__pyx_v_item, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setitem__", 0);

  /* "View.MemoryView":241
 * 
 *     def __setitem__(self, item, value):
 *         self.memview[item] = value             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_memview); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 241, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(PyObject_SetItem(__pyx_t_1, __pyx_v_item, __pyx_v_value) < 0)) __PYX_ERR(2, 241, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "View.MemoryView":240
 *         return self.memview[item]
 * 
 *     def __setitem__(self, item, value):             # <<<<<<<<<<<<<<
 *         self.memview[item] = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.array.__setitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw___pyx_array_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw___pyx_array_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf___pyx_array___reduce_cython__(((struct __pyx_array_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf___pyx_array___reduce_cython__(CYTHON_UNUSED struct __pyx_array_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__8, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.array.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw___pyx_array_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw___pyx_array_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf___pyx_array_2__setstate_cython__(((struct __pyx_array_obj *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf___pyx_array_2__setstate_cython__(CYTHON_UNUSED struct __pyx_array_obj *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__9, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.array.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":245
 * 
 * @cname("__pyx_array_new")
 * cdef array array_cwrapper(tuple shape, Py_ssize_t itemsize, char *format,             # <<<<<<<<<<<<<<
 *                           char *mode, char *buf):
 *     cdef array result
 */

static struct __pyx_array_obj *__pyx_array_new(PyObject *__pyx_v_shape, Py_ssize_t __pyx_v_itemsize, char *__pyx_v_format, char *__pyx_v_mode, char *__pyx_v_buf) {
  struct __pyx_array_obj *__pyx_v_result = 0;
  struct __pyx_array_obj *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("array_cwrapper", 0);

  /* "View.MemoryView":249
 *     cdef array result
 * 
 *     if buf == NULL:             # <<<<<<<<<<<<<<
 *         result = array(shape, itemsize, format, mode.decode('ASCII'))
 *     else:
 */
  __pyx_t_1 = ((__pyx_v_buf == NULL) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":250
 * 
 *     if buf == NULL:
 *         result = array(shape, itemsize, format, mode.decode('ASCII'))             # <<<<<<<<<<<<<<
 *     else:
 *         result = array(shape, itemsize, format, mode.decode('ASCII'),
 */
    __pyx_t_2 = PyInt_FromSsize_t(__pyx_v_itemsize); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 250, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyBytes_FromString(__pyx_v_format); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 250, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_decode_c_string(__pyx_v_mode, 0, strlen(__pyx_v_mode), NULL, NULL, PyUnicode_DecodeASCII); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 250, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PyTuple_New(4); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 250, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_INCREF(__pyx_v_shape);
    __Pyx_GIVEREF(__pyx_v_shape);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_v_shape);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_5, 3, __pyx_t_4);
    __pyx_t_2 = 0;
    __pyx_t_3 = 0;
    __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_Call(((PyObject *)__pyx_array_type), __pyx_t_5, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 250, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_v_result = ((struct __pyx_array_obj *)__pyx_t_4);
    __pyx_t_4 = 0;

    /* "View.MemoryView":249
 *     cdef array result
 * 
 *     if buf == NULL:             # <<<<<<<<<<<<<<
 *         result = array(shape, itemsize, format, mode.decode('ASCII'))
 *     else:
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":252
 *         result = array(shape, itemsize, format, mode.decode('ASCII'))
 *     else:
 *         result = array(shape, itemsize, format, mode.decode('ASCII'),             # <<<<<<<<<<<<<<
 *                        allocate_buffer=False)
 *         result.data = buf
 */
  /*else*/ {
    __pyx_t_4 = PyInt_FromSsize_t(__pyx_v_itemsize); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 252, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyBytes_FromString(__pyx_v_format); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 252, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_3 = __Pyx_decode_c_string(__pyx_v_mode, 0, strlen(__pyx_v_mode), NULL, NULL, PyUnicode_DecodeASCII); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 252, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = PyTuple_New(4); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 252, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_v_shape);
    __Pyx_GIVEREF(__pyx_v_shape);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_shape);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_2, 3, __pyx_t_3);
    __pyx_t_4 = 0;
    __pyx_t_5 = 0;
    __pyx_t_3 = 0;

    /* "View.MemoryView":253
 *     else:
 *         result = array(shape, itemsize, format, mode.decode('ASCII'),
 *                        allocate_buffer=False)             # <<<<<<<<<<<<<<
 *         result.data = buf
 * 
 */
    __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 253, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_allocate_buffer, Py_False) < 0) __PYX_ERR(2, 253, __pyx_L1_error)

    /* "View.MemoryView":252
 *         result = array(shape, itemsize, format, mode.decode('ASCII'))
 *     else:
 *         result = array(shape, itemsize, format, mode.decode('ASCII'),             # <<<<<<<<<<<<<<
 *                        allocate_buffer=False)
 *         result.data = buf
 */
    __pyx_t_5 = __Pyx_PyObject_Call(((PyObject *)__pyx_array_type), __pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 252, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_result = ((struct __pyx_array_obj *)__pyx_t_5);
    __pyx_t_5 = 0;

    /* "View.MemoryView":254
 *         result = array(shape, itemsize, format, mode.decode('ASCII'),
 *                        allocate_buffer=False)
 *         result.data = buf             # <<<<<<<<<<<<<<
 * 
 *     return result
 */
    __pyx_v_result->data = __pyx_v_buf;
  }
  __pyx_L3:;

  /* "View.MemoryView":256
 *         result.data = buf
 * 
 *     return result             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = __pyx_v_result;
  goto __pyx_L0;

  /* "View.MemoryView":245
 * 
 * @cname("__pyx_array_new")
 * cdef array array_cwrapper(tuple shape, Py_ssize_t itemsize, char *format,             # <<<<<<<<<<<<<<
 *                           char *mode, char *buf):
 *     cdef array result
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("View.MemoryView.array_cwrapper", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":282
 * cdef class Enum(object):
 *     cdef object name
 *     def __init__(self, name):             # <<<<<<<<<<<<<<
 *         self.name = name
 *     def __repr__(self):
 */

/* Python wrapper */
static int __pyx_MemviewEnum___init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_MemviewEnum___init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_name = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_name,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_name)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(2, 282, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_name = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(2, 282, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("View.MemoryView.Enum.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_MemviewEnum___pyx_pf_15View_dot_MemoryView_4Enum___init__(((struct __pyx_MemviewEnum_obj *)__pyx_v_self), __pyx_v_name);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_MemviewEnum___pyx_pf_15View_dot_MemoryView_4Enum___init__(struct __pyx_MemviewEnum_obj *__pyx_v_self, PyObject *__pyx_v_name) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "View.MemoryView":283
 *     cdef object name
 *     def __init__(self, name):
 *         self.name = name             # <<<<<<<<<<<<<<
 *     def __repr__(self):
 *         return self.name
 */
  __Pyx_INCREF(__pyx_v_name);
  __Pyx_GIVEREF(__pyx_v_name);
  __Pyx_GOTREF(__pyx_v_self->name);
  __Pyx_DECREF(__pyx_v_self->name);
  __pyx_v_self->name = __pyx_v_name;

  /* "View.MemoryView":282
 * cdef class Enum(object):
 *     cdef object name
 *     def __init__(self, name):             # <<<<<<<<<<<<<<
 *         self.name = name
 *     def __repr__(self):
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":284
 *     def __init__(self, name):
 *         self.name = name
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return self.name
 * 
 */

/* Python wrapper */
static PyObject *__pyx_MemviewEnum___repr__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_MemviewEnum___repr__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_r = __pyx_MemviewEnum___pyx_pf_15View_dot_MemoryView_4Enum_2__repr__(((struct __pyx_MemviewEnum_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_MemviewEnum___pyx_pf_15View_dot_MemoryView_4Enum_2__repr__(struct __pyx_MemviewEnum_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__", 0);

  /* "View.MemoryView":285
 *         self.name = name
 *     def __repr__(self):
 *         return self.name             # <<<<<<<<<<<<<<
 * 
 * cdef generic = Enum("<strided and direct or indirect>")
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->name);
  __pyx_r = __pyx_v_self->name;
  goto __pyx_L0;

  /* "View.MemoryView":284
 *     def __init__(self, name):
 *         self.name = name
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return self.name
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

/* Python wrapper */
static PyObject *__pyx_pw___pyx_MemviewEnum_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw___pyx_MemviewEnum_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf___pyx_MemviewEnum___reduce_cython__(((struct __pyx_MemviewEnum_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf___pyx_MemviewEnum___reduce_cython__(struct __pyx_MemviewEnum_obj *__pyx_v_self) {
  PyObject *__pyx_v_state = 0;
  PyObject *__pyx_v__dict = 0;
  int __pyx_v_use_setstate;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":5
 *     cdef object _dict
 *     cdef bint use_setstate
 *     state = (self.name,)             # <<<<<<<<<<<<<<
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 */
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_self->name);
  __Pyx_GIVEREF(__pyx_v_self->name);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_self->name);
  __pyx_v_state = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "(tree fragment)":6
 *     cdef bint use_setstate
 *     state = (self.name,)
 *     _dict = getattr(self, '__dict__', None)             # <<<<<<<<<<<<<<
 *     if _dict is not None:
 *         state += (_dict,)
 */
  __pyx_t_1 = __Pyx_GetAttr3(((PyObject *)__pyx_v_self), __pyx_n_s_dict, Py_None); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v__dict = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "(tree fragment)":7
 *     state = (self.name,)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
  __pyx_t_2 = (__pyx_v__dict != Py_None);
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "(tree fragment)":8
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 *         state += (_dict,)             # <<<<<<<<<<<<<<
 *         use_setstate = True
 *     else:
 */
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_v__dict);
    __Pyx_GIVEREF(__pyx_v__dict);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v__dict);
    __pyx_t_4 = PyNumber_InPlaceAdd(__pyx_v_state, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF_SET(__pyx_v_state, ((PyObject*)__pyx_t_4));
    __pyx_t_4 = 0;

    /* "(tree fragment)":9
 *     if _dict is not None:
 *         state += (_dict,)
 *         use_setstate = True             # <<<<<<<<<<<<<<
 *     else:
 *         use_setstate = self.name is not None
 */
    __pyx_v_use_setstate = 1;

    /* "(tree fragment)":7
 *     state = (self.name,)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
    goto __pyx_L3;
  }

  /* "(tree fragment)":11
 *         use_setstate = True
 *     else:
 *         use_setstate = self.name is not None             # <<<<<<<<<<<<<<
 *     if use_setstate:
 *         return __pyx_unpickle_Enum, (type(self), 0xb068931, None), state
 */
  /*else*/ {
    __pyx_t_3 = (__pyx_v_self->name != Py_None);
    __pyx_v_use_setstate = __pyx_t_3;
  }
  __pyx_L3:;

  /* "(tree fragment)":12
 *     else:
 *         use_setstate = self.name is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_Enum, (type(self), 0xb068931, None), state
 *     else:
 */
  __pyx_t_3 = (__pyx_v_use_setstate != 0);
  if (__pyx_t_3) {

    /* "(tree fragment)":13
 *         use_setstate = self.name is not None
 *     if use_setstate:
 *         return __pyx_unpickle_Enum, (type(self), 0xb068931, None), state             # <<<<<<<<<<<<<<
 *     else:
 *         return __pyx_unpickle_Enum, (type(self), 0xb068931, state)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_pyx_unpickle_Enum); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_184977713);
    __Pyx_GIVEREF(__pyx_int_184977713);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_int_184977713);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    PyTuple_SET_ITEM(__pyx_t_1, 2, Py_None);
    __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_1);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_v_state);
    __pyx_t_4 = 0;
    __pyx_t_1 = 0;
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    goto __pyx_L0;

    /* "(tree fragment)":12
 *     else:
 *         use_setstate = self.name is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_Enum, (type(self), 0xb068931, None), state
 *     else:
 */
  }

  /* "(tree fragment)":15
 *         return __pyx_unpickle_Enum, (type(self), 0xb068931, None), state
 *     else:
 *         return __pyx_unpickle_Enum, (type(self), 0xb068931, state)             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_Enum__set_state(self, __pyx_state)
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_pyx_unpickle_Enum); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_184977713);
    __Pyx_GIVEREF(__pyx_int_184977713);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_int_184977713);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_v_state);
    __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_1);
    __pyx_t_5 = 0;
    __pyx_t_1 = 0;
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;
  }

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("View.MemoryView.Enum.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_state);
  __Pyx_XDECREF(__pyx_v__dict);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_Enum, (type(self), 0xb068931, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_Enum__set_state(self, __pyx_state)
 */

/* Python wrapper */
static PyObject *__pyx_pw___pyx_MemviewEnum_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw___pyx_MemviewEnum_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf___pyx_MemviewEnum_2__setstate_cython__(((struct __pyx_MemviewEnum_obj *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf___pyx_MemviewEnum_2__setstate_cython__(struct __pyx_MemviewEnum_obj *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":17
 *         return __pyx_unpickle_Enum, (type(self), 0xb068931, state)
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_Enum__set_state(self, __pyx_state)             # <<<<<<<<<<<<<<
 */
  if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||((void)PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(2, 17, __pyx_L1_error)
  __pyx_t_1 = __pyx_unpickle_Enum__set_state(__pyx_v_self, ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_Enum, (type(self), 0xb068931, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_Enum__set_state(self, __pyx_state)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.Enum.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":299
 * 
 * @cname('__pyx_align_pointer')
 * cdef void *align_pointer(void *memory, size_t alignment) nogil:             # <<<<<<<<<<<<<<
 *     "Align pointer memory on a given boundary"
 *     cdef Py_intptr_t aligned_p = <Py_intptr_t> memory
 */

static void *__pyx_align_pointer(void *__pyx_v_memory, size_t __pyx_v_alignment) {
  Py_intptr_t __pyx_v_aligned_p;
  size_t __pyx_v_offset;
  void *__pyx_r;
  int __pyx_t_1;

  /* "View.MemoryView":301
 * cdef void *align_pointer(void *memory, size_t alignment) nogil:
 *     "Align pointer memory on a given boundary"
 *     cdef Py_intptr_t aligned_p = <Py_intptr_t> memory             # <<<<<<<<<<<<<<
 *     cdef size_t offset
 * 
 */
  __pyx_v_aligned_p = ((Py_intptr_t)__pyx_v_memory);

  /* "View.MemoryView":305
 * 
 *     with cython.cdivision(True):
 *         offset = aligned_p % alignment             # <<<<<<<<<<<<<<
 * 
 *     if offset > 0:
 */
  __pyx_v_offset = (__pyx_v_aligned_p % __pyx_v_alignment);

  /* "View.MemoryView":307
 *         offset = aligned_p % alignment
 * 
 *     if offset > 0:             # <<<<<<<<<<<<<<
 *         aligned_p += alignment - offset
 * 
 */
  __pyx_t_1 = ((__pyx_v_offset > 0) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":308
 * 
 *     if offset > 0:
 *         aligned_p += alignment - offset             # <<<<<<<<<<<<<<
 * 
 *     return <void *> aligned_p
 */
    __pyx_v_aligned_p = (__pyx_v_aligned_p + (__pyx_v_alignment - __pyx_v_offset));

    /* "View.MemoryView":307
 *         offset = aligned_p % alignment
 * 
 *     if offset > 0:             # <<<<<<<<<<<<<<
 *         aligned_p += alignment - offset
 * 
 */
  }

  /* "View.MemoryView":310
 *         aligned_p += alignment - offset
 * 
 *     return <void *> aligned_p             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = ((void *)__pyx_v_aligned_p);
  goto __pyx_L0;

  /* "View.MemoryView":299
 * 
 * @cname('__pyx_align_pointer')
 * cdef void *align_pointer(void *memory, size_t alignment) nogil:             # <<<<<<<<<<<<<<
 *     "Align pointer memory on a given boundary"
 *     cdef Py_intptr_t aligned_p = <Py_intptr_t> memory
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "View.MemoryView":346
 *     cdef __Pyx_TypeInfo *typeinfo
 * 
 *     def __cinit__(memoryview self, object obj, int flags, bint dtype_is_object=False):             # <<<<<<<<<<<<<<
 *         self.obj = obj
 *         self.flags = flags
 */

/* Python wrapper */
static int __pyx_memoryview___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_memoryview___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_obj = 0;
  int __pyx_v_flags;
  int __pyx_v_dtype_is_object;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_obj,&__pyx_n_s_flags,&__pyx_n_s_dtype_is_object,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_obj)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_flags)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 2, 3, 1); __PYX_ERR(2, 346, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dtype_is_object);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(2, 346, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_obj = values[0];
    __pyx_v_flags = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_flags == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 346, __pyx_L3_error)
    if (values[2]) {
      __pyx_v_dtype_is_object = __Pyx_PyObject_IsTrue(values[2]); if (unlikely((__pyx_v_dtype_is_object == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 346, __pyx_L3_error)
    } else {
      __pyx_v_dtype_is_object = ((int)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(2, 346, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("View.MemoryView.memoryview.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview___cinit__(((struct __pyx_memoryview_obj *)__pyx_v_self), __pyx_v_obj, __pyx_v_flags, __pyx_v_dtype_is_object);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview___cinit__(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_obj, int __pyx_v_flags, int __pyx_v_dtype_is_object) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "View.MemoryView":347
 * 
 *     def __cinit__(memoryview self, object obj, int flags, bint dtype_is_object=False):
 *         self.obj = obj             # <<<<<<<<<<<<<<
 *         self.flags = flags
 *         if type(self) is memoryview or obj is not None:
 */
  __Pyx_INCREF(__pyx_v_obj);
  __Pyx_GIVEREF(__pyx_v_obj);
  __Pyx_GOTREF(__pyx_v_self->obj);
  __Pyx_DECREF(__pyx_v_self->obj);
  __pyx_v_self->obj = __pyx_v_obj;

  /* "View.MemoryView":348
 *     def __cinit__(memoryview self, object obj, int flags, bint dtype_is_object=False):
 *         self.obj = obj
 *         self.flags = flags             # <<<<<<<<<<<<<<
 *         if type(self) is memoryview or obj is not None:
 *             __Pyx_GetBuffer(obj, &self.view, flags)
 */
  __pyx_v_self->flags = __pyx_v_flags;

  /* "View.MemoryView":349
 *         self.obj = obj
 *         self.flags = flags
 *         if type(self) is memoryview or obj is not None:             # <<<<<<<<<<<<<<
 *             __Pyx_GetBuffer(obj, &self.view, flags)
 *             if <PyObject *> self.view.obj == NULL:
 */
  __pyx_t_2 = (((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))) == ((PyObject *)__pyx_memoryview_type));
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (!__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = (__pyx_v_obj != Py_None);
  __pyx_t_2 = (__pyx_t_3 != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "View.MemoryView":350
 *         self.flags = flags
 *         if type(self) is memoryview or obj is not None:
 *             __Pyx_GetBuffer(obj, &self.view, flags)             # <<<<<<<<<<<<<<
 *             if <PyObject *> self.view.obj == NULL:
 *                 (<__pyx_buffer *> &self.view).obj = Py_None
 */
    __pyx_t_4 = __Pyx_GetBuffer(__pyx_v_obj, (&__pyx_v_self->view), __pyx_v_flags); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(2, 350, __pyx_L1_error)

    /* "View.MemoryView":351
 *         if type(self) is memoryview or obj is not None:
 *             __Pyx_GetBuffer(obj, &self.view, flags)
 *             if <PyObject *> self.view.obj == NULL:             # <<<<<<<<<<<<<<
 *                 (<__pyx_buffer *> &self.view).obj = Py_None
 *                 Py_INCREF(Py_None)
 */
    __pyx_t_1 = ((((PyObject *)__pyx_v_self->view.obj) == NULL) != 0);
    if (__pyx_t_1) {

      /* "View.MemoryView":352
 *             __Pyx_GetBuffer(obj, &self.view, flags)
 *             if <PyObject *> self.view.obj == NULL:
 *                 (<__pyx_buffer *> &self.view).obj = Py_None             # <<<<<<<<<<<<<<
 *                 Py_INCREF(Py_None)
 * 
 */
      ((Py_buffer *)(&__pyx_v_self->view))->obj = Py_None;

      /* "View.MemoryView":353
 *             if <PyObject *> self.view.obj == NULL:
 *                 (<__pyx_buffer *> &self.view).obj = Py_None
 *                 Py_INCREF(Py_None)             # <<<<<<<<<<<<<<
 * 
 *         if not __PYX_CYTHON_ATOMICS_ENABLED():
 */
      Py_INCREF(Py_None);

      /* "View.MemoryView":351
 *         if type(self) is memoryview or obj is not None:
 *             __Pyx_GetBuffer(obj, &self.view, flags)
 *             if <PyObject *> self.view.obj == NULL:             # <<<<<<<<<<<<<<
 *                 (<__pyx_buffer *> &self.view).obj = Py_None
 *                 Py_INCREF(Py_None)
 */
    }

    /* "View.MemoryView":349
 *         self.obj = obj
 *         self.flags = flags
 *         if type(self) is memoryview or obj is not None:             # <<<<<<<<<<<<<<
 *             __Pyx_GetBuffer(obj, &self.view, flags)
 *             if <PyObject *> self.view.obj == NULL:
 */
  }

  /* "View.MemoryView":355
 *                 Py_INCREF(Py_None)
 * 
 *         if not __PYX_CYTHON_ATOMICS_ENABLED():             # <<<<<<<<<<<<<<
 *             global __pyx_memoryview_thread_locks_used
 *             if __pyx_memoryview_thread_locks_used < THREAD_LOCKS_PREALLOCATED:
 */
  __pyx_t_1 = ((!(__PYX_CYTHON_ATOMICS_ENABLED() != 0)) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":357
 *         if not __PYX_CYTHON_ATOMICS_ENABLED():
 *             global __pyx_memoryview_thread_locks_used
 *             if __pyx_memoryview_thread_locks_used < THREAD_LOCKS_PREALLOCATED:             # <<<<<<<<<<<<<<
 *                 self.lock = __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used]
 *                 __pyx_memoryview_thread_locks_used += 1
 */
    __pyx_t_1 = ((__pyx_memoryview_thread_locks_used < 8) != 0);
    if (__pyx_t_1) {

      /* "View.MemoryView":358
 *             global __pyx_memoryview_thread_locks_used
 *             if __pyx_memoryview_thread_locks_used < THREAD_LOCKS_PREALLOCATED:
 *                 self.lock = __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used]             # <<<<<<<<<<<<<<
 *                 __pyx_memoryview_thread_locks_used += 1
 *             if self.lock is NULL:
 */
      __pyx_v_self->lock = (__pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used]);

      /* "View.MemoryView":359
 *             if __pyx_memoryview_thread_locks_used < THREAD_LOCKS_PREALLOCATED:
 *                 self.lock = __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used]
 *                 __pyx_memoryview_thread_locks_used += 1             # <<<<<<<<<<<<<<
 *             if self.lock is NULL:
 *                 self.lock = PyThread_allocate_lock()
 */
      __pyx_memoryview_thread_locks_used = (__pyx_memoryview_thread_locks_used + 1);

      /* "View.MemoryView":357
 *         if not __PYX_CYTHON_ATOMICS_ENABLED():
 *             global __pyx_memoryview_thread_locks_used
 *             if __pyx_memoryview_thread_locks_used < THREAD_LOCKS_PREALLOCATED:             # <<<<<<<<<<<<<<
 *                 self.lock = __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used]
 *                 __pyx_memoryview_thread_locks_used += 1
 */
    }

    /* "View.MemoryView":360
 *                 self.lock = __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used]
 *                 __pyx_memoryview_thread_locks_used += 1
 *             if self.lock is NULL:             # <<<<<<<<<<<<<<
 *                 self.lock = PyThread_allocate_lock()
 *                 if self.lock is NULL:
 */
    __pyx_t_1 = ((__pyx_v_self->lock == NULL) != 0);
    if (__pyx_t_1) {

      /* "View.MemoryView":361
 *                 __pyx_memoryview_thread_locks_used += 1
 *             if self.lock is NULL:
 *                 self.lock = PyThread_allocate_lock()             # <<<<<<<<<<<<<<
 *                 if self.lock is NULL:
 *                     raise MemoryError
 */
      __pyx_v_self->lock = PyThread_allocate_lock();

      /* "View.MemoryView":362
 *             if self.lock is NULL:
 *                 self.lock = PyThread_allocate_lock()
 *                 if self.lock is NULL:             # <<<<<<<<<<<<<<
 *                     raise MemoryError
 * 
 */
      __pyx_t_1 = ((__pyx_v_self->lock == NULL) != 0);
      if (unlikely(__pyx_t_1)) {

        /* "View.MemoryView":363
 *                 self.lock = PyThread_allocate_lock()
 *                 if self.lock is NULL:
 *                     raise MemoryError             # <<<<<<<<<<<<<<
 * 
 *         if flags & PyBUF_FORMAT:
 */
        PyErr_NoMemory(); __PYX_ERR(2, 363, __pyx_L1_error)

        /* "View.MemoryView":362
 *             if self.lock is NULL:
 *                 self.lock = PyThread_allocate_lock()
 *                 if self.lock is NULL:             # <<<<<<<<<<<<<<
 *                     raise MemoryError
 * 
 */
      }

      /* "View.MemoryView":360
 *                 self.lock = __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used]
 *                 __pyx_memoryview_thread_locks_used += 1
 *             if self.lock is NULL:             # <<<<<<<<<<<<<<
 *                 self.lock = PyThread_allocate_lock()
 *                 if self.lock is NULL:
 */
    }

    /* "View.MemoryView":355
 *                 Py_INCREF(Py_None)
 * 
 *         if not __PYX_CYTHON_ATOMICS_ENABLED():             # <<<<<<<<<<<<<<
 *             global __pyx_memoryview_thread_locks_used
 *             if __pyx_memoryview_thread_locks_used < THREAD_LOCKS_PREALLOCATED:
 */
  }

  /* "View.MemoryView":365
 *                     raise MemoryError
 * 
 *         if flags & PyBUF_FORMAT:             # <<<<<<<<<<<<<<
 *             self.dtype_is_object = (self.view.format[0] == b'O' and self.view.format[1] == b'\0')
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_flags & PyBUF_FORMAT) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":366
 * 
 *         if flags & PyBUF_FORMAT:
 *             self.dtype_is_object = (self.view.format[0] == b'O' and self.view.format[1] == b'\0')             # <<<<<<<<<<<<<<
 *         else:
 *             self.dtype_is_object = dtype_is_object
 */
    __pyx_t_2 = (((__pyx_v_self->view.format[0]) == 'O') != 0);
    if (__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L12_bool_binop_done;
    }
    __pyx_t_2 = (((__pyx_v_self->view.format[1]) == '\x00') != 0);
    __pyx_t_1 = __pyx_t_2;
    __pyx_L12_bool_binop_done:;
    __pyx_v_self->dtype_is_object = __pyx_t_1;

    /* "View.MemoryView":365
 *                     raise MemoryError
 * 
 *         if flags & PyBUF_FORMAT:             # <<<<<<<<<<<<<<
 *             self.dtype_is_object = (self.view.format[0] == b'O' and self.view.format[1] == b'\0')
 *         else:
 */
    goto __pyx_L11;
  }

  /* "View.MemoryView":368
 *             self.dtype_is_object = (self.view.format[0] == b'O' and self.view.format[1] == b'\0')
 *         else:
 *             self.dtype_is_object = dtype_is_object             # <<<<<<<<<<<<<<
 * 
 *         self.acquisition_count_aligned_p = <__pyx_atomic_int *> align_pointer(
 */
  /*else*/ {
    __pyx_v_self->dtype_is_object = __pyx_v_dtype_is_object;
  }
  __pyx_L11:;

  /* "View.MemoryView":370
 *             self.dtype_is_object = dtype_is_object
 * 
 *         self.acquisition_count_aligned_p = <__pyx_atomic_int *> align_pointer(             # <<<<<<<<<<<<<<
 *                   <void *> &self.acquisition_count[0], sizeof(__pyx_atomic_int))
 *         self.typeinfo = NULL
 */
  __pyx_v_self->acquisition_count_aligned_p = ((__pyx_atomic_int *)__pyx_align_pointer(((void *)(&(__pyx_v_self->acquisition_count[0]))), (sizeof(__pyx_atomic_int))));

  /* "View.MemoryView":372
 *         self.acquisition_count_aligned_p = <__pyx_atomic_int *> align_pointer(
 *                   <void *> &self.acquisition_count[0], sizeof(__pyx_atomic_int))
 *         self.typeinfo = NULL             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(memoryview self):
 */
  __pyx_v_self->typeinfo = NULL;

  /* "View.MemoryView":346
 *     cdef __Pyx_TypeInfo *typeinfo
 * 
 *     def __cinit__(memoryview self, object obj, int flags, bint dtype_is_object=False):             # <<<<<<<<<<<<<<
 *         self.obj = obj
 *         self.flags = flags
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("View.MemoryView.memoryview.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":374
 *         self.typeinfo = NULL
 * 
 *     def __dealloc__(memoryview self):             # <<<<<<<<<<<<<<
 *         if self.obj is not None:
 *             __Pyx_ReleaseBuffer(&self.view)
 */

/* Python wrapper */
static void __pyx_memoryview___dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_memoryview___dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_2__dealloc__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_2__dealloc__(struct __pyx_memoryview_obj *__pyx_v_self) {
  int __pyx_v_i;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  PyThread_type_lock __pyx_t_6;
  PyThread_type_lock __pyx_t_7;
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "View.MemoryView":375
 * 
 *     def __dealloc__(memoryview self):
 *         if self.obj is not None:             # <<<<<<<<<<<<<<
 *             __Pyx_ReleaseBuffer(&self.view)
 *         elif (<__pyx_buffer *> &self.view).obj == Py_None:
 */
  __pyx_t_1 = (__pyx_v_self->obj != Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":376
 *     def __dealloc__(memoryview self):
 *         if self.obj is not None:
 *             __Pyx_ReleaseBuffer(&self.view)             # <<<<<<<<<<<<<<
 *         elif (<__pyx_buffer *> &self.view).obj == Py_None:
 * 
 */
    __Pyx_ReleaseBuffer((&__pyx_v_self->view));

    /* "View.MemoryView":375
 * 
 *     def __dealloc__(memoryview self):
 *         if self.obj is not None:             # <<<<<<<<<<<<<<
 *             __Pyx_ReleaseBuffer(&self.view)
 *         elif (<__pyx_buffer *> &self.view).obj == Py_None:
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":377
 *         if self.obj is not None:
 *             __Pyx_ReleaseBuffer(&self.view)
 *         elif (<__pyx_buffer *> &self.view).obj == Py_None:             # <<<<<<<<<<<<<<
 * 
 *             (<__pyx_buffer *> &self.view).obj = NULL
 */
  __pyx_t_2 = ((((Py_buffer *)(&__pyx_v_self->view))->obj == Py_None) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":379
 *         elif (<__pyx_buffer *> &self.view).obj == Py_None:
 * 
 *             (<__pyx_buffer *> &self.view).obj = NULL             # <<<<<<<<<<<<<<
 *             Py_DECREF(Py_None)
 * 
 */
    ((Py_buffer *)(&__pyx_v_self->view))->obj = NULL;

    /* "View.MemoryView":380
 * 
 *             (<__pyx_buffer *> &self.view).obj = NULL
 *             Py_DECREF(Py_None)             # <<<<<<<<<<<<<<
 * 
 *         cdef int i
 */
    Py_DECREF(Py_None);

    /* "View.MemoryView":377
 *         if self.obj is not None:
 *             __Pyx_ReleaseBuffer(&self.view)
 *         elif (<__pyx_buffer *> &self.view).obj == Py_None:             # <<<<<<<<<<<<<<
 * 
 *             (<__pyx_buffer *> &self.view).obj = NULL
 */
  }
  __pyx_L3:;

  /* "View.MemoryView":384
 *         cdef int i
 *         global __pyx_memoryview_thread_locks_used
 *         if self.lock != NULL:             # <<<<<<<<<<<<<<
 *             for i in range(__pyx_memoryview_thread_locks_used):
 *                 if __pyx_memoryview_thread_locks[i] is self.lock:
 */
  __pyx_t_2 = ((__pyx_v_self->lock != NULL) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":385
 *         global __pyx_memoryview_thread_locks_used
 *         if self.lock != NULL:
 *             for i in range(__pyx_memoryview_thread_locks_used):             # <<<<<<<<<<<<<<
 *                 if __pyx_memoryview_thread_locks[i] is self.lock:
 *                     __pyx_memoryview_thread_locks_used -= 1
 */
    __pyx_t_3 = __pyx_memoryview_thread_locks_used;
    __pyx_t_4 = __pyx_t_3;
    for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
      __pyx_v_i = __pyx_t_5;

      /* "View.MemoryView":386
 *         if self.lock != NULL:
 *             for i in range(__pyx_memoryview_thread_locks_used):
 *                 if __pyx_memoryview_thread_locks[i] is self.lock:             # <<<<<<<<<<<<<<
 *                     __pyx_memoryview_thread_locks_used -= 1
 *                     if i != __pyx_memoryview_thread_locks_used:
 */
      __pyx_t_2 = (((__pyx_memoryview_thread_locks[__pyx_v_i]) == __pyx_v_self->lock) != 0);
      if (__pyx_t_2) {

        /* "View.MemoryView":387
 *             for i in range(__pyx_memoryview_thread_locks_used):
 *                 if __pyx_memoryview_thread_locks[i] is self.lock:
 *                     __pyx_memoryview_thread_locks_used -= 1             # <<<<<<<<<<<<<<
 *                     if i != __pyx_memoryview_thread_locks_used:
 *                         __pyx_memoryview_thread_locks[i], __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used] = (
 */
        __pyx_memoryview_thread_locks_used = (__pyx_memoryview_thread_locks_used - 1);

        /* "View.MemoryView":388
 *                 if __pyx_memoryview_thread_locks[i] is self.lock:
 *                     __pyx_memoryview_thread_locks_used -= 1
 *                     if i != __pyx_memoryview_thread_locks_used:             # <<<<<<<<<<<<<<
 *                         __pyx_memoryview_thread_locks[i], __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used] = (
 *                             __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used], __pyx_memoryview_thread_locks[i])
 */
        __pyx_t_2 = ((__pyx_v_i != __pyx_memoryview_thread_locks_used) != 0);
        if (__pyx_t_2) {

          /* "View.MemoryView":390
 *                     if i != __pyx_memoryview_thread_locks_used:
 *                         __pyx_memoryview_thread_locks[i], __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used] = (
 *                             __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used], __pyx_memoryview_thread_locks[i])             # <<<<<<<<<<<<<<
 *                     break
 *             else:
 */
          __pyx_t_6 = (__pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used]);
          __pyx_t_7 = (__pyx_memoryview_thread_locks[__pyx_v_i]);

          /* "View.MemoryView":389
 *                     __pyx_memoryview_thread_locks_used -= 1
 *                     if i != __pyx_memoryview_thread_locks_used:
 *                         __pyx_memoryview_thread_locks[i], __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used] = (             # <<<<<<<<<<<<<<
 *                             __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used], __pyx_memoryview_thread_locks[i])
 *                     break
 */
          (__pyx_memoryview_thread_locks[__pyx_v_i]) = __pyx_t_6;
          (__pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used]) = __pyx_t_7;

          /* "View.MemoryView":388
 *                 if __pyx_memoryview_thread_locks[i] is self.lock:
 *                     __pyx_memoryview_thread_locks_used -= 1
 *                     if i != __pyx_memoryview_thread_locks_used:             # <<<<<<<<<<<<<<
 *                         __pyx_memoryview_thread_locks[i], __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used] = (
 *                             __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used], __pyx_memoryview_thread_locks[i])
 */
        }

        /* "View.MemoryView":391
 *                         __pyx_memoryview_thread_locks[i], __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used] = (
 *                             __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used], __pyx_memoryview_thread_locks[i])
 *                     break             # <<<<<<<<<<<<<<
 *             else:
 *                 PyThread_free_lock(self.lock)
 */
        goto __pyx_L6_break;

        /* "View.MemoryView":386
 *         if self.lock != NULL:
 *             for i in range(__pyx_memoryview_thread_locks_used):
 *                 if __pyx_memoryview_thread_locks[i] is self.lock:             # <<<<<<<<<<<<<<
 *                     __pyx_memoryview_thread_locks_used -= 1
 *                     if i != __pyx_memoryview_thread_locks_used:
 */
      }
    }
    /*else*/ {

      /* "View.MemoryView":393
 *                     break
 *             else:
 *                 PyThread_free_lock(self.lock)             # <<<<<<<<<<<<<<
 * 
 *     cdef char *get_item_pointer(memoryview self, object index) except NULL:
 */
      PyThread_free_lock(__pyx_v_self->lock);
    }
    __pyx_L6_break:;

    /* "View.MemoryView":384
 *         cdef int i
 *         global __pyx_memoryview_thread_locks_used
 *         if self.lock != NULL:             # <<<<<<<<<<<<<<
 *             for i in range(__pyx_memoryview_thread_locks_used):
 *                 if __pyx_memoryview_thread_locks[i] is self.lock:
 */
  }

  /* "View.MemoryView":374
 *         self.typeinfo = NULL
 * 
 *     def __dealloc__(memoryview self):             # <<<<<<<<<<<<<<
 *         if self.obj is not None:
 *             __Pyx_ReleaseBuffer(&self.view)
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "View.MemoryView":395
 *                 PyThread_free_lock(self.lock)
 * 
 *     cdef char *get_item_pointer(memoryview self, object index) except NULL:             # <<<<<<<<<<<<<<
 *         cdef Py_ssize_t dim
 *         cdef char *itemp = <char *> self.view.buf
 */

static char *__pyx_memoryview_get_item_pointer(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_index) {
  Py_ssize_t __pyx_v_dim;
  char *__pyx_v_itemp;
  PyObject *__pyx_v_idx = NULL;
  char *__pyx_r;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  char *__pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_item_pointer", 0);

  /* "View.MemoryView":397
 *     cdef char *get_item_pointer(memoryview self, object index) except NULL:
 *         cdef Py_ssize_t dim
 *         cdef char *itemp = <char *> self.view.buf             # <<<<<<<<<<<<<<
 * 
 *         for dim, idx in enumerate(index):
 */
  __pyx_v_itemp = ((char *)__pyx_v_self->view.buf);

  /* "View.MemoryView":399
 *         cdef char *itemp = <char *> self.view.buf
 * 
 *         for dim, idx in enumerate(index):             # <<<<<<<<<<<<<<
 *             itemp = pybuffer_index(&self.view, itemp, idx, dim)
 * 
 */
  __pyx_t_1 = 0;
  if (likely(PyList_CheckExact(__pyx_v_index)) || PyTuple_CheckExact(__pyx_v_index)) {
    __pyx_t_2 = __pyx_v_index; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_v_index); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 399, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 399, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_5 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_5); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(2, 399, __pyx_L1_error)
        #else
        __pyx_t_5 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 399, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        #endif
      } else {
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_5); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(2, 399, __pyx_L1_error)
        #else
        __pyx_t_5 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 399, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        #endif
      }
    } else {
      __pyx_t_5 = __pyx_t_4(__pyx_t_2);
      if (unlikely(!__pyx_t_5)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(2, 399, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_5);
    }
    __Pyx_XDECREF_SET(__pyx_v_idx, __pyx_t_5);
    __pyx_t_5 = 0;
    __pyx_v_dim = __pyx_t_1;
    __pyx_t_1 = (__pyx_t_1 + 1);

    /* "View.MemoryView":400
 * 
 *         for dim, idx in enumerate(index):
 *             itemp = pybuffer_index(&self.view, itemp, idx, dim)             # <<<<<<<<<<<<<<
 * 
 *         return itemp
 */
    __pyx_t_6 = __Pyx_PyIndex_AsSsize_t(__pyx_v_idx); if (unlikely((__pyx_t_6 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(2, 400, __pyx_L1_error)
    __pyx_t_7 = __pyx_pybuffer_index((&__pyx_v_self->view), __pyx_v_itemp, __pyx_t_6, __pyx_v_dim); if (unlikely(__pyx_t_7 == ((char *)NULL))) __PYX_ERR(2, 400, __pyx_L1_error)
    __pyx_v_itemp = __pyx_t_7;

    /* "View.MemoryView":399
 *         cdef char *itemp = <char *> self.view.buf
 * 
 *         for dim, idx in enumerate(index):             # <<<<<<<<<<<<<<
 *             itemp = pybuffer_index(&self.view, itemp, idx, dim)
 * 
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "View.MemoryView":402
 *             itemp = pybuffer_index(&self.view, itemp, idx, dim)
 * 
 *         return itemp             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_itemp;
  goto __pyx_L0;

  /* "View.MemoryView":395
 *                 PyThread_free_lock(self.lock)
 * 
 *     cdef char *get_item_pointer(memoryview self, object index) except NULL:             # <<<<<<<<<<<<<<
 *         cdef Py_ssize_t dim
 *         cdef char *itemp = <char *> self.view.buf
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("View.MemoryView.memoryview.get_item_pointer", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_idx);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":405
 * 
 * 
 *     def __getitem__(memoryview self, object index):             # <<<<<<<<<<<<<<
 *         if index is Ellipsis:
 *             return self
 */

/* Python wrapper */
static PyObject *__pyx_memoryview___getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_index); /*proto*/
static PyObject *__pyx_memoryview___getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_index) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_4__getitem__(((struct __pyx_memoryview_obj *)__pyx_v_self), ((PyObject *)__pyx_v_index));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_4__getitem__(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_index) {
  PyObject *__pyx_v_have_slices = NULL;
  PyObject *__pyx_v_indices = NULL;
  char *__pyx_v_itemp;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  char *__pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getitem__", 0);

  /* "View.MemoryView":406
 * 
 *     def __getitem__(memoryview self, object index):
 *         if index is Ellipsis:             # <<<<<<<<<<<<<<
 *             return self
 * 
 */
  __pyx_t_1 = (__pyx_v_index == __pyx_builtin_Ellipsis);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":407
 *     def __getitem__(memoryview self, object index):
 *         if index is Ellipsis:
 *             return self             # <<<<<<<<<<<<<<
 * 
 *         have_slices, indices = _unellipsify(index, self.view.ndim)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject *)__pyx_v_self));
    __pyx_r = ((PyObject *)__pyx_v_self);
    goto __pyx_L0;

    /* "View.MemoryView":406
 * 
 *     def __getitem__(memoryview self, object index):
 *         if index is Ellipsis:             # <<<<<<<<<<<<<<
 *             return self
 * 
 */
  }

  /* "View.MemoryView":409
 *             return self
 * 
 *         have_slices, indices = _unellipsify(index, self.view.ndim)             # <<<<<<<<<<<<<<
 * 
 *         cdef char *itemp
 */
  __pyx_t_3 = _unellipsify(__pyx_v_index, __pyx_v_self->view.ndim); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 409, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (likely(__pyx_t_3 != Py_None)) {
    PyObject* sequence = __pyx_t_3;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(2, 409, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_4 = PyTuple_GET_ITEM(sequence, 0); 
    __pyx_t_5 = PyTuple_GET_ITEM(sequence, 1); 
    __Pyx_INCREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_t_5);
    #else
    __pyx_t_4 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 409, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 409, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    #endif
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __Pyx_RaiseNoneNotIterableError(); __PYX_ERR(2, 409, __pyx_L1_error)
  }
  __pyx_v_have_slices = __pyx_t_4;
  __pyx_t_4 = 0;
  __pyx_v_indices = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "View.MemoryView":412
 * 
 *         cdef char *itemp
 *         if have_slices:             # <<<<<<<<<<<<<<
 *             return memview_slice(self, indices)
 *         else:
 */
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_have_slices); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(2, 412, __pyx_L1_error)
  if (__pyx_t_2) {

    /* "View.MemoryView":413
 *         cdef char *itemp
 *         if have_slices:
 *             return memview_slice(self, indices)             # <<<<<<<<<<<<<<
 *         else:
 *             itemp = self.get_item_pointer(indices)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = ((PyObject *)__pyx_memview_slice(__pyx_v_self, __pyx_v_indices)); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 413, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "View.MemoryView":412
 * 
 *         cdef char *itemp
 *         if have_slices:             # <<<<<<<<<<<<<<
 *             return memview_slice(self, indices)
 *         else:
 */
  }

  /* "View.MemoryView":415
 *             return memview_slice(self, indices)
 *         else:
 *             itemp = self.get_item_pointer(indices)             # <<<<<<<<<<<<<<
 *             return self.convert_item_to_object(itemp)
 * 
 */
  /*else*/ {
    __pyx_t_6 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->get_item_pointer(__pyx_v_self, __pyx_v_indices); if (unlikely(__pyx_t_6 == ((char *)NULL))) __PYX_ERR(2, 415, __pyx_L1_error)
    __pyx_v_itemp = __pyx_t_6;

    /* "View.MemoryView":416
 *         else:
 *             itemp = self.get_item_pointer(indices)
 *             return self.convert_item_to_object(itemp)             # <<<<<<<<<<<<<<
 * 
 *     def __setitem__(memoryview self, object index, object value):
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->convert_item_to_object(__pyx_v_self, __pyx_v_itemp); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 416, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }

  /* "View.MemoryView":405
 * 
 * 
 *     def __getitem__(memoryview self, object index):             # <<<<<<<<<<<<<<
 *         if index is Ellipsis:
 *             return self
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("View.MemoryView.memoryview.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_have_slices);
  __Pyx_XDECREF(__pyx_v_indices);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":418
 *             return self.convert_item_to_object(itemp)
 * 
 *     def __setitem__(memoryview self, object index, object value):             # <<<<<<<<<<<<<<
 *         if self.view.readonly:
 *             raise TypeError("Cannot assign to read-only memoryview")
 */

/* Python wrapper */
static int __pyx_memoryview___setitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_index, PyObject *__pyx_v_value); /*proto*/
static int __pyx_memoryview___setitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_index, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setitem__ (wrapper)", 0);
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_6__setitem__(((struct __pyx_memoryview_obj *)__pyx_v_self), ((PyObject *)__pyx_v_index), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_6__setitem__(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_index, PyObject *__pyx_v_value) {
  PyObject *__pyx_v_have_slices = NULL;
  PyObject *__pyx_v_obj = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setitem__", 0);
  __Pyx_INCREF(__pyx_v_index);

  /* "View.MemoryView":419
 * 
 *     def __setitem__(memoryview self, object index, object value):
 *         if self.view.readonly:             # <<<<<<<<<<<<<<
 *             raise TypeError("Cannot assign to read-only memoryview")
 * 
 */
  __pyx_t_1 = (__pyx_v_self->view.readonly != 0);
  if (unlikely(__pyx_t_1)) {

    /* "View.MemoryView":420
 *     def __setitem__(memoryview self, object index, object value):
 *         if self.view.readonly:
 *             raise TypeError("Cannot assign to read-only memoryview")             # <<<<<<<<<<<<<<
 * 
 *         have_slices, index = _unellipsify(index, self.view.ndim)
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__10, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 420, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(2, 420, __pyx_L1_error)

    /* "View.MemoryView":419
 * 
 *     def __setitem__(memoryview self, object index, object value):
 *         if self.view.readonly:             # <<<<<<<<<<<<<<
 *             raise TypeError("Cannot assign to read-only memoryview")
 * 
 */
  }

  /* "View.MemoryView":422
 *             raise TypeError("Cannot assign to read-only memoryview")
 * 
 *         have_slices, index = _unellipsify(index, self.view.ndim)             # <<<<<<<<<<<<<<
 * 
 *         if have_slices:
 */
  __pyx_t_2 = _unellipsify(__pyx_v_index, __pyx_v_self->view.ndim); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 422, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (likely(__pyx_t_2 != Py_None)) {
    PyObject* sequence = __pyx_t_2;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(2, 422, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 
    __pyx_t_4 = PyTuple_GET_ITEM(sequence, 1); 
    __Pyx_INCREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_t_4);
    #else
    __pyx_t_3 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 422, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 422, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    #endif
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else {
    __Pyx_RaiseNoneNotIterableError(); __PYX_ERR(2, 422, __pyx_L1_error)
  }
  __pyx_v_have_slices = __pyx_t_3;
  __pyx_t_3 = 0;
  __Pyx_DECREF_SET(__pyx_v_index, __pyx_t_4);
  __pyx_t_4 = 0;

  /* "View.MemoryView":424
 *         have_slices, index = _unellipsify(index, self.view.ndim)
 * 
 *         if have_slices:             # <<<<<<<<<<<<<<
 *             obj = self.is_slice(value)
 *             if obj:
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_have_slices); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(2, 424, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "View.MemoryView":425
 * 
 *         if have_slices:
 *             obj = self.is_slice(value)             # <<<<<<<<<<<<<<
 *             if obj:
 *                 self.setitem_slice_assignment(self[index], obj)
 */
    __pyx_t_2 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->is_slice(__pyx_v_self, __pyx_v_value); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 425, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_v_obj = __pyx_t_2;
    __pyx_t_2 = 0;

    /* "View.MemoryView":426
 *         if have_slices:
 *             obj = self.is_slice(value)
 *             if obj:             # <<<<<<<<<<<<<<
 *                 self.setitem_slice_assignment(self[index], obj)
 *             else:
 */
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_obj); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(2, 426, __pyx_L1_error)
    if (__pyx_t_1) {

      /* "View.MemoryView":427
 *             obj = self.is_slice(value)
 *             if obj:
 *                 self.setitem_slice_assignment(self[index], obj)             # <<<<<<<<<<<<<<
 *             else:
 *                 self.setitem_slice_assign_scalar(self[index], value)
 */
      __pyx_t_2 = __Pyx_PyObject_GetItem(((PyObject *)__pyx_v_self), __pyx_v_index); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 427, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_4 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->setitem_slice_assignment(__pyx_v_self, __pyx_t_2, __pyx_v_obj); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 427, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "View.MemoryView":426
 *         if have_slices:
 *             obj = self.is_slice(value)
 *             if obj:             # <<<<<<<<<<<<<<
 *                 self.setitem_slice_assignment(self[index], obj)
 *             else:
 */
      goto __pyx_L5;
    }

    /* "View.MemoryView":429
 *                 self.setitem_slice_assignment(self[index], obj)
 *             else:
 *                 self.setitem_slice_assign_scalar(self[index], value)             # <<<<<<<<<<<<<<
 *         else:
 *             self.setitem_indexed(index, value)
 */
    /*else*/ {
      __pyx_t_4 = __Pyx_PyObject_GetItem(((PyObject *)__pyx_v_self), __pyx_v_index); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 429, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      if (!(likely(((__pyx_t_4) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_4, __pyx_memoryview_type))))) __PYX_ERR(2, 429, __pyx_L1_error)
      __pyx_t_2 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->setitem_slice_assign_scalar(__pyx_v_self, ((struct __pyx_memoryview_obj *)__pyx_t_4), __pyx_v_value); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 429, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __pyx_L5:;

    /* "View.MemoryView":424
 *         have_slices, index = _unellipsify(index, self.view.ndim)
 * 
 *         if have_slices:             # <<<<<<<<<<<<<<
 *             obj = self.is_slice(value)
 *             if obj:
 */
    goto __pyx_L4;
  }

  /* "View.MemoryView":431
 *                 self.setitem_slice_assign_scalar(self[index], value)
 *         else:
 *             self.setitem_indexed(index, value)             # <<<<<<<<<<<<<<
 * 
 *     cdef is_slice(self, obj):
 */
  /*else*/ {
    __pyx_t_2 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->setitem_indexed(__pyx_v_self, __pyx_v_index, __pyx_v_value); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 431, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_L4:;

  /* "View.MemoryView":418
 *             return self.convert_item_to_object(itemp)
 * 
 *     def __setitem__(memoryview self, object index, object value):             # <<<<<<<<<<<<<<
 *         if self.view.readonly:
 *             raise TypeError("Cannot assign to read-only memoryview")
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("View.MemoryView.memoryview.__setitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_have_slices);
  __Pyx_XDECREF(__pyx_v_obj);
  __Pyx_XDECREF(__pyx_v_index);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":433
 *             self.setitem_indexed(index, value)
 * 
 *     cdef is_slice(self, obj):             # <<<<<<<<<<<<<<
 *         if not isinstance(obj, memoryview):
 *             try:
 */

static PyObject *__pyx_memoryview_is_slice(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_obj) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("is_slice", 0);
  __Pyx_INCREF(__pyx_v_obj);

  /* "View.MemoryView":434
 * 
 *     cdef is_slice(self, obj):
 *         if not isinstance(obj, memoryview):             # <<<<<<<<<<<<<<
 *             try:
 *                 obj = memoryview(obj, self.flags & ~PyBUF_WRITABLE | PyBUF_ANY_CONTIGUOUS,
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_obj, __pyx_memoryview_type); 
  __pyx_t_2 = ((!(__pyx_t_1 != 0)) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":435
 *     cdef is_slice(self, obj):
 *         if not isinstance(obj, memoryview):
 *             try:             # <<<<<<<<<<<<<<
 *                 obj = memoryview(obj, self.flags & ~PyBUF_WRITABLE | PyBUF_ANY_CONTIGUOUS,
 *                                  self.dtype_is_object)
 */
    {
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __Pyx_ExceptionSave(&__pyx_t_3, &__pyx_t_4, &__pyx_t_5);
      __Pyx_XGOTREF(__pyx_t_3);
      __Pyx_XGOTREF(__pyx_t_4);
      __Pyx_XGOTREF(__pyx_t_5);
      /*try:*/ {

        /* "View.MemoryView":436
 *         if not isinstance(obj, memoryview):
 *             try:
 *                 obj = memoryview(obj, self.flags & ~PyBUF_WRITABLE | PyBUF_ANY_CONTIGUOUS,             # <<<<<<<<<<<<<<
 *                                  self.dtype_is_object)
 *             except TypeError:
 */
        __pyx_t_6 = __Pyx_PyInt_From_int(((__pyx_v_self->flags & (~PyBUF_WRITABLE)) | PyBUF_ANY_CONTIGUOUS)); if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 436, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_6);

        /* "View.MemoryView":437
 *             try:
 *                 obj = memoryview(obj, self.flags & ~PyBUF_WRITABLE | PyBUF_ANY_CONTIGUOUS,
 *                                  self.dtype_is_object)             # <<<<<<<<<<<<<<
 *             except TypeError:
 *                 return None
 */
        __pyx_t_7 = __Pyx_PyBool_FromLong(__pyx_v_self->dtype_is_object); if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 437, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_7);

        /* "View.MemoryView":436
 *         if not isinstance(obj, memoryview):
 *             try:
 *                 obj = memoryview(obj, self.flags & ~PyBUF_WRITABLE | PyBUF_ANY_CONTIGUOUS,             # <<<<<<<<<<<<<<
 *                                  self.dtype_is_object)
 *             except TypeError:
 */
        __pyx_t_8 = PyTuple_New(3); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 436, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_INCREF(__pyx_v_obj);
        __Pyx_GIVEREF(__pyx_v_obj);
        PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_v_obj);
        __Pyx_GIVEREF(__pyx_t_6);
        PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_6);
        __Pyx_GIVEREF(__pyx_t_7);
        PyTuple_SET_ITEM(__pyx_t_8, 2, __pyx_t_7);
        __pyx_t_6 = 0;
        __pyx_t_7 = 0;
        __pyx_t_7 = __Pyx_PyObject_Call(((PyObject *)__pyx_memoryview_type), __pyx_t_8, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 436, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_DECREF_SET(__pyx_v_obj, __pyx_t_7);
        __pyx_t_7 = 0;

        /* "View.MemoryView":435
 *     cdef is_slice(self, obj):
 *         if not isinstance(obj, memoryview):
 *             try:             # <<<<<<<<<<<<<<
 *                 obj = memoryview(obj, self.flags & ~PyBUF_WRITABLE | PyBUF_ANY_CONTIGUOUS,
 *                                  self.dtype_is_object)
 */
      }
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      goto __pyx_L9_try_end;
      __pyx_L4_error:;
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;

      /* "View.MemoryView":438
 *                 obj = memoryview(obj, self.flags & ~PyBUF_WRITABLE | PyBUF_ANY_CONTIGUOUS,
 *                                  self.dtype_is_object)
 *             except TypeError:             # <<<<<<<<<<<<<<
 *                 return None
 * 
 */
      __pyx_t_9 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_TypeError);
      if (__pyx_t_9) {
        __Pyx_AddTraceback("View.MemoryView.memoryview.is_slice", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_7, &__pyx_t_8, &__pyx_t_6) < 0) __PYX_ERR(2, 438, __pyx_L6_except_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_GOTREF(__pyx_t_6);

        /* "View.MemoryView":439
 *                                  self.dtype_is_object)
 *             except TypeError:
 *                 return None             # <<<<<<<<<<<<<<
 * 
 *         return obj
 */
        __Pyx_XDECREF(__pyx_r);
        __pyx_r = Py_None; __Pyx_INCREF(Py_None);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        goto __pyx_L7_except_return;
      }
      goto __pyx_L6_except_error;
      __pyx_L6_except_error:;

      /* "View.MemoryView":435
 *     cdef is_slice(self, obj):
 *         if not isinstance(obj, memoryview):
 *             try:             # <<<<<<<<<<<<<<
 *                 obj = memoryview(obj, self.flags & ~PyBUF_WRITABLE | PyBUF_ANY_CONTIGUOUS,
 *                                  self.dtype_is_object)
 */
      __Pyx_XGIVEREF(__pyx_t_3);
      __Pyx_XGIVEREF(__pyx_t_4);
      __Pyx_XGIVEREF(__pyx_t_5);
      __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_4, __pyx_t_5);
      goto __pyx_L1_error;
      __pyx_L7_except_return:;
      __Pyx_XGIVEREF(__pyx_t_3);
      __Pyx_XGIVEREF(__pyx_t_4);
      __Pyx_XGIVEREF(__pyx_t_5);
      __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_4, __pyx_t_5);
      goto __pyx_L0;
      __pyx_L9_try_end:;
    }

    /* "View.MemoryView":434
 * 
 *     cdef is_slice(self, obj):
 *         if not isinstance(obj, memoryview):             # <<<<<<<<<<<<<<
 *             try:
 *                 obj = memoryview(obj, self.flags & ~PyBUF_WRITABLE | PyBUF_ANY_CONTIGUOUS,
 */
  }

  /* "View.MemoryView":441
 *                 return None
 * 
 *         return obj             # <<<<<<<<<<<<<<
 * 
 *     cdef setitem_slice_assignment(self, dst, src):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_obj);
  __pyx_r = __pyx_v_obj;
  goto __pyx_L0;

  /* "View.MemoryView":433
 *             self.setitem_indexed(index, value)
 * 
 *     cdef is_slice(self, obj):             # <<<<<<<<<<<<<<
 *         if not isinstance(obj, memoryview):
 *             try:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("View.MemoryView.memoryview.is_slice", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_obj);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":443
 *         return obj
 * 
 *     cdef setitem_slice_assignment(self, dst, src):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice dst_slice
 *         cdef __Pyx_memviewslice src_slice
 */

static PyObject *__pyx_memoryview_setitem_slice_assignment(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_dst, PyObject *__pyx_v_src) {
  __Pyx_memviewslice __pyx_v_dst_slice;
  __Pyx_memviewslice __pyx_v_src_slice;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_memviewslice *__pyx_t_1;
  __Pyx_memviewslice *__pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setitem_slice_assignment", 0);

  /* "View.MemoryView":447
 *         cdef __Pyx_memviewslice src_slice
 * 
 *         memoryview_copy_contents(get_slice_from_memview(src, &src_slice)[0],             # <<<<<<<<<<<<<<
 *                                  get_slice_from_memview(dst, &dst_slice)[0],
 *                                  src.ndim, dst.ndim, self.dtype_is_object)
 */
  if (!(likely(((__pyx_v_src) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_src, __pyx_memoryview_type))))) __PYX_ERR(2, 447, __pyx_L1_error)
  __pyx_t_1 = __pyx_memoryview_get_slice_from_memoryview(((struct __pyx_memoryview_obj *)__pyx_v_src), (&__pyx_v_src_slice)); if (unlikely(__pyx_t_1 == ((__Pyx_memviewslice *)NULL))) __PYX_ERR(2, 447, __pyx_L1_error)

  /* "View.MemoryView":448
 * 
 *         memoryview_copy_contents(get_slice_from_memview(src, &src_slice)[0],
 *                                  get_slice_from_memview(dst, &dst_slice)[0],             # <<<<<<<<<<<<<<
 *                                  src.ndim, dst.ndim, self.dtype_is_object)
 * 
 */
  if (!(likely(((__pyx_v_dst) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_dst, __pyx_memoryview_type))))) __PYX_ERR(2, 448, __pyx_L1_error)
  __pyx_t_2 = __pyx_memoryview_get_slice_from_memoryview(((struct __pyx_memoryview_obj *)__pyx_v_dst), (&__pyx_v_dst_slice)); if (unlikely(__pyx_t_2 == ((__Pyx_memviewslice *)NULL))) __PYX_ERR(2, 448, __pyx_L1_error)

  /* "View.MemoryView":449
 *         memoryview_copy_contents(get_slice_from_memview(src, &src_slice)[0],
 *                                  get_slice_from_memview(dst, &dst_slice)[0],
 *                                  src.ndim, dst.ndim, self.dtype_is_object)             # <<<<<<<<<<<<<<
 * 
 *     cdef setitem_slice_assign_scalar(self, memoryview dst, value):
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_src, __pyx_n_s_ndim); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 449, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 449, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_dst, __pyx_n_s_ndim); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 449, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 449, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "View.MemoryView":447
 *         cdef __Pyx_memviewslice src_slice
 * 
 *         memoryview_copy_contents(get_slice_from_memview(src, &src_slice)[0],             # <<<<<<<<<<<<<<
 *                                  get_slice_from_memview(dst, &dst_slice)[0],
 *                                  src.ndim, dst.ndim, self.dtype_is_object)
 */
  __pyx_t_6 = __pyx_memoryview_copy_contents((__pyx_t_1[0]), (__pyx_t_2[0]), __pyx_t_4, __pyx_t_5, __pyx_v_self->dtype_is_object); if (unlikely(__pyx_t_6 == ((int)-1))) __PYX_ERR(2, 447, __pyx_L1_error)

  /* "View.MemoryView":443
 *         return obj
 * 
 *     cdef setitem_slice_assignment(self, dst, src):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice dst_slice
 *         cdef __Pyx_memviewslice src_slice
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.memoryview.setitem_slice_assignment", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":451
 *                                  src.ndim, dst.ndim, self.dtype_is_object)
 * 
 *     cdef setitem_slice_assign_scalar(self, memoryview dst, value):             # <<<<<<<<<<<<<<
 *         cdef int array[128]
 *         cdef void *tmp = NULL
 */

static PyObject *__pyx_memoryview_setitem_slice_assign_scalar(struct __pyx_memoryview_obj *__pyx_v_self, struct __pyx_memoryview_obj *__pyx_v_dst, PyObject *__pyx_v_value) {
  int __pyx_v_array[0x80];
  void *__pyx_v_tmp;
  void *__pyx_v_item;
  __Pyx_memviewslice *__pyx_v_dst_slice;
  __Pyx_memviewslice __pyx_v_tmp_slice;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_memviewslice *__pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  char const *__pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setitem_slice_assign_scalar", 0);

  /* "View.MemoryView":453
 *     cdef setitem_slice_assign_scalar(self, memoryview dst, value):
 *         cdef int array[128]
 *         cdef void *tmp = NULL             # <<<<<<<<<<<<<<
 *         cdef void *item
 * 
 */
  __pyx_v_tmp = NULL;

  /* "View.MemoryView":458
 *         cdef __Pyx_memviewslice *dst_slice
 *         cdef __Pyx_memviewslice tmp_slice
 *         dst_slice = get_slice_from_memview(dst, &tmp_slice)             # <<<<<<<<<<<<<<
 * 
 *         if <size_t>self.view.itemsize > sizeof(array):
 */
  __pyx_t_1 = __pyx_memoryview_get_slice_from_memoryview(__pyx_v_dst, (&__pyx_v_tmp_slice)); if (unlikely(__pyx_t_1 == ((__Pyx_memviewslice *)NULL))) __PYX_ERR(2, 458, __pyx_L1_error)
  __pyx_v_dst_slice = __pyx_t_1;

  /* "View.MemoryView":460
 *         dst_slice = get_slice_from_memview(dst, &tmp_slice)
 * 
 *         if <size_t>self.view.itemsize > sizeof(array):             # <<<<<<<<<<<<<<
 *             tmp = PyMem_Malloc(self.view.itemsize)
 *             if tmp == NULL:
 */
  __pyx_t_2 = ((((size_t)__pyx_v_self->view.itemsize) > (sizeof(__pyx_v_array))) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":461
 * 
 *         if <size_t>self.view.itemsize > sizeof(array):
 *             tmp = PyMem_Malloc(self.view.itemsize)             # <<<<<<<<<<<<<<
 *             if tmp == NULL:
 *                 raise MemoryError
 */
    __pyx_v_tmp = PyMem_Malloc(__pyx_v_self->view.itemsize);

    /* "View.MemoryView":462
 *         if <size_t>self.view.itemsize > sizeof(array):
 *             tmp = PyMem_Malloc(self.view.itemsize)
 *             if tmp == NULL:             # <<<<<<<<<<<<<<
 *                 raise MemoryError
 *             item = tmp
 */
    __pyx_t_2 = ((__pyx_v_tmp == NULL) != 0);
    if (unlikely(__pyx_t_2)) {

      /* "View.MemoryView":463
 *             tmp = PyMem_Malloc(self.view.itemsize)
 *             if tmp == NULL:
 *                 raise MemoryError             # <<<<<<<<<<<<<<
 *             item = tmp
 *         else:
 */
      PyErr_NoMemory(); __PYX_ERR(2, 463, __pyx_L1_error)

      /* "View.MemoryView":462
 *         if <size_t>self.view.itemsize > sizeof(array):
 *             tmp = PyMem_Malloc(self.view.itemsize)
 *             if tmp == NULL:             # <<<<<<<<<<<<<<
 *                 raise MemoryError
 *             item = tmp
 */
    }

    /* "View.MemoryView":464
 *             if tmp == NULL:
 *                 raise MemoryError
 *             item = tmp             # <<<<<<<<<<<<<<
 *         else:
 *             item = <void *> array
 */
    __pyx_v_item = __pyx_v_tmp;

    /* "View.MemoryView":460
 *         dst_slice = get_slice_from_memview(dst, &tmp_slice)
 * 
 *         if <size_t>self.view.itemsize > sizeof(array):             # <<<<<<<<<<<<<<
 *             tmp = PyMem_Malloc(self.view.itemsize)
 *             if tmp == NULL:
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":466
 *             item = tmp
 *         else:
 *             item = <void *> array             # <<<<<<<<<<<<<<
 * 
 *         try:
 */
  /*else*/ {
    __pyx_v_item = ((void *)__pyx_v_array);
  }
  __pyx_L3:;

  /* "View.MemoryView":468
 *             item = <void *> array
 * 
 *         try:             # <<<<<<<<<<<<<<
 *             if self.dtype_is_object:
 *                 (<PyObject **> item)[0] = <PyObject *> value
 */
  /*try:*/ {

    /* "View.MemoryView":469
 * 
 *         try:
 *             if self.dtype_is_object:             # <<<<<<<<<<<<<<
 *                 (<PyObject **> item)[0] = <PyObject *> value
 *             else:
 */
    __pyx_t_2 = (__pyx_v_self->dtype_is_object != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":470
 *         try:
 *             if self.dtype_is_object:
 *                 (<PyObject **> item)[0] = <PyObject *> value             # <<<<<<<<<<<<<<
 *             else:
 *                 self.assign_item_from_object(<char *> item, value)
 */
      (((PyObject **)__pyx_v_item)[0]) = ((PyObject *)__pyx_v_value);

      /* "View.MemoryView":469
 * 
 *         try:
 *             if self.dtype_is_object:             # <<<<<<<<<<<<<<
 *                 (<PyObject **> item)[0] = <PyObject *> value
 *             else:
 */
      goto __pyx_L8;
    }

    /* "View.MemoryView":472
 *                 (<PyObject **> item)[0] = <PyObject *> value
 *             else:
 *                 self.assign_item_from_object(<char *> item, value)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    /*else*/ {
      __pyx_t_3 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->assign_item_from_object(__pyx_v_self, ((char *)__pyx_v_item), __pyx_v_value); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 472, __pyx_L6_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __pyx_L8:;

    /* "View.MemoryView":476
 * 
 * 
 *             if self.view.suboffsets != NULL:             # <<<<<<<<<<<<<<
 *                 assert_direct_dimensions(self.view.suboffsets, self.view.ndim)
 *             slice_assign_scalar(dst_slice, dst.view.ndim, self.view.itemsize,
 */
    __pyx_t_2 = ((__pyx_v_self->view.suboffsets != NULL) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":477
 * 
 *             if self.view.suboffsets != NULL:
 *                 assert_direct_dimensions(self.view.suboffsets, self.view.ndim)             # <<<<<<<<<<<<<<
 *             slice_assign_scalar(dst_slice, dst.view.ndim, self.view.itemsize,
 *                                 item, self.dtype_is_object)
 */
      __pyx_t_3 = assert_direct_dimensions(__pyx_v_self->view.suboffsets, __pyx_v_self->view.ndim); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 477, __pyx_L6_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "View.MemoryView":476
 * 
 * 
 *             if self.view.suboffsets != NULL:             # <<<<<<<<<<<<<<
 *                 assert_direct_dimensions(self.view.suboffsets, self.view.ndim)
 *             slice_assign_scalar(dst_slice, dst.view.ndim, self.view.itemsize,
 */
    }

    /* "View.MemoryView":478
 *             if self.view.suboffsets != NULL:
 *                 assert_direct_dimensions(self.view.suboffsets, self.view.ndim)
 *             slice_assign_scalar(dst_slice, dst.view.ndim, self.view.itemsize,             # <<<<<<<<<<<<<<
 *                                 item, self.dtype_is_object)
 *         finally:
 */
    __pyx_memoryview_slice_assign_scalar(__pyx_v_dst_slice, __pyx_v_dst->view.ndim, __pyx_v_self->view.itemsize, __pyx_v_item, __pyx_v_self->dtype_is_object);
  }

  /* "View.MemoryView":481
 *                                 item, self.dtype_is_object)
 *         finally:
 *             PyMem_Free(tmp)             # <<<<<<<<<<<<<<
 * 
 *     cdef setitem_indexed(self, index, value):
 */
  /*finally:*/ {
    /*normal exit:*/{
      PyMem_Free(__pyx_v_tmp);
      goto __pyx_L7;
    }
    __pyx_L6_error:;
    /*exception exit:*/{
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __pyx_t_7 = 0; __pyx_t_8 = 0; __pyx_t_9 = 0; __pyx_t_10 = 0; __pyx_t_11 = 0; __pyx_t_12 = 0;
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_10, &__pyx_t_11, &__pyx_t_12);
      if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_7, &__pyx_t_8, &__pyx_t_9) < 0)) __Pyx_ErrFetch(&__pyx_t_7, &__pyx_t_8, &__pyx_t_9);
      __Pyx_XGOTREF(__pyx_t_7);
      __Pyx_XGOTREF(__pyx_t_8);
      __Pyx_XGOTREF(__pyx_t_9);
      __Pyx_XGOTREF(__pyx_t_10);
      __Pyx_XGOTREF(__pyx_t_11);
      __Pyx_XGOTREF(__pyx_t_12);
      __pyx_t_4 = __pyx_lineno; __pyx_t_5 = __pyx_clineno; __pyx_t_6 = __pyx_filename;
      {
        PyMem_Free(__pyx_v_tmp);
      }
      if (PY_MAJOR_VERSION >= 3) {
        __Pyx_XGIVEREF(__pyx_t_10);
        __Pyx_XGIVEREF(__pyx_t_11);
        __Pyx_XGIVEREF(__pyx_t_12);
        __Pyx_ExceptionReset(__pyx_t_10, __pyx_t_11, __pyx_t_12);
      }
      __Pyx_XGIVEREF(__pyx_t_7);
      __Pyx_XGIVEREF(__pyx_t_8);
      __Pyx_XGIVEREF(__pyx_t_9);
      __Pyx_ErrRestore(__pyx_t_7, __pyx_t_8, __pyx_t_9);
      __pyx_t_7 = 0; __pyx_t_8 = 0; __pyx_t_9 = 0; __pyx_t_10 = 0; __pyx_t_11 = 0; __pyx_t_12 = 0;
      __pyx_lineno = __pyx_t_4; __pyx_clineno = __pyx_t_5; __pyx_filename = __pyx_t_6;
      goto __pyx_L1_error;
    }
    __pyx_L7:;
  }

  /* "View.MemoryView":451
 *                                  src.ndim, dst.ndim, self.dtype_is_object)
 * 
 *     cdef setitem_slice_assign_scalar(self, memoryview dst, value):             # <<<<<<<<<<<<<<
 *         cdef int array[128]
 *         cdef void *tmp = NULL
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.memoryview.setitem_slice_assign_scalar", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":483
 *             PyMem_Free(tmp)
 * 
 *     cdef setitem_indexed(self, index, value):             # <<<<<<<<<<<<<<
 *         cdef char *itemp = self.get_item_pointer(index)
 *         self.assign_item_from_object(itemp, value)
 */

static PyObject *__pyx_memoryview_setitem_indexed(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_index, PyObject *__pyx_v_value) {
  char *__pyx_v_itemp;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  char *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setitem_indexed", 0);

  /* "View.MemoryView":484
 * 
 *     cdef setitem_indexed(self, index, value):
 *         cdef char *itemp = self.get_item_pointer(index)             # <<<<<<<<<<<<<<
 *         self.assign_item_from_object(itemp, value)
 * 
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->get_item_pointer(__pyx_v_self, __pyx_v_index); if (unlikely(__pyx_t_1 == ((char *)NULL))) __PYX_ERR(2, 484, __pyx_L1_error)
  __pyx_v_itemp = __pyx_t_1;

  /* "View.MemoryView":485
 *     cdef setitem_indexed(self, index, value):
 *         cdef char *itemp = self.get_item_pointer(index)
 *         self.assign_item_from_object(itemp, value)             # <<<<<<<<<<<<<<
 * 
 *     cdef convert_item_to_object(self, char *itemp):
 */
  __pyx_t_2 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->assign_item_from_object(__pyx_v_self, __pyx_v_itemp, __pyx_v_value); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 485, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "View.MemoryView":483
 *             PyMem_Free(tmp)
 * 
 *     cdef setitem_indexed(self, index, value):             # <<<<<<<<<<<<<<
 *         cdef char *itemp = self.get_item_pointer(index)
 *         self.assign_item_from_object(itemp, value)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("View.MemoryView.memoryview.setitem_indexed", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":487
 *         self.assign_item_from_object(itemp, value)
 * 
 *     cdef convert_item_to_object(self, char *itemp):             # <<<<<<<<<<<<<<
 *         """Only used if instantiated manually by the user, or if Cython doesn't
 *         know how to convert the type"""
 */

static PyObject *__pyx_memoryview_convert_item_to_object(struct __pyx_memoryview_obj *__pyx_v_self, char *__pyx_v_itemp) {
  PyObject *__pyx_v_struct = NULL;
  PyObject *__pyx_v_bytesitem = 0;
  PyObject *__pyx_v_result = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  size_t __pyx_t_10;
  int __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("convert_item_to_object", 0);

  /* "View.MemoryView":490
 *         """Only used if instantiated manually by the user, or if Cython doesn't
 *         know how to convert the type"""
 *         import struct             # <<<<<<<<<<<<<<
 *         cdef bytes bytesitem
 * 
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_struct, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 490, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_struct = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "View.MemoryView":493
 *         cdef bytes bytesitem
 * 
 *         bytesitem = itemp[:self.view.itemsize]             # <<<<<<<<<<<<<<
 *         try:
 *             result = struct.unpack(self.view.format, bytesitem)
 */
  __pyx_t_1 = __Pyx_PyBytes_FromStringAndSize(__pyx_v_itemp + 0, __pyx_v_self->view.itemsize - 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 493, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_bytesitem = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "View.MemoryView":494
 * 
 *         bytesitem = itemp[:self.view.itemsize]
 *         try:             # <<<<<<<<<<<<<<
 *             result = struct.unpack(self.view.format, bytesitem)
 *         except struct.error:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_2, &__pyx_t_3, &__pyx_t_4);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_4);
    /*try:*/ {

      /* "View.MemoryView":495
 *         bytesitem = itemp[:self.view.itemsize]
 *         try:
 *             result = struct.unpack(self.view.format, bytesitem)             # <<<<<<<<<<<<<<
 *         except struct.error:
 *             raise ValueError("Unable to convert item to object")
 */
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_struct, __pyx_n_s_unpack); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 495, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = __Pyx_PyBytes_FromString(__pyx_v_self->view.format); if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 495, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_7 = NULL;
      __pyx_t_8 = 0;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
        __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_5);
        if (likely(__pyx_t_7)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_7);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_5, function);
          __pyx_t_8 = 1;
        }
      }
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_5)) {
        PyObject *__pyx_temp[3] = {__pyx_t_7, __pyx_t_6, __pyx_v_bytesitem};
        __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 495, __pyx_L3_error)
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
        PyObject *__pyx_temp[3] = {__pyx_t_7, __pyx_t_6, __pyx_v_bytesitem};
        __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 495, __pyx_L3_error)
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      } else
      #endif
      {
        __pyx_t_9 = PyTuple_New(2+__pyx_t_8); if (unlikely(!__pyx_t_9)) __PYX_ERR(2, 495, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_9);
        if (__pyx_t_7) {
          __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_7); __pyx_t_7 = NULL;
        }
        __Pyx_GIVEREF(__pyx_t_6);
        PyTuple_SET_ITEM(__pyx_t_9, 0+__pyx_t_8, __pyx_t_6);
        __Pyx_INCREF(__pyx_v_bytesitem);
        __Pyx_GIVEREF(__pyx_v_bytesitem);
        PyTuple_SET_ITEM(__pyx_t_9, 1+__pyx_t_8, __pyx_v_bytesitem);
        __pyx_t_6 = 0;
        __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_9, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 495, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      }
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_v_result = __pyx_t_1;
      __pyx_t_1 = 0;

      /* "View.MemoryView":494
 * 
 *         bytesitem = itemp[:self.view.itemsize]
 *         try:             # <<<<<<<<<<<<<<
 *             result = struct.unpack(self.view.format, bytesitem)
 *         except struct.error:
 */
    }

    /* "View.MemoryView":499
 *             raise ValueError("Unable to convert item to object")
 *         else:
 *             if len(self.view.format) == 1:             # <<<<<<<<<<<<<<
 *                 return result[0]
 *             return result
 */
    /*else:*/ {
      __pyx_t_10 = strlen(__pyx_v_self->view.format); 
      __pyx_t_11 = ((__pyx_t_10 == 1) != 0);
      if (__pyx_t_11) {

        /* "View.MemoryView":500
 *         else:
 *             if len(self.view.format) == 1:
 *                 return result[0]             # <<<<<<<<<<<<<<
 *             return result
 * 
 */
        __Pyx_XDECREF(__pyx_r);
        __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_result, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 500, __pyx_L5_except_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_r = __pyx_t_1;
        __pyx_t_1 = 0;
        goto __pyx_L6_except_return;

        /* "View.MemoryView":499
 *             raise ValueError("Unable to convert item to object")
 *         else:
 *             if len(self.view.format) == 1:             # <<<<<<<<<<<<<<
 *                 return result[0]
 *             return result
 */
      }

      /* "View.MemoryView":501
 *             if len(self.view.format) == 1:
 *                 return result[0]
 *             return result             # <<<<<<<<<<<<<<
 * 
 *     cdef assign_item_from_object(self, char *itemp, object value):
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(__pyx_v_result);
      __pyx_r = __pyx_v_result;
      goto __pyx_L6_except_return;
    }
    __pyx_L3_error:;
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;

    /* "View.MemoryView":496
 *         try:
 *             result = struct.unpack(self.view.format, bytesitem)
 *         except struct.error:             # <<<<<<<<<<<<<<
 *             raise ValueError("Unable to convert item to object")
 *         else:
 */
    __Pyx_ErrFetch(&__pyx_t_1, &__pyx_t_5, &__pyx_t_9);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_struct, __pyx_n_s_error); if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 496, __pyx_L5_except_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_8 = __Pyx_PyErr_GivenExceptionMatches(__pyx_t_1, __pyx_t_6);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_ErrRestore(__pyx_t_1, __pyx_t_5, __pyx_t_9);
    __pyx_t_1 = 0; __pyx_t_5 = 0; __pyx_t_9 = 0;
    if (__pyx_t_8) {
      __Pyx_AddTraceback("View.MemoryView.memoryview.convert_item_to_object", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_9, &__pyx_t_5, &__pyx_t_1) < 0) __PYX_ERR(2, 496, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_1);

      /* "View.MemoryView":497
 *             result = struct.unpack(self.view.format, bytesitem)
 *         except struct.error:
 *             raise ValueError("Unable to convert item to object")             # <<<<<<<<<<<<<<
 *         else:
 *             if len(self.view.format) == 1:
 */
      __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__11, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 497, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_Raise(__pyx_t_6, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __PYX_ERR(2, 497, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "View.MemoryView":494
 * 
 *         bytesitem = itemp[:self.view.itemsize]
 *         try:             # <<<<<<<<<<<<<<
 *             result = struct.unpack(self.view.format, bytesitem)
 *         except struct.error:
 */
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_ExceptionReset(__pyx_t_2, __pyx_t_3, __pyx_t_4);
    goto __pyx_L1_error;
    __pyx_L6_except_return:;
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_ExceptionReset(__pyx_t_2, __pyx_t_3, __pyx_t_4);
    goto __pyx_L0;
  }

  /* "View.MemoryView":487
 *         self.assign_item_from_object(itemp, value)
 * 
 *     cdef convert_item_to_object(self, char *itemp):             # <<<<<<<<<<<<<<
 *         """Only used if instantiated manually by the user, or if Cython doesn't
 *         know how to convert the type"""
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("View.MemoryView.memoryview.convert_item_to_object", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_struct);
  __Pyx_XDECREF(__pyx_v_bytesitem);
  __Pyx_XDECREF(__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":503
 *             return result
 * 
 *     cdef assign_item_from_object(self, char *itemp, object value):             # <<<<<<<<<<<<<<
 *         """Only used if instantiated manually by the user, or if Cython doesn't
 *         know how to convert the type"""
 */

static PyObject *__pyx_memoryview_assign_item_from_object(struct __pyx_memoryview_obj *__pyx_v_self, char *__pyx_v_itemp, PyObject *__pyx_v_value) {
  PyObject *__pyx_v_struct = NULL;
  char __pyx_v_c;
  PyObject *__pyx_v_bytesvalue = 0;
  Py_ssize_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  Py_ssize_t __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  char *__pyx_t_11;
  char *__pyx_t_12;
  char *__pyx_t_13;
  char *__pyx_t_14;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("assign_item_from_object", 0);

  /* "View.MemoryView":506
 *         """Only used if instantiated manually by the user, or if Cython doesn't
 *         know how to convert the type"""
 *         import struct             # <<<<<<<<<<<<<<
 *         cdef char c
 *         cdef bytes bytesvalue
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_struct, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 506, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_struct = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "View.MemoryView":511
 *         cdef Py_ssize_t i
 * 
 *         if isinstance(value, tuple):             # <<<<<<<<<<<<<<
 *             bytesvalue = struct.pack(self.view.format, *value)
 *         else:
 */
  __pyx_t_2 = PyTuple_Check(__pyx_v_value); 
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "View.MemoryView":512
 * 
 *         if isinstance(value, tuple):
 *             bytesvalue = struct.pack(self.view.format, *value)             # <<<<<<<<<<<<<<
 *         else:
 *             bytesvalue = struct.pack(self.view.format, value)
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_struct, __pyx_n_s_pack); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 512, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = __Pyx_PyBytes_FromString(__pyx_v_self->view.format); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 512, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 512, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PySequence_Tuple(__pyx_v_value); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 512, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = PyNumber_Add(__pyx_t_5, __pyx_t_4); if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 512, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_6, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 512, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (!(likely(PyBytes_CheckExact(__pyx_t_4))||((__pyx_t_4) == Py_None)||((void)PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "bytes", Py_TYPE(__pyx_t_4)->tp_name), 0))) __PYX_ERR(2, 512, __pyx_L1_error)
    __pyx_v_bytesvalue = ((PyObject*)__pyx_t_4);
    __pyx_t_4 = 0;

    /* "View.MemoryView":511
 *         cdef Py_ssize_t i
 * 
 *         if isinstance(value, tuple):             # <<<<<<<<<<<<<<
 *             bytesvalue = struct.pack(self.view.format, *value)
 *         else:
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":514
 *             bytesvalue = struct.pack(self.view.format, *value)
 *         else:
 *             bytesvalue = struct.pack(self.view.format, value)             # <<<<<<<<<<<<<<
 * 
 *         for i, c in enumerate(bytesvalue):
 */
  /*else*/ {
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_struct, __pyx_n_s_pack); if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 514, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_1 = __Pyx_PyBytes_FromString(__pyx_v_self->view.format); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 514, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = NULL;
    __pyx_t_7 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
        __pyx_t_7 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_6)) {
      PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_t_1, __pyx_v_value};
      __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 514, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
      PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_t_1, __pyx_v_value};
      __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 514, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else
    #endif
    {
      __pyx_t_8 = PyTuple_New(2+__pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 514, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      if (__pyx_t_5) {
        __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_5); __pyx_t_5 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_1);
      PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_7, __pyx_t_1);
      __Pyx_INCREF(__pyx_v_value);
      __Pyx_GIVEREF(__pyx_v_value);
      PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_7, __pyx_v_value);
      __pyx_t_1 = 0;
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_8, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 514, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    }
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (!(likely(PyBytes_CheckExact(__pyx_t_4))||((__pyx_t_4) == Py_None)||((void)PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "bytes", Py_TYPE(__pyx_t_4)->tp_name), 0))) __PYX_ERR(2, 514, __pyx_L1_error)
    __pyx_v_bytesvalue = ((PyObject*)__pyx_t_4);
    __pyx_t_4 = 0;
  }
  __pyx_L3:;

  /* "View.MemoryView":516
 *             bytesvalue = struct.pack(self.view.format, value)
 * 
 *         for i, c in enumerate(bytesvalue):             # <<<<<<<<<<<<<<
 *             itemp[i] = c
 * 
 */
  __pyx_t_9 = 0;
  if (unlikely(__pyx_v_bytesvalue == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' is not iterable");
    __PYX_ERR(2, 516, __pyx_L1_error)
  }
  __Pyx_INCREF(__pyx_v_bytesvalue);
  __pyx_t_10 = __pyx_v_bytesvalue;
  __pyx_t_12 = PyBytes_AS_STRING(__pyx_t_10);
  __pyx_t_13 = (__pyx_t_12 + PyBytes_GET_SIZE(__pyx_t_10));
  for (__pyx_t_14 = __pyx_t_12; __pyx_t_14 < __pyx_t_13; __pyx_t_14++) {
    __pyx_t_11 = __pyx_t_14;
    __pyx_v_c = (__pyx_t_11[0]);

    /* "View.MemoryView":517
 * 
 *         for i, c in enumerate(bytesvalue):
 *             itemp[i] = c             # <<<<<<<<<<<<<<
 * 
 *     @cname('getbuffer')
 */
    __pyx_v_i = __pyx_t_9;

    /* "View.MemoryView":516
 *             bytesvalue = struct.pack(self.view.format, value)
 * 
 *         for i, c in enumerate(bytesvalue):             # <<<<<<<<<<<<<<
 *             itemp[i] = c
 * 
 */
    __pyx_t_9 = (__pyx_t_9 + 1);

    /* "View.MemoryView":517
 * 
 *         for i, c in enumerate(bytesvalue):
 *             itemp[i] = c             # <<<<<<<<<<<<<<
 * 
 *     @cname('getbuffer')
 */
    (__pyx_v_itemp[__pyx_v_i]) = __pyx_v_c;
  }
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

  /* "View.MemoryView":503
 *             return result
 * 
 *     cdef assign_item_from_object(self, char *itemp, object value):             # <<<<<<<<<<<<<<
 *         """Only used if instantiated manually by the user, or if Cython doesn't
 *         know how to convert the type"""
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("View.MemoryView.memoryview.assign_item_from_object", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_struct);
  __Pyx_XDECREF(__pyx_v_bytesvalue);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":520
 * 
 *     @cname('getbuffer')
 *     def __getbuffer__(self, Py_buffer *info, int flags):             # <<<<<<<<<<<<<<
 *         if flags & PyBUF_WRITABLE and self.view.readonly:
 *             raise ValueError("Cannot create writable memory view from read-only memoryview")
 */

/* Python wrapper */
static CYTHON_UNUSED int __pyx_memoryview_getbuffer(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /*proto*/
static CYTHON_UNUSED int __pyx_memoryview_getbuffer(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getbuffer__ (wrapper)", 0);
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_8__getbuffer__(((struct __pyx_memoryview_obj *)__pyx_v_self), ((Py_buffer *)__pyx_v_info), ((int)__pyx_v_flags));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_8__getbuffer__(struct __pyx_memoryview_obj *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t *__pyx_t_4;
  char *__pyx_t_5;
  void *__pyx_t_6;
  int __pyx_t_7;
  Py_ssize_t __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  if (__pyx_v_info == NULL) {
    PyErr_SetString(PyExc_BufferError, "PyObject_GetBuffer: view==NULL argument is obsolete");
    return -1;
  }
  __Pyx_RefNannySetupContext("__getbuffer__", 0);
  __pyx_v_info->obj = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(__pyx_v_info->obj);

  /* "View.MemoryView":521
 *     @cname('getbuffer')
 *     def __getbuffer__(self, Py_buffer *info, int flags):
 *         if flags & PyBUF_WRITABLE and self.view.readonly:             # <<<<<<<<<<<<<<
 *             raise ValueError("Cannot create writable memory view from read-only memoryview")
 * 
 */
  __pyx_t_2 = ((__pyx_v_flags & PyBUF_WRITABLE) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = (__pyx_v_self->view.readonly != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (unlikely(__pyx_t_1)) {

    /* "View.MemoryView":522
 *     def __getbuffer__(self, Py_buffer *info, int flags):
 *         if flags & PyBUF_WRITABLE and self.view.readonly:
 *             raise ValueError("Cannot create writable memory view from read-only memoryview")             # <<<<<<<<<<<<<<
 * 
 *         if flags & PyBUF_ND:
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__12, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 522, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(2, 522, __pyx_L1_error)

    /* "View.MemoryView":521
 *     @cname('getbuffer')
 *     def __getbuffer__(self, Py_buffer *info, int flags):
 *         if flags & PyBUF_WRITABLE and self.view.readonly:             # <<<<<<<<<<<<<<
 *             raise ValueError("Cannot create writable memory view from read-only memoryview")
 * 
 */
  }

  /* "View.MemoryView":524
 *             raise ValueError("Cannot create writable memory view from read-only memoryview")
 * 
 *         if flags & PyBUF_ND:             # <<<<<<<<<<<<<<
 *             info.shape = self.view.shape
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_flags & PyBUF_ND) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":525
 * 
 *         if flags & PyBUF_ND:
 *             info.shape = self.view.shape             # <<<<<<<<<<<<<<
 *         else:
 *             info.shape = NULL
 */
    __pyx_t_4 = __pyx_v_self->view.shape;
    __pyx_v_info->shape = __pyx_t_4;

    /* "View.MemoryView":524
 *             raise ValueError("Cannot create writable memory view from read-only memoryview")
 * 
 *         if flags & PyBUF_ND:             # <<<<<<<<<<<<<<
 *             info.shape = self.view.shape
 *         else:
 */
    goto __pyx_L6;
  }

  /* "View.MemoryView":527
 *             info.shape = self.view.shape
 *         else:
 *             info.shape = NULL             # <<<<<<<<<<<<<<
 * 
 *         if flags & PyBUF_STRIDES:
 */
  /*else*/ {
    __pyx_v_info->shape = NULL;
  }
  __pyx_L6:;

  /* "View.MemoryView":529
 *             info.shape = NULL
 * 
 *         if flags & PyBUF_STRIDES:             # <<<<<<<<<<<<<<
 *             info.strides = self.view.strides
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_flags & PyBUF_STRIDES) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":530
 * 
 *         if flags & PyBUF_STRIDES:
 *             info.strides = self.view.strides             # <<<<<<<<<<<<<<
 *         else:
 *             info.strides = NULL
 */
    __pyx_t_4 = __pyx_v_self->view.strides;
    __pyx_v_info->strides = __pyx_t_4;

    /* "View.MemoryView":529
 *             info.shape = NULL
 * 
 *         if flags & PyBUF_STRIDES:             # <<<<<<<<<<<<<<
 *             info.strides = self.view.strides
 *         else:
 */
    goto __pyx_L7;
  }

  /* "View.MemoryView":532
 *             info.strides = self.view.strides
 *         else:
 *             info.strides = NULL             # <<<<<<<<<<<<<<
 * 
 *         if flags & PyBUF_INDIRECT:
 */
  /*else*/ {
    __pyx_v_info->strides = NULL;
  }
  __pyx_L7:;

  /* "View.MemoryView":534
 *             info.strides = NULL
 * 
 *         if flags & PyBUF_INDIRECT:             # <<<<<<<<<<<<<<
 *             info.suboffsets = self.view.suboffsets
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_flags & PyBUF_INDIRECT) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":535
 * 
 *         if flags & PyBUF_INDIRECT:
 *             info.suboffsets = self.view.suboffsets             # <<<<<<<<<<<<<<
 *         else:
 *             info.suboffsets = NULL
 */
    __pyx_t_4 = __pyx_v_self->view.suboffsets;
    __pyx_v_info->suboffsets = __pyx_t_4;

    /* "View.MemoryView":534
 *             info.strides = NULL
 * 
 *         if flags & PyBUF_INDIRECT:             # <<<<<<<<<<<<<<
 *             info.suboffsets = self.view.suboffsets
 *         else:
 */
    goto __pyx_L8;
  }

  /* "View.MemoryView":537
 *             info.suboffsets = self.view.suboffsets
 *         else:
 *             info.suboffsets = NULL             # <<<<<<<<<<<<<<
 * 
 *         if flags & PyBUF_FORMAT:
 */
  /*else*/ {
    __pyx_v_info->suboffsets = NULL;
  }
  __pyx_L8:;

  /* "View.MemoryView":539
 *             info.suboffsets = NULL
 * 
 *         if flags & PyBUF_FORMAT:             # <<<<<<<<<<<<<<
 *             info.format = self.view.format
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_flags & PyBUF_FORMAT) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":540
 * 
 *         if flags & PyBUF_FORMAT:
 *             info.format = self.view.format             # <<<<<<<<<<<<<<
 *         else:
 *             info.format = NULL
 */
    __pyx_t_5 = __pyx_v_self->view.format;
    __pyx_v_info->format = __pyx_t_5;

    /* "View.MemoryView":539
 *             info.suboffsets = NULL
 * 
 *         if flags & PyBUF_FORMAT:             # <<<<<<<<<<<<<<
 *             info.format = self.view.format
 *         else:
 */
    goto __pyx_L9;
  }

  /* "View.MemoryView":542
 *             info.format = self.view.format
 *         else:
 *             info.format = NULL             # <<<<<<<<<<<<<<
 * 
 *         info.buf = self.view.buf
 */
  /*else*/ {
    __pyx_v_info->format = NULL;
  }
  __pyx_L9:;

  /* "View.MemoryView":544
 *             info.format = NULL
 * 
 *         info.buf = self.view.buf             # <<<<<<<<<<<<<<
 *         info.ndim = self.view.ndim
 *         info.itemsize = self.view.itemsize
 */
  __pyx_t_6 = __pyx_v_self->view.buf;
  __pyx_v_info->buf = __pyx_t_6;

  /* "View.MemoryView":545
 * 
 *         info.buf = self.view.buf
 *         info.ndim = self.view.ndim             # <<<<<<<<<<<<<<
 *         info.itemsize = self.view.itemsize
 *         info.len = self.view.len
 */
  __pyx_t_7 = __pyx_v_self->view.ndim;
  __pyx_v_info->ndim = __pyx_t_7;

  /* "View.MemoryView":546
 *         info.buf = self.view.buf
 *         info.ndim = self.view.ndim
 *         info.itemsize = self.view.itemsize             # <<<<<<<<<<<<<<
 *         info.len = self.view.len
 *         info.readonly = self.view.readonly
 */
  __pyx_t_8 = __pyx_v_self->view.itemsize;
  __pyx_v_info->itemsize = __pyx_t_8;

  /* "View.MemoryView":547
 *         info.ndim = self.view.ndim
 *         info.itemsize = self.view.itemsize
 *         info.len = self.view.len             # <<<<<<<<<<<<<<
 *         info.readonly = self.view.readonly
 *         info.obj = self
 */
  __pyx_t_8 = __pyx_v_self->view.len;
  __pyx_v_info->len = __pyx_t_8;

  /* "View.MemoryView":548
 *         info.itemsize = self.view.itemsize
 *         info.len = self.view.len
 *         info.readonly = self.view.readonly             # <<<<<<<<<<<<<<
 *         info.obj = self
 * 
 */
  __pyx_t_1 = __pyx_v_self->view.readonly;
  __pyx_v_info->readonly = __pyx_t_1;

  /* "View.MemoryView":549
 *         info.len = self.view.len
 *         info.readonly = self.view.readonly
 *         info.obj = self             # <<<<<<<<<<<<<<
 * 
 *     __pyx_getbuffer = capsule(<void *> &__pyx_memoryview_getbuffer, "getbuffer(obj, view, flags)")
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  __Pyx_GOTREF(__pyx_v_info->obj);
  __Pyx_DECREF(__pyx_v_info->obj);
  __pyx_v_info->obj = ((PyObject *)__pyx_v_self);

  /* "View.MemoryView":520
 * 
 *     @cname('getbuffer')
 *     def __getbuffer__(self, Py_buffer *info, int flags):             # <<<<<<<<<<<<<<
 *         if flags & PyBUF_WRITABLE and self.view.readonly:
 *             raise ValueError("Cannot create writable memory view from read-only memoryview")
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.memoryview.__getbuffer__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  if (__pyx_v_info->obj != NULL) {
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj); __pyx_v_info->obj = 0;
  }
  goto __pyx_L2;
  __pyx_L0:;
  if (__pyx_v_info->obj == Py_None) {
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj); __pyx_v_info->obj = 0;
  }
  __pyx_L2:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":555
 * 
 *     @property
 *     def T(self):             # <<<<<<<<<<<<<<
 *         cdef _memoryviewslice result = memoryview_copy(self)
 *         transpose_memslice(&result.from_slice)
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_1T_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_1T_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_10memoryview_1T___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_1T___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  struct __pyx_memoryviewslice_obj *__pyx_v_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":556
 *     @property
 *     def T(self):
 *         cdef _memoryviewslice result = memoryview_copy(self)             # <<<<<<<<<<<<<<
 *         transpose_memslice(&result.from_slice)
 *         return result
 */
  __pyx_t_1 = __pyx_memoryview_copy_object(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 556, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_memoryviewslice_type))))) __PYX_ERR(2, 556, __pyx_L1_error)
  __pyx_v_result = ((struct __pyx_memoryviewslice_obj *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "View.MemoryView":557
 *     def T(self):
 *         cdef _memoryviewslice result = memoryview_copy(self)
 *         transpose_memslice(&result.from_slice)             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  __pyx_t_2 = __pyx_memslice_transpose((&__pyx_v_result->from_slice)); if (unlikely(__pyx_t_2 == ((int)0))) __PYX_ERR(2, 557, __pyx_L1_error)

  /* "View.MemoryView":558
 *         cdef _memoryviewslice result = memoryview_copy(self)
 *         transpose_memslice(&result.from_slice)
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = ((PyObject *)__pyx_v_result);
  goto __pyx_L0;

  /* "View.MemoryView":555
 * 
 *     @property
 *     def T(self):             # <<<<<<<<<<<<<<
 *         cdef _memoryviewslice result = memoryview_copy(self)
 *         transpose_memslice(&result.from_slice)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.memoryview.T.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":561
 * 
 *     @property
 *     def base(self):             # <<<<<<<<<<<<<<
 *         return self.obj
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_4base_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_4base_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_10memoryview_4base___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_4base___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":562
 *     @property
 *     def base(self):
 *         return self.obj             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->obj);
  __pyx_r = __pyx_v_self->obj;
  goto __pyx_L0;

  /* "View.MemoryView":561
 * 
 *     @property
 *     def base(self):             # <<<<<<<<<<<<<<
 *         return self.obj
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":565
 * 
 *     @property
 *     def shape(self):             # <<<<<<<<<<<<<<
 *         return tuple([length for length in self.view.shape[:self.view.ndim]])
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_5shape_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_5shape_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_10memoryview_5shape___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_5shape___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  Py_ssize_t __pyx_v_length;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t *__pyx_t_2;
  Py_ssize_t *__pyx_t_3;
  Py_ssize_t *__pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":566
 *     @property
 *     def shape(self):
 *         return tuple([length for length in self.view.shape[:self.view.ndim]])             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 566, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = (__pyx_v_self->view.shape + __pyx_v_self->view.ndim);
  for (__pyx_t_4 = __pyx_v_self->view.shape; __pyx_t_4 < __pyx_t_3; __pyx_t_4++) {
    __pyx_t_2 = __pyx_t_4;
    __pyx_v_length = (__pyx_t_2[0]);
    __pyx_t_5 = PyInt_FromSsize_t(__pyx_v_length); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 566, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_5))) __PYX_ERR(2, 566, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __pyx_t_5 = PyList_AsTuple(((PyObject*)__pyx_t_1)); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 566, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":565
 * 
 *     @property
 *     def shape(self):             # <<<<<<<<<<<<<<
 *         return tuple([length for length in self.view.shape[:self.view.ndim]])
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("View.MemoryView.memoryview.shape.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":569
 * 
 *     @property
 *     def strides(self):             # <<<<<<<<<<<<<<
 *         if self.view.strides == NULL:
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_7strides_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_7strides_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_10memoryview_7strides___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_7strides___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  Py_ssize_t __pyx_v_stride;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t *__pyx_t_3;
  Py_ssize_t *__pyx_t_4;
  Py_ssize_t *__pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":570
 *     @property
 *     def strides(self):
 *         if self.view.strides == NULL:             # <<<<<<<<<<<<<<
 * 
 *             raise ValueError("Buffer view does not expose strides")
 */
  __pyx_t_1 = ((__pyx_v_self->view.strides == NULL) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "View.MemoryView":572
 *         if self.view.strides == NULL:
 * 
 *             raise ValueError("Buffer view does not expose strides")             # <<<<<<<<<<<<<<
 * 
 *         return tuple([stride for stride in self.view.strides[:self.view.ndim]])
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__13, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 572, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(2, 572, __pyx_L1_error)

    /* "View.MemoryView":570
 *     @property
 *     def strides(self):
 *         if self.view.strides == NULL:             # <<<<<<<<<<<<<<
 * 
 *             raise ValueError("Buffer view does not expose strides")
 */
  }

  /* "View.MemoryView":574
 *             raise ValueError("Buffer view does not expose strides")
 * 
 *         return tuple([stride for stride in self.view.strides[:self.view.ndim]])             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 574, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = (__pyx_v_self->view.strides + __pyx_v_self->view.ndim);
  for (__pyx_t_5 = __pyx_v_self->view.strides; __pyx_t_5 < __pyx_t_4; __pyx_t_5++) {
    __pyx_t_3 = __pyx_t_5;
    __pyx_v_stride = (__pyx_t_3[0]);
    __pyx_t_6 = PyInt_FromSsize_t(__pyx_v_stride); if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 574, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_2, (PyObject*)__pyx_t_6))) __PYX_ERR(2, 574, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __pyx_t_6 = PyList_AsTuple(((PyObject*)__pyx_t_2)); if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 574, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_6;
  __pyx_t_6 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":569
 * 
 *     @property
 *     def strides(self):             # <<<<<<<<<<<<<<
 *         if self.view.strides == NULL:
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("View.MemoryView.memoryview.strides.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":577
 * 
 *     @property
 *     def suboffsets(self):             # <<<<<<<<<<<<<<
 *         if self.view.suboffsets == NULL:
 *             return (-1,) * self.view.ndim
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_10suboffsets_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_10suboffsets_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_10memoryview_10suboffsets___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_10suboffsets___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  Py_ssize_t __pyx_v_suboffset;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t *__pyx_t_4;
  Py_ssize_t *__pyx_t_5;
  Py_ssize_t *__pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":578
 *     @property
 *     def suboffsets(self):
 *         if self.view.suboffsets == NULL:             # <<<<<<<<<<<<<<
 *             return (-1,) * self.view.ndim
 * 
 */
  __pyx_t_1 = ((__pyx_v_self->view.suboffsets == NULL) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":579
 *     def suboffsets(self):
 *         if self.view.suboffsets == NULL:
 *             return (-1,) * self.view.ndim             # <<<<<<<<<<<<<<
 * 
 *         return tuple([suboffset for suboffset in self.view.suboffsets[:self.view.ndim]])
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_self->view.ndim); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 579, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyNumber_Multiply(__pyx_tuple__14, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 579, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "View.MemoryView":578
 *     @property
 *     def suboffsets(self):
 *         if self.view.suboffsets == NULL:             # <<<<<<<<<<<<<<
 *             return (-1,) * self.view.ndim
 * 
 */
  }

  /* "View.MemoryView":581
 *             return (-1,) * self.view.ndim
 * 
 *         return tuple([suboffset for suboffset in self.view.suboffsets[:self.view.ndim]])             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 581, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = (__pyx_v_self->view.suboffsets + __pyx_v_self->view.ndim);
  for (__pyx_t_6 = __pyx_v_self->view.suboffsets; __pyx_t_6 < __pyx_t_5; __pyx_t_6++) {
    __pyx_t_4 = __pyx_t_6;
    __pyx_v_suboffset = (__pyx_t_4[0]);
    __pyx_t_2 = PyInt_FromSsize_t(__pyx_v_suboffset); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 581, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_3, (PyObject*)__pyx_t_2))) __PYX_ERR(2, 581, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_t_2 = PyList_AsTuple(((PyObject*)__pyx_t_3)); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 581, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":577
 * 
 *     @property
 *     def suboffsets(self):             # <<<<<<<<<<<<<<
 *         if self.view.suboffsets == NULL:
 *             return (-1,) * self.view.ndim
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.memoryview.suboffsets.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":584
 * 
 *     @property
 *     def ndim(self):             # <<<<<<<<<<<<<<
 *         return self.view.ndim
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_4ndim_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_4ndim_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_10memoryview_4ndim___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_4ndim___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":585
 *     @property
 *     def ndim(self):
 *         return self.view.ndim             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->view.ndim); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 585, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":584
 * 
 *     @property
 *     def ndim(self):             # <<<<<<<<<<<<<<
 *         return self.view.ndim
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.memoryview.ndim.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":588
 * 
 *     @property
 *     def itemsize(self):             # <<<<<<<<<<<<<<
 *         return self.view.itemsize
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_8itemsize_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_8itemsize_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_10memoryview_8itemsize___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_8itemsize___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":589
 *     @property
 *     def itemsize(self):
 *         return self.view.itemsize             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromSsize_t(__pyx_v_self->view.itemsize); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 589, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":588
 * 
 *     @property
 *     def itemsize(self):             # <<<<<<<<<<<<<<
 *         return self.view.itemsize
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.memoryview.itemsize.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":592
 * 
 *     @property
 *     def nbytes(self):             # <<<<<<<<<<<<<<
 *         return self.size * self.view.itemsize
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_6nbytes_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_6nbytes_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_10memoryview_6nbytes___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_6nbytes___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":593
 *     @property
 *     def nbytes(self):
 *         return self.size * self.view.itemsize             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_size); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 593, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyInt_FromSsize_t(__pyx_v_self->view.itemsize); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 593, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyNumber_Multiply(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 593, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":592
 * 
 *     @property
 *     def nbytes(self):             # <<<<<<<<<<<<<<
 *         return self.size * self.view.itemsize
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.memoryview.nbytes.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":596
 * 
 *     @property
 *     def size(self):             # <<<<<<<<<<<<<<
 *         if self._size is None:
 *             result = 1
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_4size_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_4size_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_10memoryview_4size___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_4size___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  PyObject *__pyx_v_result = NULL;
  PyObject *__pyx_v_length = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  Py_ssize_t *__pyx_t_3;
  Py_ssize_t *__pyx_t_4;
  Py_ssize_t *__pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":597
 *     @property
 *     def size(self):
 *         if self._size is None:             # <<<<<<<<<<<<<<
 *             result = 1
 * 
 */
  __pyx_t_1 = (__pyx_v_self->_size == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":598
 *     def size(self):
 *         if self._size is None:
 *             result = 1             # <<<<<<<<<<<<<<
 * 
 *             for length in self.view.shape[:self.view.ndim]:
 */
    __Pyx_INCREF(__pyx_int_1);
    __pyx_v_result = __pyx_int_1;

    /* "View.MemoryView":600
 *             result = 1
 * 
 *             for length in self.view.shape[:self.view.ndim]:             # <<<<<<<<<<<<<<
 *                 result *= length
 * 
 */
    __pyx_t_4 = (__pyx_v_self->view.shape + __pyx_v_self->view.ndim);
    for (__pyx_t_5 = __pyx_v_self->view.shape; __pyx_t_5 < __pyx_t_4; __pyx_t_5++) {
      __pyx_t_3 = __pyx_t_5;
      __pyx_t_6 = PyInt_FromSsize_t((__pyx_t_3[0])); if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 600, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_XDECREF_SET(__pyx_v_length, __pyx_t_6);
      __pyx_t_6 = 0;

      /* "View.MemoryView":601
 * 
 *             for length in self.view.shape[:self.view.ndim]:
 *                 result *= length             # <<<<<<<<<<<<<<
 * 
 *             self._size = result
 */
      __pyx_t_6 = PyNumber_InPlaceMultiply(__pyx_v_result, __pyx_v_length); if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 601, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF_SET(__pyx_v_result, __pyx_t_6);
      __pyx_t_6 = 0;
    }

    /* "View.MemoryView":603
 *                 result *= length
 * 
 *             self._size = result             # <<<<<<<<<<<<<<
 * 
 *         return self._size
 */
    __Pyx_INCREF(__pyx_v_result);
    __Pyx_GIVEREF(__pyx_v_result);
    __Pyx_GOTREF(__pyx_v_self->_size);
    __Pyx_DECREF(__pyx_v_self->_size);
    __pyx_v_self->_size = __pyx_v_result;

    /* "View.MemoryView":597
 *     @property
 *     def size(self):
 *         if self._size is None:             # <<<<<<<<<<<<<<
 *             result = 1
 * 
 */
  }

  /* "View.MemoryView":605
 *             self._size = result
 * 
 *         return self._size             # <<<<<<<<<<<<<<
 * 
 *     def __len__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->_size);
  __pyx_r = __pyx_v_self->_size;
  goto __pyx_L0;

  /* "View.MemoryView":596
 * 
 *     @property
 *     def size(self):             # <<<<<<<<<<<<<<
 *         if self._size is None:
 *             result = 1
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("View.MemoryView.memoryview.size.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_result);
  __Pyx_XDECREF(__pyx_v_length);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":607
 *         return self._size
 * 
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         if self.view.ndim >= 1:
 *             return self.view.shape[0]
 */

/* Python wrapper */
static Py_ssize_t __pyx_memoryview___len__(PyObject *__pyx_v_self); /*proto*/
static Py_ssize_t __pyx_memoryview___len__(PyObject *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__ (wrapper)", 0);
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_10__len__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static Py_ssize_t __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_10__len__(struct __pyx_memoryview_obj *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__len__", 0);

  /* "View.MemoryView":608
 * 
 *     def __len__(self):
 *         if self.view.ndim >= 1:             # <<<<<<<<<<<<<<
 *             return self.view.shape[0]
 * 
 */
  __pyx_t_1 = ((__pyx_v_self->view.ndim >= 1) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":609
 *     def __len__(self):
 *         if self.view.ndim >= 1:
 *             return self.view.shape[0]             # <<<<<<<<<<<<<<
 * 
 *         return 0
 */
    __pyx_r = (__pyx_v_self->view.shape[0]);
    goto __pyx_L0;

    /* "View.MemoryView":608
 * 
 *     def __len__(self):
 *         if self.view.ndim >= 1:             # <<<<<<<<<<<<<<
 *             return self.view.shape[0]
 * 
 */
  }

  /* "View.MemoryView":611
 *             return self.view.shape[0]
 * 
 *         return 0             # <<<<<<<<<<<<<<
 * 
 *     def __repr__(self):
 */
  __pyx_r = 0;
  goto __pyx_L0;

  /* "View.MemoryView":607
 *         return self._size
 * 
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         if self.view.ndim >= 1:
 *             return self.view.shape[0]
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":613
 *         return 0
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return "<MemoryView of %r at 0x%x>" % (self.base.__class__.__name__,
 *                                                id(self))
 */

/* Python wrapper */
static PyObject *__pyx_memoryview___repr__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_memoryview___repr__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_12__repr__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_12__repr__(struct __pyx_memoryview_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__repr__", 0);

  /* "View.MemoryView":614
 * 
 *     def __repr__(self):
 *         return "<MemoryView of %r at 0x%x>" % (self.base.__class__.__name__,             # <<<<<<<<<<<<<<
 *                                                id(self))
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_base); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 614, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_class); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 614, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_name_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 614, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "View.MemoryView":615
 *     def __repr__(self):
 *         return "<MemoryView of %r at 0x%x>" % (self.base.__class__.__name__,
 *                                                id(self))             # <<<<<<<<<<<<<<
 * 
 *     def __str__(self):
 */
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_id, ((PyObject *)__pyx_v_self)); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 615, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "View.MemoryView":614
 * 
 *     def __repr__(self):
 *         return "<MemoryView of %r at 0x%x>" % (self.base.__class__.__name__,             # <<<<<<<<<<<<<<
 *                                                id(self))
 * 
 */
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 614, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyString_Format(__pyx_kp_s_MemoryView_of_r_at_0x_x, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 614, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":613
 *         return 0
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return "<MemoryView of %r at 0x%x>" % (self.base.__class__.__name__,
 *                                                id(self))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.memoryview.__repr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":617
 *                                                id(self))
 * 
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         return "<MemoryView of %r object>" % (self.base.__class__.__name__,)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_memoryview___str__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_memoryview___str__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__str__ (wrapper)", 0);
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_14__str__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_14__str__(struct __pyx_memoryview_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__str__", 0);

  /* "View.MemoryView":618
 * 
 *     def __str__(self):
 *         return "<MemoryView of %r object>" % (self.base.__class__.__name__,)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_base); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 618, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_class); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 618, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_name_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 618, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 618, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyString_Format(__pyx_kp_s_MemoryView_of_r_object, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 618, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":617
 *                                                id(self))
 * 
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         return "<MemoryView of %r object>" % (self.base.__class__.__name__,)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("View.MemoryView.memoryview.__str__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":621
 * 
 * 
 *     def is_c_contig(self):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice *mslice
 *         cdef __Pyx_memviewslice tmp
 */

/* Python wrapper */
static PyObject *__pyx_memoryview_is_c_contig(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_memoryview_is_c_contig(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_c_contig (wrapper)", 0);
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_16is_c_contig(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_16is_c_contig(struct __pyx_memoryview_obj *__pyx_v_self) {
  __Pyx_memviewslice *__pyx_v_mslice;
  __Pyx_memviewslice __pyx_v_tmp;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_memviewslice *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("is_c_contig", 0);

  /* "View.MemoryView":624
 *         cdef __Pyx_memviewslice *mslice
 *         cdef __Pyx_memviewslice tmp
 *         mslice = get_slice_from_memview(self, &tmp)             # <<<<<<<<<<<<<<
 *         return slice_is_contig(mslice[0], 'C', self.view.ndim)
 * 
 */
  __pyx_t_1 = __pyx_memoryview_get_slice_from_memoryview(__pyx_v_self, (&__pyx_v_tmp)); if (unlikely(__pyx_t_1 == ((__Pyx_memviewslice *)NULL))) __PYX_ERR(2, 624, __pyx_L1_error)
  __pyx_v_mslice = __pyx_t_1;

  /* "View.MemoryView":625
 *         cdef __Pyx_memviewslice tmp
 *         mslice = get_slice_from_memview(self, &tmp)
 *         return slice_is_contig(mslice[0], 'C', self.view.ndim)             # <<<<<<<<<<<<<<
 * 
 *     def is_f_contig(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_memviewslice_is_contig((__pyx_v_mslice[0]), 'C', __pyx_v_self->view.ndim)); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 625, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":621
 * 
 * 
 *     def is_c_contig(self):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice *mslice
 *         cdef __Pyx_memviewslice tmp
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("View.MemoryView.memoryview.is_c_contig", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":627
 *         return slice_is_contig(mslice[0], 'C', self.view.ndim)
 * 
 *     def is_f_contig(self):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice *mslice
 *         cdef __Pyx_memviewslice tmp
 */

/* Python wrapper */
static PyObject *__pyx_memoryview_is_f_contig(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_memoryview_is_f_contig(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_f_contig (wrapper)", 0);
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_18is_f_contig(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_18is_f_contig(struct __pyx_memoryview_obj *__pyx_v_self) {
  __Pyx_memviewslice *__pyx_v_mslice;
  __Pyx_memviewslice __pyx_v_tmp;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_memviewslice *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("is_f_contig", 0);

  /* "View.MemoryView":630
 *         cdef __Pyx_memviewslice *mslice
 *         cdef __Pyx_memviewslice tmp
 *         mslice = get_slice_from_memview(self, &tmp)             # <<<<<<<<<<<<<<
 *         return slice_is_contig(mslice[0], 'F', self.view.ndim)
 * 
 */
  __pyx_t_1 = __pyx_memoryview_get_slice_from_memoryview(__pyx_v_self, (&__pyx_v_tmp)); if (unlikely(__pyx_t_1 == ((__Pyx_memviewslice *)NULL))) __PYX_ERR(2, 630, __pyx_L1_error)
  __pyx_v_mslice = __pyx_t_1;

  /* "View.MemoryView":631
 *         cdef __Pyx_memviewslice tmp
 *         mslice = get_slice_from_memview(self, &tmp)
 *         return slice_is_contig(mslice[0], 'F', self.view.ndim)             # <<<<<<<<<<<<<<
 * 
 *     def copy(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_memviewslice_is_contig((__pyx_v_mslice[0]), 'F', __pyx_v_self->view.ndim)); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 631, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":627
 *         return slice_is_contig(mslice[0], 'C', self.view.ndim)
 * 
 *     def is_f_contig(self):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice *mslice
 *         cdef __Pyx_memviewslice tmp
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("View.MemoryView.memoryview.is_f_contig", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":633
 *         return slice_is_contig(mslice[0], 'F', self.view.ndim)
 * 
 *     def copy(self):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice mslice
 *         cdef int flags = self.flags & ~PyBUF_F_CONTIGUOUS
 */

/* Python wrapper */
static PyObject *__pyx_memoryview_copy(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_memoryview_copy(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("copy (wrapper)", 0);
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_20copy(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_20copy(struct __pyx_memoryview_obj *__pyx_v_self) {
  __Pyx_memviewslice __pyx_v_mslice;
  int __pyx_v_flags;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_memviewslice __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("copy", 0);

  /* "View.MemoryView":635
 *     def copy(self):
 *         cdef __Pyx_memviewslice mslice
 *         cdef int flags = self.flags & ~PyBUF_F_CONTIGUOUS             # <<<<<<<<<<<<<<
 * 
 *         slice_copy(self, &mslice)
 */
  __pyx_v_flags = (__pyx_v_self->flags & (~PyBUF_F_CONTIGUOUS));

  /* "View.MemoryView":637
 *         cdef int flags = self.flags & ~PyBUF_F_CONTIGUOUS
 * 
 *         slice_copy(self, &mslice)             # <<<<<<<<<<<<<<
 *         mslice = slice_copy_contig(&mslice, "c", self.view.ndim,
 *                                    self.view.itemsize,
 */
  __pyx_memoryview_slice_copy(__pyx_v_self, (&__pyx_v_mslice));

  /* "View.MemoryView":638
 * 
 *         slice_copy(self, &mslice)
 *         mslice = slice_copy_contig(&mslice, "c", self.view.ndim,             # <<<<<<<<<<<<<<
 *                                    self.view.itemsize,
 *                                    flags|PyBUF_C_CONTIGUOUS,
 */
  __pyx_t_1 = __pyx_memoryview_copy_new_contig((&__pyx_v_mslice), ((char *)"c"), __pyx_v_self->view.ndim, __pyx_v_self->view.itemsize, (__pyx_v_flags | PyBUF_C_CONTIGUOUS), __pyx_v_self->dtype_is_object); if (unlikely(PyErr_Occurred())) __PYX_ERR(2, 638, __pyx_L1_error)
  __pyx_v_mslice = __pyx_t_1;

  /* "View.MemoryView":643
 *                                    self.dtype_is_object)
 * 
 *         return memoryview_copy_from_slice(self, &mslice)             # <<<<<<<<<<<<<<
 * 
 *     def copy_fortran(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __pyx_memoryview_copy_object_from_slice(__pyx_v_self, (&__pyx_v_mslice)); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 643, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":633
 *         return slice_is_contig(mslice[0], 'F', self.view.ndim)
 * 
 *     def copy(self):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice mslice
 *         cdef int flags = self.flags & ~PyBUF_F_CONTIGUOUS
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("View.MemoryView.memoryview.copy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":645
 *         return memoryview_copy_from_slice(self, &mslice)
 * 
 *     def copy_fortran(self):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice src, dst
 *         cdef int flags = self.flags & ~PyBUF_C_CONTIGUOUS
 */

/* Python wrapper */
static PyObject *__pyx_memoryview_copy_fortran(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_memoryview_copy_fortran(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("copy_fortran (wrapper)", 0);
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_22copy_fortran(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_22copy_fortran(struct __pyx_memoryview_obj *__pyx_v_self) {
  __Pyx_memviewslice __pyx_v_src;
  __Pyx_memviewslice __pyx_v_dst;
  int __pyx_v_flags;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_memviewslice __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("copy_fortran", 0);

  /* "View.MemoryView":647
 *     def copy_fortran(self):
 *         cdef __Pyx_memviewslice src, dst
 *         cdef int flags = self.flags & ~PyBUF_C_CONTIGUOUS             # <<<<<<<<<<<<<<
 * 
 *         slice_copy(self, &src)
 */
  __pyx_v_flags = (__pyx_v_self->flags & (~PyBUF_C_CONTIGUOUS));

  /* "View.MemoryView":649
 *         cdef int flags = self.flags & ~PyBUF_C_CONTIGUOUS
 * 
 *         slice_copy(self, &src)             # <<<<<<<<<<<<<<
 *         dst = slice_copy_contig(&src, "fortran", self.view.ndim,
 *                                 self.view.itemsize,
 */
  __pyx_memoryview_slice_copy(__pyx_v_self, (&__pyx_v_src));

  /* "View.MemoryView":650
 * 
 *         slice_copy(self, &src)
 *         dst = slice_copy_contig(&src, "fortran", self.view.ndim,             # <<<<<<<<<<<<<<
 *                                 self.view.itemsize,
 *                                 flags|PyBUF_F_CONTIGUOUS,
 */
  __pyx_t_1 = __pyx_memoryview_copy_new_contig((&__pyx_v_src), ((char *)"fortran"), __pyx_v_self->view.ndim, __pyx_v_self->view.itemsize, (__pyx_v_flags | PyBUF_F_CONTIGUOUS), __pyx_v_self->dtype_is_object); if (unlikely(PyErr_Occurred())) __PYX_ERR(2, 650, __pyx_L1_error)
  __pyx_v_dst = __pyx_t_1;

  /* "View.MemoryView":655
 *                                 self.dtype_is_object)
 * 
 *         return memoryview_copy_from_slice(self, &dst)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __pyx_memoryview_copy_object_from_slice(__pyx_v_self, (&__pyx_v_dst)); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 655, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":645
 *         return memoryview_copy_from_slice(self, &mslice)
 * 
 *     def copy_fortran(self):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice src, dst
 *         cdef int flags = self.flags & ~PyBUF_C_CONTIGUOUS
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("View.MemoryView.memoryview.copy_fortran", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw___pyx_memoryview_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw___pyx_memoryview_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf___pyx_memoryview___reduce_cython__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf___pyx_memoryview___reduce_cython__(CYTHON_UNUSED struct __pyx_memoryview_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__15, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.memoryview.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw___pyx_memoryview_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw___pyx_memoryview_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf___pyx_memoryview_2__setstate_cython__(((struct __pyx_memoryview_obj *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf___pyx_memoryview_2__setstate_cython__(CYTHON_UNUSED struct __pyx_memoryview_obj *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__16, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.memoryview.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":659
 * 
 * @cname('__pyx_memoryview_new')
 * cdef memoryview_cwrapper(object o, int flags, bint dtype_is_object, __Pyx_TypeInfo *typeinfo):             # <<<<<<<<<<<<<<
 *     cdef memoryview result = memoryview(o, flags, dtype_is_object)
 *     result.typeinfo = typeinfo
 */

static PyObject *__pyx_memoryview_new(PyObject *__pyx_v_o, int __pyx_v_flags, int __pyx_v_dtype_is_object, __Pyx_TypeInfo *__pyx_v_typeinfo) {
  struct __pyx_memoryview_obj *__pyx_v_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("memoryview_cwrapper", 0);

  /* "View.MemoryView":660
 * @cname('__pyx_memoryview_new')
 * cdef memoryview_cwrapper(object o, int flags, bint dtype_is_object, __Pyx_TypeInfo *typeinfo):
 *     cdef memoryview result = memoryview(o, flags, dtype_is_object)             # <<<<<<<<<<<<<<
 *     result.typeinfo = typeinfo
 *     return result
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_flags); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 660, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_dtype_is_object); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 660, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 660, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_v_o);
  __Pyx_GIVEREF(__pyx_v_o);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_o);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_memoryview_type), __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 660, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_result = ((struct __pyx_memoryview_obj *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "View.MemoryView":661
 * cdef memoryview_cwrapper(object o, int flags, bint dtype_is_object, __Pyx_TypeInfo *typeinfo):
 *     cdef memoryview result = memoryview(o, flags, dtype_is_object)
 *     result.typeinfo = typeinfo             # <<<<<<<<<<<<<<
 *     return result
 * 
 */
  __pyx_v_result->typeinfo = __pyx_v_typeinfo;

  /* "View.MemoryView":662
 *     cdef memoryview result = memoryview(o, flags, dtype_is_object)
 *     result.typeinfo = typeinfo
 *     return result             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_check')
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = ((PyObject *)__pyx_v_result);
  goto __pyx_L0;

  /* "View.MemoryView":659
 * 
 * @cname('__pyx_memoryview_new')
 * cdef memoryview_cwrapper(object o, int flags, bint dtype_is_object, __Pyx_TypeInfo *typeinfo):             # <<<<<<<<<<<<<<
 *     cdef memoryview result = memoryview(o, flags, dtype_is_object)
 *     result.typeinfo = typeinfo
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.memoryview_cwrapper", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":665
 * 
 * @cname('__pyx_memoryview_check')
 * cdef inline bint memoryview_check(object o):             # <<<<<<<<<<<<<<
 *     return isinstance(o, memoryview)
 * 
 */

static CYTHON_INLINE int __pyx_memoryview_check(PyObject *__pyx_v_o) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("memoryview_check", 0);

  /* "View.MemoryView":666
 * @cname('__pyx_memoryview_check')
 * cdef inline bint memoryview_check(object o):
 *     return isinstance(o, memoryview)             # <<<<<<<<<<<<<<
 * 
 * cdef tuple _unellipsify(object index, int ndim):
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_o, __pyx_memoryview_type); 
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "View.MemoryView":665
 * 
 * @cname('__pyx_memoryview_check')
 * cdef inline bint memoryview_check(object o):             # <<<<<<<<<<<<<<
 *     return isinstance(o, memoryview)
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":668
 *     return isinstance(o, memoryview)
 * 
 * cdef tuple _unellipsify(object index, int ndim):             # <<<<<<<<<<<<<<
 *     """
 *     Replace all ellipses with full slices and fill incomplete indices with
 */

static PyObject *_unellipsify(PyObject *__pyx_v_index, int __pyx_v_ndim) {
  PyObject *__pyx_v_tup = NULL;
  PyObject *__pyx_v_result = NULL;
  int __pyx_v_have_slices;
  int __pyx_v_seen_ellipsis;
  CYTHON_UNUSED PyObject *__pyx_v_idx = NULL;
  PyObject *__pyx_v_item = NULL;
  Py_ssize_t __pyx_v_nslices;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  PyObject *(*__pyx_t_6)(PyObject *);
  PyObject *__pyx_t_7 = NULL;
  Py_ssize_t __pyx_t_8;
  int __pyx_t_9;
  int __pyx_t_10;
  PyObject *__pyx_t_11 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_unellipsify", 0);

  /* "View.MemoryView":673
 *     full slices.
 *     """
 *     if not isinstance(index, tuple):             # <<<<<<<<<<<<<<
 *         tup = (index,)
 *     else:
 */
  __pyx_t_1 = PyTuple_Check(__pyx_v_index); 
  __pyx_t_2 = ((!(__pyx_t_1 != 0)) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":674
 *     """
 *     if not isinstance(index, tuple):
 *         tup = (index,)             # <<<<<<<<<<<<<<
 *     else:
 *         tup = index
 */
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 674, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_v_index);
    __Pyx_GIVEREF(__pyx_v_index);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_index);
    __pyx_v_tup = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "View.MemoryView":673
 *     full slices.
 *     """
 *     if not isinstance(index, tuple):             # <<<<<<<<<<<<<<
 *         tup = (index,)
 *     else:
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":676
 *         tup = (index,)
 *     else:
 *         tup = index             # <<<<<<<<<<<<<<
 * 
 *     result = []
 */
  /*else*/ {
    __Pyx_INCREF(__pyx_v_index);
    __pyx_v_tup = __pyx_v_index;
  }
  __pyx_L3:;

  /* "View.MemoryView":678
 *         tup = index
 * 
 *     result = []             # <<<<<<<<<<<<<<
 *     have_slices = False
 *     seen_ellipsis = False
 */
  __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 678, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_v_result = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "View.MemoryView":679
 * 
 *     result = []
 *     have_slices = False             # <<<<<<<<<<<<<<
 *     seen_ellipsis = False
 *     for idx, item in enumerate(tup):
 */
  __pyx_v_have_slices = 0;

  /* "View.MemoryView":680
 *     result = []
 *     have_slices = False
 *     seen_ellipsis = False             # <<<<<<<<<<<<<<
 *     for idx, item in enumerate(tup):
 *         if item is Ellipsis:
 */
  __pyx_v_seen_ellipsis = 0;

  /* "View.MemoryView":681
 *     have_slices = False
 *     seen_ellipsis = False
 *     for idx, item in enumerate(tup):             # <<<<<<<<<<<<<<
 *         if item is Ellipsis:
 *             if not seen_ellipsis:
 */
  __Pyx_INCREF(__pyx_int_0);
  __pyx_t_3 = __pyx_int_0;
  if (likely(PyList_CheckExact(__pyx_v_tup)) || PyTuple_CheckExact(__pyx_v_tup)) {
    __pyx_t_4 = __pyx_v_tup; __Pyx_INCREF(__pyx_t_4); __pyx_t_5 = 0;
    __pyx_t_6 = NULL;
  } else {
    __pyx_t_5 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_v_tup); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 681, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = Py_TYPE(__pyx_t_4)->tp_iternext; if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 681, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_6)) {
      if (likely(PyList_CheckExact(__pyx_t_4))) {
        if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_4)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_7 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_5); __Pyx_INCREF(__pyx_t_7); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(2, 681, __pyx_L1_error)
        #else
        __pyx_t_7 = PySequence_ITEM(__pyx_t_4, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 681, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        #endif
      } else {
        if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_7 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_5); __Pyx_INCREF(__pyx_t_7); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(2, 681, __pyx_L1_error)
        #else
        __pyx_t_7 = PySequence_ITEM(__pyx_t_4, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 681, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        #endif
      }
    } else {
      __pyx_t_7 = __pyx_t_6(__pyx_t_4);
      if (unlikely(!__pyx_t_7)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(2, 681, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_7);
    }
    __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_7);
    __pyx_t_7 = 0;
    __Pyx_INCREF(__pyx_t_3);
    __Pyx_XDECREF_SET(__pyx_v_idx, __pyx_t_3);
    __pyx_t_7 = __Pyx_PyInt_AddObjC(__pyx_t_3, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 681, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_3);
    __pyx_t_3 = __pyx_t_7;
    __pyx_t_7 = 0;

    /* "View.MemoryView":682
 *     seen_ellipsis = False
 *     for idx, item in enumerate(tup):
 *         if item is Ellipsis:             # <<<<<<<<<<<<<<
 *             if not seen_ellipsis:
 *                 result.extend([slice(None)] * (ndim - len(tup) + 1))
 */
    __pyx_t_2 = (__pyx_v_item == __pyx_builtin_Ellipsis);
    __pyx_t_1 = (__pyx_t_2 != 0);
    if (__pyx_t_1) {

      /* "View.MemoryView":683
 *     for idx, item in enumerate(tup):
 *         if item is Ellipsis:
 *             if not seen_ellipsis:             # <<<<<<<<<<<<<<
 *                 result.extend([slice(None)] * (ndim - len(tup) + 1))
 *                 seen_ellipsis = True
 */
      __pyx_t_1 = ((!(__pyx_v_seen_ellipsis != 0)) != 0);
      if (__pyx_t_1) {

        /* "View.MemoryView":684
 *         if item is Ellipsis:
 *             if not seen_ellipsis:
 *                 result.extend([slice(None)] * (ndim - len(tup) + 1))             # <<<<<<<<<<<<<<
 *                 seen_ellipsis = True
 *             else:
 */
        __pyx_t_8 = PyObject_Length(__pyx_v_tup); if (unlikely(__pyx_t_8 == ((Py_ssize_t)-1))) __PYX_ERR(2, 684, __pyx_L1_error)
        __pyx_t_7 = PyList_New(1 * ((((__pyx_v_ndim - __pyx_t_8) + 1)<0) ? 0:((__pyx_v_ndim - __pyx_t_8) + 1))); if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 684, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        { Py_ssize_t __pyx_temp;
          for (__pyx_temp=0; __pyx_temp < ((__pyx_v_ndim - __pyx_t_8) + 1); __pyx_temp++) {
            __Pyx_INCREF(__pyx_slice__17);
            __Pyx_GIVEREF(__pyx_slice__17);
            PyList_SET_ITEM(__pyx_t_7, __pyx_temp, __pyx_slice__17);
          }
        }
        __pyx_t_9 = __Pyx_PyList_Extend(__pyx_v_result, __pyx_t_7); if (unlikely(__pyx_t_9 == ((int)-1))) __PYX_ERR(2, 684, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

        /* "View.MemoryView":685
 *             if not seen_ellipsis:
 *                 result.extend([slice(None)] * (ndim - len(tup) + 1))
 *                 seen_ellipsis = True             # <<<<<<<<<<<<<<
 *             else:
 *                 result.append(slice(None))
 */
        __pyx_v_seen_ellipsis = 1;

        /* "View.MemoryView":683
 *     for idx, item in enumerate(tup):
 *         if item is Ellipsis:
 *             if not seen_ellipsis:             # <<<<<<<<<<<<<<
 *                 result.extend([slice(None)] * (ndim - len(tup) + 1))
 *                 seen_ellipsis = True
 */
        goto __pyx_L7;
      }

      /* "View.MemoryView":687
 *                 seen_ellipsis = True
 *             else:
 *                 result.append(slice(None))             # <<<<<<<<<<<<<<
 *             have_slices = True
 *         else:
 */
      /*else*/ {
        __pyx_t_9 = __Pyx_PyList_Append(__pyx_v_result, __pyx_slice__17); if (unlikely(__pyx_t_9 == ((int)-1))) __PYX_ERR(2, 687, __pyx_L1_error)
      }
      __pyx_L7:;

      /* "View.MemoryView":688
 *             else:
 *                 result.append(slice(None))
 *             have_slices = True             # <<<<<<<<<<<<<<
 *         else:
 *             if not isinstance(item, slice) and not PyIndex_Check(item):
 */
      __pyx_v_have_slices = 1;

      /* "View.MemoryView":682
 *     seen_ellipsis = False
 *     for idx, item in enumerate(tup):
 *         if item is Ellipsis:             # <<<<<<<<<<<<<<
 *             if not seen_ellipsis:
 *                 result.extend([slice(None)] * (ndim - len(tup) + 1))
 */
      goto __pyx_L6;
    }

    /* "View.MemoryView":690
 *             have_slices = True
 *         else:
 *             if not isinstance(item, slice) and not PyIndex_Check(item):             # <<<<<<<<<<<<<<
 *                 raise TypeError("Cannot index with type '%s'" % type(item))
 * 
 */
    /*else*/ {
      __pyx_t_2 = PySlice_Check(__pyx_v_item); 
      __pyx_t_10 = ((!(__pyx_t_2 != 0)) != 0);
      if (__pyx_t_10) {
      } else {
        __pyx_t_1 = __pyx_t_10;
        goto __pyx_L9_bool_binop_done;
      }
      __pyx_t_10 = ((!(PyIndex_Check(__pyx_v_item) != 0)) != 0);
      __pyx_t_1 = __pyx_t_10;
      __pyx_L9_bool_binop_done:;
      if (unlikely(__pyx_t_1)) {

        /* "View.MemoryView":691
 *         else:
 *             if not isinstance(item, slice) and not PyIndex_Check(item):
 *                 raise TypeError("Cannot index with type '%s'" % type(item))             # <<<<<<<<<<<<<<
 * 
 *             have_slices = have_slices or isinstance(item, slice)
 */
        __pyx_t_7 = __Pyx_PyString_FormatSafe(__pyx_kp_s_Cannot_index_with_type_s, ((PyObject *)Py_TYPE(__pyx_v_item))); if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 691, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_11 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_t_7); if (unlikely(!__pyx_t_11)) __PYX_ERR(2, 691, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_Raise(__pyx_t_11, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __PYX_ERR(2, 691, __pyx_L1_error)

        /* "View.MemoryView":690
 *             have_slices = True
 *         else:
 *             if not isinstance(item, slice) and not PyIndex_Check(item):             # <<<<<<<<<<<<<<
 *                 raise TypeError("Cannot index with type '%s'" % type(item))
 * 
 */
      }

      /* "View.MemoryView":693
 *                 raise TypeError("Cannot index with type '%s'" % type(item))
 * 
 *             have_slices = have_slices or isinstance(item, slice)             # <<<<<<<<<<<<<<
 *             result.append(item)
 * 
 */
      __pyx_t_10 = (__pyx_v_have_slices != 0);
      if (!__pyx_t_10) {
      } else {
        __pyx_t_1 = __pyx_t_10;
        goto __pyx_L11_bool_binop_done;
      }
      __pyx_t_10 = PySlice_Check(__pyx_v_item); 
      __pyx_t_2 = (__pyx_t_10 != 0);
      __pyx_t_1 = __pyx_t_2;
      __pyx_L11_bool_binop_done:;
      __pyx_v_have_slices = __pyx_t_1;

      /* "View.MemoryView":694
 * 
 *             have_slices = have_slices or isinstance(item, slice)
 *             result.append(item)             # <<<<<<<<<<<<<<
 * 
 *     nslices = ndim - len(result)
 */
      __pyx_t_9 = __Pyx_PyList_Append(__pyx_v_result, __pyx_v_item); if (unlikely(__pyx_t_9 == ((int)-1))) __PYX_ERR(2, 694, __pyx_L1_error)
    }
    __pyx_L6:;

    /* "View.MemoryView":681
 *     have_slices = False
 *     seen_ellipsis = False
 *     for idx, item in enumerate(tup):             # <<<<<<<<<<<<<<
 *         if item is Ellipsis:
 *             if not seen_ellipsis:
 */
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "View.MemoryView":696
 *             result.append(item)
 * 
 *     nslices = ndim - len(result)             # <<<<<<<<<<<<<<
 *     if nslices:
 *         result.extend([slice(None)] * nslices)
 */
  __pyx_t_5 = PyList_GET_SIZE(__pyx_v_result); if (unlikely(__pyx_t_5 == ((Py_ssize_t)-1))) __PYX_ERR(2, 696, __pyx_L1_error)
  __pyx_v_nslices = (__pyx_v_ndim - __pyx_t_5);

  /* "View.MemoryView":697
 * 
 *     nslices = ndim - len(result)
 *     if nslices:             # <<<<<<<<<<<<<<
 *         result.extend([slice(None)] * nslices)
 * 
 */
  __pyx_t_1 = (__pyx_v_nslices != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":698
 *     nslices = ndim - len(result)
 *     if nslices:
 *         result.extend([slice(None)] * nslices)             # <<<<<<<<<<<<<<
 * 
 *     return have_slices or nslices, tuple(result)
 */
    __pyx_t_3 = PyList_New(1 * ((__pyx_v_nslices<0) ? 0:__pyx_v_nslices)); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 698, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    { Py_ssize_t __pyx_temp;
      for (__pyx_temp=0; __pyx_temp < __pyx_v_nslices; __pyx_temp++) {
        __Pyx_INCREF(__pyx_slice__17);
        __Pyx_GIVEREF(__pyx_slice__17);
        PyList_SET_ITEM(__pyx_t_3, __pyx_temp, __pyx_slice__17);
      }
    }
    __pyx_t_9 = __Pyx_PyList_Extend(__pyx_v_result, __pyx_t_3); if (unlikely(__pyx_t_9 == ((int)-1))) __PYX_ERR(2, 698, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "View.MemoryView":697
 * 
 *     nslices = ndim - len(result)
 *     if nslices:             # <<<<<<<<<<<<<<
 *         result.extend([slice(None)] * nslices)
 * 
 */
  }

  /* "View.MemoryView":700
 *         result.extend([slice(None)] * nslices)
 * 
 *     return have_slices or nslices, tuple(result)             # <<<<<<<<<<<<<<
 * 
 * cdef assert_direct_dimensions(Py_ssize_t *suboffsets, int ndim):
 */
  __Pyx_XDECREF(__pyx_r);
  if (!__pyx_v_have_slices) {
  } else {
    __pyx_t_4 = __Pyx_PyBool_FromLong(__pyx_v_have_slices); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 700, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L14_bool_binop_done;
  }
  __pyx_t_4 = PyInt_FromSsize_t(__pyx_v_nslices); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 700, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __pyx_t_4;
  __pyx_t_4 = 0;
  __pyx_L14_bool_binop_done:;
  __pyx_t_4 = PyList_AsTuple(__pyx_v_result); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 700, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_11 = PyTuple_New(2); if (unlikely(!__pyx_t_11)) __PYX_ERR(2, 700, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_11, 1, __pyx_t_4);
  __pyx_t_3 = 0;
  __pyx_t_4 = 0;
  __pyx_r = ((PyObject*)__pyx_t_11);
  __pyx_t_11 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":668
 *     return isinstance(o, memoryview)
 * 
 * cdef tuple _unellipsify(object index, int ndim):             # <<<<<<<<<<<<<<
 *     """
 *     Replace all ellipses with full slices and fill incomplete indices with
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_AddTraceback("View.MemoryView._unellipsify", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_tup);
  __Pyx_XDECREF(__pyx_v_result);
  __Pyx_XDECREF(__pyx_v_idx);
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":702
 *     return have_slices or nslices, tuple(result)
 * 
 * cdef assert_direct_dimensions(Py_ssize_t *suboffsets, int ndim):             # <<<<<<<<<<<<<<
 *     for suboffset in suboffsets[:ndim]:
 *         if suboffset >= 0:
 */

static PyObject *assert_direct_dimensions(Py_ssize_t *__pyx_v_suboffsets, int __pyx_v_ndim) {
  Py_ssize_t __pyx_v_suboffset;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t *__pyx_t_1;
  Py_ssize_t *__pyx_t_2;
  Py_ssize_t *__pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("assert_direct_dimensions", 0);

  /* "View.MemoryView":703
 * 
 * cdef assert_direct_dimensions(Py_ssize_t *suboffsets, int ndim):
 *     for suboffset in suboffsets[:ndim]:             # <<<<<<<<<<<<<<
 *         if suboffset >= 0:
 *             raise ValueError("Indirect dimensions not supported")
 */
  __pyx_t_2 = (__pyx_v_suboffsets + __pyx_v_ndim);
  for (__pyx_t_3 = __pyx_v_suboffsets; __pyx_t_3 < __pyx_t_2; __pyx_t_3++) {
    __pyx_t_1 = __pyx_t_3;
    __pyx_v_suboffset = (__pyx_t_1[0]);

    /* "View.MemoryView":704
 * cdef assert_direct_dimensions(Py_ssize_t *suboffsets, int ndim):
 *     for suboffset in suboffsets[:ndim]:
 *         if suboffset >= 0:             # <<<<<<<<<<<<<<
 *             raise ValueError("Indirect dimensions not supported")
 * 
 */
    __pyx_t_4 = ((__pyx_v_suboffset >= 0) != 0);
    if (unlikely(__pyx_t_4)) {

      /* "View.MemoryView":705
 *     for suboffset in suboffsets[:ndim]:
 *         if suboffset >= 0:
 *             raise ValueError("Indirect dimensions not supported")             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__18, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 705, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_Raise(__pyx_t_5, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __PYX_ERR(2, 705, __pyx_L1_error)

      /* "View.MemoryView":704
 * cdef assert_direct_dimensions(Py_ssize_t *suboffsets, int ndim):
 *     for suboffset in suboffsets[:ndim]:
 *         if suboffset >= 0:             # <<<<<<<<<<<<<<
 *             raise ValueError("Indirect dimensions not supported")
 * 
 */
    }
  }

  /* "View.MemoryView":702
 *     return have_slices or nslices, tuple(result)
 * 
 * cdef assert_direct_dimensions(Py_ssize_t *suboffsets, int ndim):             # <<<<<<<<<<<<<<
 *     for suboffset in suboffsets[:ndim]:
 *         if suboffset >= 0:
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("View.MemoryView.assert_direct_dimensions", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":712
 * 
 * @cname('__pyx_memview_slice')
 * cdef memoryview memview_slice(memoryview memview, object indices):             # <<<<<<<<<<<<<<
 *     cdef int new_ndim = 0, suboffset_dim = -1, dim
 *     cdef bint negative_step
 */

static struct __pyx_memoryview_obj *__pyx_memview_slice(struct __pyx_memoryview_obj *__pyx_v_memview, PyObject *__pyx_v_indices) {
  int __pyx_v_new_ndim;
  int __pyx_v_suboffset_dim;
  int __pyx_v_dim;
  __Pyx_memviewslice __pyx_v_src;
  __Pyx_memviewslice __pyx_v_dst;
  __Pyx_memviewslice *__pyx_v_p_src;
  struct __pyx_memoryviewslice_obj *__pyx_v_memviewsliceobj = 0;
  __Pyx_memviewslice *__pyx_v_p_dst;
  int *__pyx_v_p_suboffset_dim;
  Py_ssize_t __pyx_v_start;
  Py_ssize_t __pyx_v_stop;
  Py_ssize_t __pyx_v_step;
  int __pyx_v_have_start;
  int __pyx_v_have_stop;
  int __pyx_v_have_step;
  PyObject *__pyx_v_index = NULL;
  struct __pyx_memoryview_obj *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  struct __pyx_memoryview_obj *__pyx_t_4;
  char *__pyx_t_5;
  int __pyx_t_6;
  Py_ssize_t __pyx_t_7;
  PyObject *(*__pyx_t_8)(PyObject *);
  PyObject *__pyx_t_9 = NULL;
  Py_ssize_t __pyx_t_10;
  int __pyx_t_11;
  Py_ssize_t __pyx_t_12;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("memview_slice", 0);

  /* "View.MemoryView":713
 * @cname('__pyx_memview_slice')
 * cdef memoryview memview_slice(memoryview memview, object indices):
 *     cdef int new_ndim = 0, suboffset_dim = -1, dim             # <<<<<<<<<<<<<<
 *     cdef bint negative_step
 *     cdef __Pyx_memviewslice src, dst
 */
  __pyx_v_new_ndim = 0;
  __pyx_v_suboffset_dim = -1;

  /* "View.MemoryView":720
 * 
 * 
 *     memset(&dst, 0, sizeof(dst))             # <<<<<<<<<<<<<<
 * 
 *     cdef _memoryviewslice memviewsliceobj
 */
  (void)(memset((&__pyx_v_dst), 0, (sizeof(__pyx_v_dst))));

  /* "View.MemoryView":724
 *     cdef _memoryviewslice memviewsliceobj
 * 
 *     assert memview.view.ndim > 0             # <<<<<<<<<<<<<<
 * 
 *     if isinstance(memview, _memoryviewslice):
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!((__pyx_v_memview->view.ndim > 0) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(2, 724, __pyx_L1_error)
    }
  }
  #endif

  /* "View.MemoryView":726
 *     assert memview.view.ndim > 0
 * 
 *     if isinstance(memview, _memoryviewslice):             # <<<<<<<<<<<<<<
 *         memviewsliceobj = memview
 *         p_src = &memviewsliceobj.from_slice
 */
  __pyx_t_1 = __Pyx_TypeCheck(((PyObject *)__pyx_v_memview), __pyx_memoryviewslice_type); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":727
 * 
 *     if isinstance(memview, _memoryviewslice):
 *         memviewsliceobj = memview             # <<<<<<<<<<<<<<
 *         p_src = &memviewsliceobj.from_slice
 *     else:
 */
    if (!(likely(((((PyObject *)__pyx_v_memview)) == Py_None) || likely(__Pyx_TypeTest(((PyObject *)__pyx_v_memview), __pyx_memoryviewslice_type))))) __PYX_ERR(2, 727, __pyx_L1_error)
    __pyx_t_3 = ((PyObject *)__pyx_v_memview);
    __Pyx_INCREF(__pyx_t_3);
    __pyx_v_memviewsliceobj = ((struct __pyx_memoryviewslice_obj *)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "View.MemoryView":728
 *     if isinstance(memview, _memoryviewslice):
 *         memviewsliceobj = memview
 *         p_src = &memviewsliceobj.from_slice             # <<<<<<<<<<<<<<
 *     else:
 *         slice_copy(memview, &src)
 */
    __pyx_v_p_src = (&__pyx_v_memviewsliceobj->from_slice);

    /* "View.MemoryView":726
 *     assert memview.view.ndim > 0
 * 
 *     if isinstance(memview, _memoryviewslice):             # <<<<<<<<<<<<<<
 *         memviewsliceobj = memview
 *         p_src = &memviewsliceobj.from_slice
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":730
 *         p_src = &memviewsliceobj.from_slice
 *     else:
 *         slice_copy(memview, &src)             # <<<<<<<<<<<<<<
 *         p_src = &src
 * 
 */
  /*else*/ {
    __pyx_memoryview_slice_copy(__pyx_v_memview, (&__pyx_v_src));

    /* "View.MemoryView":731
 *     else:
 *         slice_copy(memview, &src)
 *         p_src = &src             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_v_p_src = (&__pyx_v_src);
  }
  __pyx_L3:;

  /* "View.MemoryView":737
 * 
 * 
 *     dst.memview = p_src.memview             # <<<<<<<<<<<<<<
 *     dst.data = p_src.data
 * 
 */
  __pyx_t_4 = __pyx_v_p_src->memview;
  __pyx_v_dst.memview = __pyx_t_4;

  /* "View.MemoryView":738
 * 
 *     dst.memview = p_src.memview
 *     dst.data = p_src.data             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_5 = __pyx_v_p_src->data;
  __pyx_v_dst.data = __pyx_t_5;

  /* "View.MemoryView":743
 * 
 * 
 *     cdef __Pyx_memviewslice *p_dst = &dst             # <<<<<<<<<<<<<<
 *     cdef int *p_suboffset_dim = &suboffset_dim
 *     cdef Py_ssize_t start, stop, step
 */
  __pyx_v_p_dst = (&__pyx_v_dst);

  /* "View.MemoryView":744
 * 
 *     cdef __Pyx_memviewslice *p_dst = &dst
 *     cdef int *p_suboffset_dim = &suboffset_dim             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t start, stop, step
 *     cdef bint have_start, have_stop, have_step
 */
  __pyx_v_p_suboffset_dim = (&__pyx_v_suboffset_dim);

  /* "View.MemoryView":748
 *     cdef bint have_start, have_stop, have_step
 * 
 *     for dim, index in enumerate(indices):             # <<<<<<<<<<<<<<
 *         if PyIndex_Check(index):
 *             slice_memviewslice(
 */
  __pyx_t_6 = 0;
  if (likely(PyList_CheckExact(__pyx_v_indices)) || PyTuple_CheckExact(__pyx_v_indices)) {
    __pyx_t_3 = __pyx_v_indices; __Pyx_INCREF(__pyx_t_3); __pyx_t_7 = 0;
    __pyx_t_8 = NULL;
  } else {
    __pyx_t_7 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_v_indices); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 748, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_8 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 748, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_8)) {
      if (likely(PyList_CheckExact(__pyx_t_3))) {
        if (__pyx_t_7 >= PyList_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_9 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_7); __Pyx_INCREF(__pyx_t_9); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(2, 748, __pyx_L1_error)
        #else
        __pyx_t_9 = PySequence_ITEM(__pyx_t_3, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_9)) __PYX_ERR(2, 748, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        #endif
      } else {
        if (__pyx_t_7 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_9 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_7); __Pyx_INCREF(__pyx_t_9); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(2, 748, __pyx_L1_error)
        #else
        __pyx_t_9 = PySequence_ITEM(__pyx_t_3, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_9)) __PYX_ERR(2, 748, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        #endif
      }
    } else {
      __pyx_t_9 = __pyx_t_8(__pyx_t_3);
      if (unlikely(!__pyx_t_9)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(2, 748, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_9);
    }
    __Pyx_XDECREF_SET(__pyx_v_index, __pyx_t_9);
    __pyx_t_9 = 0;
    __pyx_v_dim = __pyx_t_6;
    __pyx_t_6 = (__pyx_t_6 + 1);

    /* "View.MemoryView":749
 * 
 *     for dim, index in enumerate(indices):
 *         if PyIndex_Check(index):             # <<<<<<<<<<<<<<
 *             slice_memviewslice(
 *                 p_dst, p_src.shape[dim], p_src.strides[dim], p_src.suboffsets[dim],
 */
    __pyx_t_2 = (PyIndex_Check(__pyx_v_index) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":753
 *                 p_dst, p_src.shape[dim], p_src.strides[dim], p_src.suboffsets[dim],
 *                 dim, new_ndim, p_suboffset_dim,
 *                 index, 0, 0, # start, stop, step             # <<<<<<<<<<<<<<
 *                 0, 0, 0, # have_{start,stop,step}
 *                 False)
 */
      __pyx_t_10 = __Pyx_PyIndex_AsSsize_t(__pyx_v_index); if (unlikely((__pyx_t_10 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(2, 753, __pyx_L1_error)

      /* "View.MemoryView":750
 *     for dim, index in enumerate(indices):
 *         if PyIndex_Check(index):
 *             slice_memviewslice(             # <<<<<<<<<<<<<<
 *                 p_dst, p_src.shape[dim], p_src.strides[dim], p_src.suboffsets[dim],
 *                 dim, new_ndim, p_suboffset_dim,
 */
      __pyx_t_11 = __pyx_memoryview_slice_memviewslice(__pyx_v_p_dst, (__pyx_v_p_src->shape[__pyx_v_dim]), (__pyx_v_p_src->strides[__pyx_v_dim]), (__pyx_v_p_src->suboffsets[__pyx_v_dim]), __pyx_v_dim, __pyx_v_new_ndim, __pyx_v_p_suboffset_dim, __pyx_t_10, 0, 0, 0, 0, 0, 0); if (unlikely(__pyx_t_11 == ((int)-1))) __PYX_ERR(2, 750, __pyx_L1_error)

      /* "View.MemoryView":749
 * 
 *     for dim, index in enumerate(indices):
 *         if PyIndex_Check(index):             # <<<<<<<<<<<<<<
 *             slice_memviewslice(
 *                 p_dst, p_src.shape[dim], p_src.strides[dim], p_src.suboffsets[dim],
 */
      goto __pyx_L6;
    }

    /* "View.MemoryView":756
 *                 0, 0, 0, # have_{start,stop,step}
 *                 False)
 *         elif index is None:             # <<<<<<<<<<<<<<
 *             p_dst.shape[new_ndim] = 1
 *             p_dst.strides[new_ndim] = 0
 */
    __pyx_t_2 = (__pyx_v_index == Py_None);
    __pyx_t_1 = (__pyx_t_2 != 0);
    if (__pyx_t_1) {

      /* "View.MemoryView":757
 *                 False)
 *         elif index is None:
 *             p_dst.shape[new_ndim] = 1             # <<<<<<<<<<<<<<
 *             p_dst.strides[new_ndim] = 0
 *             p_dst.suboffsets[new_ndim] = -1
 */
      (__pyx_v_p_dst->shape[__pyx_v_new_ndim]) = 1;

      /* "View.MemoryView":758
 *         elif index is None:
 *             p_dst.shape[new_ndim] = 1
 *             p_dst.strides[new_ndim] = 0             # <<<<<<<<<<<<<<
 *             p_dst.suboffsets[new_ndim] = -1
 *             new_ndim += 1
 */
      (__pyx_v_p_dst->strides[__pyx_v_new_ndim]) = 0;

      /* "View.MemoryView":759
 *             p_dst.shape[new_ndim] = 1
 *             p_dst.strides[new_ndim] = 0
 *             p_dst.suboffsets[new_ndim] = -1             # <<<<<<<<<<<<<<
 *             new_ndim += 1
 *         else:
 */
      (__pyx_v_p_dst->suboffsets[__pyx_v_new_ndim]) = -1L;

      /* "View.MemoryView":760
 *             p_dst.strides[new_ndim] = 0
 *             p_dst.suboffsets[new_ndim] = -1
 *             new_ndim += 1             # <<<<<<<<<<<<<<
 *         else:
 *             start = index.start or 0
 */
      __pyx_v_new_ndim = (__pyx_v_new_ndim + 1);

      /* "View.MemoryView":756
 *                 0, 0, 0, # have_{start,stop,step}
 *                 False)
 *         elif index is None:             # <<<<<<<<<<<<<<
 *             p_dst.shape[new_ndim] = 1
 *             p_dst.strides[new_ndim] = 0
 */
      goto __pyx_L6;
    }

    /* "View.MemoryView":762
 *             new_ndim += 1
 *         else:
 *             start = index.start or 0             # <<<<<<<<<<<<<<
 *             stop = index.stop or 0
 *             step = index.step or 0
 */
    /*else*/ {
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_index, __pyx_n_s_start); if (unlikely(!__pyx_t_9)) __PYX_ERR(2, 762, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_9); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(2, 762, __pyx_L1_error)
      if (!__pyx_t_1) {
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      } else {
        __pyx_t_12 = __Pyx_PyIndex_AsSsize_t(__pyx_t_9); if (unlikely((__pyx_t_12 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(2, 762, __pyx_L1_error)
        __pyx_t_10 = __pyx_t_12;
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        goto __pyx_L7_bool_binop_done;
      }
      __pyx_t_10 = 0;
      __pyx_L7_bool_binop_done:;
      __pyx_v_start = __pyx_t_10;

      /* "View.MemoryView":763
 *         else:
 *             start = index.start or 0
 *             stop = index.stop or 0             # <<<<<<<<<<<<<<
 *             step = index.step or 0
 * 
 */
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_index, __pyx_n_s_stop); if (unlikely(!__pyx_t_9)) __PYX_ERR(2, 763, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_9); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(2, 763, __pyx_L1_error)
      if (!__pyx_t_1) {
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      } else {
        __pyx_t_12 = __Pyx_PyIndex_AsSsize_t(__pyx_t_9); if (unlikely((__pyx_t_12 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(2, 763, __pyx_L1_error)
        __pyx_t_10 = __pyx_t_12;
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        goto __pyx_L9_bool_binop_done;
      }
      __pyx_t_10 = 0;
      __pyx_L9_bool_binop_done:;
      __pyx_v_stop = __pyx_t_10;

      /* "View.MemoryView":764
 *             start = index.start or 0
 *             stop = index.stop or 0
 *             step = index.step or 0             # <<<<<<<<<<<<<<
 * 
 *             have_start = index.start is not None
 */
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_index, __pyx_n_s_step); if (unlikely(!__pyx_t_9)) __PYX_ERR(2, 764, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_9); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(2, 764, __pyx_L1_error)
      if (!__pyx_t_1) {
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      } else {
        __pyx_t_12 = __Pyx_PyIndex_AsSsize_t(__pyx_t_9); if (unlikely((__pyx_t_12 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(2, 764, __pyx_L1_error)
        __pyx_t_10 = __pyx_t_12;
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        goto __pyx_L11_bool_binop_done;
      }
      __pyx_t_10 = 0;
      __pyx_L11_bool_binop_done:;
      __pyx_v_step = __pyx_t_10;

      /* "View.MemoryView":766
 *             step = index.step or 0
 * 
 *             have_start = index.start is not None             # <<<<<<<<<<<<<<
 *             have_stop = index.stop is not None
 *             have_step = index.step is not None
 */
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_index, __pyx_n_s_start); if (unlikely(!__pyx_t_9)) __PYX_ERR(2, 766, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_1 = (__pyx_t_9 != Py_None);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_v_have_start = __pyx_t_1;

      /* "View.MemoryView":767
 * 
 *             have_start = index.start is not None
 *             have_stop = index.stop is not None             # <<<<<<<<<<<<<<
 *             have_step = index.step is not None
 * 
 */
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_index, __pyx_n_s_stop); if (unlikely(!__pyx_t_9)) __PYX_ERR(2, 767, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_1 = (__pyx_t_9 != Py_None);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_v_have_stop = __pyx_t_1;

      /* "View.MemoryView":768
 *             have_start = index.start is not None
 *             have_stop = index.stop is not None
 *             have_step = index.step is not None             # <<<<<<<<<<<<<<
 * 
 *             slice_memviewslice(
 */
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_index, __pyx_n_s_step); if (unlikely(!__pyx_t_9)) __PYX_ERR(2, 768, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_1 = (__pyx_t_9 != Py_None);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_v_have_step = __pyx_t_1;

      /* "View.MemoryView":770
 *             have_step = index.step is not None
 * 
 *             slice_memviewslice(             # <<<<<<<<<<<<<<
 *                 p_dst, p_src.shape[dim], p_src.strides[dim], p_src.suboffsets[dim],
 *                 dim, new_ndim, p_suboffset_dim,
 */
      __pyx_t_11 = __pyx_memoryview_slice_memviewslice(__pyx_v_p_dst, (__pyx_v_p_src->shape[__pyx_v_dim]), (__pyx_v_p_src->strides[__pyx_v_dim]), (__pyx_v_p_src->suboffsets[__pyx_v_dim]), __pyx_v_dim, __pyx_v_new_ndim, __pyx_v_p_suboffset_dim, __pyx_v_start, __pyx_v_stop, __pyx_v_step, __pyx_v_have_start, __pyx_v_have_stop, __pyx_v_have_step, 1); if (unlikely(__pyx_t_11 == ((int)-1))) __PYX_ERR(2, 770, __pyx_L1_error)

      /* "View.MemoryView":776
 *                 have_start, have_stop, have_step,
 *                 True)
 *             new_ndim += 1             # <<<<<<<<<<<<<<
 * 
 *     if isinstance(memview, _memoryviewslice):
 */
      __pyx_v_new_ndim = (__pyx_v_new_ndim + 1);
    }
    __pyx_L6:;

    /* "View.MemoryView":748
 *     cdef bint have_start, have_stop, have_step
 * 
 *     for dim, index in enumerate(indices):             # <<<<<<<<<<<<<<
 *         if PyIndex_Check(index):
 *             slice_memviewslice(
 */
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "View.MemoryView":778
 *             new_ndim += 1
 * 
 *     if isinstance(memview, _memoryviewslice):             # <<<<<<<<<<<<<<
 *         return memoryview_fromslice(dst, new_ndim,
 *                                     memviewsliceobj.to_object_func,
 */
  __pyx_t_1 = __Pyx_TypeCheck(((PyObject *)__pyx_v_memview), __pyx_memoryviewslice_type); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":779
 * 
 *     if isinstance(memview, _memoryviewslice):
 *         return memoryview_fromslice(dst, new_ndim,             # <<<<<<<<<<<<<<
 *                                     memviewsliceobj.to_object_func,
 *                                     memviewsliceobj.to_dtype_func,
 */
    __Pyx_XDECREF(((PyObject *)__pyx_r));

    /* "View.MemoryView":780
 *     if isinstance(memview, _memoryviewslice):
 *         return memoryview_fromslice(dst, new_ndim,
 *                                     memviewsliceobj.to_object_func,             # <<<<<<<<<<<<<<
 *                                     memviewsliceobj.to_dtype_func,
 *                                     memview.dtype_is_object)
 */
    if (unlikely(!__pyx_v_memviewsliceobj)) { __Pyx_RaiseUnboundLocalError("memviewsliceobj"); __PYX_ERR(2, 780, __pyx_L1_error) }

    /* "View.MemoryView":781
 *         return memoryview_fromslice(dst, new_ndim,
 *                                     memviewsliceobj.to_object_func,
 *                                     memviewsliceobj.to_dtype_func,             # <<<<<<<<<<<<<<
 *                                     memview.dtype_is_object)
 *     else:
 */
    if (unlikely(!__pyx_v_memviewsliceobj)) { __Pyx_RaiseUnboundLocalError("memviewsliceobj"); __PYX_ERR(2, 781, __pyx_L1_error) }

    /* "View.MemoryView":779
 * 
 *     if isinstance(memview, _memoryviewslice):
 *         return memoryview_fromslice(dst, new_ndim,             # <<<<<<<<<<<<<<
 *                                     memviewsliceobj.to_object_func,
 *                                     memviewsliceobj.to_dtype_func,
 */
    __pyx_t_3 = __pyx_memoryview_fromslice(__pyx_v_dst, __pyx_v_new_ndim, __pyx_v_memviewsliceobj->to_object_func, __pyx_v_memviewsliceobj->to_dtype_func, __pyx_v_memview->dtype_is_object); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 779, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_memoryview_type))))) __PYX_ERR(2, 779, __pyx_L1_error)
    __pyx_r = ((struct __pyx_memoryview_obj *)__pyx_t_3);
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "View.MemoryView":778
 *             new_ndim += 1
 * 
 *     if isinstance(memview, _memoryviewslice):             # <<<<<<<<<<<<<<
 *         return memoryview_fromslice(dst, new_ndim,
 *                                     memviewsliceobj.to_object_func,
 */
  }

  /* "View.MemoryView":784
 *                                     memview.dtype_is_object)
 *     else:
 *         return memoryview_fromslice(dst, new_ndim, NULL, NULL,             # <<<<<<<<<<<<<<
 *                                     memview.dtype_is_object)
 * 
 */
  /*else*/ {
    __Pyx_XDECREF(((PyObject *)__pyx_r));

    /* "View.MemoryView":785
 *     else:
 *         return memoryview_fromslice(dst, new_ndim, NULL, NULL,
 *                                     memview.dtype_is_object)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_3 = __pyx_memoryview_fromslice(__pyx_v_dst, __pyx_v_new_ndim, NULL, NULL, __pyx_v_memview->dtype_is_object); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 784, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);

    /* "View.MemoryView":784
 *                                     memview.dtype_is_object)
 *     else:
 *         return memoryview_fromslice(dst, new_ndim, NULL, NULL,             # <<<<<<<<<<<<<<
 *                                     memview.dtype_is_object)
 * 
 */
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_memoryview_type))))) __PYX_ERR(2, 784, __pyx_L1_error)
    __pyx_r = ((struct __pyx_memoryview_obj *)__pyx_t_3);
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }

  /* "View.MemoryView":712
 * 
 * @cname('__pyx_memview_slice')
 * cdef memoryview memview_slice(memoryview memview, object indices):             # <<<<<<<<<<<<<<
 *     cdef int new_ndim = 0, suboffset_dim = -1, dim
 *     cdef bint negative_step
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("View.MemoryView.memview_slice", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_memviewsliceobj);
  __Pyx_XDECREF(__pyx_v_index);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":809
 * 
 * @cname('__pyx_memoryview_slice_memviewslice')
 * cdef int slice_memviewslice(             # <<<<<<<<<<<<<<
 *         __Pyx_memviewslice *dst,
 *         Py_ssize_t shape, Py_ssize_t stride, Py_ssize_t suboffset,
 */

static int __pyx_memoryview_slice_memviewslice(__Pyx_memviewslice *__pyx_v_dst, Py_ssize_t __pyx_v_shape, Py_ssize_t __pyx_v_stride, Py_ssize_t __pyx_v_suboffset, int __pyx_v_dim, int __pyx_v_new_ndim, int *__pyx_v_suboffset_dim, Py_ssize_t __pyx_v_start, Py_ssize_t __pyx_v_stop, Py_ssize_t __pyx_v_step, int __pyx_v_have_start, int __pyx_v_have_stop, int __pyx_v_have_step, int __pyx_v_is_slice) {
  Py_ssize_t __pyx_v_new_shape;
  int __pyx_v_negative_step;
  int __pyx_r;
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "View.MemoryView":829
 *     cdef bint negative_step
 * 
 *     if not is_slice:             # <<<<<<<<<<<<<<
 * 
 *         if start < 0:
 */
  __pyx_t_1 = ((!(__pyx_v_is_slice != 0)) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":831
 *     if not is_slice:
 * 
 *         if start < 0:             # <<<<<<<<<<<<<<
 *             start += shape
 *         if not 0 <= start < shape:
 */
    __pyx_t_1 = ((__pyx_v_start < 0) != 0);
    if (__pyx_t_1) {

      /* "View.MemoryView":832
 * 
 *         if start < 0:
 *             start += shape             # <<<<<<<<<<<<<<
 *         if not 0 <= start < shape:
 *             _err_dim(IndexError, "Index out of bounds (axis %d)", dim)
 */
      __pyx_v_start = (__pyx_v_start + __pyx_v_shape);

      /* "View.MemoryView":831
 *     if not is_slice:
 * 
 *         if start < 0:             # <<<<<<<<<<<<<<
 *             start += shape
 *         if not 0 <= start < shape:
 */
    }

    /* "View.MemoryView":833
 *         if start < 0:
 *             start += shape
 *         if not 0 <= start < shape:             # <<<<<<<<<<<<<<
 *             _err_dim(IndexError, "Index out of bounds (axis %d)", dim)
 *     else:
 */
    __pyx_t_1 = (0 <= __pyx_v_start);
    if (__pyx_t_1) {
      __pyx_t_1 = (__pyx_v_start < __pyx_v_shape);
    }
    __pyx_t_2 = ((!(__pyx_t_1 != 0)) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":834
 *             start += shape
 *         if not 0 <= start < shape:
 *             _err_dim(IndexError, "Index out of bounds (axis %d)", dim)             # <<<<<<<<<<<<<<
 *     else:
 * 
 */
      __pyx_t_3 = __pyx_memoryview_err_dim(__pyx_builtin_IndexError, ((char *)"Index out of bounds (axis %d)"), __pyx_v_dim); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(2, 834, __pyx_L1_error)

      /* "View.MemoryView":833
 *         if start < 0:
 *             start += shape
 *         if not 0 <= start < shape:             # <<<<<<<<<<<<<<
 *             _err_dim(IndexError, "Index out of bounds (axis %d)", dim)
 *     else:
 */
    }

    /* "View.MemoryView":829
 *     cdef bint negative_step
 * 
 *     if not is_slice:             # <<<<<<<<<<<<<<
 * 
 *         if start < 0:
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":837
 *     else:
 * 
 *         negative_step = have_step != 0 and step < 0             # <<<<<<<<<<<<<<
 * 
 *         if have_step and step == 0:
 */
  /*else*/ {
    __pyx_t_1 = ((__pyx_v_have_step != 0) != 0);
    if (__pyx_t_1) {
    } else {
      __pyx_t_2 = __pyx_t_1;
      goto __pyx_L6_bool_binop_done;
    }
    __pyx_t_1 = ((__pyx_v_step < 0) != 0);
    __pyx_t_2 = __pyx_t_1;
    __pyx_L6_bool_binop_done:;
    __pyx_v_negative_step = __pyx_t_2;

    /* "View.MemoryView":839
 *         negative_step = have_step != 0 and step < 0
 * 
 *         if have_step and step == 0:             # <<<<<<<<<<<<<<
 *             _err_dim(ValueError, "Step may not be zero (axis %d)", dim)
 * 
 */
    __pyx_t_1 = (__pyx_v_have_step != 0);
    if (__pyx_t_1) {
    } else {
      __pyx_t_2 = __pyx_t_1;
      goto __pyx_L9_bool_binop_done;
    }
    __pyx_t_1 = ((__pyx_v_step == 0) != 0);
    __pyx_t_2 = __pyx_t_1;
    __pyx_L9_bool_binop_done:;
    if (__pyx_t_2) {

      /* "View.MemoryView":840
 * 
 *         if have_step and step == 0:
 *             _err_dim(ValueError, "Step may not be zero (axis %d)", dim)             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_t_3 = __pyx_memoryview_err_dim(__pyx_builtin_ValueError, ((char *)"Step may not be zero (axis %d)"), __pyx_v_dim); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(2, 840, __pyx_L1_error)

      /* "View.MemoryView":839
 *         negative_step = have_step != 0 and step < 0
 * 
 *         if have_step and step == 0:             # <<<<<<<<<<<<<<
 *             _err_dim(ValueError, "Step may not be zero (axis %d)", dim)
 * 
 */
    }

    /* "View.MemoryView":843
 * 
 * 
 *         if have_start:             # <<<<<<<<<<<<<<
 *             if start < 0:
 *                 start += shape
 */
    __pyx_t_2 = (__pyx_v_have_start != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":844
 * 
 *         if have_start:
 *             if start < 0:             # <<<<<<<<<<<<<<
 *                 start += shape
 *                 if start < 0:
 */
      __pyx_t_2 = ((__pyx_v_start < 0) != 0);
      if (__pyx_t_2) {

        /* "View.MemoryView":845
 *         if have_start:
 *             if start < 0:
 *                 start += shape             # <<<<<<<<<<<<<<
 *                 if start < 0:
 *                     start = 0
 */
        __pyx_v_start = (__pyx_v_start + __pyx_v_shape);

        /* "View.MemoryView":846
 *             if start < 0:
 *                 start += shape
 *                 if start < 0:             # <<<<<<<<<<<<<<
 *                     start = 0
 *             elif start >= shape:
 */
        __pyx_t_2 = ((__pyx_v_start < 0) != 0);
        if (__pyx_t_2) {

          /* "View.MemoryView":847
 *                 start += shape
 *                 if start < 0:
 *                     start = 0             # <<<<<<<<<<<<<<
 *             elif start >= shape:
 *                 if negative_step:
 */
          __pyx_v_start = 0;

          /* "View.MemoryView":846
 *             if start < 0:
 *                 start += shape
 *                 if start < 0:             # <<<<<<<<<<<<<<
 *                     start = 0
 *             elif start >= shape:
 */
        }

        /* "View.MemoryView":844
 * 
 *         if have_start:
 *             if start < 0:             # <<<<<<<<<<<<<<
 *                 start += shape
 *                 if start < 0:
 */
        goto __pyx_L12;
      }

      /* "View.MemoryView":848
 *                 if start < 0:
 *                     start = 0
 *             elif start >= shape:             # <<<<<<<<<<<<<<
 *                 if negative_step:
 *                     start = shape - 1
 */
      __pyx_t_2 = ((__pyx_v_start >= __pyx_v_shape) != 0);
      if (__pyx_t_2) {

        /* "View.MemoryView":849
 *                     start = 0
 *             elif start >= shape:
 *                 if negative_step:             # <<<<<<<<<<<<<<
 *                     start = shape - 1
 *                 else:
 */
        __pyx_t_2 = (__pyx_v_negative_step != 0);
        if (__pyx_t_2) {

          /* "View.MemoryView":850
 *             elif start >= shape:
 *                 if negative_step:
 *                     start = shape - 1             # <<<<<<<<<<<<<<
 *                 else:
 *                     start = shape
 */
          __pyx_v_start = (__pyx_v_shape - 1);

          /* "View.MemoryView":849
 *                     start = 0
 *             elif start >= shape:
 *                 if negative_step:             # <<<<<<<<<<<<<<
 *                     start = shape - 1
 *                 else:
 */
          goto __pyx_L14;
        }

        /* "View.MemoryView":852
 *                     start = shape - 1
 *                 else:
 *                     start = shape             # <<<<<<<<<<<<<<
 *         else:
 *             if negative_step:
 */
        /*else*/ {
          __pyx_v_start = __pyx_v_shape;
        }
        __pyx_L14:;

        /* "View.MemoryView":848
 *                 if start < 0:
 *                     start = 0
 *             elif start >= shape:             # <<<<<<<<<<<<<<
 *                 if negative_step:
 *                     start = shape - 1
 */
      }
      __pyx_L12:;

      /* "View.MemoryView":843
 * 
 * 
 *         if have_start:             # <<<<<<<<<<<<<<
 *             if start < 0:
 *                 start += shape
 */
      goto __pyx_L11;
    }

    /* "View.MemoryView":854
 *                     start = shape
 *         else:
 *             if negative_step:             # <<<<<<<<<<<<<<
 *                 start = shape - 1
 *             else:
 */
    /*else*/ {
      __pyx_t_2 = (__pyx_v_negative_step != 0);
      if (__pyx_t_2) {

        /* "View.MemoryView":855
 *         else:
 *             if negative_step:
 *                 start = shape - 1             # <<<<<<<<<<<<<<
 *             else:
 *                 start = 0
 */
        __pyx_v_start = (__pyx_v_shape - 1);

        /* "View.MemoryView":854
 *                     start = shape
 *         else:
 *             if negative_step:             # <<<<<<<<<<<<<<
 *                 start = shape - 1
 *             else:
 */
        goto __pyx_L15;
      }

      /* "View.MemoryView":857
 *                 start = shape - 1
 *             else:
 *                 start = 0             # <<<<<<<<<<<<<<
 * 
 *         if have_stop:
 */
      /*else*/ {
        __pyx_v_start = 0;
      }
      __pyx_L15:;
    }
    __pyx_L11:;

    /* "View.MemoryView":859
 *                 start = 0
 * 
 *         if have_stop:             # <<<<<<<<<<<<<<
 *             if stop < 0:
 *                 stop += shape
 */
    __pyx_t_2 = (__pyx_v_have_stop != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":860
 * 
 *         if have_stop:
 *             if stop < 0:             # <<<<<<<<<<<<<<
 *                 stop += shape
 *                 if stop < 0:
 */
      __pyx_t_2 = ((__pyx_v_stop < 0) != 0);
      if (__pyx_t_2) {

        /* "View.MemoryView":861
 *         if have_stop:
 *             if stop < 0:
 *                 stop += shape             # <<<<<<<<<<<<<<
 *                 if stop < 0:
 *                     stop = 0
 */
        __pyx_v_stop = (__pyx_v_stop + __pyx_v_shape);

        /* "View.MemoryView":862
 *             if stop < 0:
 *                 stop += shape
 *                 if stop < 0:             # <<<<<<<<<<<<<<
 *                     stop = 0
 *             elif stop > shape:
 */
        __pyx_t_2 = ((__pyx_v_stop < 0) != 0);
        if (__pyx_t_2) {

          /* "View.MemoryView":863
 *                 stop += shape
 *                 if stop < 0:
 *                     stop = 0             # <<<<<<<<<<<<<<
 *             elif stop > shape:
 *                 stop = shape
 */
          __pyx_v_stop = 0;

          /* "View.MemoryView":862
 *             if stop < 0:
 *                 stop += shape
 *                 if stop < 0:             # <<<<<<<<<<<<<<
 *                     stop = 0
 *             elif stop > shape:
 */
        }

        /* "View.MemoryView":860
 * 
 *         if have_stop:
 *             if stop < 0:             # <<<<<<<<<<<<<<
 *                 stop += shape
 *                 if stop < 0:
 */
        goto __pyx_L17;
      }

      /* "View.MemoryView":864
 *                 if stop < 0:
 *                     stop = 0
 *             elif stop > shape:             # <<<<<<<<<<<<<<
 *                 stop = shape
 *         else:
 */
      __pyx_t_2 = ((__pyx_v_stop > __pyx_v_shape) != 0);
      if (__pyx_t_2) {

        /* "View.MemoryView":865
 *                     stop = 0
 *             elif stop > shape:
 *                 stop = shape             # <<<<<<<<<<<<<<
 *         else:
 *             if negative_step:
 */
        __pyx_v_stop = __pyx_v_shape;

        /* "View.MemoryView":864
 *                 if stop < 0:
 *                     stop = 0
 *             elif stop > shape:             # <<<<<<<<<<<<<<
 *                 stop = shape
 *         else:
 */
      }
      __pyx_L17:;

      /* "View.MemoryView":859
 *                 start = 0
 * 
 *         if have_stop:             # <<<<<<<<<<<<<<
 *             if stop < 0:
 *                 stop += shape
 */
      goto __pyx_L16;
    }

    /* "View.MemoryView":867
 *                 stop = shape
 *         else:
 *             if negative_step:             # <<<<<<<<<<<<<<
 *                 stop = -1
 *             else:
 */
    /*else*/ {
      __pyx_t_2 = (__pyx_v_negative_step != 0);
      if (__pyx_t_2) {

        /* "View.MemoryView":868
 *         else:
 *             if negative_step:
 *                 stop = -1             # <<<<<<<<<<<<<<
 *             else:
 *                 stop = shape
 */
        __pyx_v_stop = -1L;

        /* "View.MemoryView":867
 *                 stop = shape
 *         else:
 *             if negative_step:             # <<<<<<<<<<<<<<
 *                 stop = -1
 *             else:
 */
        goto __pyx_L19;
      }

      /* "View.MemoryView":870
 *                 stop = -1
 *             else:
 *                 stop = shape             # <<<<<<<<<<<<<<
 * 
 *         if not have_step:
 */
      /*else*/ {
        __pyx_v_stop = __pyx_v_shape;
      }
      __pyx_L19:;
    }
    __pyx_L16:;

    /* "View.MemoryView":872
 *                 stop = shape
 * 
 *         if not have_step:             # <<<<<<<<<<<<<<
 *             step = 1
 * 
 */
    __pyx_t_2 = ((!(__pyx_v_have_step != 0)) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":873
 * 
 *         if not have_step:
 *             step = 1             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_v_step = 1;

      /* "View.MemoryView":872
 *                 stop = shape
 * 
 *         if not have_step:             # <<<<<<<<<<<<<<
 *             step = 1
 * 
 */
    }

    /* "View.MemoryView":877
 * 
 *         with cython.cdivision(True):
 *             new_shape = (stop - start) // step             # <<<<<<<<<<<<<<
 * 
 *             if (stop - start) - step * new_shape:
 */
    __pyx_v_new_shape = ((__pyx_v_stop - __pyx_v_start) / __pyx_v_step);

    /* "View.MemoryView":879
 *             new_shape = (stop - start) // step
 * 
 *             if (stop - start) - step * new_shape:             # <<<<<<<<<<<<<<
 *                 new_shape += 1
 * 
 */
    __pyx_t_2 = (((__pyx_v_stop - __pyx_v_start) - (__pyx_v_step * __pyx_v_new_shape)) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":880
 * 
 *             if (stop - start) - step * new_shape:
 *                 new_shape += 1             # <<<<<<<<<<<<<<
 * 
 *         if new_shape < 0:
 */
      __pyx_v_new_shape = (__pyx_v_new_shape + 1);

      /* "View.MemoryView":879
 *             new_shape = (stop - start) // step
 * 
 *             if (stop - start) - step * new_shape:             # <<<<<<<<<<<<<<
 *                 new_shape += 1
 * 
 */
    }

    /* "View.MemoryView":882
 *                 new_shape += 1
 * 
 *         if new_shape < 0:             # <<<<<<<<<<<<<<
 *             new_shape = 0
 * 
 */
    __pyx_t_2 = ((__pyx_v_new_shape < 0) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":883
 * 
 *         if new_shape < 0:
 *             new_shape = 0             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_v_new_shape = 0;

      /* "View.MemoryView":882
 *                 new_shape += 1
 * 
 *         if new_shape < 0:             # <<<<<<<<<<<<<<
 *             new_shape = 0
 * 
 */
    }

    /* "View.MemoryView":886
 * 
 * 
 *         dst.strides[new_ndim] = stride * step             # <<<<<<<<<<<<<<
 *         dst.shape[new_ndim] = new_shape
 *         dst.suboffsets[new_ndim] = suboffset
 */
    (__pyx_v_dst->strides[__pyx_v_new_ndim]) = (__pyx_v_stride * __pyx_v_step);

    /* "View.MemoryView":887
 * 
 *         dst.strides[new_ndim] = stride * step
 *         dst.shape[new_ndim] = new_shape             # <<<<<<<<<<<<<<
 *         dst.suboffsets[new_ndim] = suboffset
 * 
 */
    (__pyx_v_dst->shape[__pyx_v_new_ndim]) = __pyx_v_new_shape;

    /* "View.MemoryView":888
 *         dst.strides[new_ndim] = stride * step
 *         dst.shape[new_ndim] = new_shape
 *         dst.suboffsets[new_ndim] = suboffset             # <<<<<<<<<<<<<<
 * 
 * 
 */
    (__pyx_v_dst->suboffsets[__pyx_v_new_ndim]) = __pyx_v_suboffset;
  }
  __pyx_L3:;

  /* "View.MemoryView":891
 * 
 * 
 *     if suboffset_dim[0] < 0:             # <<<<<<<<<<<<<<
 *         dst.data += start * stride
 *     else:
 */
  __pyx_t_2 = (((__pyx_v_suboffset_dim[0]) < 0) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":892
 * 
 *     if suboffset_dim[0] < 0:
 *         dst.data += start * stride             # <<<<<<<<<<<<<<
 *     else:
 *         dst.suboffsets[suboffset_dim[0]] += start * stride
 */
    __pyx_v_dst->data = (__pyx_v_dst->data + (__pyx_v_start * __pyx_v_stride));

    /* "View.MemoryView":891
 * 
 * 
 *     if suboffset_dim[0] < 0:             # <<<<<<<<<<<<<<
 *         dst.data += start * stride
 *     else:
 */
    goto __pyx_L23;
  }

  /* "View.MemoryView":894
 *         dst.data += start * stride
 *     else:
 *         dst.suboffsets[suboffset_dim[0]] += start * stride             # <<<<<<<<<<<<<<
 * 
 *     if suboffset >= 0:
 */
  /*else*/ {
    __pyx_t_3 = (__pyx_v_suboffset_dim[0]);
    (__pyx_v_dst->suboffsets[__pyx_t_3]) = ((__pyx_v_dst->suboffsets[__pyx_t_3]) + (__pyx_v_start * __pyx_v_stride));
  }
  __pyx_L23:;

  /* "View.MemoryView":896
 *         dst.suboffsets[suboffset_dim[0]] += start * stride
 * 
 *     if suboffset >= 0:             # <<<<<<<<<<<<<<
 *         if not is_slice:
 *             if new_ndim == 0:
 */
  __pyx_t_2 = ((__pyx_v_suboffset >= 0) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":897
 * 
 *     if suboffset >= 0:
 *         if not is_slice:             # <<<<<<<<<<<<<<
 *             if new_ndim == 0:
 *                 dst.data = (<char **> dst.data)[0] + suboffset
 */
    __pyx_t_2 = ((!(__pyx_v_is_slice != 0)) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":898
 *     if suboffset >= 0:
 *         if not is_slice:
 *             if new_ndim == 0:             # <<<<<<<<<<<<<<
 *                 dst.data = (<char **> dst.data)[0] + suboffset
 *             else:
 */
      __pyx_t_2 = ((__pyx_v_new_ndim == 0) != 0);
      if (__pyx_t_2) {

        /* "View.MemoryView":899
 *         if not is_slice:
 *             if new_ndim == 0:
 *                 dst.data = (<char **> dst.data)[0] + suboffset             # <<<<<<<<<<<<<<
 *             else:
 *                 _err_dim(IndexError, "All dimensions preceding dimension %d "
 */
        __pyx_v_dst->data = ((((char **)__pyx_v_dst->data)[0]) + __pyx_v_suboffset);

        /* "View.MemoryView":898
 *     if suboffset >= 0:
 *         if not is_slice:
 *             if new_ndim == 0:             # <<<<<<<<<<<<<<
 *                 dst.data = (<char **> dst.data)[0] + suboffset
 *             else:
 */
        goto __pyx_L26;
      }

      /* "View.MemoryView":901
 *                 dst.data = (<char **> dst.data)[0] + suboffset
 *             else:
 *                 _err_dim(IndexError, "All dimensions preceding dimension %d "             # <<<<<<<<<<<<<<
 *                                      "must be indexed and not sliced", dim)
 *         else:
 */
      /*else*/ {

        /* "View.MemoryView":902
 *             else:
 *                 _err_dim(IndexError, "All dimensions preceding dimension %d "
 *                                      "must be indexed and not sliced", dim)             # <<<<<<<<<<<<<<
 *         else:
 *             suboffset_dim[0] = new_ndim
 */
        __pyx_t_3 = __pyx_memoryview_err_dim(__pyx_builtin_IndexError, ((char *)"All dimensions preceding dimension %d must be indexed and not sliced"), __pyx_v_dim); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(2, 901, __pyx_L1_error)
      }
      __pyx_L26:;

      /* "View.MemoryView":897
 * 
 *     if suboffset >= 0:
 *         if not is_slice:             # <<<<<<<<<<<<<<
 *             if new_ndim == 0:
 *                 dst.data = (<char **> dst.data)[0] + suboffset
 */
      goto __pyx_L25;
    }

    /* "View.MemoryView":904
 *                                      "must be indexed and not sliced", dim)
 *         else:
 *             suboffset_dim[0] = new_ndim             # <<<<<<<<<<<<<<
 * 
 *     return 0
 */
    /*else*/ {
      (__pyx_v_suboffset_dim[0]) = __pyx_v_new_ndim;
    }
    __pyx_L25:;

    /* "View.MemoryView":896
 *         dst.suboffsets[suboffset_dim[0]] += start * stride
 * 
 *     if suboffset >= 0:             # <<<<<<<<<<<<<<
 *         if not is_slice:
 *             if new_ndim == 0:
 */
  }

  /* "View.MemoryView":906
 *             suboffset_dim[0] = new_ndim
 * 
 *     return 0             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = 0;
  goto __pyx_L0;

  /* "View.MemoryView":809
 * 
 * @cname('__pyx_memoryview_slice_memviewslice')
 * cdef int slice_memviewslice(             # <<<<<<<<<<<<<<
 *         __Pyx_memviewslice *dst,
 *         Py_ssize_t shape, Py_ssize_t stride, Py_ssize_t suboffset,
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("View.MemoryView.slice_memviewslice", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = -1;
  __pyx_L0:;
  return __pyx_r;
}

/* "View.MemoryView":912
 * 
 * @cname('__pyx_pybuffer_index')
 * cdef char *pybuffer_index(Py_buffer *view, char *bufp, Py_ssize_t index,             # <<<<<<<<<<<<<<
 *                           Py_ssize_t dim) except NULL:
 *     cdef Py_ssize_t shape, stride, suboffset = -1
 */

static char *__pyx_pybuffer_index(Py_buffer *__pyx_v_view, char *__pyx_v_bufp, Py_ssize_t __pyx_v_index, Py_ssize_t __pyx_v_dim) {
  Py_ssize_t __pyx_v_shape;
  Py_ssize_t __pyx_v_stride;
  Py_ssize_t __pyx_v_suboffset;
  Py_ssize_t __pyx_v_itemsize;
  char *__pyx_v_resultp;
  char *__pyx_r;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("pybuffer_index", 0);

  /* "View.MemoryView":914
 * cdef char *pybuffer_index(Py_buffer *view, char *bufp, Py_ssize_t index,
 *                           Py_ssize_t dim) except NULL:
 *     cdef Py_ssize_t shape, stride, suboffset = -1             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t itemsize = view.itemsize
 *     cdef char *resultp
 */
  __pyx_v_suboffset = -1L;

  /* "View.MemoryView":915
 *                           Py_ssize_t dim) except NULL:
 *     cdef Py_ssize_t shape, stride, suboffset = -1
 *     cdef Py_ssize_t itemsize = view.itemsize             # <<<<<<<<<<<<<<
 *     cdef char *resultp
 * 
 */
  __pyx_t_1 = __pyx_v_view->itemsize;
  __pyx_v_itemsize = __pyx_t_1;

  /* "View.MemoryView":918
 *     cdef char *resultp
 * 
 *     if view.ndim == 0:             # <<<<<<<<<<<<<<
 *         shape = view.len / itemsize
 *         stride = itemsize
 */
  __pyx_t_2 = ((__pyx_v_view->ndim == 0) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":919
 * 
 *     if view.ndim == 0:
 *         shape = view.len / itemsize             # <<<<<<<<<<<<<<
 *         stride = itemsize
 *     else:
 */
    if (unlikely(__pyx_v_itemsize == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
      __PYX_ERR(2, 919, __pyx_L1_error)
    }
    else if (sizeof(Py_ssize_t) == sizeof(long) && (!(((Py_ssize_t)-1) > 0)) && unlikely(__pyx_v_itemsize == (Py_ssize_t)-1)  && unlikely(UNARY_NEG_WOULD_OVERFLOW(__pyx_v_view->len))) {
      PyErr_SetString(PyExc_OverflowError, "value too large to perform division");
      __PYX_ERR(2, 919, __pyx_L1_error)
    }
    __pyx_v_shape = (__pyx_v_view->len / __pyx_v_itemsize);

    /* "View.MemoryView":920
 *     if view.ndim == 0:
 *         shape = view.len / itemsize
 *         stride = itemsize             # <<<<<<<<<<<<<<
 *     else:
 *         shape = view.shape[dim]
 */
    __pyx_v_stride = __pyx_v_itemsize;

    /* "View.MemoryView":918
 *     cdef char *resultp
 * 
 *     if view.ndim == 0:             # <<<<<<<<<<<<<<
 *         shape = view.len / itemsize
 *         stride = itemsize
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":922
 *         stride = itemsize
 *     else:
 *         shape = view.shape[dim]             # <<<<<<<<<<<<<<
 *         stride = view.strides[dim]
 *         if view.suboffsets != NULL:
 */
  /*else*/ {
    __pyx_v_shape = (__pyx_v_view->shape[__pyx_v_dim]);

    /* "View.MemoryView":923
 *     else:
 *         shape = view.shape[dim]
 *         stride = view.strides[dim]             # <<<<<<<<<<<<<<
 *         if view.suboffsets != NULL:
 *             suboffset = view.suboffsets[dim]
 */
    __pyx_v_stride = (__pyx_v_view->strides[__pyx_v_dim]);

    /* "View.MemoryView":924
 *         shape = view.shape[dim]
 *         stride = view.strides[dim]
 *         if view.suboffsets != NULL:             # <<<<<<<<<<<<<<
 *             suboffset = view.suboffsets[dim]
 * 
 */
    __pyx_t_2 = ((__pyx_v_view->suboffsets != NULL) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":925
 *         stride = view.strides[dim]
 *         if view.suboffsets != NULL:
 *             suboffset = view.suboffsets[dim]             # <<<<<<<<<<<<<<
 * 
 *     if index < 0:
 */
      __pyx_v_suboffset = (__pyx_v_view->suboffsets[__pyx_v_dim]);

      /* "View.MemoryView":924
 *         shape = view.shape[dim]
 *         stride = view.strides[dim]
 *         if view.suboffsets != NULL:             # <<<<<<<<<<<<<<
 *             suboffset = view.suboffsets[dim]
 * 
 */
    }
  }
  __pyx_L3:;

  /* "View.MemoryView":927
 *             suboffset = view.suboffsets[dim]
 * 
 *     if index < 0:             # <<<<<<<<<<<<<<
 *         index += view.shape[dim]
 *         if index < 0:
 */
  __pyx_t_2 = ((__pyx_v_index < 0) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":928
 * 
 *     if index < 0:
 *         index += view.shape[dim]             # <<<<<<<<<<<<<<
 *         if index < 0:
 *             raise IndexError("Out of bounds on buffer access (axis %d)" % dim)
 */
    __pyx_v_index = (__pyx_v_index + (__pyx_v_view->shape[__pyx_v_dim]));

    /* "View.MemoryView":929
 *     if index < 0:
 *         index += view.shape[dim]
 *         if index < 0:             # <<<<<<<<<<<<<<
 *             raise IndexError("Out of bounds on buffer access (axis %d)" % dim)
 * 
 */
    __pyx_t_2 = ((__pyx_v_index < 0) != 0);
    if (unlikely(__pyx_t_2)) {

      /* "View.MemoryView":930
 *         index += view.shape[dim]
 *         if index < 0:
 *             raise IndexError("Out of bounds on buffer access (axis %d)" % dim)             # <<<<<<<<<<<<<<
 * 
 *     if index >= shape:
 */
      __pyx_t_3 = PyInt_FromSsize_t(__pyx_v_dim); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 930, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_Out_of_bounds_on_buffer_access_a, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 930, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_IndexError, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 930, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __PYX_ERR(2, 930, __pyx_L1_error)

      /* "View.MemoryView":929
 *     if index < 0:
 *         index += view.shape[dim]
 *         if index < 0:             # <<<<<<<<<<<<<<
 *             raise IndexError("Out of bounds on buffer access (axis %d)" % dim)
 * 
 */
    }

    /* "View.MemoryView":927
 *             suboffset = view.suboffsets[dim]
 * 
 *     if index < 0:             # <<<<<<<<<<<<<<
 *         index += view.shape[dim]
 *         if index < 0:
 */
  }

  /* "View.MemoryView":932
 *             raise IndexError("Out of bounds on buffer access (axis %d)" % dim)
 * 
 *     if index >= shape:             # <<<<<<<<<<<<<<
 *         raise IndexError("Out of bounds on buffer access (axis %d)" % dim)
 * 
 */
  __pyx_t_2 = ((__pyx_v_index >= __pyx_v_shape) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "View.MemoryView":933
 * 
 *     if index >= shape:
 *         raise IndexError("Out of bounds on buffer access (axis %d)" % dim)             # <<<<<<<<<<<<<<
 * 
 *     resultp = bufp + index * stride
 */
    __pyx_t_3 = PyInt_FromSsize_t(__pyx_v_dim); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 933, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_Out_of_bounds_on_buffer_access_a, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 933, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_IndexError, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 933, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(2, 933, __pyx_L1_error)

    /* "View.MemoryView":932
 *             raise IndexError("Out of bounds on buffer access (axis %d)" % dim)
 * 
 *     if index >= shape:             # <<<<<<<<<<<<<<
 *         raise IndexError("Out of bounds on buffer access (axis %d)" % dim)
 * 
 */
  }

  /* "View.MemoryView":935
 *         raise IndexError("Out of bounds on buffer access (axis %d)" % dim)
 * 
 *     resultp = bufp + index * stride             # <<<<<<<<<<<<<<
 *     if suboffset >= 0:
 *         resultp = (<char **> resultp)[0] + suboffset
 */
  __pyx_v_resultp = (__pyx_v_bufp + (__pyx_v_index * __pyx_v_stride));

  /* "View.MemoryView":936
 * 
 *     resultp = bufp + index * stride
 *     if suboffset >= 0:             # <<<<<<<<<<<<<<
 *         resultp = (<char **> resultp)[0] + suboffset
 * 
 */
  __pyx_t_2 = ((__pyx_v_suboffset >= 0) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":937
 *     resultp = bufp + index * stride
 *     if suboffset >= 0:
 *         resultp = (<char **> resultp)[0] + suboffset             # <<<<<<<<<<<<<<
 * 
 *     return resultp
 */
    __pyx_v_resultp = ((((char **)__pyx_v_resultp)[0]) + __pyx_v_suboffset);

    /* "View.MemoryView":936
 * 
 *     resultp = bufp + index * stride
 *     if suboffset >= 0:             # <<<<<<<<<<<<<<
 *         resultp = (<char **> resultp)[0] + suboffset
 * 
 */
  }

  /* "View.MemoryView":939
 *         resultp = (<char **> resultp)[0] + suboffset
 * 
 *     return resultp             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_resultp;
  goto __pyx_L0;

  /* "View.MemoryView":912
 * 
 * @cname('__pyx_pybuffer_index')
 * cdef char *pybuffer_index(Py_buffer *view, char *bufp, Py_ssize_t index,             # <<<<<<<<<<<<<<
 *                           Py_ssize_t dim) except NULL:
 *     cdef Py_ssize_t shape, stride, suboffset = -1
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("View.MemoryView.pybuffer_index", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":945
 * 
 * @cname('__pyx_memslice_transpose')
 * cdef int transpose_memslice(__Pyx_memviewslice *memslice) nogil except 0:             # <<<<<<<<<<<<<<
 *     cdef int ndim = memslice.memview.view.ndim
 * 
 */

static int __pyx_memslice_transpose(__Pyx_memviewslice *__pyx_v_memslice) {
  int __pyx_v_ndim;
  Py_ssize_t *__pyx_v_shape;
  Py_ssize_t *__pyx_v_strides;
  int __pyx_v_i;
  int __pyx_v_j;
  int __pyx_r;
  int __pyx_t_1;
  Py_ssize_t *__pyx_t_2;
  long __pyx_t_3;
  long __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  int __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "View.MemoryView":946
 * @cname('__pyx_memslice_transpose')
 * cdef int transpose_memslice(__Pyx_memviewslice *memslice) nogil except 0:
 *     cdef int ndim = memslice.memview.view.ndim             # <<<<<<<<<<<<<<
 * 
 *     cdef Py_ssize_t *shape = memslice.shape
 */
  __pyx_t_1 = __pyx_v_memslice->memview->view.ndim;
  __pyx_v_ndim = __pyx_t_1;

  /* "View.MemoryView":948
 *     cdef int ndim = memslice.memview.view.ndim
 * 
 *     cdef Py_ssize_t *shape = memslice.shape             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t *strides = memslice.strides
 * 
 */
  __pyx_t_2 = __pyx_v_memslice->shape;
  __pyx_v_shape = __pyx_t_2;

  /* "View.MemoryView":949
 * 
 *     cdef Py_ssize_t *shape = memslice.shape
 *     cdef Py_ssize_t *strides = memslice.strides             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = __pyx_v_memslice->strides;
  __pyx_v_strides = __pyx_t_2;

  /* "View.MemoryView":953
 * 
 *     cdef int i, j
 *     for i in range(ndim / 2):             # <<<<<<<<<<<<<<
 *         j = ndim - 1 - i
 *         strides[i], strides[j] = strides[j], strides[i]
 */
  __pyx_t_3 = (__pyx_v_ndim / 2);
  __pyx_t_4 = __pyx_t_3;
  for (__pyx_t_1 = 0; __pyx_t_1 < __pyx_t_4; __pyx_t_1+=1) {
    __pyx_v_i = __pyx_t_1;

    /* "View.MemoryView":954
 *     cdef int i, j
 *     for i in range(ndim / 2):
 *         j = ndim - 1 - i             # <<<<<<<<<<<<<<
 *         strides[i], strides[j] = strides[j], strides[i]
 *         shape[i], shape[j] = shape[j], shape[i]
 */
    __pyx_v_j = ((__pyx_v_ndim - 1) - __pyx_v_i);

    /* "View.MemoryView":955
 *     for i in range(ndim / 2):
 *         j = ndim - 1 - i
 *         strides[i], strides[j] = strides[j], strides[i]             # <<<<<<<<<<<<<<
 *         shape[i], shape[j] = shape[j], shape[i]
 * 
 */
    __pyx_t_5 = (__pyx_v_strides[__pyx_v_j]);
    __pyx_t_6 = (__pyx_v_strides[__pyx_v_i]);
    (__pyx_v_strides[__pyx_v_i]) = __pyx_t_5;
    (__pyx_v_strides[__pyx_v_j]) = __pyx_t_6;

    /* "View.MemoryView":956
 *         j = ndim - 1 - i
 *         strides[i], strides[j] = strides[j], strides[i]
 *         shape[i], shape[j] = shape[j], shape[i]             # <<<<<<<<<<<<<<
 * 
 *         if memslice.suboffsets[i] >= 0 or memslice.suboffsets[j] >= 0:
 */
    __pyx_t_6 = (__pyx_v_shape[__pyx_v_j]);
    __pyx_t_5 = (__pyx_v_shape[__pyx_v_i]);
    (__pyx_v_shape[__pyx_v_i]) = __pyx_t_6;
    (__pyx_v_shape[__pyx_v_j]) = __pyx_t_5;

    /* "View.MemoryView":958
 *         shape[i], shape[j] = shape[j], shape[i]
 * 
 *         if memslice.suboffsets[i] >= 0 or memslice.suboffsets[j] >= 0:             # <<<<<<<<<<<<<<
 *             _err(ValueError, "Cannot transpose memoryview with indirect dimensions")
 * 
 */
    __pyx_t_8 = (((__pyx_v_memslice->suboffsets[__pyx_v_i]) >= 0) != 0);
    if (!__pyx_t_8) {
    } else {
      __pyx_t_7 = __pyx_t_8;
      goto __pyx_L6_bool_binop_done;
    }
    __pyx_t_8 = (((__pyx_v_memslice->suboffsets[__pyx_v_j]) >= 0) != 0);
    __pyx_t_7 = __pyx_t_8;
    __pyx_L6_bool_binop_done:;
    if (__pyx_t_7) {

      /* "View.MemoryView":959
 * 
 *         if memslice.suboffsets[i] >= 0 or memslice.suboffsets[j] >= 0:
 *             _err(ValueError, "Cannot transpose memoryview with indirect dimensions")             # <<<<<<<<<<<<<<
 * 
 *     return 1
 */
      __pyx_t_9 = __pyx_memoryview_err(__pyx_builtin_ValueError, ((char *)"Cannot transpose memoryview with indirect dimensions")); if (unlikely(__pyx_t_9 == ((int)-1))) __PYX_ERR(2, 959, __pyx_L1_error)

      /* "View.MemoryView":958
 *         shape[i], shape[j] = shape[j], shape[i]
 * 
 *         if memslice.suboffsets[i] >= 0 or memslice.suboffsets[j] >= 0:             # <<<<<<<<<<<<<<
 *             _err(ValueError, "Cannot transpose memoryview with indirect dimensions")
 * 
 */
    }
  }

  /* "View.MemoryView":961
 *             _err(ValueError, "Cannot transpose memoryview with indirect dimensions")
 * 
 *     return 1             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = 1;
  goto __pyx_L0;

  /* "View.MemoryView":945
 * 
 * @cname('__pyx_memslice_transpose')
 * cdef int transpose_memslice(__Pyx_memviewslice *memslice) nogil except 0:             # <<<<<<<<<<<<<<
 *     cdef int ndim = memslice.memview.view.ndim
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("View.MemoryView.transpose_memslice", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = 0;
  __pyx_L0:;
  return __pyx_r;
}

/* "View.MemoryView":978
 *     cdef int (*to_dtype_func)(char *, object) except 0
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         __PYX_XDEC_MEMVIEW(&self.from_slice, 1)
 * 
 */

/* Python wrapper */
static void __pyx_memoryviewslice___dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_memoryviewslice___dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_memoryviewslice___pyx_pf_15View_dot_MemoryView_16_memoryviewslice___dealloc__(((struct __pyx_memoryviewslice_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_memoryviewslice___pyx_pf_15View_dot_MemoryView_16_memoryviewslice___dealloc__(struct __pyx_memoryviewslice_obj *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "View.MemoryView":979
 * 
 *     def __dealloc__(self):
 *         __PYX_XDEC_MEMVIEW(&self.from_slice, 1)             # <<<<<<<<<<<<<<
 * 
 *     cdef convert_item_to_object(self, char *itemp):
 */
  __PYX_XDEC_MEMVIEW((&__pyx_v_self->from_slice), 1);

  /* "View.MemoryView":978
 *     cdef int (*to_dtype_func)(char *, object) except 0
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         __PYX_XDEC_MEMVIEW(&self.from_slice, 1)
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "View.MemoryView":981
 *         __PYX_XDEC_MEMVIEW(&self.from_slice, 1)
 * 
 *     cdef convert_item_to_object(self, char *itemp):             # <<<<<<<<<<<<<<
 *         if self.to_object_func != NULL:
 *             return self.to_object_func(itemp)
 */

static PyObject *__pyx_memoryviewslice_convert_item_to_object(struct __pyx_memoryviewslice_obj *__pyx_v_self, char *__pyx_v_itemp) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("convert_item_to_object", 0);

  /* "View.MemoryView":982
 * 
 *     cdef convert_item_to_object(self, char *itemp):
 *         if self.to_object_func != NULL:             # <<<<<<<<<<<<<<
 *             return self.to_object_func(itemp)
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_self->to_object_func != NULL) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":983
 *     cdef convert_item_to_object(self, char *itemp):
 *         if self.to_object_func != NULL:
 *             return self.to_object_func(itemp)             # <<<<<<<<<<<<<<
 *         else:
 *             return memoryview.convert_item_to_object(self, itemp)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __pyx_v_self->to_object_func(__pyx_v_itemp); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 983, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "View.MemoryView":982
 * 
 *     cdef convert_item_to_object(self, char *itemp):
 *         if self.to_object_func != NULL:             # <<<<<<<<<<<<<<
 *             return self.to_object_func(itemp)
 *         else:
 */
  }

  /* "View.MemoryView":985
 *             return self.to_object_func(itemp)
 *         else:
 *             return memoryview.convert_item_to_object(self, itemp)             # <<<<<<<<<<<<<<
 * 
 *     cdef assign_item_from_object(self, char *itemp, object value):
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __pyx_memoryview_convert_item_to_object(((struct __pyx_memoryview_obj *)__pyx_v_self), __pyx_v_itemp); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 985, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;
  }

  /* "View.MemoryView":981
 *         __PYX_XDEC_MEMVIEW(&self.from_slice, 1)
 * 
 *     cdef convert_item_to_object(self, char *itemp):             # <<<<<<<<<<<<<<
 *         if self.to_object_func != NULL:
 *             return self.to_object_func(itemp)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("View.MemoryView._memoryviewslice.convert_item_to_object", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":987
 *             return memoryview.convert_item_to_object(self, itemp)
 * 
 *     cdef assign_item_from_object(self, char *itemp, object value):             # <<<<<<<<<<<<<<
 *         if self.to_dtype_func != NULL:
 *             self.to_dtype_func(itemp, value)
 */

static PyObject *__pyx_memoryviewslice_assign_item_from_object(struct __pyx_memoryviewslice_obj *__pyx_v_self, char *__pyx_v_itemp, PyObject *__pyx_v_value) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("assign_item_from_object", 0);

  /* "View.MemoryView":988
 * 
 *     cdef assign_item_from_object(self, char *itemp, object value):
 *         if self.to_dtype_func != NULL:             # <<<<<<<<<<<<<<
 *             self.to_dtype_func(itemp, value)
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_self->to_dtype_func != NULL) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":989
 *     cdef assign_item_from_object(self, char *itemp, object value):
 *         if self.to_dtype_func != NULL:
 *             self.to_dtype_func(itemp, value)             # <<<<<<<<<<<<<<
 *         else:
 *             memoryview.assign_item_from_object(self, itemp, value)
 */
    __pyx_t_2 = __pyx_v_self->to_dtype_func(__pyx_v_itemp, __pyx_v_value); if (unlikely(__pyx_t_2 == ((int)0))) __PYX_ERR(2, 989, __pyx_L1_error)

    /* "View.MemoryView":988
 * 
 *     cdef assign_item_from_object(self, char *itemp, object value):
 *         if self.to_dtype_func != NULL:             # <<<<<<<<<<<<<<
 *             self.to_dtype_func(itemp, value)
 *         else:
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":991
 *             self.to_dtype_func(itemp, value)
 *         else:
 *             memoryview.assign_item_from_object(self, itemp, value)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  /*else*/ {
    __pyx_t_3 = __pyx_memoryview_assign_item_from_object(((struct __pyx_memoryview_obj *)__pyx_v_self), __pyx_v_itemp, __pyx_v_value); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 991, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_L3:;

  /* "View.MemoryView":987
 *             return memoryview.convert_item_to_object(self, itemp)
 * 
 *     cdef assign_item_from_object(self, char *itemp, object value):             # <<<<<<<<<<<<<<
 *         if self.to_dtype_func != NULL:
 *             self.to_dtype_func(itemp, value)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView._memoryviewslice.assign_item_from_object", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":994
 * 
 *     @property
 *     def base(self):             # <<<<<<<<<<<<<<
 *         return self.from_object
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_16_memoryviewslice_4base_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_16_memoryviewslice_4base_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_16_memoryviewslice_4base___get__(((struct __pyx_memoryviewslice_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_16_memoryviewslice_4base___get__(struct __pyx_memoryviewslice_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":995
 *     @property
 *     def base(self):
 *         return self.from_object             # <<<<<<<<<<<<<<
 * 
 *     __pyx_getbuffer = capsule(<void *> &__pyx_memoryview_getbuffer, "getbuffer(obj, view, flags)")
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->from_object);
  __pyx_r = __pyx_v_self->from_object;
  goto __pyx_L0;

  /* "View.MemoryView":994
 * 
 *     @property
 *     def base(self):             # <<<<<<<<<<<<<<
 *         return self.from_object
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw___pyx_memoryviewslice_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw___pyx_memoryviewslice_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf___pyx_memoryviewslice___reduce_cython__(((struct __pyx_memoryviewslice_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf___pyx_memoryviewslice___reduce_cython__(CYTHON_UNUSED struct __pyx_memoryviewslice_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__19, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView._memoryviewslice.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw___pyx_memoryviewslice_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw___pyx_memoryviewslice_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf___pyx_memoryviewslice_2__setstate_cython__(((struct __pyx_memoryviewslice_obj *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf___pyx_memoryviewslice_2__setstate_cython__(CYTHON_UNUSED struct __pyx_memoryviewslice_obj *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__20, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView._memoryviewslice.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":1001
 * 
 * @cname('__pyx_memoryview_fromslice')
 * cdef memoryview_fromslice(__Pyx_memviewslice memviewslice,             # <<<<<<<<<<<<<<
 *                           int ndim,
 *                           object (*to_object_func)(char *),
 */

static PyObject *__pyx_memoryview_fromslice(__Pyx_memviewslice __pyx_v_memviewslice, int __pyx_v_ndim, PyObject *(*__pyx_v_to_object_func)(char *), int (*__pyx_v_to_dtype_func)(char *, PyObject *), int __pyx_v_dtype_is_object) {
  struct __pyx_memoryviewslice_obj *__pyx_v_result = 0;
  Py_ssize_t __pyx_v_suboffset;
  PyObject *__pyx_v_length = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_TypeInfo *__pyx_t_4;
  Py_buffer __pyx_t_5;
  Py_ssize_t *__pyx_t_6;
  Py_ssize_t *__pyx_t_7;
  Py_ssize_t *__pyx_t_8;
  Py_ssize_t __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("memoryview_fromslice", 0);

  /* "View.MemoryView":1009
 *     cdef _memoryviewslice result
 * 
 *     if <PyObject *> memviewslice.memview == Py_None:             # <<<<<<<<<<<<<<
 *         return None
 * 
 */
  __pyx_t_1 = ((((PyObject *)__pyx_v_memviewslice.memview) == Py_None) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":1010
 * 
 *     if <PyObject *> memviewslice.memview == Py_None:
 *         return None             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "View.MemoryView":1009
 *     cdef _memoryviewslice result
 * 
 *     if <PyObject *> memviewslice.memview == Py_None:             # <<<<<<<<<<<<<<
 *         return None
 * 
 */
  }

  /* "View.MemoryView":1015
 * 
 * 
 *     result = _memoryviewslice(None, 0, dtype_is_object)             # <<<<<<<<<<<<<<
 * 
 *     result.from_slice = memviewslice
 */
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_dtype_is_object); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 1015, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 1015, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  PyTuple_SET_ITEM(__pyx_t_3, 0, Py_None);
  __Pyx_INCREF(__pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_int_0);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_memoryviewslice_type), __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 1015, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_result = ((struct __pyx_memoryviewslice_obj *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "View.MemoryView":1017
 *     result = _memoryviewslice(None, 0, dtype_is_object)
 * 
 *     result.from_slice = memviewslice             # <<<<<<<<<<<<<<
 *     __PYX_INC_MEMVIEW(&memviewslice, 1)
 * 
 */
  __pyx_v_result->from_slice = __pyx_v_memviewslice;

  /* "View.MemoryView":1018
 * 
 *     result.from_slice = memviewslice
 *     __PYX_INC_MEMVIEW(&memviewslice, 1)             # <<<<<<<<<<<<<<
 * 
 *     result.from_object = (<memoryview> memviewslice.memview).base
 */
  __PYX_INC_MEMVIEW((&__pyx_v_memviewslice), 1);

  /* "View.MemoryView":1020
 *     __PYX_INC_MEMVIEW(&memviewslice, 1)
 * 
 *     result.from_object = (<memoryview> memviewslice.memview).base             # <<<<<<<<<<<<<<
 *     result.typeinfo = memviewslice.memview.typeinfo
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_memviewslice.memview), __pyx_n_s_base); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 1020, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __Pyx_GOTREF(__pyx_v_result->from_object);
  __Pyx_DECREF(__pyx_v_result->from_object);
  __pyx_v_result->from_object = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "View.MemoryView":1021
 * 
 *     result.from_object = (<memoryview> memviewslice.memview).base
 *     result.typeinfo = memviewslice.memview.typeinfo             # <<<<<<<<<<<<<<
 * 
 *     result.view = memviewslice.memview.view
 */
  __pyx_t_4 = __pyx_v_memviewslice.memview->typeinfo;
  __pyx_v_result->__pyx_base.typeinfo = __pyx_t_4;

  /* "View.MemoryView":1023
 *     result.typeinfo = memviewslice.memview.typeinfo
 * 
 *     result.view = memviewslice.memview.view             # <<<<<<<<<<<<<<
 *     result.view.buf = <void *> memviewslice.data
 *     result.view.ndim = ndim
 */
  __pyx_t_5 = __pyx_v_memviewslice.memview->view;
  __pyx_v_result->__pyx_base.view = __pyx_t_5;

  /* "View.MemoryView":1024
 * 
 *     result.view = memviewslice.memview.view
 *     result.view.buf = <void *> memviewslice.data             # <<<<<<<<<<<<<<
 *     result.view.ndim = ndim
 *     (<__pyx_buffer *> &result.view).obj = Py_None
 */
  __pyx_v_result->__pyx_base.view.buf = ((void *)__pyx_v_memviewslice.data);

  /* "View.MemoryView":1025
 *     result.view = memviewslice.memview.view
 *     result.view.buf = <void *> memviewslice.data
 *     result.view.ndim = ndim             # <<<<<<<<<<<<<<
 *     (<__pyx_buffer *> &result.view).obj = Py_None
 *     Py_INCREF(Py_None)
 */
  __pyx_v_result->__pyx_base.view.ndim = __pyx_v_ndim;

  /* "View.MemoryView":1026
 *     result.view.buf = <void *> memviewslice.data
 *     result.view.ndim = ndim
 *     (<__pyx_buffer *> &result.view).obj = Py_None             # <<<<<<<<<<<<<<
 *     Py_INCREF(Py_None)
 * 
 */
  ((Py_buffer *)(&__pyx_v_result->__pyx_base.view))->obj = Py_None;

  /* "View.MemoryView":1027
 *     result.view.ndim = ndim
 *     (<__pyx_buffer *> &result.view).obj = Py_None
 *     Py_INCREF(Py_None)             # <<<<<<<<<<<<<<
 * 
 *     if (<memoryview>memviewslice.memview).flags & PyBUF_WRITABLE:
 */
  Py_INCREF(Py_None);

  /* "View.MemoryView":1029
 *     Py_INCREF(Py_None)
 * 
 *     if (<memoryview>memviewslice.memview).flags & PyBUF_WRITABLE:             # <<<<<<<<<<<<<<
 *         result.flags = PyBUF_RECORDS
 *     else:
 */
  __pyx_t_1 = ((((struct __pyx_memoryview_obj *)__pyx_v_memviewslice.memview)->flags & PyBUF_WRITABLE) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":1030
 * 
 *     if (<memoryview>memviewslice.memview).flags & PyBUF_WRITABLE:
 *         result.flags = PyBUF_RECORDS             # <<<<<<<<<<<<<<
 *     else:
 *         result.flags = PyBUF_RECORDS_RO
 */
    __pyx_v_result->__pyx_base.flags = PyBUF_RECORDS;

    /* "View.MemoryView":1029
 *     Py_INCREF(Py_None)
 * 
 *     if (<memoryview>memviewslice.memview).flags & PyBUF_WRITABLE:             # <<<<<<<<<<<<<<
 *         result.flags = PyBUF_RECORDS
 *     else:
 */
    goto __pyx_L4;
  }

  /* "View.MemoryView":1032
 *         result.flags = PyBUF_RECORDS
 *     else:
 *         result.flags = PyBUF_RECORDS_RO             # <<<<<<<<<<<<<<
 * 
 *     result.view.shape = <Py_ssize_t *> result.from_slice.shape
 */
  /*else*/ {
    __pyx_v_result->__pyx_base.flags = PyBUF_RECORDS_RO;
  }
  __pyx_L4:;

  /* "View.MemoryView":1034
 *         result.flags = PyBUF_RECORDS_RO
 * 
 *     result.view.shape = <Py_ssize_t *> result.from_slice.shape             # <<<<<<<<<<<<<<
 *     result.view.strides = <Py_ssize_t *> result.from_slice.strides
 * 
 */
  __pyx_v_result->__pyx_base.view.shape = ((Py_ssize_t *)__pyx_v_result->from_slice.shape);

  /* "View.MemoryView":1035
 * 
 *     result.view.shape = <Py_ssize_t *> result.from_slice.shape
 *     result.view.strides = <Py_ssize_t *> result.from_slice.strides             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_v_result->__pyx_base.view.strides = ((Py_ssize_t *)__pyx_v_result->from_slice.strides);

  /* "View.MemoryView":1038
 * 
 * 
 *     result.view.suboffsets = NULL             # <<<<<<<<<<<<<<
 *     for suboffset in result.from_slice.suboffsets[:ndim]:
 *         if suboffset >= 0:
 */
  __pyx_v_result->__pyx_base.view.suboffsets = NULL;

  /* "View.MemoryView":1039
 * 
 *     result.view.suboffsets = NULL
 *     for suboffset in result.from_slice.suboffsets[:ndim]:             # <<<<<<<<<<<<<<
 *         if suboffset >= 0:
 *             result.view.suboffsets = <Py_ssize_t *> result.from_slice.suboffsets
 */
  __pyx_t_7 = (__pyx_v_result->from_slice.suboffsets + __pyx_v_ndim);
  for (__pyx_t_8 = __pyx_v_result->from_slice.suboffsets; __pyx_t_8 < __pyx_t_7; __pyx_t_8++) {
    __pyx_t_6 = __pyx_t_8;
    __pyx_v_suboffset = (__pyx_t_6[0]);

    /* "View.MemoryView":1040
 *     result.view.suboffsets = NULL
 *     for suboffset in result.from_slice.suboffsets[:ndim]:
 *         if suboffset >= 0:             # <<<<<<<<<<<<<<
 *             result.view.suboffsets = <Py_ssize_t *> result.from_slice.suboffsets
 *             break
 */
    __pyx_t_1 = ((__pyx_v_suboffset >= 0) != 0);
    if (__pyx_t_1) {

      /* "View.MemoryView":1041
 *     for suboffset in result.from_slice.suboffsets[:ndim]:
 *         if suboffset >= 0:
 *             result.view.suboffsets = <Py_ssize_t *> result.from_slice.suboffsets             # <<<<<<<<<<<<<<
 *             break
 * 
 */
      __pyx_v_result->__pyx_base.view.suboffsets = ((Py_ssize_t *)__pyx_v_result->from_slice.suboffsets);

      /* "View.MemoryView":1042
 *         if suboffset >= 0:
 *             result.view.suboffsets = <Py_ssize_t *> result.from_slice.suboffsets
 *             break             # <<<<<<<<<<<<<<
 * 
 *     result.view.len = result.view.itemsize
 */
      goto __pyx_L6_break;

      /* "View.MemoryView":1040
 *     result.view.suboffsets = NULL
 *     for suboffset in result.from_slice.suboffsets[:ndim]:
 *         if suboffset >= 0:             # <<<<<<<<<<<<<<
 *             result.view.suboffsets = <Py_ssize_t *> result.from_slice.suboffsets
 *             break
 */
    }
  }
  __pyx_L6_break:;

  /* "View.MemoryView":1044
 *             break
 * 
 *     result.view.len = result.view.itemsize             # <<<<<<<<<<<<<<
 *     for length in result.view.shape[:ndim]:
 *         result.view.len *= length
 */
  __pyx_t_9 = __pyx_v_result->__pyx_base.view.itemsize;
  __pyx_v_result->__pyx_base.view.len = __pyx_t_9;

  /* "View.MemoryView":1045
 * 
 *     result.view.len = result.view.itemsize
 *     for length in result.view.shape[:ndim]:             # <<<<<<<<<<<<<<
 *         result.view.len *= length
 * 
 */
  __pyx_t_7 = (__pyx_v_result->__pyx_base.view.shape + __pyx_v_ndim);
  for (__pyx_t_8 = __pyx_v_result->__pyx_base.view.shape; __pyx_t_8 < __pyx_t_7; __pyx_t_8++) {
    __pyx_t_6 = __pyx_t_8;
    __pyx_t_2 = PyInt_FromSsize_t((__pyx_t_6[0])); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 1045, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_XDECREF_SET(__pyx_v_length, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "View.MemoryView":1046
 *     result.view.len = result.view.itemsize
 *     for length in result.view.shape[:ndim]:
 *         result.view.len *= length             # <<<<<<<<<<<<<<
 * 
 *     result.to_object_func = to_object_func
 */
    __pyx_t_2 = PyInt_FromSsize_t(__pyx_v_result->__pyx_base.view.len); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 1046, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyNumber_InPlaceMultiply(__pyx_t_2, __pyx_v_length); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 1046, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_9 = __Pyx_PyIndex_AsSsize_t(__pyx_t_3); if (unlikely((__pyx_t_9 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(2, 1046, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_result->__pyx_base.view.len = __pyx_t_9;
  }

  /* "View.MemoryView":1048
 *         result.view.len *= length
 * 
 *     result.to_object_func = to_object_func             # <<<<<<<<<<<<<<
 *     result.to_dtype_func = to_dtype_func
 * 
 */
  __pyx_v_result->to_object_func = __pyx_v_to_object_func;

  /* "View.MemoryView":1049
 * 
 *     result.to_object_func = to_object_func
 *     result.to_dtype_func = to_dtype_func             # <<<<<<<<<<<<<<
 * 
 *     return result
 */
  __pyx_v_result->to_dtype_func = __pyx_v_to_dtype_func;

  /* "View.MemoryView":1051
 *     result.to_dtype_func = to_dtype_func
 * 
 *     return result             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_get_slice_from_memoryview')
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = ((PyObject *)__pyx_v_result);
  goto __pyx_L0;

  /* "View.MemoryView":1001
 * 
 * @cname('__pyx_memoryview_fromslice')
 * cdef memoryview_fromslice(__Pyx_memviewslice memviewslice,             # <<<<<<<<<<<<<<
 *                           int ndim,
 *                           object (*to_object_func)(char *),
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.memoryview_fromslice", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XDECREF(__pyx_v_length);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":1054
 * 
 * @cname('__pyx_memoryview_get_slice_from_memoryview')
 * cdef __Pyx_memviewslice *get_slice_from_memview(memoryview memview,             # <<<<<<<<<<<<<<
 *                                                    __Pyx_memviewslice *mslice) except NULL:
 *     cdef _memoryviewslice obj
 */

static __Pyx_memviewslice *__pyx_memoryview_get_slice_from_memoryview(struct __pyx_memoryview_obj *__pyx_v_memview, __Pyx_memviewslice *__pyx_v_mslice) {
  struct __pyx_memoryviewslice_obj *__pyx_v_obj = 0;
  __Pyx_memviewslice *__pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_slice_from_memview", 0);

  /* "View.MemoryView":1057
 *                                                    __Pyx_memviewslice *mslice) except NULL:
 *     cdef _memoryviewslice obj
 *     if isinstance(memview, _memoryviewslice):             # <<<<<<<<<<<<<<
 *         obj = memview
 *         return &obj.from_slice
 */
  __pyx_t_1 = __Pyx_TypeCheck(((PyObject *)__pyx_v_memview), __pyx_memoryviewslice_type); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":1058
 *     cdef _memoryviewslice obj
 *     if isinstance(memview, _memoryviewslice):
 *         obj = memview             # <<<<<<<<<<<<<<
 *         return &obj.from_slice
 *     else:
 */
    if (!(likely(((((PyObject *)__pyx_v_memview)) == Py_None) || likely(__Pyx_TypeTest(((PyObject *)__pyx_v_memview), __pyx_memoryviewslice_type))))) __PYX_ERR(2, 1058, __pyx_L1_error)
    __pyx_t_3 = ((PyObject *)__pyx_v_memview);
    __Pyx_INCREF(__pyx_t_3);
    __pyx_v_obj = ((struct __pyx_memoryviewslice_obj *)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "View.MemoryView":1059
 *     if isinstance(memview, _memoryviewslice):
 *         obj = memview
 *         return &obj.from_slice             # <<<<<<<<<<<<<<
 *     else:
 *         slice_copy(memview, mslice)
 */
    __pyx_r = (&__pyx_v_obj->from_slice);
    goto __pyx_L0;

    /* "View.MemoryView":1057
 *                                                    __Pyx_memviewslice *mslice) except NULL:
 *     cdef _memoryviewslice obj
 *     if isinstance(memview, _memoryviewslice):             # <<<<<<<<<<<<<<
 *         obj = memview
 *         return &obj.from_slice
 */
  }

  /* "View.MemoryView":1061
 *         return &obj.from_slice
 *     else:
 *         slice_copy(memview, mslice)             # <<<<<<<<<<<<<<
 *         return mslice
 * 
 */
  /*else*/ {
    __pyx_memoryview_slice_copy(__pyx_v_memview, __pyx_v_mslice);

    /* "View.MemoryView":1062
 *     else:
 *         slice_copy(memview, mslice)
 *         return mslice             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_slice_copy')
 */
    __pyx_r = __pyx_v_mslice;
    goto __pyx_L0;
  }

  /* "View.MemoryView":1054
 * 
 * @cname('__pyx_memoryview_get_slice_from_memoryview')
 * cdef __Pyx_memviewslice *get_slice_from_memview(memoryview memview,             # <<<<<<<<<<<<<<
 *                                                    __Pyx_memviewslice *mslice) except NULL:
 *     cdef _memoryviewslice obj
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.get_slice_from_memview", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_obj);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":1065
 * 
 * @cname('__pyx_memoryview_slice_copy')
 * cdef void slice_copy(memoryview memview, __Pyx_memviewslice *dst):             # <<<<<<<<<<<<<<
 *     cdef int dim
 *     cdef (Py_ssize_t*) shape, strides, suboffsets
 */

static void __pyx_memoryview_slice_copy(struct __pyx_memoryview_obj *__pyx_v_memview, __Pyx_memviewslice *__pyx_v_dst) {
  int __pyx_v_dim;
  Py_ssize_t *__pyx_v_shape;
  Py_ssize_t *__pyx_v_strides;
  Py_ssize_t *__pyx_v_suboffsets;
  __Pyx_RefNannyDeclarations
  Py_ssize_t *__pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  __Pyx_RefNannySetupContext("slice_copy", 0);

  /* "View.MemoryView":1069
 *     cdef (Py_ssize_t*) shape, strides, suboffsets
 * 
 *     shape = memview.view.shape             # <<<<<<<<<<<<<<
 *     strides = memview.view.strides
 *     suboffsets = memview.view.suboffsets
 */
  __pyx_t_1 = __pyx_v_memview->view.shape;
  __pyx_v_shape = __pyx_t_1;

  /* "View.MemoryView":1070
 * 
 *     shape = memview.view.shape
 *     strides = memview.view.strides             # <<<<<<<<<<<<<<
 *     suboffsets = memview.view.suboffsets
 * 
 */
  __pyx_t_1 = __pyx_v_memview->view.strides;
  __pyx_v_strides = __pyx_t_1;

  /* "View.MemoryView":1071
 *     shape = memview.view.shape
 *     strides = memview.view.strides
 *     suboffsets = memview.view.suboffsets             # <<<<<<<<<<<<<<
 * 
 *     dst.memview = <__pyx_memoryview *> memview
 */
  __pyx_t_1 = __pyx_v_memview->view.suboffsets;
  __pyx_v_suboffsets = __pyx_t_1;

  /* "View.MemoryView":1073
 *     suboffsets = memview.view.suboffsets
 * 
 *     dst.memview = <__pyx_memoryview *> memview             # <<<<<<<<<<<<<<
 *     dst.data = <char *> memview.view.buf
 * 
 */
  __pyx_v_dst->memview = ((struct __pyx_memoryview_obj *)__pyx_v_memview);

  /* "View.MemoryView":1074
 * 
 *     dst.memview = <__pyx_memoryview *> memview
 *     dst.data = <char *> memview.view.buf             # <<<<<<<<<<<<<<
 * 
 *     for dim in range(memview.view.ndim):
 */
  __pyx_v_dst->data = ((char *)__pyx_v_memview->view.buf);

  /* "View.MemoryView":1076
 *     dst.data = <char *> memview.view.buf
 * 
 *     for dim in range(memview.view.ndim):             # <<<<<<<<<<<<<<
 *         dst.shape[dim] = shape[dim]
 *         dst.strides[dim] = strides[dim]
 */
  __pyx_t_2 = __pyx_v_memview->view.ndim;
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_dim = __pyx_t_4;

    /* "View.MemoryView":1077
 * 
 *     for dim in range(memview.view.ndim):
 *         dst.shape[dim] = shape[dim]             # <<<<<<<<<<<<<<
 *         dst.strides[dim] = strides[dim]
 *         dst.suboffsets[dim] = suboffsets[dim] if suboffsets else -1
 */
    (__pyx_v_dst->shape[__pyx_v_dim]) = (__pyx_v_shape[__pyx_v_dim]);

    /* "View.MemoryView":1078
 *     for dim in range(memview.view.ndim):
 *         dst.shape[dim] = shape[dim]
 *         dst.strides[dim] = strides[dim]             # <<<<<<<<<<<<<<
 *         dst.suboffsets[dim] = suboffsets[dim] if suboffsets else -1
 * 
 */
    (__pyx_v_dst->strides[__pyx_v_dim]) = (__pyx_v_strides[__pyx_v_dim]);

    /* "View.MemoryView":1079
 *         dst.shape[dim] = shape[dim]
 *         dst.strides[dim] = strides[dim]
 *         dst.suboffsets[dim] = suboffsets[dim] if suboffsets else -1             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_copy_object')
 */
    if ((__pyx_v_suboffsets != 0)) {
      __pyx_t_5 = (__pyx_v_suboffsets[__pyx_v_dim]);
    } else {
      __pyx_t_5 = -1L;
    }
    (__pyx_v_dst->suboffsets[__pyx_v_dim]) = __pyx_t_5;
  }

  /* "View.MemoryView":1065
 * 
 * @cname('__pyx_memoryview_slice_copy')
 * cdef void slice_copy(memoryview memview, __Pyx_memviewslice *dst):             # <<<<<<<<<<<<<<
 *     cdef int dim
 *     cdef (Py_ssize_t*) shape, strides, suboffsets
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "View.MemoryView":1082
 * 
 * @cname('__pyx_memoryview_copy_object')
 * cdef memoryview_copy(memoryview memview):             # <<<<<<<<<<<<<<
 *     "Create a new memoryview object"
 *     cdef __Pyx_memviewslice memviewslice
 */

static PyObject *__pyx_memoryview_copy_object(struct __pyx_memoryview_obj *__pyx_v_memview) {
  __Pyx_memviewslice __pyx_v_memviewslice;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("memoryview_copy", 0);

  /* "View.MemoryView":1085
 *     "Create a new memoryview object"
 *     cdef __Pyx_memviewslice memviewslice
 *     slice_copy(memview, &memviewslice)             # <<<<<<<<<<<<<<
 *     return memoryview_copy_from_slice(memview, &memviewslice)
 * 
 */
  __pyx_memoryview_slice_copy(__pyx_v_memview, (&__pyx_v_memviewslice));

  /* "View.MemoryView":1086
 *     cdef __Pyx_memviewslice memviewslice
 *     slice_copy(memview, &memviewslice)
 *     return memoryview_copy_from_slice(memview, &memviewslice)             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_copy_object_from_slice')
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_memoryview_copy_object_from_slice(__pyx_v_memview, (&__pyx_v_memviewslice)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 1086, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":1082
 * 
 * @cname('__pyx_memoryview_copy_object')
 * cdef memoryview_copy(memoryview memview):             # <<<<<<<<<<<<<<
 *     "Create a new memoryview object"
 *     cdef __Pyx_memviewslice memviewslice
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.memoryview_copy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":1089
 * 
 * @cname('__pyx_memoryview_copy_object_from_slice')
 * cdef memoryview_copy_from_slice(memoryview memview, __Pyx_memviewslice *memviewslice):             # <<<<<<<<<<<<<<
 *     """
 *     Create a new memoryview object from a given memoryview object and slice.
 */

static PyObject *__pyx_memoryview_copy_object_from_slice(struct __pyx_memoryview_obj *__pyx_v_memview, __Pyx_memviewslice *__pyx_v_memviewslice) {
  PyObject *(*__pyx_v_to_object_func)(char *);
  int (*__pyx_v_to_dtype_func)(char *, PyObject *);
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *(*__pyx_t_3)(char *);
  int (*__pyx_t_4)(char *, PyObject *);
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("memoryview_copy_from_slice", 0);

  /* "View.MemoryView":1096
 *     cdef int (*to_dtype_func)(char *, object) except 0
 * 
 *     if isinstance(memview, _memoryviewslice):             # <<<<<<<<<<<<<<
 *         to_object_func = (<_memoryviewslice> memview).to_object_func
 *         to_dtype_func = (<_memoryviewslice> memview).to_dtype_func
 */
  __pyx_t_1 = __Pyx_TypeCheck(((PyObject *)__pyx_v_memview), __pyx_memoryviewslice_type); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":1097
 * 
 *     if isinstance(memview, _memoryviewslice):
 *         to_object_func = (<_memoryviewslice> memview).to_object_func             # <<<<<<<<<<<<<<
 *         to_dtype_func = (<_memoryviewslice> memview).to_dtype_func
 *     else:
 */
    __pyx_t_3 = ((struct __pyx_memoryviewslice_obj *)__pyx_v_memview)->to_object_func;
    __pyx_v_to_object_func = __pyx_t_3;

    /* "View.MemoryView":1098
 *     if isinstance(memview, _memoryviewslice):
 *         to_object_func = (<_memoryviewslice> memview).to_object_func
 *         to_dtype_func = (<_memoryviewslice> memview).to_dtype_func             # <<<<<<<<<<<<<<
 *     else:
 *         to_object_func = NULL
 */
    __pyx_t_4 = ((struct __pyx_memoryviewslice_obj *)__pyx_v_memview)->to_dtype_func;
    __pyx_v_to_dtype_func = __pyx_t_4;

    /* "View.MemoryView":1096
 *     cdef int (*to_dtype_func)(char *, object) except 0
 * 
 *     if isinstance(memview, _memoryviewslice):             # <<<<<<<<<<<<<<
 *         to_object_func = (<_memoryviewslice> memview).to_object_func
 *         to_dtype_func = (<_memoryviewslice> memview).to_dtype_func
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":1100
 *         to_dtype_func = (<_memoryviewslice> memview).to_dtype_func
 *     else:
 *         to_object_func = NULL             # <<<<<<<<<<<<<<
 *         to_dtype_func = NULL
 * 
 */
  /*else*/ {
    __pyx_v_to_object_func = NULL;

    /* "View.MemoryView":1101
 *     else:
 *         to_object_func = NULL
 *         to_dtype_func = NULL             # <<<<<<<<<<<<<<
 * 
 *     return memoryview_fromslice(memviewslice[0], memview.view.ndim,
 */
    __pyx_v_to_dtype_func = NULL;
  }
  __pyx_L3:;

  /* "View.MemoryView":1103
 *         to_dtype_func = NULL
 * 
 *     return memoryview_fromslice(memviewslice[0], memview.view.ndim,             # <<<<<<<<<<<<<<
 *                                 to_object_func, to_dtype_func,
 *                                 memview.dtype_is_object)
 */
  __Pyx_XDECREF(__pyx_r);

  /* "View.MemoryView":1105
 *     return memoryview_fromslice(memviewslice[0], memview.view.ndim,
 *                                 to_object_func, to_dtype_func,
 *                                 memview.dtype_is_object)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_5 = __pyx_memoryview_fromslice((__pyx_v_memviewslice[0]), __pyx_v_memview->view.ndim, __pyx_v_to_object_func, __pyx_v_to_dtype_func, __pyx_v_memview->dtype_is_object); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 1103, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":1089
 * 
 * @cname('__pyx_memoryview_copy_object_from_slice')
 * cdef memoryview_copy_from_slice(memoryview memview, __Pyx_memviewslice *memviewslice):             # <<<<<<<<<<<<<<
 *     """
 *     Create a new memoryview object from a given memoryview object and slice.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("View.MemoryView.memoryview_copy_from_slice", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":1111
 * 
 * 
 * cdef Py_ssize_t abs_py_ssize_t(Py_ssize_t arg) nogil:             # <<<<<<<<<<<<<<
 *     if arg < 0:
 *         return -arg
 */

static Py_ssize_t abs_py_ssize_t(Py_ssize_t __pyx_v_arg) {
  Py_ssize_t __pyx_r;
  int __pyx_t_1;

  /* "View.MemoryView":1112
 * 
 * cdef Py_ssize_t abs_py_ssize_t(Py_ssize_t arg) nogil:
 *     if arg < 0:             # <<<<<<<<<<<<<<
 *         return -arg
 *     else:
 */
  __pyx_t_1 = ((__pyx_v_arg < 0) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":1113
 * cdef Py_ssize_t abs_py_ssize_t(Py_ssize_t arg) nogil:
 *     if arg < 0:
 *         return -arg             # <<<<<<<<<<<<<<
 *     else:
 *         return arg
 */
    __pyx_r = (-__pyx_v_arg);
    goto __pyx_L0;

    /* "View.MemoryView":1112
 * 
 * cdef Py_ssize_t abs_py_ssize_t(Py_ssize_t arg) nogil:
 *     if arg < 0:             # <<<<<<<<<<<<<<
 *         return -arg
 *     else:
 */
  }

  /* "View.MemoryView":1115
 *         return -arg
 *     else:
 *         return arg             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_get_best_slice_order')
 */
  /*else*/ {
    __pyx_r = __pyx_v_arg;
    goto __pyx_L0;
  }

  /* "View.MemoryView":1111
 * 
 * 
 * cdef Py_ssize_t abs_py_ssize_t(Py_ssize_t arg) nogil:             # <<<<<<<<<<<<<<
 *     if arg < 0:
 *         return -arg
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "View.MemoryView":1118
 * 
 * @cname('__pyx_get_best_slice_order')
 * cdef char get_best_order(__Pyx_memviewslice *mslice, int ndim) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     Figure out the best memory access order for a given slice.
 */

static char __pyx_get_best_slice_order(__Pyx_memviewslice *__pyx_v_mslice, int __pyx_v_ndim) {
  int __pyx_v_i;
  Py_ssize_t __pyx_v_c_stride;
  Py_ssize_t __pyx_v_f_stride;
  char __pyx_r;
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;

  /* "View.MemoryView":1123
 *     """
 *     cdef int i
 *     cdef Py_ssize_t c_stride = 0             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t f_stride = 0
 * 
 */
  __pyx_v_c_stride = 0;

  /* "View.MemoryView":1124
 *     cdef int i
 *     cdef Py_ssize_t c_stride = 0
 *     cdef Py_ssize_t f_stride = 0             # <<<<<<<<<<<<<<
 * 
 *     for i in range(ndim - 1, -1, -1):
 */
  __pyx_v_f_stride = 0;

  /* "View.MemoryView":1126
 *     cdef Py_ssize_t f_stride = 0
 * 
 *     for i in range(ndim - 1, -1, -1):             # <<<<<<<<<<<<<<
 *         if mslice.shape[i] > 1:
 *             c_stride = mslice.strides[i]
 */
  for (__pyx_t_1 = (__pyx_v_ndim - 1); __pyx_t_1 > -1; __pyx_t_1-=1) {
    __pyx_v_i = __pyx_t_1;

    /* "View.MemoryView":1127
 * 
 *     for i in range(ndim - 1, -1, -1):
 *         if mslice.shape[i] > 1:             # <<<<<<<<<<<<<<
 *             c_stride = mslice.strides[i]
 *             break
 */
    __pyx_t_2 = (((__pyx_v_mslice->shape[__pyx_v_i]) > 1) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":1128
 *     for i in range(ndim - 1, -1, -1):
 *         if mslice.shape[i] > 1:
 *             c_stride = mslice.strides[i]             # <<<<<<<<<<<<<<
 *             break
 * 
 */
      __pyx_v_c_stride = (__pyx_v_mslice->strides[__pyx_v_i]);

      /* "View.MemoryView":1129
 *         if mslice.shape[i] > 1:
 *             c_stride = mslice.strides[i]
 *             break             # <<<<<<<<<<<<<<
 * 
 *     for i in range(ndim):
 */
      goto __pyx_L4_break;

      /* "View.MemoryView":1127
 * 
 *     for i in range(ndim - 1, -1, -1):
 *         if mslice.shape[i] > 1:             # <<<<<<<<<<<<<<
 *             c_stride = mslice.strides[i]
 *             break
 */
    }
  }
  __pyx_L4_break:;

  /* "View.MemoryView":1131
 *             break
 * 
 *     for i in range(ndim):             # <<<<<<<<<<<<<<
 *         if mslice.shape[i] > 1:
 *             f_stride = mslice.strides[i]
 */
  __pyx_t_1 = __pyx_v_ndim;
  __pyx_t_3 = __pyx_t_1;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "View.MemoryView":1132
 * 
 *     for i in range(ndim):
 *         if mslice.shape[i] > 1:             # <<<<<<<<<<<<<<
 *             f_stride = mslice.strides[i]
 *             break
 */
    __pyx_t_2 = (((__pyx_v_mslice->shape[__pyx_v_i]) > 1) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":1133
 *     for i in range(ndim):
 *         if mslice.shape[i] > 1:
 *             f_stride = mslice.strides[i]             # <<<<<<<<<<<<<<
 *             break
 * 
 */
      __pyx_v_f_stride = (__pyx_v_mslice->strides[__pyx_v_i]);

      /* "View.MemoryView":1134
 *         if mslice.shape[i] > 1:
 *             f_stride = mslice.strides[i]
 *             break             # <<<<<<<<<<<<<<
 * 
 *     if abs_py_ssize_t(c_stride) <= abs_py_ssize_t(f_stride):
 */
      goto __pyx_L7_break;

      /* "View.MemoryView":1132
 * 
 *     for i in range(ndim):
 *         if mslice.shape[i] > 1:             # <<<<<<<<<<<<<<
 *             f_stride = mslice.strides[i]
 *             break
 */
    }
  }
  __pyx_L7_break:;

  /* "View.MemoryView":1136
 *             break
 * 
 *     if abs_py_ssize_t(c_stride) <= abs_py_ssize_t(f_stride):             # <<<<<<<<<<<<<<
 *         return 'C'
 *     else:
 */
  __pyx_t_2 = ((abs_py_ssize_t(__pyx_v_c_stride) <= abs_py_ssize_t(__pyx_v_f_stride)) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":1137
 * 
 *     if abs_py_ssize_t(c_stride) <= abs_py_ssize_t(f_stride):
 *         return 'C'             # <<<<<<<<<<<<<<
 *     else:
 *         return 'F'
 */
    __pyx_r = 'C';
    goto __pyx_L0;

    /* "View.MemoryView":1136
 *             break
 * 
 *     if abs_py_ssize_t(c_stride) <= abs_py_ssize_t(f_stride):             # <<<<<<<<<<<<<<
 *         return 'C'
 *     else:
 */
  }

  /* "View.MemoryView":1139
 *         return 'C'
 *     else:
 *         return 'F'             # <<<<<<<<<<<<<<
 * 
 * @cython.cdivision(True)
 */
  /*else*/ {
    __pyx_r = 'F';
    goto __pyx_L0;
  }

  /* "View.MemoryView":1118
 * 
 * @cname('__pyx_get_best_slice_order')
 * cdef char get_best_order(__Pyx_memviewslice *mslice, int ndim) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     Figure out the best memory access order for a given slice.
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "View.MemoryView":1142
 * 
 * @cython.cdivision(True)
 * cdef void _copy_strided_to_strided(char *src_data, Py_ssize_t *src_strides,             # <<<<<<<<<<<<<<
 *                                    char *dst_data, Py_ssize_t *dst_strides,
 *                                    Py_ssize_t *src_shape, Py_ssize_t *dst_shape,
 */

static void _copy_strided_to_strided(char *__pyx_v_src_data, Py_ssize_t *__pyx_v_src_strides, char *__pyx_v_dst_data, Py_ssize_t *__pyx_v_dst_strides, Py_ssize_t *__pyx_v_src_shape, Py_ssize_t *__pyx_v_dst_shape, int __pyx_v_ndim, size_t __pyx_v_itemsize) {
  CYTHON_UNUSED Py_ssize_t __pyx_v_i;
  CYTHON_UNUSED Py_ssize_t __pyx_v_src_extent;
  Py_ssize_t __pyx_v_dst_extent;
  Py_ssize_t __pyx_v_src_stride;
  Py_ssize_t __pyx_v_dst_stride;
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  Py_ssize_t __pyx_t_6;

  /* "View.MemoryView":1149
 * 
 *     cdef Py_ssize_t i
 *     cdef Py_ssize_t src_extent = src_shape[0]             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t dst_extent = dst_shape[0]
 *     cdef Py_ssize_t src_stride = src_strides[0]
 */
  __pyx_v_src_extent = (__pyx_v_src_shape[0]);

  /* "View.MemoryView":1150
 *     cdef Py_ssize_t i
 *     cdef Py_ssize_t src_extent = src_shape[0]
 *     cdef Py_ssize_t dst_extent = dst_shape[0]             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t src_stride = src_strides[0]
 *     cdef Py_ssize_t dst_stride = dst_strides[0]
 */
  __pyx_v_dst_extent = (__pyx_v_dst_shape[0]);

  /* "View.MemoryView":1151
 *     cdef Py_ssize_t src_extent = src_shape[0]
 *     cdef Py_ssize_t dst_extent = dst_shape[0]
 *     cdef Py_ssize_t src_stride = src_strides[0]             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t dst_stride = dst_strides[0]
 * 
 */
  __pyx_v_src_stride = (__pyx_v_src_strides[0]);

  /* "View.MemoryView":1152
 *     cdef Py_ssize_t dst_extent = dst_shape[0]
 *     cdef Py_ssize_t src_stride = src_strides[0]
 *     cdef Py_ssize_t dst_stride = dst_strides[0]             # <<<<<<<<<<<<<<
 * 
 *     if ndim == 1:
 */
  __pyx_v_dst_stride = (__pyx_v_dst_strides[0]);

  /* "View.MemoryView":1154
 *     cdef Py_ssize_t dst_stride = dst_strides[0]
 * 
 *     if ndim == 1:             # <<<<<<<<<<<<<<
 *        if (src_stride > 0 and dst_stride > 0 and
 *            <size_t> src_stride == itemsize == <size_t> dst_stride):
 */
  __pyx_t_1 = ((__pyx_v_ndim == 1) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":1155
 * 
 *     if ndim == 1:
 *        if (src_stride > 0 and dst_stride > 0 and             # <<<<<<<<<<<<<<
 *            <size_t> src_stride == itemsize == <size_t> dst_stride):
 *            memcpy(dst_data, src_data, itemsize * dst_extent)
 */
    __pyx_t_2 = ((__pyx_v_src_stride > 0) != 0);
    if (__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L5_bool_binop_done;
    }
    __pyx_t_2 = ((__pyx_v_dst_stride > 0) != 0);
    if (__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L5_bool_binop_done;
    }

    /* "View.MemoryView":1156
 *     if ndim == 1:
 *        if (src_stride > 0 and dst_stride > 0 and
 *            <size_t> src_stride == itemsize == <size_t> dst_stride):             # <<<<<<<<<<<<<<
 *            memcpy(dst_data, src_data, itemsize * dst_extent)
 *        else:
 */
    __pyx_t_2 = (((size_t)__pyx_v_src_stride) == __pyx_v_itemsize);
    if (__pyx_t_2) {
      __pyx_t_2 = (__pyx_v_itemsize == ((size_t)__pyx_v_dst_stride));
    }
    __pyx_t_3 = (__pyx_t_2 != 0);
    __pyx_t_1 = __pyx_t_3;
    __pyx_L5_bool_binop_done:;

    /* "View.MemoryView":1155
 * 
 *     if ndim == 1:
 *        if (src_stride > 0 and dst_stride > 0 and             # <<<<<<<<<<<<<<
 *            <size_t> src_stride == itemsize == <size_t> dst_stride):
 *            memcpy(dst_data, src_data, itemsize * dst_extent)
 */
    if (__pyx_t_1) {

      /* "View.MemoryView":1157
 *        if (src_stride > 0 and dst_stride > 0 and
 *            <size_t> src_stride == itemsize == <size_t> dst_stride):
 *            memcpy(dst_data, src_data, itemsize * dst_extent)             # <<<<<<<<<<<<<<
 *        else:
 *            for i in range(dst_extent):
 */
      (void)(memcpy(__pyx_v_dst_data, __pyx_v_src_data, (__pyx_v_itemsize * __pyx_v_dst_extent)));

      /* "View.MemoryView":1155
 * 
 *     if ndim == 1:
 *        if (src_stride > 0 and dst_stride > 0 and             # <<<<<<<<<<<<<<
 *            <size_t> src_stride == itemsize == <size_t> dst_stride):
 *            memcpy(dst_data, src_data, itemsize * dst_extent)
 */
      goto __pyx_L4;
    }

    /* "View.MemoryView":1159
 *            memcpy(dst_data, src_data, itemsize * dst_extent)
 *        else:
 *            for i in range(dst_extent):             # <<<<<<<<<<<<<<
 *                memcpy(dst_data, src_data, itemsize)
 *                src_data += src_stride
 */
    /*else*/ {
      __pyx_t_4 = __pyx_v_dst_extent;
      __pyx_t_5 = __pyx_t_4;
      for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
        __pyx_v_i = __pyx_t_6;

        /* "View.MemoryView":1160
 *        else:
 *            for i in range(dst_extent):
 *                memcpy(dst_data, src_data, itemsize)             # <<<<<<<<<<<<<<
 *                src_data += src_stride
 *                dst_data += dst_stride
 */
        (void)(memcpy(__pyx_v_dst_data, __pyx_v_src_data, __pyx_v_itemsize));

        /* "View.MemoryView":1161
 *            for i in range(dst_extent):
 *                memcpy(dst_data, src_data, itemsize)
 *                src_data += src_stride             # <<<<<<<<<<<<<<
 *                dst_data += dst_stride
 *     else:
 */
        __pyx_v_src_data = (__pyx_v_src_data + __pyx_v_src_stride);

        /* "View.MemoryView":1162
 *                memcpy(dst_data, src_data, itemsize)
 *                src_data += src_stride
 *                dst_data += dst_stride             # <<<<<<<<<<<<<<
 *     else:
 *         for i in range(dst_extent):
 */
        __pyx_v_dst_data = (__pyx_v_dst_data + __pyx_v_dst_stride);
      }
    }
    __pyx_L4:;

    /* "View.MemoryView":1154
 *     cdef Py_ssize_t dst_stride = dst_strides[0]
 * 
 *     if ndim == 1:             # <<<<<<<<<<<<<<
 *        if (src_stride > 0 and dst_stride > 0 and
 *            <size_t> src_stride == itemsize == <size_t> dst_stride):
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":1164
 *                dst_data += dst_stride
 *     else:
 *         for i in range(dst_extent):             # <<<<<<<<<<<<<<
 *             _copy_strided_to_strided(src_data, src_strides + 1,
 *                                      dst_data, dst_strides + 1,
 */
  /*else*/ {
    __pyx_t_4 = __pyx_v_dst_extent;
    __pyx_t_5 = __pyx_t_4;
    for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
      __pyx_v_i = __pyx_t_6;

      /* "View.MemoryView":1165
 *     else:
 *         for i in range(dst_extent):
 *             _copy_strided_to_strided(src_data, src_strides + 1,             # <<<<<<<<<<<<<<
 *                                      dst_data, dst_strides + 1,
 *                                      src_shape + 1, dst_shape + 1,
 */
      _copy_strided_to_strided(__pyx_v_src_data, (__pyx_v_src_strides + 1), __pyx_v_dst_data, (__pyx_v_dst_strides + 1), (__pyx_v_src_shape + 1), (__pyx_v_dst_shape + 1), (__pyx_v_ndim - 1), __pyx_v_itemsize);

      /* "View.MemoryView":1169
 *                                      src_shape + 1, dst_shape + 1,
 *                                      ndim - 1, itemsize)
 *             src_data += src_stride             # <<<<<<<<<<<<<<
 *             dst_data += dst_stride
 * 
 */
      __pyx_v_src_data = (__pyx_v_src_data + __pyx_v_src_stride);

      /* "View.MemoryView":1170
 *                                      ndim - 1, itemsize)
 *             src_data += src_stride
 *             dst_data += dst_stride             # <<<<<<<<<<<<<<
 * 
 * cdef void copy_strided_to_strided(__Pyx_memviewslice *src,
 */
      __pyx_v_dst_data = (__pyx_v_dst_data + __pyx_v_dst_stride);
    }
  }
  __pyx_L3:;

  /* "View.MemoryView":1142
 * 
 * @cython.cdivision(True)
 * cdef void _copy_strided_to_strided(char *src_data, Py_ssize_t *src_strides,             # <<<<<<<<<<<<<<
 *                                    char *dst_data, Py_ssize_t *dst_strides,
 *                                    Py_ssize_t *src_shape, Py_ssize_t *dst_shape,
 */

  /* function exit code */
}

/* "View.MemoryView":1172
 *             dst_data += dst_stride
 * 
 * cdef void copy_strided_to_strided(__Pyx_memviewslice *src,             # <<<<<<<<<<<<<<
 *                                   __Pyx_memviewslice *dst,
 *                                   int ndim, size_t itemsize) nogil:
 */

static void copy_strided_to_strided(__Pyx_memviewslice *__pyx_v_src, __Pyx_memviewslice *__pyx_v_dst, int __pyx_v_ndim, size_t __pyx_v_itemsize) {

  /* "View.MemoryView":1175
 *                                   __Pyx_memviewslice *dst,
 *                                   int ndim, size_t itemsize) nogil:
 *     _copy_strided_to_strided(src.data, src.strides, dst.data, dst.strides,             # <<<<<<<<<<<<<<
 *                              src.shape, dst.shape, ndim, itemsize)
 * 
 */
  _copy_strided_to_strided(__pyx_v_src->data, __pyx_v_src->strides, __pyx_v_dst->data, __pyx_v_dst->strides, __pyx_v_src->shape, __pyx_v_dst->shape, __pyx_v_ndim, __pyx_v_itemsize);

  /* "View.MemoryView":1172
 *             dst_data += dst_stride
 * 
 * cdef void copy_strided_to_strided(__Pyx_memviewslice *src,             # <<<<<<<<<<<<<<
 *                                   __Pyx_memviewslice *dst,
 *                                   int ndim, size_t itemsize) nogil:
 */

  /* function exit code */
}

/* "View.MemoryView":1179
 * 
 * @cname('__pyx_memoryview_slice_get_size')
 * cdef Py_ssize_t slice_get_size(__Pyx_memviewslice *src, int ndim) nogil:             # <<<<<<<<<<<<<<
 *     "Return the size of the memory occupied by the slice in number of bytes"
 *     cdef Py_ssize_t shape, size = src.memview.view.itemsize
 */

static Py_ssize_t __pyx_memoryview_slice_get_size(__Pyx_memviewslice *__pyx_v_src, int __pyx_v_ndim) {
  Py_ssize_t __pyx_v_shape;
  Py_ssize_t __pyx_v_size;
  Py_ssize_t __pyx_r;
  Py_ssize_t __pyx_t_1;
  Py_ssize_t *__pyx_t_2;
  Py_ssize_t *__pyx_t_3;
  Py_ssize_t *__pyx_t_4;

  /* "View.MemoryView":1181
 * cdef Py_ssize_t slice_get_size(__Pyx_memviewslice *src, int ndim) nogil:
 *     "Return the size of the memory occupied by the slice in number of bytes"
 *     cdef Py_ssize_t shape, size = src.memview.view.itemsize             # <<<<<<<<<<<<<<
 * 
 *     for shape in src.shape[:ndim]:
 */
  __pyx_t_1 = __pyx_v_src->memview->view.itemsize;
  __pyx_v_size = __pyx_t_1;

  /* "View.MemoryView":1183
 *     cdef Py_ssize_t shape, size = src.memview.view.itemsize
 * 
 *     for shape in src.shape[:ndim]:             # <<<<<<<<<<<<<<
 *         size *= shape
 * 
 */
  __pyx_t_3 = (__pyx_v_src->shape + __pyx_v_ndim);
  for (__pyx_t_4 = __pyx_v_src->shape; __pyx_t_4 < __pyx_t_3; __pyx_t_4++) {
    __pyx_t_2 = __pyx_t_4;
    __pyx_v_shape = (__pyx_t_2[0]);

    /* "View.MemoryView":1184
 * 
 *     for shape in src.shape[:ndim]:
 *         size *= shape             # <<<<<<<<<<<<<<
 * 
 *     return size
 */
    __pyx_v_size = (__pyx_v_size * __pyx_v_shape);
  }

  /* "View.MemoryView":1186
 *         size *= shape
 * 
 *     return size             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_fill_contig_strides_array')
 */
  __pyx_r = __pyx_v_size;
  goto __pyx_L0;

  /* "View.MemoryView":1179
 * 
 * @cname('__pyx_memoryview_slice_get_size')
 * cdef Py_ssize_t slice_get_size(__Pyx_memviewslice *src, int ndim) nogil:             # <<<<<<<<<<<<<<
 *     "Return the size of the memory occupied by the slice in number of bytes"
 *     cdef Py_ssize_t shape, size = src.memview.view.itemsize
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "View.MemoryView":1189
 * 
 * @cname('__pyx_fill_contig_strides_array')
 * cdef Py_ssize_t fill_contig_strides_array(             # <<<<<<<<<<<<<<
 *                 Py_ssize_t *shape, Py_ssize_t *strides, Py_ssize_t stride,
 *                 int ndim, char order) nogil:
 */

static Py_ssize_t __pyx_fill_contig_strides_array(Py_ssize_t *__pyx_v_shape, Py_ssize_t *__pyx_v_strides, Py_ssize_t __pyx_v_stride, int __pyx_v_ndim, char __pyx_v_order) {
  int __pyx_v_idx;
  Py_ssize_t __pyx_r;
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;

  /* "View.MemoryView":1198
 *     cdef int idx
 * 
 *     if order == 'F':             # <<<<<<<<<<<<<<
 *         for idx in range(ndim):
 *             strides[idx] = stride
 */
  __pyx_t_1 = ((__pyx_v_order == 'F') != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":1199
 * 
 *     if order == 'F':
 *         for idx in range(ndim):             # <<<<<<<<<<<<<<
 *             strides[idx] = stride
 *             stride *= shape[idx]
 */
    __pyx_t_2 = __pyx_v_ndim;
    __pyx_t_3 = __pyx_t_2;
    for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
      __pyx_v_idx = __pyx_t_4;

      /* "View.MemoryView":1200
 *     if order == 'F':
 *         for idx in range(ndim):
 *             strides[idx] = stride             # <<<<<<<<<<<<<<
 *             stride *= shape[idx]
 *     else:
 */
      (__pyx_v_strides[__pyx_v_idx]) = __pyx_v_stride;

      /* "View.MemoryView":1201
 *         for idx in range(ndim):
 *             strides[idx] = stride
 *             stride *= shape[idx]             # <<<<<<<<<<<<<<
 *     else:
 *         for idx in range(ndim - 1, -1, -1):
 */
      __pyx_v_stride = (__pyx_v_stride * (__pyx_v_shape[__pyx_v_idx]));
    }

    /* "View.MemoryView":1198
 *     cdef int idx
 * 
 *     if order == 'F':             # <<<<<<<<<<<<<<
 *         for idx in range(ndim):
 *             strides[idx] = stride
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":1203
 *             stride *= shape[idx]
 *     else:
 *         for idx in range(ndim - 1, -1, -1):             # <<<<<<<<<<<<<<
 *             strides[idx] = stride
 *             stride *= shape[idx]
 */
  /*else*/ {
    for (__pyx_t_2 = (__pyx_v_ndim - 1); __pyx_t_2 > -1; __pyx_t_2-=1) {
      __pyx_v_idx = __pyx_t_2;

      /* "View.MemoryView":1204
 *     else:
 *         for idx in range(ndim - 1, -1, -1):
 *             strides[idx] = stride             # <<<<<<<<<<<<<<
 *             stride *= shape[idx]
 * 
 */
      (__pyx_v_strides[__pyx_v_idx]) = __pyx_v_stride;

      /* "View.MemoryView":1205
 *         for idx in range(ndim - 1, -1, -1):
 *             strides[idx] = stride
 *             stride *= shape[idx]             # <<<<<<<<<<<<<<
 * 
 *     return stride
 */
      __pyx_v_stride = (__pyx_v_stride * (__pyx_v_shape[__pyx_v_idx]));
    }
  }
  __pyx_L3:;

  /* "View.MemoryView":1207
 *             stride *= shape[idx]
 * 
 *     return stride             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_copy_data_to_temp')
 */
  __pyx_r = __pyx_v_stride;
  goto __pyx_L0;

  /* "View.MemoryView":1189
 * 
 * @cname('__pyx_fill_contig_strides_array')
 * cdef Py_ssize_t fill_contig_strides_array(             # <<<<<<<<<<<<<<
 *                 Py_ssize_t *shape, Py_ssize_t *strides, Py_ssize_t stride,
 *                 int ndim, char order) nogil:
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "View.MemoryView":1210
 * 
 * @cname('__pyx_memoryview_copy_data_to_temp')
 * cdef void *copy_data_to_temp(__Pyx_memviewslice *src,             # <<<<<<<<<<<<<<
 *                              __Pyx_memviewslice *tmpslice,
 *                              char order,
 */

static void *__pyx_memoryview_copy_data_to_temp(__Pyx_memviewslice *__pyx_v_src, __Pyx_memviewslice *__pyx_v_tmpslice, char __pyx_v_order, int __pyx_v_ndim) {
  int __pyx_v_i;
  void *__pyx_v_result;
  size_t __pyx_v_itemsize;
  size_t __pyx_v_size;
  void *__pyx_r;
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  struct __pyx_memoryview_obj *__pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "View.MemoryView":1221
 *     cdef void *result
 * 
 *     cdef size_t itemsize = src.memview.view.itemsize             # <<<<<<<<<<<<<<
 *     cdef size_t size = slice_get_size(src, ndim)
 * 
 */
  __pyx_t_1 = __pyx_v_src->memview->view.itemsize;
  __pyx_v_itemsize = __pyx_t_1;

  /* "View.MemoryView":1222
 * 
 *     cdef size_t itemsize = src.memview.view.itemsize
 *     cdef size_t size = slice_get_size(src, ndim)             # <<<<<<<<<<<<<<
 * 
 *     result = malloc(size)
 */
  __pyx_v_size = __pyx_memoryview_slice_get_size(__pyx_v_src, __pyx_v_ndim);

  /* "View.MemoryView":1224
 *     cdef size_t size = slice_get_size(src, ndim)
 * 
 *     result = malloc(size)             # <<<<<<<<<<<<<<
 *     if not result:
 *         _err(MemoryError, NULL)
 */
  __pyx_v_result = malloc(__pyx_v_size);

  /* "View.MemoryView":1225
 * 
 *     result = malloc(size)
 *     if not result:             # <<<<<<<<<<<<<<
 *         _err(MemoryError, NULL)
 * 
 */
  __pyx_t_2 = ((!(__pyx_v_result != 0)) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":1226
 *     result = malloc(size)
 *     if not result:
 *         _err(MemoryError, NULL)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_3 = __pyx_memoryview_err(__pyx_builtin_MemoryError, NULL); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(2, 1226, __pyx_L1_error)

    /* "View.MemoryView":1225
 * 
 *     result = malloc(size)
 *     if not result:             # <<<<<<<<<<<<<<
 *         _err(MemoryError, NULL)
 * 
 */
  }

  /* "View.MemoryView":1229
 * 
 * 
 *     tmpslice.data = <char *> result             # <<<<<<<<<<<<<<
 *     tmpslice.memview = src.memview
 *     for i in range(ndim):
 */
  __pyx_v_tmpslice->data = ((char *)__pyx_v_result);

  /* "View.MemoryView":1230
 * 
 *     tmpslice.data = <char *> result
 *     tmpslice.memview = src.memview             # <<<<<<<<<<<<<<
 *     for i in range(ndim):
 *         tmpslice.shape[i] = src.shape[i]
 */
  __pyx_t_4 = __pyx_v_src->memview;
  __pyx_v_tmpslice->memview = __pyx_t_4;

  /* "View.MemoryView":1231
 *     tmpslice.data = <char *> result
 *     tmpslice.memview = src.memview
 *     for i in range(ndim):             # <<<<<<<<<<<<<<
 *         tmpslice.shape[i] = src.shape[i]
 *         tmpslice.suboffsets[i] = -1
 */
  __pyx_t_3 = __pyx_v_ndim;
  __pyx_t_5 = __pyx_t_3;
  for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
    __pyx_v_i = __pyx_t_6;

    /* "View.MemoryView":1232
 *     tmpslice.memview = src.memview
 *     for i in range(ndim):
 *         tmpslice.shape[i] = src.shape[i]             # <<<<<<<<<<<<<<
 *         tmpslice.suboffsets[i] = -1
 * 
 */
    (__pyx_v_tmpslice->shape[__pyx_v_i]) = (__pyx_v_src->shape[__pyx_v_i]);

    /* "View.MemoryView":1233
 *     for i in range(ndim):
 *         tmpslice.shape[i] = src.shape[i]
 *         tmpslice.suboffsets[i] = -1             # <<<<<<<<<<<<<<
 * 
 *     fill_contig_strides_array(&tmpslice.shape[0], &tmpslice.strides[0], itemsize,
 */
    (__pyx_v_tmpslice->suboffsets[__pyx_v_i]) = -1L;
  }

  /* "View.MemoryView":1235
 *         tmpslice.suboffsets[i] = -1
 * 
 *     fill_contig_strides_array(&tmpslice.shape[0], &tmpslice.strides[0], itemsize,             # <<<<<<<<<<<<<<
 *                               ndim, order)
 * 
 */
  (void)(__pyx_fill_contig_strides_array((&(__pyx_v_tmpslice->shape[0])), (&(__pyx_v_tmpslice->strides[0])), __pyx_v_itemsize, __pyx_v_ndim, __pyx_v_order));

  /* "View.MemoryView":1239
 * 
 * 
 *     for i in range(ndim):             # <<<<<<<<<<<<<<
 *         if tmpslice.shape[i] == 1:
 *             tmpslice.strides[i] = 0
 */
  __pyx_t_3 = __pyx_v_ndim;
  __pyx_t_5 = __pyx_t_3;
  for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
    __pyx_v_i = __pyx_t_6;

    /* "View.MemoryView":1240
 * 
 *     for i in range(ndim):
 *         if tmpslice.shape[i] == 1:             # <<<<<<<<<<<<<<
 *             tmpslice.strides[i] = 0
 * 
 */
    __pyx_t_2 = (((__pyx_v_tmpslice->shape[__pyx_v_i]) == 1) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":1241
 *     for i in range(ndim):
 *         if tmpslice.shape[i] == 1:
 *             tmpslice.strides[i] = 0             # <<<<<<<<<<<<<<
 * 
 *     if slice_is_contig(src[0], order, ndim):
 */
      (__pyx_v_tmpslice->strides[__pyx_v_i]) = 0;

      /* "View.MemoryView":1240
 * 
 *     for i in range(ndim):
 *         if tmpslice.shape[i] == 1:             # <<<<<<<<<<<<<<
 *             tmpslice.strides[i] = 0
 * 
 */
    }
  }

  /* "View.MemoryView":1243
 *             tmpslice.strides[i] = 0
 * 
 *     if slice_is_contig(src[0], order, ndim):             # <<<<<<<<<<<<<<
 *         memcpy(result, src.data, size)
 *     else:
 */
  __pyx_t_2 = (__pyx_memviewslice_is_contig((__pyx_v_src[0]), __pyx_v_order, __pyx_v_ndim) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":1244
 * 
 *     if slice_is_contig(src[0], order, ndim):
 *         memcpy(result, src.data, size)             # <<<<<<<<<<<<<<
 *     else:
 *         copy_strided_to_strided(src, tmpslice, ndim, itemsize)
 */
    (void)(memcpy(__pyx_v_result, __pyx_v_src->data, __pyx_v_size));

    /* "View.MemoryView":1243
 *             tmpslice.strides[i] = 0
 * 
 *     if slice_is_contig(src[0], order, ndim):             # <<<<<<<<<<<<<<
 *         memcpy(result, src.data, size)
 *     else:
 */
    goto __pyx_L9;
  }

  /* "View.MemoryView":1246
 *         memcpy(result, src.data, size)
 *     else:
 *         copy_strided_to_strided(src, tmpslice, ndim, itemsize)             # <<<<<<<<<<<<<<
 * 
 *     return result
 */
  /*else*/ {
    copy_strided_to_strided(__pyx_v_src, __pyx_v_tmpslice, __pyx_v_ndim, __pyx_v_itemsize);
  }
  __pyx_L9:;

  /* "View.MemoryView":1248
 *         copy_strided_to_strided(src, tmpslice, ndim, itemsize)
 * 
 *     return result             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_result;
  goto __pyx_L0;

  /* "View.MemoryView":1210
 * 
 * @cname('__pyx_memoryview_copy_data_to_temp')
 * cdef void *copy_data_to_temp(__Pyx_memviewslice *src,             # <<<<<<<<<<<<<<
 *                              __Pyx_memviewslice *tmpslice,
 *                              char order,
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("View.MemoryView.copy_data_to_temp", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = NULL;
  __pyx_L0:;
  return __pyx_r;
}

/* "View.MemoryView":1253
 * 
 * @cname('__pyx_memoryview_err_extents')
 * cdef int _err_extents(int i, Py_ssize_t extent1,             # <<<<<<<<<<<<<<
 *                              Py_ssize_t extent2) except -1 with gil:
 *     raise ValueError("got differing extents in dimension %d (got %d and %d)" %
 */

static int __pyx_memoryview_err_extents(int __pyx_v_i, Py_ssize_t __pyx_v_extent1, Py_ssize_t __pyx_v_extent2) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_RefNannySetupContext("_err_extents", 0);

  /* "View.MemoryView":1256
 *                              Py_ssize_t extent2) except -1 with gil:
 *     raise ValueError("got differing extents in dimension %d (got %d and %d)" %
 *                                                         (i, extent1, extent2))             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_err_dim')
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_i); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 1256, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyInt_FromSsize_t(__pyx_v_extent1); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 1256, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyInt_FromSsize_t(__pyx_v_extent2); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 1256, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 1256, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_t_3);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;

  /* "View.MemoryView":1255
 * cdef int _err_extents(int i, Py_ssize_t extent1,
 *                              Py_ssize_t extent2) except -1 with gil:
 *     raise ValueError("got differing extents in dimension %d (got %d and %d)" %             # <<<<<<<<<<<<<<
 *                                                         (i, extent1, extent2))
 * 
 */
  __pyx_t_3 = __Pyx_PyString_Format(__pyx_kp_s_got_differing_extents_in_dimensi, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 1255, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 1255, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_Raise(__pyx_t_4, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __PYX_ERR(2, 1255, __pyx_L1_error)

  /* "View.MemoryView":1253
 * 
 * @cname('__pyx_memoryview_err_extents')
 * cdef int _err_extents(int i, Py_ssize_t extent1,             # <<<<<<<<<<<<<<
 *                              Py_ssize_t extent2) except -1 with gil:
 *     raise ValueError("got differing extents in dimension %d (got %d and %d)" %
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("View.MemoryView._err_extents", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __Pyx_RefNannyFinishContext();
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  return __pyx_r;
}

/* "View.MemoryView":1259
 * 
 * @cname('__pyx_memoryview_err_dim')
 * cdef int _err_dim(object error, char *msg, int dim) except -1 with gil:             # <<<<<<<<<<<<<<
 *     raise error(msg.decode('ascii') % dim)
 * 
 */

static int __pyx_memoryview_err_dim(PyObject *__pyx_v_error, char *__pyx_v_msg, int __pyx_v_dim) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_RefNannySetupContext("_err_dim", 0);
  __Pyx_INCREF(__pyx_v_error);

  /* "View.MemoryView":1260
 * @cname('__pyx_memoryview_err_dim')
 * cdef int _err_dim(object error, char *msg, int dim) except -1 with gil:
 *     raise error(msg.decode('ascii') % dim)             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_err')
 */
  __pyx_t_2 = __Pyx_decode_c_string(__pyx_v_msg, 0, strlen(__pyx_v_msg), NULL, NULL, PyUnicode_DecodeASCII); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 1260, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_dim); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 1260, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyUnicode_Format(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 1260, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_INCREF(__pyx_v_error);
  __pyx_t_3 = __pyx_v_error; __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_2, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 1260, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 1260, __pyx_L1_error)

  /* "View.MemoryView":1259
 * 
 * @cname('__pyx_memoryview_err_dim')
 * cdef int _err_dim(object error, char *msg, int dim) except -1 with gil:             # <<<<<<<<<<<<<<
 *     raise error(msg.decode('ascii') % dim)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("View.MemoryView._err_dim", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __Pyx_XDECREF(__pyx_v_error);
  __Pyx_RefNannyFinishContext();
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  return __pyx_r;
}

/* "View.MemoryView":1263
 * 
 * @cname('__pyx_memoryview_err')
 * cdef int _err(object error, char *msg) except -1 with gil:             # <<<<<<<<<<<<<<
 *     if msg != NULL:
 *         raise error(msg.decode('ascii'))
 */

static int __pyx_memoryview_err(PyObject *__pyx_v_error, char *__pyx_v_msg) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_RefNannySetupContext("_err", 0);
  __Pyx_INCREF(__pyx_v_error);

  /* "View.MemoryView":1264
 * @cname('__pyx_memoryview_err')
 * cdef int _err(object error, char *msg) except -1 with gil:
 *     if msg != NULL:             # <<<<<<<<<<<<<<
 *         raise error(msg.decode('ascii'))
 *     else:
 */
  __pyx_t_1 = ((__pyx_v_msg != NULL) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "View.MemoryView":1265
 * cdef int _err(object error, char *msg) except -1 with gil:
 *     if msg != NULL:
 *         raise error(msg.decode('ascii'))             # <<<<<<<<<<<<<<
 *     else:
 *         raise error
 */
    __pyx_t_3 = __Pyx_decode_c_string(__pyx_v_msg, 0, strlen(__pyx_v_msg), NULL, NULL, PyUnicode_DecodeASCII); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 1265, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_v_error);
    __pyx_t_4 = __pyx_v_error; __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_2 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_t_3) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_3);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 1265, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(2, 1265, __pyx_L1_error)

    /* "View.MemoryView":1264
 * @cname('__pyx_memoryview_err')
 * cdef int _err(object error, char *msg) except -1 with gil:
 *     if msg != NULL:             # <<<<<<<<<<<<<<
 *         raise error(msg.decode('ascii'))
 *     else:
 */
  }

  /* "View.MemoryView":1267
 *         raise error(msg.decode('ascii'))
 *     else:
 *         raise error             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_copy_contents')
 */
  /*else*/ {
    __Pyx_Raise(__pyx_v_error, 0, 0, 0);
    __PYX_ERR(2, 1267, __pyx_L1_error)
  }

  /* "View.MemoryView":1263
 * 
 * @cname('__pyx_memoryview_err')
 * cdef int _err(object error, char *msg) except -1 with gil:             # <<<<<<<<<<<<<<
 *     if msg != NULL:
 *         raise error(msg.decode('ascii'))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("View.MemoryView._err", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __Pyx_XDECREF(__pyx_v_error);
  __Pyx_RefNannyFinishContext();
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  return __pyx_r;
}

/* "View.MemoryView":1270
 * 
 * @cname('__pyx_memoryview_copy_contents')
 * cdef int memoryview_copy_contents(__Pyx_memviewslice src,             # <<<<<<<<<<<<<<
 *                                   __Pyx_memviewslice dst,
 *                                   int src_ndim, int dst_ndim,
 */

static int __pyx_memoryview_copy_contents(__Pyx_memviewslice __pyx_v_src, __Pyx_memviewslice __pyx_v_dst, int __pyx_v_src_ndim, int __pyx_v_dst_ndim, int __pyx_v_dtype_is_object) {
  void *__pyx_v_tmpdata;
  size_t __pyx_v_itemsize;
  int __pyx_v_i;
  char __pyx_v_order;
  int __pyx_v_broadcasting;
  int __pyx_v_direct_copy;
  __Pyx_memviewslice __pyx_v_tmp;
  int __pyx_v_ndim;
  int __pyx_r;
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  void *__pyx_t_7;
  int __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "View.MemoryView":1278
 *     Check for overlapping memory and verify the shapes.
 *     """
 *     cdef void *tmpdata = NULL             # <<<<<<<<<<<<<<
 *     cdef size_t itemsize = src.memview.view.itemsize
 *     cdef int i
 */
  __pyx_v_tmpdata = NULL;

  /* "View.MemoryView":1279
 *     """
 *     cdef void *tmpdata = NULL
 *     cdef size_t itemsize = src.memview.view.itemsize             # <<<<<<<<<<<<<<
 *     cdef int i
 *     cdef char order = get_best_order(&src, src_ndim)
 */
  __pyx_t_1 = __pyx_v_src.memview->view.itemsize;
  __pyx_v_itemsize = __pyx_t_1;

  /* "View.MemoryView":1281
 *     cdef size_t itemsize = src.memview.view.itemsize
 *     cdef int i
 *     cdef char order = get_best_order(&src, src_ndim)             # <<<<<<<<<<<<<<
 *     cdef bint broadcasting = False
 *     cdef bint direct_copy = False
 */
  __pyx_v_order = __pyx_get_best_slice_order((&__pyx_v_src), __pyx_v_src_ndim);

  /* "View.MemoryView":1282
 *     cdef int i
 *     cdef char order = get_best_order(&src, src_ndim)
 *     cdef bint broadcasting = False             # <<<<<<<<<<<<<<
 *     cdef bint direct_copy = False
 *     cdef __Pyx_memviewslice tmp
 */
  __pyx_v_broadcasting = 0;

  /* "View.MemoryView":1283
 *     cdef char order = get_best_order(&src, src_ndim)
 *     cdef bint broadcasting = False
 *     cdef bint direct_copy = False             # <<<<<<<<<<<<<<
 *     cdef __Pyx_memviewslice tmp
 * 
 */
  __pyx_v_direct_copy = 0;

  /* "View.MemoryView":1286
 *     cdef __Pyx_memviewslice tmp
 * 
 *     if src_ndim < dst_ndim:             # <<<<<<<<<<<<<<
 *         broadcast_leading(&src, src_ndim, dst_ndim)
 *     elif dst_ndim < src_ndim:
 */
  __pyx_t_2 = ((__pyx_v_src_ndim < __pyx_v_dst_ndim) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":1287
 * 
 *     if src_ndim < dst_ndim:
 *         broadcast_leading(&src, src_ndim, dst_ndim)             # <<<<<<<<<<<<<<
 *     elif dst_ndim < src_ndim:
 *         broadcast_leading(&dst, dst_ndim, src_ndim)
 */
    __pyx_memoryview_broadcast_leading((&__pyx_v_src), __pyx_v_src_ndim, __pyx_v_dst_ndim);

    /* "View.MemoryView":1286
 *     cdef __Pyx_memviewslice tmp
 * 
 *     if src_ndim < dst_ndim:             # <<<<<<<<<<<<<<
 *         broadcast_leading(&src, src_ndim, dst_ndim)
 *     elif dst_ndim < src_ndim:
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":1288
 *     if src_ndim < dst_ndim:
 *         broadcast_leading(&src, src_ndim, dst_ndim)
 *     elif dst_ndim < src_ndim:             # <<<<<<<<<<<<<<
 *         broadcast_leading(&dst, dst_ndim, src_ndim)
 * 
 */
  __pyx_t_2 = ((__pyx_v_dst_ndim < __pyx_v_src_ndim) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":1289
 *         broadcast_leading(&src, src_ndim, dst_ndim)
 *     elif dst_ndim < src_ndim:
 *         broadcast_leading(&dst, dst_ndim, src_ndim)             # <<<<<<<<<<<<<<
 * 
 *     cdef int ndim = max(src_ndim, dst_ndim)
 */
    __pyx_memoryview_broadcast_leading((&__pyx_v_dst), __pyx_v_dst_ndim, __pyx_v_src_ndim);

    /* "View.MemoryView":1288
 *     if src_ndim < dst_ndim:
 *         broadcast_leading(&src, src_ndim, dst_ndim)
 *     elif dst_ndim < src_ndim:             # <<<<<<<<<<<<<<
 *         broadcast_leading(&dst, dst_ndim, src_ndim)
 * 
 */
  }
  __pyx_L3:;

  /* "View.MemoryView":1291
 *         broadcast_leading(&dst, dst_ndim, src_ndim)
 * 
 *     cdef int ndim = max(src_ndim, dst_ndim)             # <<<<<<<<<<<<<<
 * 
 *     for i in range(ndim):
 */
  __pyx_t_3 = __pyx_v_dst_ndim;
  __pyx_t_4 = __pyx_v_src_ndim;
  if (((__pyx_t_3 > __pyx_t_4) != 0)) {
    __pyx_t_5 = __pyx_t_3;
  } else {
    __pyx_t_5 = __pyx_t_4;
  }
  __pyx_v_ndim = __pyx_t_5;

  /* "View.MemoryView":1293
 *     cdef int ndim = max(src_ndim, dst_ndim)
 * 
 *     for i in range(ndim):             # <<<<<<<<<<<<<<
 *         if src.shape[i] != dst.shape[i]:
 *             if src.shape[i] == 1:
 */
  __pyx_t_5 = __pyx_v_ndim;
  __pyx_t_3 = __pyx_t_5;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "View.MemoryView":1294
 * 
 *     for i in range(ndim):
 *         if src.shape[i] != dst.shape[i]:             # <<<<<<<<<<<<<<
 *             if src.shape[i] == 1:
 *                 broadcasting = True
 */
    __pyx_t_2 = (((__pyx_v_src.shape[__pyx_v_i]) != (__pyx_v_dst.shape[__pyx_v_i])) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":1295
 *     for i in range(ndim):
 *         if src.shape[i] != dst.shape[i]:
 *             if src.shape[i] == 1:             # <<<<<<<<<<<<<<
 *                 broadcasting = True
 *                 src.strides[i] = 0
 */
      __pyx_t_2 = (((__pyx_v_src.shape[__pyx_v_i]) == 1) != 0);
      if (__pyx_t_2) {

        /* "View.MemoryView":1296
 *         if src.shape[i] != dst.shape[i]:
 *             if src.shape[i] == 1:
 *                 broadcasting = True             # <<<<<<<<<<<<<<
 *                 src.strides[i] = 0
 *             else:
 */
        __pyx_v_broadcasting = 1;

        /* "View.MemoryView":1297
 *             if src.shape[i] == 1:
 *                 broadcasting = True
 *                 src.strides[i] = 0             # <<<<<<<<<<<<<<
 *             else:
 *                 _err_extents(i, dst.shape[i], src.shape[i])
 */
        (__pyx_v_src.strides[__pyx_v_i]) = 0;

        /* "View.MemoryView":1295
 *     for i in range(ndim):
 *         if src.shape[i] != dst.shape[i]:
 *             if src.shape[i] == 1:             # <<<<<<<<<<<<<<
 *                 broadcasting = True
 *                 src.strides[i] = 0
 */
        goto __pyx_L7;
      }

      /* "View.MemoryView":1299
 *                 src.strides[i] = 0
 *             else:
 *                 _err_extents(i, dst.shape[i], src.shape[i])             # <<<<<<<<<<<<<<
 * 
 *         if src.suboffsets[i] >= 0:
 */
      /*else*/ {
        __pyx_t_6 = __pyx_memoryview_err_extents(__pyx_v_i, (__pyx_v_dst.shape[__pyx_v_i]), (__pyx_v_src.shape[__pyx_v_i])); if (unlikely(__pyx_t_6 == ((int)-1))) __PYX_ERR(2, 1299, __pyx_L1_error)
      }
      __pyx_L7:;

      /* "View.MemoryView":1294
 * 
 *     for i in range(ndim):
 *         if src.shape[i] != dst.shape[i]:             # <<<<<<<<<<<<<<
 *             if src.shape[i] == 1:
 *                 broadcasting = True
 */
    }

    /* "View.MemoryView":1301
 *                 _err_extents(i, dst.shape[i], src.shape[i])
 * 
 *         if src.suboffsets[i] >= 0:             # <<<<<<<<<<<<<<
 *             _err_dim(ValueError, "Dimension %d is not direct", i)
 * 
 */
    __pyx_t_2 = (((__pyx_v_src.suboffsets[__pyx_v_i]) >= 0) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":1302
 * 
 *         if src.suboffsets[i] >= 0:
 *             _err_dim(ValueError, "Dimension %d is not direct", i)             # <<<<<<<<<<<<<<
 * 
 *     if slices_overlap(&src, &dst, ndim, itemsize):
 */
      __pyx_t_6 = __pyx_memoryview_err_dim(__pyx_builtin_ValueError, ((char *)"Dimension %d is not direct"), __pyx_v_i); if (unlikely(__pyx_t_6 == ((int)-1))) __PYX_ERR(2, 1302, __pyx_L1_error)

      /* "View.MemoryView":1301
 *                 _err_extents(i, dst.shape[i], src.shape[i])
 * 
 *         if src.suboffsets[i] >= 0:             # <<<<<<<<<<<<<<
 *             _err_dim(ValueError, "Dimension %d is not direct", i)
 * 
 */
    }
  }

  /* "View.MemoryView":1304
 *             _err_dim(ValueError, "Dimension %d is not direct", i)
 * 
 *     if slices_overlap(&src, &dst, ndim, itemsize):             # <<<<<<<<<<<<<<
 * 
 *         if not slice_is_contig(src, order, ndim):
 */
  __pyx_t_2 = (__pyx_slices_overlap((&__pyx_v_src), (&__pyx_v_dst), __pyx_v_ndim, __pyx_v_itemsize) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":1306
 *     if slices_overlap(&src, &dst, ndim, itemsize):
 * 
 *         if not slice_is_contig(src, order, ndim):             # <<<<<<<<<<<<<<
 *             order = get_best_order(&dst, ndim)
 * 
 */
    __pyx_t_2 = ((!(__pyx_memviewslice_is_contig(__pyx_v_src, __pyx_v_order, __pyx_v_ndim) != 0)) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":1307
 * 
 *         if not slice_is_contig(src, order, ndim):
 *             order = get_best_order(&dst, ndim)             # <<<<<<<<<<<<<<
 * 
 *         tmpdata = copy_data_to_temp(&src, &tmp, order, ndim)
 */
      __pyx_v_order = __pyx_get_best_slice_order((&__pyx_v_dst), __pyx_v_ndim);

      /* "View.MemoryView":1306
 *     if slices_overlap(&src, &dst, ndim, itemsize):
 * 
 *         if not slice_is_contig(src, order, ndim):             # <<<<<<<<<<<<<<
 *             order = get_best_order(&dst, ndim)
 * 
 */
    }

    /* "View.MemoryView":1309
 *             order = get_best_order(&dst, ndim)
 * 
 *         tmpdata = copy_data_to_temp(&src, &tmp, order, ndim)             # <<<<<<<<<<<<<<
 *         src = tmp
 * 
 */
    __pyx_t_7 = __pyx_memoryview_copy_data_to_temp((&__pyx_v_src), (&__pyx_v_tmp), __pyx_v_order, __pyx_v_ndim); if (unlikely(__pyx_t_7 == ((void *)NULL))) __PYX_ERR(2, 1309, __pyx_L1_error)
    __pyx_v_tmpdata = __pyx_t_7;

    /* "View.MemoryView":1310
 * 
 *         tmpdata = copy_data_to_temp(&src, &tmp, order, ndim)
 *         src = tmp             # <<<<<<<<<<<<<<
 * 
 *     if not broadcasting:
 */
    __pyx_v_src = __pyx_v_tmp;

    /* "View.MemoryView":1304
 *             _err_dim(ValueError, "Dimension %d is not direct", i)
 * 
 *     if slices_overlap(&src, &dst, ndim, itemsize):             # <<<<<<<<<<<<<<
 * 
 *         if not slice_is_contig(src, order, ndim):
 */
  }

  /* "View.MemoryView":1312
 *         src = tmp
 * 
 *     if not broadcasting:             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = ((!(__pyx_v_broadcasting != 0)) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":1315
 * 
 * 
 *         if slice_is_contig(src, 'C', ndim):             # <<<<<<<<<<<<<<
 *             direct_copy = slice_is_contig(dst, 'C', ndim)
 *         elif slice_is_contig(src, 'F', ndim):
 */
    __pyx_t_2 = (__pyx_memviewslice_is_contig(__pyx_v_src, 'C', __pyx_v_ndim) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":1316
 * 
 *         if slice_is_contig(src, 'C', ndim):
 *             direct_copy = slice_is_contig(dst, 'C', ndim)             # <<<<<<<<<<<<<<
 *         elif slice_is_contig(src, 'F', ndim):
 *             direct_copy = slice_is_contig(dst, 'F', ndim)
 */
      __pyx_v_direct_copy = __pyx_memviewslice_is_contig(__pyx_v_dst, 'C', __pyx_v_ndim);

      /* "View.MemoryView":1315
 * 
 * 
 *         if slice_is_contig(src, 'C', ndim):             # <<<<<<<<<<<<<<
 *             direct_copy = slice_is_contig(dst, 'C', ndim)
 *         elif slice_is_contig(src, 'F', ndim):
 */
      goto __pyx_L12;
    }

    /* "View.MemoryView":1317
 *         if slice_is_contig(src, 'C', ndim):
 *             direct_copy = slice_is_contig(dst, 'C', ndim)
 *         elif slice_is_contig(src, 'F', ndim):             # <<<<<<<<<<<<<<
 *             direct_copy = slice_is_contig(dst, 'F', ndim)
 * 
 */
    __pyx_t_2 = (__pyx_memviewslice_is_contig(__pyx_v_src, 'F', __pyx_v_ndim) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":1318
 *             direct_copy = slice_is_contig(dst, 'C', ndim)
 *         elif slice_is_contig(src, 'F', ndim):
 *             direct_copy = slice_is_contig(dst, 'F', ndim)             # <<<<<<<<<<<<<<
 * 
 *         if direct_copy:
 */
      __pyx_v_direct_copy = __pyx_memviewslice_is_contig(__pyx_v_dst, 'F', __pyx_v_ndim);

      /* "View.MemoryView":1317
 *         if slice_is_contig(src, 'C', ndim):
 *             direct_copy = slice_is_contig(dst, 'C', ndim)
 *         elif slice_is_contig(src, 'F', ndim):             # <<<<<<<<<<<<<<
 *             direct_copy = slice_is_contig(dst, 'F', ndim)
 * 
 */
    }
    __pyx_L12:;

    /* "View.MemoryView":1320
 *             direct_copy = slice_is_contig(dst, 'F', ndim)
 * 
 *         if direct_copy:             # <<<<<<<<<<<<<<
 * 
 *             refcount_copying(&dst, dtype_is_object, ndim, False)
 */
    __pyx_t_2 = (__pyx_v_direct_copy != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":1322
 *         if direct_copy:
 * 
 *             refcount_copying(&dst, dtype_is_object, ndim, False)             # <<<<<<<<<<<<<<
 *             memcpy(dst.data, src.data, slice_get_size(&src, ndim))
 *             refcount_copying(&dst, dtype_is_object, ndim, True)
 */
      __pyx_memoryview_refcount_copying((&__pyx_v_dst), __pyx_v_dtype_is_object, __pyx_v_ndim, 0);

      /* "View.MemoryView":1323
 * 
 *             refcount_copying(&dst, dtype_is_object, ndim, False)
 *             memcpy(dst.data, src.data, slice_get_size(&src, ndim))             # <<<<<<<<<<<<<<
 *             refcount_copying(&dst, dtype_is_object, ndim, True)
 *             free(tmpdata)
 */
      (void)(memcpy(__pyx_v_dst.data, __pyx_v_src.data, __pyx_memoryview_slice_get_size((&__pyx_v_src), __pyx_v_ndim)));

      /* "View.MemoryView":1324
 *             refcount_copying(&dst, dtype_is_object, ndim, False)
 *             memcpy(dst.data, src.data, slice_get_size(&src, ndim))
 *             refcount_copying(&dst, dtype_is_object, ndim, True)             # <<<<<<<<<<<<<<
 *             free(tmpdata)
 *             return 0
 */
      __pyx_memoryview_refcount_copying((&__pyx_v_dst), __pyx_v_dtype_is_object, __pyx_v_ndim, 1);

      /* "View.MemoryView":1325
 *             memcpy(dst.data, src.data, slice_get_size(&src, ndim))
 *             refcount_copying(&dst, dtype_is_object, ndim, True)
 *             free(tmpdata)             # <<<<<<<<<<<<<<
 *             return 0
 * 
 */
      free(__pyx_v_tmpdata);

      /* "View.MemoryView":1326
 *             refcount_copying(&dst, dtype_is_object, ndim, True)
 *             free(tmpdata)
 *             return 0             # <<<<<<<<<<<<<<
 * 
 *     if order == 'F' == get_best_order(&dst, ndim):
 */
      __pyx_r = 0;
      goto __pyx_L0;

      /* "View.MemoryView":1320
 *             direct_copy = slice_is_contig(dst, 'F', ndim)
 * 
 *         if direct_copy:             # <<<<<<<<<<<<<<
 * 
 *             refcount_copying(&dst, dtype_is_object, ndim, False)
 */
    }

    /* "View.MemoryView":1312
 *         src = tmp
 * 
 *     if not broadcasting:             # <<<<<<<<<<<<<<
 * 
 * 
 */
  }

  /* "View.MemoryView":1328
 *             return 0
 * 
 *     if order == 'F' == get_best_order(&dst, ndim):             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = (__pyx_v_order == 'F');
  if (__pyx_t_2) {
    __pyx_t_2 = ('F' == __pyx_get_best_slice_order((&__pyx_v_dst), __pyx_v_ndim));
  }
  __pyx_t_8 = (__pyx_t_2 != 0);
  if (__pyx_t_8) {

    /* "View.MemoryView":1331
 * 
 * 
 *         transpose_memslice(&src)             # <<<<<<<<<<<<<<
 *         transpose_memslice(&dst)
 * 
 */
    __pyx_t_5 = __pyx_memslice_transpose((&__pyx_v_src)); if (unlikely(__pyx_t_5 == ((int)0))) __PYX_ERR(2, 1331, __pyx_L1_error)

    /* "View.MemoryView":1332
 * 
 *         transpose_memslice(&src)
 *         transpose_memslice(&dst)             # <<<<<<<<<<<<<<
 * 
 *     refcount_copying(&dst, dtype_is_object, ndim, False)
 */
    __pyx_t_5 = __pyx_memslice_transpose((&__pyx_v_dst)); if (unlikely(__pyx_t_5 == ((int)0))) __PYX_ERR(2, 1332, __pyx_L1_error)

    /* "View.MemoryView":1328
 *             return 0
 * 
 *     if order == 'F' == get_best_order(&dst, ndim):             # <<<<<<<<<<<<<<
 * 
 * 
 */
  }

  /* "View.MemoryView":1334
 *         transpose_memslice(&dst)
 * 
 *     refcount_copying(&dst, dtype_is_object, ndim, False)             # <<<<<<<<<<<<<<
 *     copy_strided_to_strided(&src, &dst, ndim, itemsize)
 *     refcount_copying(&dst, dtype_is_object, ndim, True)
 */
  __pyx_memoryview_refcount_copying((&__pyx_v_dst), __pyx_v_dtype_is_object, __pyx_v_ndim, 0);

  /* "View.MemoryView":1335
 * 
 *     refcount_copying(&dst, dtype_is_object, ndim, False)
 *     copy_strided_to_strided(&src, &dst, ndim, itemsize)             # <<<<<<<<<<<<<<
 *     refcount_copying(&dst, dtype_is_object, ndim, True)
 * 
 */
  copy_strided_to_strided((&__pyx_v_src), (&__pyx_v_dst), __pyx_v_ndim, __pyx_v_itemsize);

  /* "View.MemoryView":1336
 *     refcount_copying(&dst, dtype_is_object, ndim, False)
 *     copy_strided_to_strided(&src, &dst, ndim, itemsize)
 *     refcount_copying(&dst, dtype_is_object, ndim, True)             # <<<<<<<<<<<<<<
 * 
 *     free(tmpdata)
 */
  __pyx_memoryview_refcount_copying((&__pyx_v_dst), __pyx_v_dtype_is_object, __pyx_v_ndim, 1);

  /* "View.MemoryView":1338
 *     refcount_copying(&dst, dtype_is_object, ndim, True)
 * 
 *     free(tmpdata)             # <<<<<<<<<<<<<<
 *     return 0
 * 
 */
  free(__pyx_v_tmpdata);

  /* "View.MemoryView":1339
 * 
 *     free(tmpdata)
 *     return 0             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_broadcast_leading')
 */
  __pyx_r = 0;
  goto __pyx_L0;

  /* "View.MemoryView":1270
 * 
 * @cname('__pyx_memoryview_copy_contents')
 * cdef int memoryview_copy_contents(__Pyx_memviewslice src,             # <<<<<<<<<<<<<<
 *                                   __Pyx_memviewslice dst,
 *                                   int src_ndim, int dst_ndim,
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("View.MemoryView.memoryview_copy_contents", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = -1;
  __pyx_L0:;
  return __pyx_r;
}

/* "View.MemoryView":1342
 * 
 * @cname('__pyx_memoryview_broadcast_leading')
 * cdef void broadcast_leading(__Pyx_memviewslice *mslice,             # <<<<<<<<<<<<<<
 *                             int ndim,
 *                             int ndim_other) nogil:
 */

static void __pyx_memoryview_broadcast_leading(__Pyx_memviewslice *__pyx_v_mslice, int __pyx_v_ndim, int __pyx_v_ndim_other) {
  int __pyx_v_i;
  int __pyx_v_offset;
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;

  /* "View.MemoryView":1346
 *                             int ndim_other) nogil:
 *     cdef int i
 *     cdef int offset = ndim_other - ndim             # <<<<<<<<<<<<<<
 * 
 *     for i in range(ndim - 1, -1, -1):
 */
  __pyx_v_offset = (__pyx_v_ndim_other - __pyx_v_ndim);

  /* "View.MemoryView":1348
 *     cdef int offset = ndim_other - ndim
 * 
 *     for i in range(ndim - 1, -1, -1):             # <<<<<<<<<<<<<<
 *         mslice.shape[i + offset] = mslice.shape[i]
 *         mslice.strides[i + offset] = mslice.strides[i]
 */
  for (__pyx_t_1 = (__pyx_v_ndim - 1); __pyx_t_1 > -1; __pyx_t_1-=1) {
    __pyx_v_i = __pyx_t_1;

    /* "View.MemoryView":1349
 * 
 *     for i in range(ndim - 1, -1, -1):
 *         mslice.shape[i + offset] = mslice.shape[i]             # <<<<<<<<<<<<<<
 *         mslice.strides[i + offset] = mslice.strides[i]
 *         mslice.suboffsets[i + offset] = mslice.suboffsets[i]
 */
    (__pyx_v_mslice->shape[(__pyx_v_i + __pyx_v_offset)]) = (__pyx_v_mslice->shape[__pyx_v_i]);

    /* "View.MemoryView":1350
 *     for i in range(ndim - 1, -1, -1):
 *         mslice.shape[i + offset] = mslice.shape[i]
 *         mslice.strides[i + offset] = mslice.strides[i]             # <<<<<<<<<<<<<<
 *         mslice.suboffsets[i + offset] = mslice.suboffsets[i]
 * 
 */
    (__pyx_v_mslice->strides[(__pyx_v_i + __pyx_v_offset)]) = (__pyx_v_mslice->strides[__pyx_v_i]);

    /* "View.MemoryView":1351
 *         mslice.shape[i + offset] = mslice.shape[i]
 *         mslice.strides[i + offset] = mslice.strides[i]
 *         mslice.suboffsets[i + offset] = mslice.suboffsets[i]             # <<<<<<<<<<<<<<
 * 
 *     for i in range(offset):
 */
    (__pyx_v_mslice->suboffsets[(__pyx_v_i + __pyx_v_offset)]) = (__pyx_v_mslice->suboffsets[__pyx_v_i]);
  }

  /* "View.MemoryView":1353
 *         mslice.suboffsets[i + offset] = mslice.suboffsets[i]
 * 
 *     for i in range(offset):             # <<<<<<<<<<<<<<
 *         mslice.shape[i] = 1
 *         mslice.strides[i] = mslice.strides[0]
 */
  __pyx_t_1 = __pyx_v_offset;
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "View.MemoryView":1354
 * 
 *     for i in range(offset):
 *         mslice.shape[i] = 1             # <<<<<<<<<<<<<<
 *         mslice.strides[i] = mslice.strides[0]
 *         mslice.suboffsets[i] = -1
 */
    (__pyx_v_mslice->shape[__pyx_v_i]) = 1;

    /* "View.MemoryView":1355
 *     for i in range(offset):
 *         mslice.shape[i] = 1
 *         mslice.strides[i] = mslice.strides[0]             # <<<<<<<<<<<<<<
 *         mslice.suboffsets[i] = -1
 * 
 */
    (__pyx_v_mslice->strides[__pyx_v_i]) = (__pyx_v_mslice->strides[0]);

    /* "View.MemoryView":1356
 *         mslice.shape[i] = 1
 *         mslice.strides[i] = mslice.strides[0]
 *         mslice.suboffsets[i] = -1             # <<<<<<<<<<<<<<
 * 
 * 
 */
    (__pyx_v_mslice->suboffsets[__pyx_v_i]) = -1L;
  }

  /* "View.MemoryView":1342
 * 
 * @cname('__pyx_memoryview_broadcast_leading')
 * cdef void broadcast_leading(__Pyx_memviewslice *mslice,             # <<<<<<<<<<<<<<
 *                             int ndim,
 *                             int ndim_other) nogil:
 */

  /* function exit code */
}

/* "View.MemoryView":1364
 * 
 * @cname('__pyx_memoryview_refcount_copying')
 * cdef void refcount_copying(__Pyx_memviewslice *dst, bint dtype_is_object,             # <<<<<<<<<<<<<<
 *                            int ndim, bint inc) nogil:
 * 
 */

static void __pyx_memoryview_refcount_copying(__Pyx_memviewslice *__pyx_v_dst, int __pyx_v_dtype_is_object, int __pyx_v_ndim, int __pyx_v_inc) {
  int __pyx_t_1;

  /* "View.MemoryView":1368
 * 
 * 
 *     if dtype_is_object:             # <<<<<<<<<<<<<<
 *         refcount_objects_in_slice_with_gil(dst.data, dst.shape,
 *                                            dst.strides, ndim, inc)
 */
  __pyx_t_1 = (__pyx_v_dtype_is_object != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":1369
 * 
 *     if dtype_is_object:
 *         refcount_objects_in_slice_with_gil(dst.data, dst.shape,             # <<<<<<<<<<<<<<
 *                                            dst.strides, ndim, inc)
 * 
 */
    __pyx_memoryview_refcount_objects_in_slice_with_gil(__pyx_v_dst->data, __pyx_v_dst->shape, __pyx_v_dst->strides, __pyx_v_ndim, __pyx_v_inc);

    /* "View.MemoryView":1368
 * 
 * 
 *     if dtype_is_object:             # <<<<<<<<<<<<<<
 *         refcount_objects_in_slice_with_gil(dst.data, dst.shape,
 *                                            dst.strides, ndim, inc)
 */
  }

  /* "View.MemoryView":1364
 * 
 * @cname('__pyx_memoryview_refcount_copying')
 * cdef void refcount_copying(__Pyx_memviewslice *dst, bint dtype_is_object,             # <<<<<<<<<<<<<<
 *                            int ndim, bint inc) nogil:
 * 
 */

  /* function exit code */
}

/* "View.MemoryView":1373
 * 
 * @cname('__pyx_memoryview_refcount_objects_in_slice_with_gil')
 * cdef void refcount_objects_in_slice_with_gil(char *data, Py_ssize_t *shape,             # <<<<<<<<<<<<<<
 *                                              Py_ssize_t *strides, int ndim,
 *                                              bint inc) with gil:
 */

static void __pyx_memoryview_refcount_objects_in_slice_with_gil(char *__pyx_v_data, Py_ssize_t *__pyx_v_shape, Py_ssize_t *__pyx_v_strides, int __pyx_v_ndim, int __pyx_v_inc) {
  __Pyx_RefNannyDeclarations
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_RefNannySetupContext("refcount_objects_in_slice_with_gil", 0);

  /* "View.MemoryView":1376
 *                                              Py_ssize_t *strides, int ndim,
 *                                              bint inc) with gil:
 *     refcount_objects_in_slice(data, shape, strides, ndim, inc)             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_refcount_objects_in_slice')
 */
  __pyx_memoryview_refcount_objects_in_slice(__pyx_v_data, __pyx_v_shape, __pyx_v_strides, __pyx_v_ndim, __pyx_v_inc);

  /* "View.MemoryView":1373
 * 
 * @cname('__pyx_memoryview_refcount_objects_in_slice_with_gil')
 * cdef void refcount_objects_in_slice_with_gil(char *data, Py_ssize_t *shape,             # <<<<<<<<<<<<<<
 *                                              Py_ssize_t *strides, int ndim,
 *                                              bint inc) with gil:
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
}

/* "View.MemoryView":1379
 * 
 * @cname('__pyx_memoryview_refcount_objects_in_slice')
 * cdef void refcount_objects_in_slice(char *data, Py_ssize_t *shape,             # <<<<<<<<<<<<<<
 *                                     Py_ssize_t *strides, int ndim, bint inc):
 *     cdef Py_ssize_t i
 */

static void __pyx_memoryview_refcount_objects_in_slice(char *__pyx_v_data, Py_ssize_t *__pyx_v_shape, Py_ssize_t *__pyx_v_strides, int __pyx_v_ndim, int __pyx_v_inc) {
  CYTHON_UNUSED Py_ssize_t __pyx_v_i;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;
  __Pyx_RefNannySetupContext("refcount_objects_in_slice", 0);

  /* "View.MemoryView":1383
 *     cdef Py_ssize_t i
 * 
 *     for i in range(shape[0]):             # <<<<<<<<<<<<<<
 *         if ndim == 1:
 *             if inc:
 */
  __pyx_t_1 = (__pyx_v_shape[0]);
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "View.MemoryView":1384
 * 
 *     for i in range(shape[0]):
 *         if ndim == 1:             # <<<<<<<<<<<<<<
 *             if inc:
 *                 Py_INCREF((<PyObject **> data)[0])
 */
    __pyx_t_4 = ((__pyx_v_ndim == 1) != 0);
    if (__pyx_t_4) {

      /* "View.MemoryView":1385
 *     for i in range(shape[0]):
 *         if ndim == 1:
 *             if inc:             # <<<<<<<<<<<<<<
 *                 Py_INCREF((<PyObject **> data)[0])
 *             else:
 */
      __pyx_t_4 = (__pyx_v_inc != 0);
      if (__pyx_t_4) {

        /* "View.MemoryView":1386
 *         if ndim == 1:
 *             if inc:
 *                 Py_INCREF((<PyObject **> data)[0])             # <<<<<<<<<<<<<<
 *             else:
 *                 Py_DECREF((<PyObject **> data)[0])
 */
        Py_INCREF((((PyObject **)__pyx_v_data)[0]));

        /* "View.MemoryView":1385
 *     for i in range(shape[0]):
 *         if ndim == 1:
 *             if inc:             # <<<<<<<<<<<<<<
 *                 Py_INCREF((<PyObject **> data)[0])
 *             else:
 */
        goto __pyx_L6;
      }

      /* "View.MemoryView":1388
 *                 Py_INCREF((<PyObject **> data)[0])
 *             else:
 *                 Py_DECREF((<PyObject **> data)[0])             # <<<<<<<<<<<<<<
 *         else:
 *             refcount_objects_in_slice(data, shape + 1, strides + 1,
 */
      /*else*/ {
        Py_DECREF((((PyObject **)__pyx_v_data)[0]));
      }
      __pyx_L6:;

      /* "View.MemoryView":1384
 * 
 *     for i in range(shape[0]):
 *         if ndim == 1:             # <<<<<<<<<<<<<<
 *             if inc:
 *                 Py_INCREF((<PyObject **> data)[0])
 */
      goto __pyx_L5;
    }

    /* "View.MemoryView":1390
 *                 Py_DECREF((<PyObject **> data)[0])
 *         else:
 *             refcount_objects_in_slice(data, shape + 1, strides + 1,             # <<<<<<<<<<<<<<
 *                                       ndim - 1, inc)
 * 
 */
    /*else*/ {

      /* "View.MemoryView":1391
 *         else:
 *             refcount_objects_in_slice(data, shape + 1, strides + 1,
 *                                       ndim - 1, inc)             # <<<<<<<<<<<<<<
 * 
 *         data += strides[0]
 */
      __pyx_memoryview_refcount_objects_in_slice(__pyx_v_data, (__pyx_v_shape + 1), (__pyx_v_strides + 1), (__pyx_v_ndim - 1), __pyx_v_inc);
    }
    __pyx_L5:;

    /* "View.MemoryView":1393
 *                                       ndim - 1, inc)
 * 
 *         data += strides[0]             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_v_data = (__pyx_v_data + (__pyx_v_strides[0]));
  }

  /* "View.MemoryView":1379
 * 
 * @cname('__pyx_memoryview_refcount_objects_in_slice')
 * cdef void refcount_objects_in_slice(char *data, Py_ssize_t *shape,             # <<<<<<<<<<<<<<
 *                                     Py_ssize_t *strides, int ndim, bint inc):
 *     cdef Py_ssize_t i
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "View.MemoryView":1399
 * 
 * @cname('__pyx_memoryview_slice_assign_scalar')
 * cdef void slice_assign_scalar(__Pyx_memviewslice *dst, int ndim,             # <<<<<<<<<<<<<<
 *                               size_t itemsize, void *item,
 *                               bint dtype_is_object) nogil:
 */

static void __pyx_memoryview_slice_assign_scalar(__Pyx_memviewslice *__pyx_v_dst, int __pyx_v_ndim, size_t __pyx_v_itemsize, void *__pyx_v_item, int __pyx_v_dtype_is_object) {

  /* "View.MemoryView":1402
 *                               size_t itemsize, void *item,
 *                               bint dtype_is_object) nogil:
 *     refcount_copying(dst, dtype_is_object, ndim, False)             # <<<<<<<<<<<<<<
 *     _slice_assign_scalar(dst.data, dst.shape, dst.strides, ndim,
 *                          itemsize, item)
 */
  __pyx_memoryview_refcount_copying(__pyx_v_dst, __pyx_v_dtype_is_object, __pyx_v_ndim, 0);

  /* "View.MemoryView":1403
 *                               bint dtype_is_object) nogil:
 *     refcount_copying(dst, dtype_is_object, ndim, False)
 *     _slice_assign_scalar(dst.data, dst.shape, dst.strides, ndim,             # <<<<<<<<<<<<<<
 *                          itemsize, item)
 *     refcount_copying(dst, dtype_is_object, ndim, True)
 */
  __pyx_memoryview__slice_assign_scalar(__pyx_v_dst->data, __pyx_v_dst->shape, __pyx_v_dst->strides, __pyx_v_ndim, __pyx_v_itemsize, __pyx_v_item);

  /* "View.MemoryView":1405
 *     _slice_assign_scalar(dst.data, dst.shape, dst.strides, ndim,
 *                          itemsize, item)
 *     refcount_copying(dst, dtype_is_object, ndim, True)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_memoryview_refcount_copying(__pyx_v_dst, __pyx_v_dtype_is_object, __pyx_v_ndim, 1);

  /* "View.MemoryView":1399
 * 
 * @cname('__pyx_memoryview_slice_assign_scalar')
 * cdef void slice_assign_scalar(__Pyx_memviewslice *dst, int ndim,             # <<<<<<<<<<<<<<
 *                               size_t itemsize, void *item,
 *                               bint dtype_is_object) nogil:
 */

  /* function exit code */
}

/* "View.MemoryView":1409
 * 
 * @cname('__pyx_memoryview__slice_assign_scalar')
 * cdef void _slice_assign_scalar(char *data, Py_ssize_t *shape,             # <<<<<<<<<<<<<<
 *                               Py_ssize_t *strides, int ndim,
 *                               size_t itemsize, void *item) nogil:
 */

static void __pyx_memoryview__slice_assign_scalar(char *__pyx_v_data, Py_ssize_t *__pyx_v_shape, Py_ssize_t *__pyx_v_strides, int __pyx_v_ndim, size_t __pyx_v_itemsize, void *__pyx_v_item) {
  CYTHON_UNUSED Py_ssize_t __pyx_v_i;
  Py_ssize_t __pyx_v_stride;
  Py_ssize_t __pyx_v_extent;
  int __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  Py_ssize_t __pyx_t_4;

  /* "View.MemoryView":1413
 *                               size_t itemsize, void *item) nogil:
 *     cdef Py_ssize_t i
 *     cdef Py_ssize_t stride = strides[0]             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t extent = shape[0]
 * 
 */
  __pyx_v_stride = (__pyx_v_strides[0]);

  /* "View.MemoryView":1414
 *     cdef Py_ssize_t i
 *     cdef Py_ssize_t stride = strides[0]
 *     cdef Py_ssize_t extent = shape[0]             # <<<<<<<<<<<<<<
 * 
 *     if ndim == 1:
 */
  __pyx_v_extent = (__pyx_v_shape[0]);

  /* "View.MemoryView":1416
 *     cdef Py_ssize_t extent = shape[0]
 * 
 *     if ndim == 1:             # <<<<<<<<<<<<<<
 *         for i in range(extent):
 *             memcpy(data, item, itemsize)
 */
  __pyx_t_1 = ((__pyx_v_ndim == 1) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":1417
 * 
 *     if ndim == 1:
 *         for i in range(extent):             # <<<<<<<<<<<<<<
 *             memcpy(data, item, itemsize)
 *             data += stride
 */
    __pyx_t_2 = __pyx_v_extent;
    __pyx_t_3 = __pyx_t_2;
    for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
      __pyx_v_i = __pyx_t_4;

      /* "View.MemoryView":1418
 *     if ndim == 1:
 *         for i in range(extent):
 *             memcpy(data, item, itemsize)             # <<<<<<<<<<<<<<
 *             data += stride
 *     else:
 */
      (void)(memcpy(__pyx_v_data, __pyx_v_item, __pyx_v_itemsize));

      /* "View.MemoryView":1419
 *         for i in range(extent):
 *             memcpy(data, item, itemsize)
 *             data += stride             # <<<<<<<<<<<<<<
 *     else:
 *         for i in range(extent):
 */
      __pyx_v_data = (__pyx_v_data + __pyx_v_stride);
    }

    /* "View.MemoryView":1416
 *     cdef Py_ssize_t extent = shape[0]
 * 
 *     if ndim == 1:             # <<<<<<<<<<<<<<
 *         for i in range(extent):
 *             memcpy(data, item, itemsize)
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":1421
 *             data += stride
 *     else:
 *         for i in range(extent):             # <<<<<<<<<<<<<<
 *             _slice_assign_scalar(data, shape + 1, strides + 1,
 *                                 ndim - 1, itemsize, item)
 */
  /*else*/ {
    __pyx_t_2 = __pyx_v_extent;
    __pyx_t_3 = __pyx_t_2;
    for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
      __pyx_v_i = __pyx_t_4;

      /* "View.MemoryView":1422
 *     else:
 *         for i in range(extent):
 *             _slice_assign_scalar(data, shape + 1, strides + 1,             # <<<<<<<<<<<<<<
 *                                 ndim - 1, itemsize, item)
 *             data += stride
 */
      __pyx_memoryview__slice_assign_scalar(__pyx_v_data, (__pyx_v_shape + 1), (__pyx_v_strides + 1), (__pyx_v_ndim - 1), __pyx_v_itemsize, __pyx_v_item);

      /* "View.MemoryView":1424
 *             _slice_assign_scalar(data, shape + 1, strides + 1,
 *                                 ndim - 1, itemsize, item)
 *             data += stride             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_v_data = (__pyx_v_data + __pyx_v_stride);
    }
  }
  __pyx_L3:;

  /* "View.MemoryView":1409
 * 
 * @cname('__pyx_memoryview__slice_assign_scalar')
 * cdef void _slice_assign_scalar(char *data, Py_ssize_t *shape,             # <<<<<<<<<<<<<<
 *                               Py_ssize_t *strides, int ndim,
 *                               size_t itemsize, void *item) nogil:
 */

  /* function exit code */
}

/* "(tree fragment)":1
 * def __pyx_unpickle_Enum(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_1__pyx_unpickle_Enum(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_15View_dot_MemoryView_1__pyx_unpickle_Enum = {"__pyx_unpickle_Enum", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_15View_dot_MemoryView_1__pyx_unpickle_Enum, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_15View_dot_MemoryView_1__pyx_unpickle_Enum(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v___pyx_type = 0;
  long __pyx_v___pyx_checksum;
  PyObject *__pyx_v___pyx_state = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__pyx_unpickle_Enum (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_type,&__pyx_n_s_pyx_checksum,&__pyx_n_s_pyx_state,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_type)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_checksum)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_Enum", 1, 3, 3, 1); __PYX_ERR(2, 1, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_state)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_Enum", 1, 3, 3, 2); __PYX_ERR(2, 1, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__pyx_unpickle_Enum") < 0)) __PYX_ERR(2, 1, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v___pyx_type = values[0];
    __pyx_v___pyx_checksum = __Pyx_PyInt_As_long(values[1]); if (unlikely((__pyx_v___pyx_checksum == (long)-1) && PyErr_Occurred())) __PYX_ERR(2, 1, __pyx_L3_error)
    __pyx_v___pyx_state = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_Enum", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(2, 1, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("View.MemoryView.__pyx_unpickle_Enum", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_15View_dot_MemoryView___pyx_unpickle_Enum(__pyx_self, __pyx_v___pyx_type, __pyx_v___pyx_checksum, __pyx_v___pyx_state);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView___pyx_unpickle_Enum(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_v___pyx_PickleError = 0;
  PyObject *__pyx_v___pyx_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_unpickle_Enum", 0);

  /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0xb068931, 0x82a3537, 0x6ae9995):             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0xb068931, 0x82a3537, 0x6ae9995) = (name))" % __pyx_checksum)
 */
  __pyx_t_1 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__Pyx_PySequence_ContainsTF(__pyx_t_1, __pyx_tuple__21, Py_NE)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "(tree fragment)":5
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0xb068931, 0x82a3537, 0x6ae9995):
 *         from pickle import PickleError as __pyx_PickleError             # <<<<<<<<<<<<<<
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0xb068931, 0x82a3537, 0x6ae9995) = (name))" % __pyx_checksum)
 *     __pyx_result = Enum.__new__(__pyx_type)
 */
    __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_n_s_PickleError);
    __Pyx_GIVEREF(__pyx_n_s_PickleError);
    PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_PickleError);
    __pyx_t_4 = __Pyx_Import(__pyx_n_s_pickle, __pyx_t_1, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_4, __pyx_n_s_PickleError); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_t_1);
    __pyx_v___pyx_PickleError = __pyx_t_1;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "(tree fragment)":6
 *     if __pyx_checksum not in (0xb068931, 0x82a3537, 0x6ae9995):
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0xb068931, 0x82a3537, 0x6ae9995) = (name))" % __pyx_checksum)             # <<<<<<<<<<<<<<
 *     __pyx_result = Enum.__new__(__pyx_type)
 *     if __pyx_state is not None:
 */
    __pyx_t_1 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = __Pyx_PyString_Format(__pyx_kp_s_Incompatible_checksums_0x_x_vs_0, __pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_INCREF(__pyx_v___pyx_PickleError);
    __pyx_t_1 = __pyx_v___pyx_PickleError; __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
      }
    }
    __pyx_t_4 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_6, __pyx_t_5) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_5);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(2, 6, __pyx_L1_error)

    /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0xb068931, 0x82a3537, 0x6ae9995):             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0xb068931, 0x82a3537, 0x6ae9995) = (name))" % __pyx_checksum)
 */
  }

  /* "(tree fragment)":7
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0xb068931, 0x82a3537, 0x6ae9995) = (name))" % __pyx_checksum)
 *     __pyx_result = Enum.__new__(__pyx_type)             # <<<<<<<<<<<<<<
 *     if __pyx_state is not None:
 *         __pyx_unpickle_Enum__set_state(<Enum> __pyx_result, __pyx_state)
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_MemviewEnum_type), __pyx_n_s_new); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  __pyx_t_4 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_5, __pyx_v___pyx_type) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_v___pyx_type);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0xb068931, 0x82a3537, 0x6ae9995) = (name))" % __pyx_checksum)
 *     __pyx_result = Enum.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_Enum__set_state(<Enum> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  __pyx_t_3 = (__pyx_v___pyx_state != Py_None);
  __pyx_t_2 = (__pyx_t_3 != 0);
  if (__pyx_t_2) {

    /* "(tree fragment)":9
 *     __pyx_result = Enum.__new__(__pyx_type)
 *     if __pyx_state is not None:
 *         __pyx_unpickle_Enum__set_state(<Enum> __pyx_result, __pyx_state)             # <<<<<<<<<<<<<<
 *     return __pyx_result
 * cdef __pyx_unpickle_Enum__set_state(Enum __pyx_result, tuple __pyx_state):
 */
    if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||((void)PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(2, 9, __pyx_L1_error)
    __pyx_t_4 = __pyx_unpickle_Enum__set_state(((struct __pyx_MemviewEnum_obj *)__pyx_v___pyx_result), ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 9, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0xb068931, 0x82a3537, 0x6ae9995) = (name))" % __pyx_checksum)
 *     __pyx_result = Enum.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_Enum__set_state(<Enum> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  }

  /* "(tree fragment)":10
 *     if __pyx_state is not None:
 *         __pyx_unpickle_Enum__set_state(<Enum> __pyx_result, __pyx_state)
 *     return __pyx_result             # <<<<<<<<<<<<<<
 * cdef __pyx_unpickle_Enum__set_state(Enum __pyx_result, tuple __pyx_state):
 *     __pyx_result.name = __pyx_state[0]
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v___pyx_result);
  __pyx_r = __pyx_v___pyx_result;
  goto __pyx_L0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_Enum(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("View.MemoryView.__pyx_unpickle_Enum", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v___pyx_PickleError);
  __Pyx_XDECREF(__pyx_v___pyx_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":11
 *         __pyx_unpickle_Enum__set_state(<Enum> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_Enum__set_state(Enum __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.name = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
 */

static PyObject *__pyx_unpickle_Enum__set_state(struct __pyx_MemviewEnum_obj *__pyx_v___pyx_result, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_unpickle_Enum__set_state", 0);

  /* "(tree fragment)":12
 *     return __pyx_result
 * cdef __pyx_unpickle_Enum__set_state(Enum __pyx_result, tuple __pyx_state):
 *     __pyx_result.name = __pyx_state[0]             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[1])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(2, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->name);
  __Pyx_DECREF(__pyx_v___pyx_result->name);
  __pyx_v___pyx_result->name = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "(tree fragment)":13
 * cdef __pyx_unpickle_Enum__set_state(Enum __pyx_result, tuple __pyx_state):
 *     __pyx_result.name = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[1])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(2, 13, __pyx_L1_error)
  }
  __pyx_t_3 = PyTuple_GET_SIZE(__pyx_v___pyx_state); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(2, 13, __pyx_L1_error)
  __pyx_t_4 = ((__pyx_t_3 > 1) != 0);
  if (__pyx_t_4) {
  } else {
    __pyx_t_2 = __pyx_t_4;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_4 = __Pyx_HasAttr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(2, 13, __pyx_L1_error)
  __pyx_t_5 = (__pyx_t_4 != 0);
  __pyx_t_2 = __pyx_t_5;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_2) {

    /* "(tree fragment)":14
 *     __pyx_result.name = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[1])             # <<<<<<<<<<<<<<
 */
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_update); if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(__pyx_v___pyx_state == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(2, 14, __pyx_L1_error)
    }
    __pyx_t_6 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_8 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
      }
    }
    __pyx_t_1 = (__pyx_t_8) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_8, __pyx_t_6) : __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_6);
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "(tree fragment)":13
 * cdef __pyx_unpickle_Enum__set_state(Enum __pyx_result, tuple __pyx_state):
 *     __pyx_result.name = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[1])
 */
  }

  /* "(tree fragment)":11
 *         __pyx_unpickle_Enum__set_state(<Enum> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_Enum__set_state(Enum __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.name = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("View.MemoryView.__pyx_unpickle_Enum__set_state", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static struct __pyx_vtabstruct_array __pyx_vtable_array;

static PyObject *__pyx_tp_new_array(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_array_obj *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_array_obj *)o);
  p->__pyx_vtab = __pyx_vtabptr_array;
  p->mode = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->_format = ((PyObject*)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_array___cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_array(PyObject *o) {
  struct __pyx_array_obj *p = (struct __pyx_array_obj *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_array___dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->mode);
  Py_CLEAR(p->_format);
  (*Py_TYPE(o)->tp_free)(o);
}
static PyObject *__pyx_sq_item_array(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static int __pyx_mp_ass_subscript_array(PyObject *o, PyObject *i, PyObject *v) {
  if (v) {
    return __pyx_array___setitem__(o, i, v);
  }
  else {
    PyErr_Format(PyExc_NotImplementedError,
      "Subscript deletion not supported by %.200s", Py_TYPE(o)->tp_name);
    return -1;
  }
}

static PyObject *__pyx_tp_getattro_array(PyObject *o, PyObject *n) {
  PyObject *v = __Pyx_PyObject_GenericGetAttr(o, n);
  if (!v && PyErr_ExceptionMatches(PyExc_AttributeError)) {
    PyErr_Clear();
    v = __pyx_array___getattr__(o, n);
  }
  return v;
}

static PyObject *__pyx_getprop___pyx_array_memview(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15View_dot_MemoryView_5array_7memview_1__get__(o);
}

static PyMethodDef __pyx_methods_array[] = {
  {"__getattr__", (PyCFunction)__pyx_array___getattr__, METH_O|METH_COEXIST, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw___pyx_array_1__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw___pyx_array_3__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_array[] = {
  {(char *)"memview", __pyx_getprop___pyx_array_memview, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence_array = {
  __pyx_array___len__, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_array, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_array = {
  __pyx_array___len__, /*mp_length*/
  __pyx_array___getitem__, /*mp_subscript*/
  __pyx_mp_ass_subscript_array, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_array = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  __pyx_array_getbuffer, /*bf_getbuffer*/
  0, /*bf_releasebuffer*/
};

static PyTypeObject __pyx_type___pyx_array = {
  PyVarObject_HEAD_INIT(0, 0)
  "fmsne_implem.array", /*tp_name*/
  sizeof(struct __pyx_array_obj), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_array, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence_array, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_array, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  __pyx_tp_getattro_array, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_array, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_array, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_array, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_array, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};

static PyObject *__pyx_tp_new_Enum(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_MemviewEnum_obj *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_MemviewEnum_obj *)o);
  p->name = Py_None; Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_Enum(PyObject *o) {
  struct __pyx_MemviewEnum_obj *p = (struct __pyx_MemviewEnum_obj *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->name);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_Enum(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_MemviewEnum_obj *p = (struct __pyx_MemviewEnum_obj *)o;
  if (p->name) {
    e = (*v)(p->name, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_Enum(PyObject *o) {
  PyObject* tmp;
  struct __pyx_MemviewEnum_obj *p = (struct __pyx_MemviewEnum_obj *)o;
  tmp = ((PyObject*)p->name);
  p->name = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyMethodDef __pyx_methods_Enum[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw___pyx_MemviewEnum_1__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw___pyx_MemviewEnum_3__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type___pyx_MemviewEnum = {
  PyVarObject_HEAD_INIT(0, 0)
  "fmsne_implem.Enum", /*tp_name*/
  sizeof(struct __pyx_MemviewEnum_obj), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_Enum, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  __pyx_MemviewEnum___repr__, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_Enum, /*tp_traverse*/
  __pyx_tp_clear_Enum, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_Enum, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_MemviewEnum___init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_Enum, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};
static struct __pyx_vtabstruct_memoryview __pyx_vtable_memoryview;

static PyObject *__pyx_tp_new_memoryview(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_memoryview_obj *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_memoryview_obj *)o);
  p->__pyx_vtab = __pyx_vtabptr_memoryview;
  p->obj = Py_None; Py_INCREF(Py_None);
  p->_size = Py_None; Py_INCREF(Py_None);
  p->_array_interface = Py_None; Py_INCREF(Py_None);
  p->view.obj = NULL;
  if (unlikely(__pyx_memoryview___cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_memoryview(PyObject *o) {
  struct __pyx_memoryview_obj *p = (struct __pyx_memoryview_obj *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_memoryview___dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->obj);
  Py_CLEAR(p->_size);
  Py_CLEAR(p->_array_interface);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_memoryview(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_memoryview_obj *p = (struct __pyx_memoryview_obj *)o;
  if (p->obj) {
    e = (*v)(p->obj, a); if (e) return e;
  }
  if (p->_size) {
    e = (*v)(p->_size, a); if (e) return e;
  }
  if (p->_array_interface) {
    e = (*v)(p->_array_interface, a); if (e) return e;
  }
  if (p->view.obj) {
    e = (*v)(p->view.obj, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_memoryview(PyObject *o) {
  PyObject* tmp;
  struct __pyx_memoryview_obj *p = (struct __pyx_memoryview_obj *)o;
  tmp = ((PyObject*)p->obj);
  p->obj = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_size);
  p->_size = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_array_interface);
  p->_array_interface = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  Py_CLEAR(p->view.obj);
  return 0;
}
static PyObject *__pyx_sq_item_memoryview(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static int __pyx_mp_ass_subscript_memoryview(PyObject *o, PyObject *i, PyObject *v) {
  if (v) {
    return __pyx_memoryview___setitem__(o, i, v);
  }
  else {
    PyErr_Format(PyExc_NotImplementedError,
      "Subscript deletion not supported by %.200s", Py_TYPE(o)->tp_name);
    return -1;
  }
}

static PyObject *__pyx_getprop___pyx_memoryview_T(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15View_dot_MemoryView_10memoryview_1T_1__get__(o);
}

static PyObject *__pyx_getprop___pyx_memoryview_base(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15View_dot_MemoryView_10memoryview_4base_1__get__(o);
}

static PyObject *__pyx_getprop___pyx_memoryview_shape(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15View_dot_MemoryView_10memoryview_5shape_1__get__(o);
}

static PyObject *__pyx_getprop___pyx_memoryview_strides(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15View_dot_MemoryView_10memoryview_7strides_1__get__(o);
}

static PyObject *__pyx_getprop___pyx_memoryview_suboffsets(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15View_dot_MemoryView_10memoryview_10suboffsets_1__get__(o);
}

static PyObject *__pyx_getprop___pyx_memoryview_ndim(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15View_dot_MemoryView_10memoryview_4ndim_1__get__(o);
}

static PyObject *__pyx_getprop___pyx_memoryview_itemsize(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15View_dot_MemoryView_10memoryview_8itemsize_1__get__(o);
}

static PyObject *__pyx_getprop___pyx_memoryview_nbytes(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15View_dot_MemoryView_10memoryview_6nbytes_1__get__(o);
}

static PyObject *__pyx_getprop___pyx_memoryview_size(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15View_dot_MemoryView_10memoryview_4size_1__get__(o);
}

static PyMethodDef __pyx_methods_memoryview[] = {
  {"is_c_contig", (PyCFunction)__pyx_memoryview_is_c_contig, METH_NOARGS, 0},
  {"is_f_contig", (PyCFunction)__pyx_memoryview_is_f_contig, METH_NOARGS, 0},
  {"copy", (PyCFunction)__pyx_memoryview_copy, METH_NOARGS, 0},
  {"copy_fortran", (PyCFunction)__pyx_memoryview_copy_fortran, METH_NOARGS, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw___pyx_memoryview_1__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw___pyx_memoryview_3__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_memoryview[] = {
  {(char *)"T", __pyx_getprop___pyx_memoryview_T, 0, (char *)0, 0},
  {(char *)"base", __pyx_getprop___pyx_memoryview_base, 0, (char *)0, 0},
  {(char *)"shape", __pyx_getprop___pyx_memoryview_shape, 0, (char *)0, 0},
  {(char *)"strides", __pyx_getprop___pyx_memoryview_strides, 0, (char *)0, 0},
  {(char *)"suboffsets", __pyx_getprop___pyx_memoryview_suboffsets, 0, (char *)0, 0},
  {(char *)"ndim", __pyx_getprop___pyx_memoryview_ndim, 0, (char *)0, 0},
  {(char *)"itemsize", __pyx_getprop___pyx_memoryview_itemsize, 0, (char *)0, 0},
  {(char *)"nbytes", __pyx_getprop___pyx_memoryview_nbytes, 0, (char *)0, 0},
  {(char *)"size", __pyx_getprop___pyx_memoryview_size, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence_memoryview = {
  __pyx_memoryview___len__, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_memoryview, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_memoryview = {
  __pyx_memoryview___len__, /*mp_length*/
  __pyx_memoryview___getitem__, /*mp_subscript*/
  __pyx_mp_ass_subscript_memoryview, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_memoryview = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  __pyx_memoryview_getbuffer, /*bf_getbuffer*/
  0, /*bf_releasebuffer*/
};

static PyTypeObject __pyx_type___pyx_memoryview = {
  PyVarObject_HEAD_INIT(0, 0)
  "fmsne_implem.memoryview", /*tp_name*/
  sizeof(struct __pyx_memoryview_obj), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_memoryview, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  __pyx_memoryview___repr__, /*tp_repr*/
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence_memoryview, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_memoryview, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  __pyx_memoryview___str__, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_memoryview, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_memoryview, /*tp_traverse*/
  __pyx_tp_clear_memoryview, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_memoryview, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_memoryview, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_memoryview, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};
static struct __pyx_vtabstruct__memoryviewslice __pyx_vtable__memoryviewslice;

static PyObject *__pyx_tp_new__memoryviewslice(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_memoryviewslice_obj *p;
  PyObject *o = __pyx_tp_new_memoryview(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_memoryviewslice_obj *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_memoryview*)__pyx_vtabptr__memoryviewslice;
  p->from_object = Py_None; Py_INCREF(Py_None);
  p->from_slice.memview = NULL;
  return o;
}

static void __pyx_tp_dealloc__memoryviewslice(PyObject *o) {
  struct __pyx_memoryviewslice_obj *p = (struct __pyx_memoryviewslice_obj *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_memoryviewslice___dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->from_object);
  PyObject_GC_Track(o);
  __pyx_tp_dealloc_memoryview(o);
}

static int __pyx_tp_traverse__memoryviewslice(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_memoryviewslice_obj *p = (struct __pyx_memoryviewslice_obj *)o;
  e = __pyx_tp_traverse_memoryview(o, v, a); if (e) return e;
  if (p->from_object) {
    e = (*v)(p->from_object, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear__memoryviewslice(PyObject *o) {
  PyObject* tmp;
  struct __pyx_memoryviewslice_obj *p = (struct __pyx_memoryviewslice_obj *)o;
  __pyx_tp_clear_memoryview(o);
  tmp = ((PyObject*)p->from_object);
  p->from_object = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  __PYX_XDEC_MEMVIEW(&p->from_slice, 1);
  return 0;
}

static PyObject *__pyx_getprop___pyx_memoryviewslice_base(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15View_dot_MemoryView_16_memoryviewslice_4base_1__get__(o);
}

static PyMethodDef __pyx_methods__memoryviewslice[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw___pyx_memoryviewslice_1__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw___pyx_memoryviewslice_3__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets__memoryviewslice[] = {
  {(char *)"base", __pyx_getprop___pyx_memoryviewslice_base, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type___pyx_memoryviewslice = {
  PyVarObject_HEAD_INIT(0, 0)
  "fmsne_implem._memoryviewslice", /*tp_name*/
  sizeof(struct __pyx_memoryviewslice_obj), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc__memoryviewslice, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_memoryview___repr__, /*tp_repr*/
  #else
  0, /*tp_repr*/
  #endif
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_memoryview___str__, /*tp_str*/
  #else
  0, /*tp_str*/
  #endif
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "Internal class for passing memoryview slices to Python", /*tp_doc*/
  __pyx_tp_traverse__memoryviewslice, /*tp_traverse*/
  __pyx_tp_clear__memoryviewslice, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods__memoryviewslice, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets__memoryviewslice, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new__memoryviewslice, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {"mssne_implem", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_12fmsne_implem_1mssne_implem, METH_VARARGS|METH_KEYWORDS, __pyx_doc_12fmsne_implem_mssne_implem},
  {"mstsne_implem", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_12fmsne_implem_3mstsne_implem, METH_VARARGS|METH_KEYWORDS, __pyx_doc_12fmsne_implem_2mstsne_implem},
  {"fmssne_implem", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_12fmsne_implem_5fmssne_implem, METH_VARARGS|METH_KEYWORDS, __pyx_doc_12fmsne_implem_4fmssne_implem},
  {"fmstsne_implem", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_12fmsne_implem_7fmstsne_implem, METH_VARARGS|METH_KEYWORDS, __pyx_doc_12fmsne_implem_6fmstsne_implem},
  {"drqa_qnx_rnx_auc", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_12fmsne_implem_9drqa_qnx_rnx_auc, METH_VARARGS|METH_KEYWORDS, __pyx_doc_12fmsne_implem_8drqa_qnx_rnx_auc},
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
#if CYTHON_PEP489_MULTI_PHASE_INIT
static PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def); /*proto*/
static int __pyx_pymod_exec_fmsne_implem(PyObject* module); /*proto*/
static PyModuleDef_Slot __pyx_moduledef_slots[] = {
  {Py_mod_create, (void*)__pyx_pymod_create},
  {Py_mod_exec, (void*)__pyx_pymod_exec_fmsne_implem},
  {0, NULL}
};
#endif

static struct PyModuleDef __pyx_moduledef = {
    PyModuleDef_HEAD_INIT,
    "fmsne_implem",
    0, /* m_doc */
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    0, /* m_size */
  #else
    -1, /* m_size */
  #endif
    __pyx_methods /* m_methods */,
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    __pyx_moduledef_slots, /* m_slots */
  #else
    NULL, /* m_reload */
  #endif
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif
#ifndef CYTHON_SMALL_CODE
#if defined(__clang__)
    #define CYTHON_SMALL_CODE
#elif defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 3))
    #define CYTHON_SMALL_CODE __attribute__((cold))
#else
    #define CYTHON_SMALL_CODE
#endif
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_n_s_ASCII, __pyx_k_ASCII, sizeof(__pyx_k_ASCII), 0, 0, 1, 1},
  {&__pyx_kp_s_Buffer_view_does_not_expose_stri, __pyx_k_Buffer_view_does_not_expose_stri, sizeof(__pyx_k_Buffer_view_does_not_expose_stri), 0, 0, 1, 0},
  {&__pyx_kp_s_Can_only_create_a_buffer_that_is, __pyx_k_Can_only_create_a_buffer_that_is, sizeof(__pyx_k_Can_only_create_a_buffer_that_is), 0, 0, 1, 0},
  {&__pyx_kp_s_Cannot_assign_to_read_only_memor, __pyx_k_Cannot_assign_to_read_only_memor, sizeof(__pyx_k_Cannot_assign_to_read_only_memor), 0, 0, 1, 0},
  {&__pyx_kp_s_Cannot_create_writable_memory_vi, __pyx_k_Cannot_create_writable_memory_vi, sizeof(__pyx_k_Cannot_create_writable_memory_vi), 0, 0, 1, 0},
  {&__pyx_kp_s_Cannot_index_with_type_s, __pyx_k_Cannot_index_with_type_s, sizeof(__pyx_k_Cannot_index_with_type_s), 0, 0, 1, 0},
  {&__pyx_n_s_Ellipsis, __pyx_k_Ellipsis, sizeof(__pyx_k_Ellipsis), 0, 0, 1, 1},
  {&__pyx_kp_s_Empty_shape_tuple_for_cython_arr, __pyx_k_Empty_shape_tuple_for_cython_arr, sizeof(__pyx_k_Empty_shape_tuple_for_cython_arr), 0, 0, 1, 0},
  {&__pyx_n_s_ImportError, __pyx_k_ImportError, sizeof(__pyx_k_ImportError), 0, 0, 1, 1},
  {&__pyx_kp_s_Incompatible_checksums_0x_x_vs_0, __pyx_k_Incompatible_checksums_0x_x_vs_0, sizeof(__pyx_k_Incompatible_checksums_0x_x_vs_0), 0, 0, 1, 0},
  {&__pyx_n_s_IndexError, __pyx_k_IndexError, sizeof(__pyx_k_IndexError), 0, 0, 1, 1},
  {&__pyx_kp_s_Indirect_dimensions_not_supporte, __pyx_k_Indirect_dimensions_not_supporte, sizeof(__pyx_k_Indirect_dimensions_not_supporte), 0, 0, 1, 0},
  {&__pyx_kp_s_Invalid_mode_expected_c_or_fortr, __pyx_k_Invalid_mode_expected_c_or_fortr, sizeof(__pyx_k_Invalid_mode_expected_c_or_fortr), 0, 0, 1, 0},
  {&__pyx_kp_s_Invalid_shape_in_axis_d_d, __pyx_k_Invalid_shape_in_axis_d_d, sizeof(__pyx_k_Invalid_shape_in_axis_d_d), 0, 0, 1, 0},
  {&__pyx_n_s_Kup, __pyx_k_Kup, sizeof(__pyx_k_Kup), 0, 0, 1, 1},
  {&__pyx_n_s_L_min, __pyx_k_L_min, sizeof(__pyx_k_L_min), 0, 0, 1, 1},
  {&__pyx_n_s_MemoryError, __pyx_k_MemoryError, sizeof(__pyx_k_MemoryError), 0, 0, 1, 1},
  {&__pyx_kp_s_MemoryView_of_r_at_0x_x, __pyx_k_MemoryView_of_r_at_0x_x, sizeof(__pyx_k_MemoryView_of_r_at_0x_x), 0, 0, 1, 0},
  {&__pyx_kp_s_MemoryView_of_r_object, __pyx_k_MemoryView_of_r_object, sizeof(__pyx_k_MemoryView_of_r_object), 0, 0, 1, 0},
  {&__pyx_n_s_N, __pyx_k_N, sizeof(__pyx_k_N), 0, 0, 1, 1},
  {&__pyx_n_b_O, __pyx_k_O, sizeof(__pyx_k_O), 0, 0, 0, 1},
  {&__pyx_kp_s_Out_of_bounds_on_buffer_access_a, __pyx_k_Out_of_bounds_on_buffer_access_a, sizeof(__pyx_k_Out_of_bounds_on_buffer_access_a), 0, 0, 1, 0},
  {&__pyx_n_s_PickleError, __pyx_k_PickleError, sizeof(__pyx_k_PickleError), 0, 0, 1, 1},
  {&__pyx_n_s_TypeError, __pyx_k_TypeError, sizeof(__pyx_k_TypeError), 0, 0, 1, 1},
  {&__pyx_kp_s_Unable_to_convert_item_to_object, __pyx_k_Unable_to_convert_item_to_object, sizeof(__pyx_k_Unable_to_convert_item_to_object), 0, 0, 1, 0},
  {&__pyx_n_s_ValueError, __pyx_k_ValueError, sizeof(__pyx_k_ValueError), 0, 0, 1, 1},
  {&__pyx_n_s_View_MemoryView, __pyx_k_View_MemoryView, sizeof(__pyx_k_View_MemoryView), 0, 0, 1, 1},
  {&__pyx_n_s_X_hds, __pyx_k_X_hds, sizeof(__pyx_k_X_hds), 0, 0, 1, 1},
  {&__pyx_n_s_X_lds, __pyx_k_X_lds, sizeof(__pyx_k_X_lds), 0, 0, 1, 1},
  {&__pyx_n_s_allocate_buffer, __pyx_k_allocate_buffer, sizeof(__pyx_k_allocate_buffer), 0, 0, 1, 1},
  {&__pyx_n_s_base, __pyx_k_base, sizeof(__pyx_k_base), 0, 0, 1, 1},
  {&__pyx_n_s_c, __pyx_k_c, sizeof(__pyx_k_c), 0, 0, 1, 1},
  {&__pyx_n_u_c, __pyx_k_c, sizeof(__pyx_k_c), 0, 1, 0, 1},
  {&__pyx_n_s_class, __pyx_k_class, sizeof(__pyx_k_class), 0, 0, 1, 1},
  {&__pyx_n_s_cline_in_traceback, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},
  {&__pyx_kp_s_contiguous_and_direct, __pyx_k_contiguous_and_direct, sizeof(__pyx_k_contiguous_and_direct), 0, 0, 1, 0},
  {&__pyx_kp_s_contiguous_and_indirect, __pyx_k_contiguous_and_indirect, sizeof(__pyx_k_contiguous_and_indirect), 0, 0, 1, 0},
  {&__pyx_n_s_cperp, __pyx_k_cperp, sizeof(__pyx_k_cperp), 0, 0, 1, 1},
  {&__pyx_n_s_d_hds, __pyx_k_d_hds, sizeof(__pyx_k_d_hds), 0, 0, 1, 1},
  {&__pyx_n_s_d_lds, __pyx_k_d_lds, sizeof(__pyx_k_d_lds), 0, 0, 1, 1},
  {&__pyx_n_s_dict, __pyx_k_dict, sizeof(__pyx_k_dict), 0, 0, 1, 1},
  {&__pyx_n_s_dtype, __pyx_k_dtype, sizeof(__pyx_k_dtype), 0, 0, 1, 1},
  {&__pyx_n_s_dtype_is_object, __pyx_k_dtype_is_object, sizeof(__pyx_k_dtype_is_object), 0, 0, 1, 1},
  {&__pyx_n_s_encode, __pyx_k_encode, sizeof(__pyx_k_encode), 0, 0, 1, 1},
  {&__pyx_n_s_enumerate, __pyx_k_enumerate, sizeof(__pyx_k_enumerate), 0, 0, 1, 1},
  {&__pyx_n_s_eps, __pyx_k_eps, sizeof(__pyx_k_eps), 0, 0, 1, 1},
  {&__pyx_n_s_error, __pyx_k_error, sizeof(__pyx_k_error), 0, 0, 1, 1},
  {&__pyx_n_s_finfo, __pyx_k_finfo, sizeof(__pyx_k_finfo), 0, 0, 1, 1},
  {&__pyx_n_s_fit_U, __pyx_k_fit_U, sizeof(__pyx_k_fit_U), 0, 0, 1, 1},
  {&__pyx_n_s_flags, __pyx_k_flags, sizeof(__pyx_k_flags), 0, 0, 1, 1},
  {&__pyx_n_s_float64, __pyx_k_float64, sizeof(__pyx_k_float64), 0, 0, 1, 1},
  {&__pyx_n_s_format, __pyx_k_format, sizeof(__pyx_k_format), 0, 0, 1, 1},
  {&__pyx_n_s_fortran, __pyx_k_fortran, sizeof(__pyx_k_fortran), 0, 0, 1, 1},
  {&__pyx_n_u_fortran, __pyx_k_fortran, sizeof(__pyx_k_fortran), 0, 1, 0, 1},
  {&__pyx_n_s_ftol, __pyx_k_ftol, sizeof(__pyx_k_ftol), 0, 0, 1, 1},
  {&__pyx_n_s_getstate, __pyx_k_getstate, sizeof(__pyx_k_getstate), 0, 0, 1, 1},
  {&__pyx_kp_s_got_differing_extents_in_dimensi, __pyx_k_got_differing_extents_in_dimensi, sizeof(__pyx_k_got_differing_extents_in_dimensi), 0, 0, 1, 0},
  {&__pyx_n_s_gtol, __pyx_k_gtol, sizeof(__pyx_k_gtol), 0, 0, 1, 1},
  {&__pyx_n_s_id, __pyx_k_id, sizeof(__pyx_k_id), 0, 0, 1, 1},
  {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {&__pyx_n_s_itemsize, __pyx_k_itemsize, sizeof(__pyx_k_itemsize), 0, 0, 1, 1},
  {&__pyx_kp_s_itemsize_0_for_cython_array, __pyx_k_itemsize_0_for_cython_array, sizeof(__pyx_k_itemsize_0_for_cython_array), 0, 0, 1, 0},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_maxcor, __pyx_k_maxcor, sizeof(__pyx_k_maxcor), 0, 0, 1, 1},
  {&__pyx_n_s_maxls, __pyx_k_maxls, sizeof(__pyx_k_maxls), 0, 0, 1, 1},
  {&__pyx_n_s_memview, __pyx_k_memview, sizeof(__pyx_k_memview), 0, 0, 1, 1},
  {&__pyx_n_s_mode, __pyx_k_mode, sizeof(__pyx_k_mode), 0, 0, 1, 1},
  {&__pyx_n_s_ms_thetha, __pyx_k_ms_thetha, sizeof(__pyx_k_ms_thetha), 0, 0, 1, 1},
  {&__pyx_n_s_n_components, __pyx_k_n_components, sizeof(__pyx_k_n_components), 0, 0, 1, 1},
  {&__pyx_n_s_n_rs, __pyx_k_n_rs, sizeof(__pyx_k_n_rs), 0, 0, 1, 1},
  {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {&__pyx_n_s_name_2, __pyx_k_name_2, sizeof(__pyx_k_name_2), 0, 0, 1, 1},
  {&__pyx_n_s_ndim, __pyx_k_ndim, sizeof(__pyx_k_ndim), 0, 0, 1, 1},
  {&__pyx_n_s_new, __pyx_k_new, sizeof(__pyx_k_new), 0, 0, 1, 1},
  {&__pyx_n_s_nit_max, __pyx_k_nit_max, sizeof(__pyx_k_nit_max), 0, 0, 1, 1},
  {&__pyx_kp_s_no_default___reduce___due_to_non, __pyx_k_no_default___reduce___due_to_non, sizeof(__pyx_k_no_default___reduce___due_to_non), 0, 0, 1, 0},
  {&__pyx_n_s_np, __pyx_k_np, sizeof(__pyx_k_np), 0, 0, 1, 1},
  {&__pyx_n_s_numpy, __pyx_k_numpy, sizeof(__pyx_k_numpy), 0, 0, 1, 1},
  {&__pyx_kp_u_numpy_core_multiarray_failed_to, __pyx_k_numpy_core_multiarray_failed_to, sizeof(__pyx_k_numpy_core_multiarray_failed_to), 0, 1, 0, 0},
  {&__pyx_kp_u_numpy_core_umath_failed_to_impor, __pyx_k_numpy_core_umath_failed_to_impor, sizeof(__pyx_k_numpy_core_umath_failed_to_impor), 0, 1, 0, 0},
  {&__pyx_n_s_obj, __pyx_k_obj, sizeof(__pyx_k_obj), 0, 0, 1, 1},
  {&__pyx_n_s_pack, __pyx_k_pack, sizeof(__pyx_k_pack), 0, 0, 1, 1},
  {&__pyx_n_s_pickle, __pyx_k_pickle, sizeof(__pyx_k_pickle), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_PickleError, __pyx_k_pyx_PickleError, sizeof(__pyx_k_pyx_PickleError), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_checksum, __pyx_k_pyx_checksum, sizeof(__pyx_k_pyx_checksum), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_getbuffer, __pyx_k_pyx_getbuffer, sizeof(__pyx_k_pyx_getbuffer), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_result, __pyx_k_pyx_result, sizeof(__pyx_k_pyx_result), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_state, __pyx_k_pyx_state, sizeof(__pyx_k_pyx_state), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_type, __pyx_k_pyx_type, sizeof(__pyx_k_pyx_type), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_unpickle_Enum, __pyx_k_pyx_unpickle_Enum, sizeof(__pyx_k_pyx_unpickle_Enum), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_vtable, __pyx_k_pyx_vtable, sizeof(__pyx_k_pyx_vtable), 0, 0, 1, 1},
  {&__pyx_n_s_qnxk, __pyx_k_qnxk, sizeof(__pyx_k_qnxk), 0, 0, 1, 1},
  {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
  {&__pyx_n_s_reduce, __pyx_k_reduce, sizeof(__pyx_k_reduce), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_cython, __pyx_k_reduce_cython, sizeof(__pyx_k_reduce_cython), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_ex, __pyx_k_reduce_ex, sizeof(__pyx_k_reduce_ex), 0, 0, 1, 1},
  {&__pyx_n_s_rnxk, __pyx_k_rnxk, sizeof(__pyx_k_rnxk), 0, 0, 1, 1},
  {&__pyx_n_s_rnxk_size, __pyx_k_rnxk_size, sizeof(__pyx_k_rnxk_size), 0, 0, 1, 1},
  {&__pyx_n_s_rseed, __pyx_k_rseed, sizeof(__pyx_k_rseed), 0, 0, 1, 1},
  {&__pyx_n_s_setstate, __pyx_k_setstate, sizeof(__pyx_k_setstate), 0, 0, 1, 1},
  {&__pyx_n_s_setstate_cython, __pyx_k_setstate_cython, sizeof(__pyx_k_setstate_cython), 0, 0, 1, 1},
  {&__pyx_n_s_shape, __pyx_k_shape, sizeof(__pyx_k_shape), 0, 0, 1, 1},
  {&__pyx_n_s_size, __pyx_k_size, sizeof(__pyx_k_size), 0, 0, 1, 1},
  {&__pyx_n_s_start, __pyx_k_start, sizeof(__pyx_k_start), 0, 0, 1, 1},
  {&__pyx_n_s_step, __pyx_k_step, sizeof(__pyx_k_step), 0, 0, 1, 1},
  {&__pyx_n_s_stop, __pyx_k_stop, sizeof(__pyx_k_stop), 0, 0, 1, 1},
  {&__pyx_kp_s_strided_and_direct, __pyx_k_strided_and_direct, sizeof(__pyx_k_strided_and_direct), 0, 0, 1, 0},
  {&__pyx_kp_s_strided_and_direct_or_indirect, __pyx_k_strided_and_direct_or_indirect, sizeof(__pyx_k_strided_and_direct_or_indirect), 0, 0, 1, 0},
  {&__pyx_kp_s_strided_and_indirect, __pyx_k_strided_and_indirect, sizeof(__pyx_k_strided_and_indirect), 0, 0, 1, 0},
  {&__pyx_kp_s_stringsource, __pyx_k_stringsource, sizeof(__pyx_k_stringsource), 0, 0, 1, 0},
  {&__pyx_n_s_struct, __pyx_k_struct, sizeof(__pyx_k_struct), 0, 0, 1, 1},
  {&__pyx_n_s_sym_nn, __pyx_k_sym_nn, sizeof(__pyx_k_sym_nn), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_kp_s_unable_to_allocate_array_data, __pyx_k_unable_to_allocate_array_data, sizeof(__pyx_k_unable_to_allocate_array_data), 0, 0, 1, 0},
  {&__pyx_kp_s_unable_to_allocate_shape_and_str, __pyx_k_unable_to_allocate_shape_and_str, sizeof(__pyx_k_unable_to_allocate_shape_and_str), 0, 0, 1, 0},
  {&__pyx_n_s_unpack, __pyx_k_unpack, sizeof(__pyx_k_unpack), 0, 0, 1, 1},
  {&__pyx_n_s_update, __pyx_k_update, sizeof(__pyx_k_update), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static CYTHON_SMALL_CODE int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) __PYX_ERR(0, 73, __pyx_L1_error)
  __pyx_builtin_ImportError = __Pyx_GetBuiltinName(__pyx_n_s_ImportError); if (!__pyx_builtin_ImportError) __PYX_ERR(1, 944, __pyx_L1_error)
  __pyx_builtin_ValueError = __Pyx_GetBuiltinName(__pyx_n_s_ValueError); if (!__pyx_builtin_ValueError) __PYX_ERR(2, 134, __pyx_L1_error)
  __pyx_builtin_MemoryError = __Pyx_GetBuiltinName(__pyx_n_s_MemoryError); if (!__pyx_builtin_MemoryError) __PYX_ERR(2, 149, __pyx_L1_error)
  __pyx_builtin_enumerate = __Pyx_GetBuiltinName(__pyx_n_s_enumerate); if (!__pyx_builtin_enumerate) __PYX_ERR(2, 152, __pyx_L1_error)
  __pyx_builtin_TypeError = __Pyx_GetBuiltinName(__pyx_n_s_TypeError); if (!__pyx_builtin_TypeError) __PYX_ERR(2, 2, __pyx_L1_error)
  __pyx_builtin_Ellipsis = __Pyx_GetBuiltinName(__pyx_n_s_Ellipsis); if (!__pyx_builtin_Ellipsis) __PYX_ERR(2, 406, __pyx_L1_error)
  __pyx_builtin_id = __Pyx_GetBuiltinName(__pyx_n_s_id); if (!__pyx_builtin_id) __PYX_ERR(2, 615, __pyx_L1_error)
  __pyx_builtin_IndexError = __Pyx_GetBuiltinName(__pyx_n_s_IndexError); if (!__pyx_builtin_IndexError) __PYX_ERR(2, 834, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "../../anaconda3/lib/python3.10/site-packages/numpy/__init__.pxd":944
 *         __pyx_import_array()
 *     except Exception:
 *         raise ImportError("numpy.core.multiarray failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_umath() except -1:
 */
  __pyx_tuple_ = PyTuple_Pack(1, __pyx_kp_u_numpy_core_multiarray_failed_to); if (unlikely(!__pyx_tuple_)) __PYX_ERR(1, 944, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple_);
  __Pyx_GIVEREF(__pyx_tuple_);

  /* "../../anaconda3/lib/python3.10/site-packages/numpy/__init__.pxd":950
 *         _import_umath()
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_ufunc() except -1:
 */
  __pyx_tuple__2 = PyTuple_Pack(1, __pyx_kp_u_numpy_core_umath_failed_to_impor); if (unlikely(!__pyx_tuple__2)) __PYX_ERR(1, 950, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__2);
  __Pyx_GIVEREF(__pyx_tuple__2);

  /* "View.MemoryView":134
 * 
 *         if not self.ndim:
 *             raise ValueError("Empty shape tuple for cython.array")             # <<<<<<<<<<<<<<
 * 
 *         if itemsize <= 0:
 */
  __pyx_tuple__3 = PyTuple_Pack(1, __pyx_kp_s_Empty_shape_tuple_for_cython_arr); if (unlikely(!__pyx_tuple__3)) __PYX_ERR(2, 134, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__3);
  __Pyx_GIVEREF(__pyx_tuple__3);

  /* "View.MemoryView":137
 * 
 *         if itemsize <= 0:
 *             raise ValueError("itemsize <= 0 for cython.array")             # <<<<<<<<<<<<<<
 * 
 *         if not isinstance(format, bytes):
 */
  __pyx_tuple__4 = PyTuple_Pack(1, __pyx_kp_s_itemsize_0_for_cython_array); if (unlikely(!__pyx_tuple__4)) __PYX_ERR(2, 137, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__4);
  __Pyx_GIVEREF(__pyx_tuple__4);

  /* "View.MemoryView":149
 * 
 *         if not self._shape:
 *             raise MemoryError("unable to allocate shape and strides.")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_tuple__5 = PyTuple_Pack(1, __pyx_kp_s_unable_to_allocate_shape_and_str); if (unlikely(!__pyx_tuple__5)) __PYX_ERR(2, 149, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__5);
  __Pyx_GIVEREF(__pyx_tuple__5);

  /* "View.MemoryView":177
 *             self.data = <char *>malloc(self.len)
 *             if not self.data:
 *                 raise MemoryError("unable to allocate array data.")             # <<<<<<<<<<<<<<
 * 
 *             if self.dtype_is_object:
 */
  __pyx_tuple__6 = PyTuple_Pack(1, __pyx_kp_s_unable_to_allocate_array_data); if (unlikely(!__pyx_tuple__6)) __PYX_ERR(2, 177, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__6);
  __Pyx_GIVEREF(__pyx_tuple__6);

  /* "View.MemoryView":193
 *             bufmode = PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         if not (flags & bufmode):
 *             raise ValueError("Can only create a buffer that is contiguous in memory.")             # <<<<<<<<<<<<<<
 *         info.buf = self.data
 *         info.len = self.len
 */
  __pyx_tuple__7 = PyTuple_Pack(1, __pyx_kp_s_Can_only_create_a_buffer_that_is); if (unlikely(!__pyx_tuple__7)) __PYX_ERR(2, 193, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__7);
  __Pyx_GIVEREF(__pyx_tuple__7);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__8 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__8)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__8);
  __Pyx_GIVEREF(__pyx_tuple__8);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__9 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__9)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__9);
  __Pyx_GIVEREF(__pyx_tuple__9);

  /* "View.MemoryView":420
 *     def __setitem__(memoryview self, object index, object value):
 *         if self.view.readonly:
 *             raise TypeError("Cannot assign to read-only memoryview")             # <<<<<<<<<<<<<<
 * 
 *         have_slices, index = _unellipsify(index, self.view.ndim)
 */
  __pyx_tuple__10 = PyTuple_Pack(1, __pyx_kp_s_Cannot_assign_to_read_only_memor); if (unlikely(!__pyx_tuple__10)) __PYX_ERR(2, 420, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__10);
  __Pyx_GIVEREF(__pyx_tuple__10);

  /* "View.MemoryView":497
 *             result = struct.unpack(self.view.format, bytesitem)
 *         except struct.error:
 *             raise ValueError("Unable to convert item to object")             # <<<<<<<<<<<<<<
 *         else:
 *             if len(self.view.format) == 1:
 */
  __pyx_tuple__11 = PyTuple_Pack(1, __pyx_kp_s_Unable_to_convert_item_to_object); if (unlikely(!__pyx_tuple__11)) __PYX_ERR(2, 497, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__11);
  __Pyx_GIVEREF(__pyx_tuple__11);

  /* "View.MemoryView":522
 *     def __getbuffer__(self, Py_buffer *info, int flags):
 *         if flags & PyBUF_WRITABLE and self.view.readonly:
 *             raise ValueError("Cannot create writable memory view from read-only memoryview")             # <<<<<<<<<<<<<<
 * 
 *         if flags & PyBUF_ND:
 */
  __pyx_tuple__12 = PyTuple_Pack(1, __pyx_kp_s_Cannot_create_writable_memory_vi); if (unlikely(!__pyx_tuple__12)) __PYX_ERR(2, 522, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__12);
  __Pyx_GIVEREF(__pyx_tuple__12);

  /* "View.MemoryView":572
 *         if self.view.strides == NULL:
 * 
 *             raise ValueError("Buffer view does not expose strides")             # <<<<<<<<<<<<<<
 * 
 *         return tuple([stride for stride in self.view.strides[:self.view.ndim]])
 */
  __pyx_tuple__13 = PyTuple_Pack(1, __pyx_kp_s_Buffer_view_does_not_expose_stri); if (unlikely(!__pyx_tuple__13)) __PYX_ERR(2, 572, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__13);
  __Pyx_GIVEREF(__pyx_tuple__13);

  /* "View.MemoryView":579
 *     def suboffsets(self):
 *         if self.view.suboffsets == NULL:
 *             return (-1,) * self.view.ndim             # <<<<<<<<<<<<<<
 * 
 *         return tuple([suboffset for suboffset in self.view.suboffsets[:self.view.ndim]])
 */
  __pyx_tuple__14 = PyTuple_New(1); if (unlikely(!__pyx_tuple__14)) __PYX_ERR(2, 579, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__14);
  __Pyx_INCREF(__pyx_int_neg_1);
  __Pyx_GIVEREF(__pyx_int_neg_1);
  PyTuple_SET_ITEM(__pyx_tuple__14, 0, __pyx_int_neg_1);
  __Pyx_GIVEREF(__pyx_tuple__14);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__15 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__15)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__15);
  __Pyx_GIVEREF(__pyx_tuple__15);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__16 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__16)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__16);
  __Pyx_GIVEREF(__pyx_tuple__16);

  /* "View.MemoryView":684
 *         if item is Ellipsis:
 *             if not seen_ellipsis:
 *                 result.extend([slice(None)] * (ndim - len(tup) + 1))             # <<<<<<<<<<<<<<
 *                 seen_ellipsis = True
 *             else:
 */
  __pyx_slice__17 = PySlice_New(Py_None, Py_None, Py_None); if (unlikely(!__pyx_slice__17)) __PYX_ERR(2, 684, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__17);
  __Pyx_GIVEREF(__pyx_slice__17);

  /* "View.MemoryView":705
 *     for suboffset in suboffsets[:ndim]:
 *         if suboffset >= 0:
 *             raise ValueError("Indirect dimensions not supported")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_tuple__18 = PyTuple_Pack(1, __pyx_kp_s_Indirect_dimensions_not_supporte); if (unlikely(!__pyx_tuple__18)) __PYX_ERR(2, 705, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__18);
  __Pyx_GIVEREF(__pyx_tuple__18);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__19 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__19)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__19);
  __Pyx_GIVEREF(__pyx_tuple__19);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__20 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__20)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__20);
  __Pyx_GIVEREF(__pyx_tuple__20);
  __pyx_tuple__21 = PyTuple_Pack(3, __pyx_int_184977713, __pyx_int_136983863, __pyx_int_112105877); if (unlikely(!__pyx_tuple__21)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__21);
  __Pyx_GIVEREF(__pyx_tuple__21);

  /* "View.MemoryView":287
 *         return self.name
 * 
 * cdef generic = Enum("<strided and direct or indirect>")             # <<<<<<<<<<<<<<
 * cdef strided = Enum("<strided and direct>") # default
 * cdef indirect = Enum("<strided and indirect>")
 */
  __pyx_tuple__22 = PyTuple_Pack(1, __pyx_kp_s_strided_and_direct_or_indirect); if (unlikely(!__pyx_tuple__22)) __PYX_ERR(2, 287, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__22);
  __Pyx_GIVEREF(__pyx_tuple__22);

  /* "View.MemoryView":288
 * 
 * cdef generic = Enum("<strided and direct or indirect>")
 * cdef strided = Enum("<strided and direct>") # default             # <<<<<<<<<<<<<<
 * cdef indirect = Enum("<strided and indirect>")
 * 
 */
  __pyx_tuple__23 = PyTuple_Pack(1, __pyx_kp_s_strided_and_direct); if (unlikely(!__pyx_tuple__23)) __PYX_ERR(2, 288, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__23);
  __Pyx_GIVEREF(__pyx_tuple__23);

  /* "View.MemoryView":289
 * cdef generic = Enum("<strided and direct or indirect>")
 * cdef strided = Enum("<strided and direct>") # default
 * cdef indirect = Enum("<strided and indirect>")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_tuple__24 = PyTuple_Pack(1, __pyx_kp_s_strided_and_indirect); if (unlikely(!__pyx_tuple__24)) __PYX_ERR(2, 289, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__24);
  __Pyx_GIVEREF(__pyx_tuple__24);

  /* "View.MemoryView":292
 * 
 * 
 * cdef contiguous = Enum("<contiguous and direct>")             # <<<<<<<<<<<<<<
 * cdef indirect_contiguous = Enum("<contiguous and indirect>")
 * 
 */
  __pyx_tuple__25 = PyTuple_Pack(1, __pyx_kp_s_contiguous_and_direct); if (unlikely(!__pyx_tuple__25)) __PYX_ERR(2, 292, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__25);
  __Pyx_GIVEREF(__pyx_tuple__25);

  /* "View.MemoryView":293
 * 
 * cdef contiguous = Enum("<contiguous and direct>")
 * cdef indirect_contiguous = Enum("<contiguous and indirect>")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_tuple__26 = PyTuple_Pack(1, __pyx_kp_s_contiguous_and_indirect); if (unlikely(!__pyx_tuple__26)) __PYX_ERR(2, 293, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__26);
  __Pyx_GIVEREF(__pyx_tuple__26);

  /* "(tree fragment)":1
 * def __pyx_unpickle_Enum(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */
  __pyx_tuple__27 = PyTuple_Pack(5, __pyx_n_s_pyx_type, __pyx_n_s_pyx_checksum, __pyx_n_s_pyx_state, __pyx_n_s_pyx_PickleError, __pyx_n_s_pyx_result); if (unlikely(!__pyx_tuple__27)) __PYX_ERR(2, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__27);
  __Pyx_GIVEREF(__pyx_tuple__27);
  __pyx_codeobj__28 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__27, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_pyx_unpickle_Enum, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__28)) __PYX_ERR(2, 1, __pyx_L1_error)
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1 = PyInt_FromLong(1); if (unlikely(!__pyx_int_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_112105877 = PyInt_FromLong(112105877L); if (unlikely(!__pyx_int_112105877)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_136983863 = PyInt_FromLong(136983863L); if (unlikely(!__pyx_int_136983863)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_184977713 = PyInt_FromLong(184977713L); if (unlikely(!__pyx_int_184977713)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_neg_1 = PyInt_FromLong(-1); if (unlikely(!__pyx_int_neg_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_modinit_global_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_import_code(void); /*proto*/

static int __Pyx_modinit_global_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_global_init_code", 0);
  /*--- Global init code ---*/
  generic = Py_None; Py_INCREF(Py_None);
  strided = Py_None; Py_INCREF(Py_None);
  indirect = Py_None; Py_INCREF(Py_None);
  contiguous = Py_None; Py_INCREF(Py_None);
  indirect_contiguous = Py_None; Py_INCREF(Py_None);
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_export_code", 0);
  /*--- Variable export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_export_code", 0);
  /*--- Function export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_type_init_code(void) {
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_init_code", 0);
  /*--- Type init code ---*/
  __pyx_vtabptr_array = &__pyx_vtable_array;
  __pyx_vtable_array.get_memview = (PyObject *(*)(struct __pyx_array_obj *))__pyx_array_get_memview;
  if (PyType_Ready(&__pyx_type___pyx_array) < 0) __PYX_ERR(2, 106, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type___pyx_array.tp_print = 0;
  #endif
  if (__Pyx_SetVtable(__pyx_type___pyx_array.tp_dict, __pyx_vtabptr_array) < 0) __PYX_ERR(2, 106, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type___pyx_array) < 0) __PYX_ERR(2, 106, __pyx_L1_error)
  __pyx_array_type = &__pyx_type___pyx_array;
  if (PyType_Ready(&__pyx_type___pyx_MemviewEnum) < 0) __PYX_ERR(2, 280, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type___pyx_MemviewEnum.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type___pyx_MemviewEnum.tp_dictoffset && __pyx_type___pyx_MemviewEnum.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type___pyx_MemviewEnum.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type___pyx_MemviewEnum) < 0) __PYX_ERR(2, 280, __pyx_L1_error)
  __pyx_MemviewEnum_type = &__pyx_type___pyx_MemviewEnum;
  __pyx_vtabptr_memoryview = &__pyx_vtable_memoryview;
  __pyx_vtable_memoryview.get_item_pointer = (char *(*)(struct __pyx_memoryview_obj *, PyObject *))__pyx_memoryview_get_item_pointer;
  __pyx_vtable_memoryview.is_slice = (PyObject *(*)(struct __pyx_memoryview_obj *, PyObject *))__pyx_memoryview_is_slice;
  __pyx_vtable_memoryview.setitem_slice_assignment = (PyObject *(*)(struct __pyx_memoryview_obj *, PyObject *, PyObject *))__pyx_memoryview_setitem_slice_assignment;
  __pyx_vtable_memoryview.setitem_slice_assign_scalar = (PyObject *(*)(struct __pyx_memoryview_obj *, struct __pyx_memoryview_obj *, PyObject *))__pyx_memoryview_setitem_slice_assign_scalar;
  __pyx_vtable_memoryview.setitem_indexed = (PyObject *(*)(struct __pyx_memoryview_obj *, PyObject *, PyObject *))__pyx_memoryview_setitem_indexed;
  __pyx_vtable_memoryview.convert_item_to_object = (PyObject *(*)(struct __pyx_memoryview_obj *, char *))__pyx_memoryview_convert_item_to_object;
  __pyx_vtable_memoryview.assign_item_from_object = (PyObject *(*)(struct __pyx_memoryview_obj *, char *, PyObject *))__pyx_memoryview_assign_item_from_object;
  if (PyType_Ready(&__pyx_type___pyx_memoryview) < 0) __PYX_ERR(2, 331, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type___pyx_memoryview.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type___pyx_memoryview.tp_dictoffset && __pyx_type___pyx_memoryview.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type___pyx_memoryview.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type___pyx_memoryview.tp_dict, __pyx_vtabptr_memoryview) < 0) __PYX_ERR(2, 331, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type___pyx_memoryview) < 0) __PYX_ERR(2, 331, __pyx_L1_error)
  __pyx_memoryview_type = &__pyx_type___pyx_memoryview;
  __pyx_vtabptr__memoryviewslice = &__pyx_vtable__memoryviewslice;
  __pyx_vtable__memoryviewslice.__pyx_base = *__pyx_vtabptr_memoryview;
  __pyx_vtable__memoryviewslice.__pyx_base.convert_item_to_object = (PyObject *(*)(struct __pyx_memoryview_obj *, char *))__pyx_memoryviewslice_convert_item_to_object;
  __pyx_vtable__memoryviewslice.__pyx_base.assign_item_from_object = (PyObject *(*)(struct __pyx_memoryview_obj *, char *, PyObject *))__pyx_memoryviewslice_assign_item_from_object;
  __pyx_type___pyx_memoryviewslice.tp_base = __pyx_memoryview_type;
  if (PyType_Ready(&__pyx_type___pyx_memoryviewslice) < 0) __PYX_ERR(2, 967, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type___pyx_memoryviewslice.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type___pyx_memoryviewslice.tp_dictoffset && __pyx_type___pyx_memoryviewslice.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type___pyx_memoryviewslice.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type___pyx_memoryviewslice.tp_dict, __pyx_vtabptr__memoryviewslice) < 0) __PYX_ERR(2, 967, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type___pyx_memoryviewslice) < 0) __PYX_ERR(2, 967, __pyx_L1_error)
  __pyx_memoryviewslice_type = &__pyx_type___pyx_memoryviewslice;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_type_import_code(void) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_import_code", 0);
  /*--- Type import code ---*/
  __pyx_t_1 = PyImport_ImportModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 9, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7cpython_4type_type = __Pyx_ImportType(__pyx_t_1, __Pyx_BUILTIN_MODULE_NAME, "type", 
  #if defined(PYPY_VERSION_NUM) && PYPY_VERSION_NUM < 0x050B0000
  sizeof(PyTypeObject),
  #else
  sizeof(PyHeapTypeObject),
  #endif
  __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_7cpython_4type_type) __PYX_ERR(3, 9, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("numpy"); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 199, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_5numpy_dtype = __Pyx_ImportType(__pyx_t_1, "numpy", "dtype", sizeof(PyArray_Descr), __Pyx_ImportType_CheckSize_Ignore);
   if (!__pyx_ptype_5numpy_dtype) __PYX_ERR(1, 199, __pyx_L1_error)
  __pyx_ptype_5numpy_flatiter = __Pyx_ImportType(__pyx_t_1, "numpy", "flatiter", sizeof(PyArrayIterObject), __Pyx_ImportType_CheckSize_Ignore);
   if (!__pyx_ptype_5numpy_flatiter) __PYX_ERR(1, 222, __pyx_L1_error)
  __pyx_ptype_5numpy_broadcast = __Pyx_ImportType(__pyx_t_1, "numpy", "broadcast", sizeof(PyArrayMultiIterObject), __Pyx_ImportType_CheckSize_Ignore);
   if (!__pyx_ptype_5numpy_broadcast) __PYX_ERR(1, 226, __pyx_L1_error)
  __pyx_ptype_5numpy_ndarray = __Pyx_ImportType(__pyx_t_1, "numpy", "ndarray", sizeof(PyArrayObject), __Pyx_ImportType_CheckSize_Ignore);
   if (!__pyx_ptype_5numpy_ndarray) __PYX_ERR(1, 238, __pyx_L1_error)
  __pyx_ptype_5numpy_generic = __Pyx_ImportType(__pyx_t_1, "numpy", "generic", sizeof(PyObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5numpy_generic) __PYX_ERR(1, 770, __pyx_L1_error)
  __pyx_ptype_5numpy_number = __Pyx_ImportType(__pyx_t_1, "numpy", "number", sizeof(PyObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5numpy_number) __PYX_ERR(1, 772, __pyx_L1_error)
  __pyx_ptype_5numpy_integer = __Pyx_ImportType(__pyx_t_1, "numpy", "integer", sizeof(PyObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5numpy_integer) __PYX_ERR(1, 774, __pyx_L1_error)
  __pyx_ptype_5numpy_signedinteger = __Pyx_ImportType(__pyx_t_1, "numpy", "signedinteger", sizeof(PyObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5numpy_signedinteger) __PYX_ERR(1, 776, __pyx_L1_error)
  __pyx_ptype_5numpy_unsignedinteger = __Pyx_ImportType(__pyx_t_1, "numpy", "unsignedinteger", sizeof(PyObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5numpy_unsignedinteger) __PYX_ERR(1, 778, __pyx_L1_error)
  __pyx_ptype_5numpy_inexact = __Pyx_ImportType(__pyx_t_1, "numpy", "inexact", sizeof(PyObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5numpy_inexact) __PYX_ERR(1, 780, __pyx_L1_error)
  __pyx_ptype_5numpy_floating = __Pyx_ImportType(__pyx_t_1, "numpy", "floating", sizeof(PyObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5numpy_floating) __PYX_ERR(1, 782, __pyx_L1_error)
  __pyx_ptype_5numpy_complexfloating = __Pyx_ImportType(__pyx_t_1, "numpy", "complexfloating", sizeof(PyObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5numpy_complexfloating) __PYX_ERR(1, 784, __pyx_L1_error)
  __pyx_ptype_5numpy_flexible = __Pyx_ImportType(__pyx_t_1, "numpy", "flexible", sizeof(PyObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5numpy_flexible) __PYX_ERR(1, 786, __pyx_L1_error)
  __pyx_ptype_5numpy_character = __Pyx_ImportType(__pyx_t_1, "numpy", "character", sizeof(PyObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5numpy_character) __PYX_ERR(1, 788, __pyx_L1_error)
  __pyx_ptype_5numpy_ufunc = __Pyx_ImportType(__pyx_t_1, "numpy", "ufunc", sizeof(PyUFuncObject), __Pyx_ImportType_CheckSize_Ignore);
   if (!__pyx_ptype_5numpy_ufunc) __PYX_ERR(1, 826, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_variable_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_import_code", 0);
  /*--- Variable import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_import_code", 0);
  /*--- Function import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}


#ifndef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#elif PY_MAJOR_VERSION < 3
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" void
#else
#define __Pyx_PyMODINIT_FUNC void
#endif
#else
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" PyObject *
#else
#define __Pyx_PyMODINIT_FUNC PyObject *
#endif
#endif


#if PY_MAJOR_VERSION < 3
__Pyx_PyMODINIT_FUNC initfmsne_implem(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC initfmsne_implem(void)
#else
__Pyx_PyMODINIT_FUNC PyInit_fmsne_implem(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC PyInit_fmsne_implem(void)
#if CYTHON_PEP489_MULTI_PHASE_INIT
{
  return PyModuleDef_Init(&__pyx_moduledef);
}
static CYTHON_SMALL_CODE int __Pyx_check_single_interpreter(void) {
    #if PY_VERSION_HEX >= 0x030700A1
    static PY_INT64_T main_interpreter_id = -1;
    PY_INT64_T current_id = PyInterpreterState_GetID(PyThreadState_Get()->interp);
    if (main_interpreter_id == -1) {
        main_interpreter_id = current_id;
        return (unlikely(current_id == -1)) ? -1 : 0;
    } else if (unlikely(main_interpreter_id != current_id))
    #else
    static PyInterpreterState *main_interpreter = NULL;
    PyInterpreterState *current_interpreter = PyThreadState_Get()->interp;
    if (!main_interpreter) {
        main_interpreter = current_interpreter;
    } else if (unlikely(main_interpreter != current_interpreter))
    #endif
    {
        PyErr_SetString(
            PyExc_ImportError,
            "Interpreter change detected - this module can only be loaded into one interpreter per process.");
        return -1;
    }
    return 0;
}
static CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *moddict, const char* from_name, const char* to_name, int allow_none) {
    PyObject *value = PyObject_GetAttrString(spec, from_name);
    int result = 0;
    if (likely(value)) {
        if (allow_none || value != Py_None) {
            result = PyDict_SetItemString(moddict, to_name, value);
        }
        Py_DECREF(value);
    } else if (PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Clear();
    } else {
        result = -1;
    }
    return result;
}
static CYTHON_SMALL_CODE PyObject* __pyx_pymod_create(PyObject *spec, CYTHON_UNUSED PyModuleDef *def) {
    PyObject *module = NULL, *moddict, *modname;
    if (__Pyx_check_single_interpreter())
        return NULL;
    if (__pyx_m)
        return __Pyx_NewRef(__pyx_m);
    modname = PyObject_GetAttrString(spec, "name");
    if (unlikely(!modname)) goto bad;
    module = PyModule_NewObject(modname);
    Py_DECREF(modname);
    if (unlikely(!module)) goto bad;
    moddict = PyModule_GetDict(module);
    if (unlikely(!moddict)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "loader", "__loader__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "origin", "__file__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "parent", "__package__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "submodule_search_locations", "__path__", 0) < 0)) goto bad;
    return module;
bad:
    Py_XDECREF(module);
    return NULL;
}


static CYTHON_SMALL_CODE int __pyx_pymod_exec_fmsne_implem(PyObject *__pyx_pyinit_module)
#endif
#endif
{
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  double __pyx_t_5;
  static PyThread_type_lock __pyx_t_6[8];
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  if (__pyx_m) {
    if (__pyx_m == __pyx_pyinit_module) return 0;
    PyErr_SetString(PyExc_RuntimeError, "Module 'fmsne_implem' has already been imported. Re-initialisation is not supported.");
    return -1;
  }
  #elif PY_MAJOR_VERSION >= 3
  if (__pyx_m) return __Pyx_NewRef(__pyx_m);
  #endif
  #if CYTHON_REFNANNY
__Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
if (!__Pyx_RefNanny) {
  PyErr_Clear();
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
  if (!__Pyx_RefNanny)
      Py_FatalError("failed to import 'refnanny' module");
}
#endif
  __Pyx_RefNannySetupContext("__Pyx_PyMODINIT_FUNC PyInit_fmsne_implem(void)", 0);
  if (__Pyx_check_binary_version() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pxy_PyFrame_Initialize_Offsets
  __Pxy_PyFrame_Initialize_Offsets();
  #endif
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_AsyncGen_USED
  if (__pyx_AsyncGen_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(WITH_THREAD) && PY_VERSION_HEX < 0x030700F0 && defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  PyEval_InitThreads();
  #endif
  /*--- Module creation code ---*/
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  __pyx_m = __pyx_pyinit_module;
  Py_INCREF(__pyx_m);
  #else
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("fmsne_implem", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_b);
  __pyx_cython_runtime = PyImport_AddModule((char *) "cython_runtime"); if (unlikely(!__pyx_cython_runtime)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_cython_runtime);
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_fmsne_implem) {
    if (PyObject_SetAttr(__pyx_m, __pyx_n_s_name_2, __pyx_n_s_main) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(0, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "fmsne_implem")) {
      if (unlikely(PyDict_SetItemString(modules, "fmsne_implem", __pyx_m) < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Global type/function init code ---*/
  (void)__Pyx_modinit_global_init_code();
  (void)__Pyx_modinit_variable_export_code();
  (void)__Pyx_modinit_function_export_code();
  if (unlikely(__Pyx_modinit_type_init_code() < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
  if (unlikely(__Pyx_modinit_type_import_code() < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
  (void)__Pyx_modinit_variable_import_code();
  (void)__Pyx_modinit_function_import_code();
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif

  /* "fmsne_implem.pyx":35
 * 
 * # Numpy is needed to define FLOAT64_EPS. 'cimport' is used to import compile-time information about the numpy module.
 * import numpy as np             # <<<<<<<<<<<<<<
 * cimport numpy as np
 * # Importing some functions from the C math library
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_numpy, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 35, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_np, __pyx_t_1) < 0) __PYX_ERR(0, 35, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "fmsne_implem.pyx":57
 * 
 * # If some double is smaller than EPSILON_DBL in magnitude, it is considered as close to zero.
 * cdef double EPSILON_DBL = 1e-8             # <<<<<<<<<<<<<<
 * 
 * # To avoid dividing by zeros in similarity-related quantities.
 */
  __pyx_v_12fmsne_implem_EPSILON_DBL = 1e-8;

  /* "fmsne_implem.pyx":60
 * 
 * # To avoid dividing by zeros in similarity-related quantities.
 * cdef double FLOAT64_EPS = np.finfo(dtype=np.float64).eps             # <<<<<<<<<<<<<<
 * 
 * #######################################################
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 60, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_finfo); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 60, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 60, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 60, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_float64); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 60, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_dtype, __pyx_t_4) < 0) __PYX_ERR(0, 60, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_empty_tuple, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 60, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_eps); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 60, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 60, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_12fmsne_implem_FLOAT64_EPS = __pyx_t_5;

  /* "fmsne_implem.pyx":1
 * # distutils: language = c++             # <<<<<<<<<<<<<<
 * 
 * #cython: binding=False
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_1) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "View.MemoryView":210
 *         info.obj = self
 * 
 *     __pyx_getbuffer = capsule(<void *> &__pyx_array_getbuffer, "getbuffer(obj, view, flags)")             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(array self):
 */
  __pyx_t_1 = __pyx_capsule_create(((void *)(&__pyx_array_getbuffer)), ((char *)"getbuffer(obj, view, flags)")); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 210, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem((PyObject *)__pyx_array_type->tp_dict, __pyx_n_s_pyx_getbuffer, __pyx_t_1) < 0) __PYX_ERR(2, 210, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_array_type);

  /* "View.MemoryView":287
 *         return self.name
 * 
 * cdef generic = Enum("<strided and direct or indirect>")             # <<<<<<<<<<<<<<
 * cdef strided = Enum("<strided and direct>") # default
 * cdef indirect = Enum("<strided and indirect>")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_MemviewEnum_type), __pyx_tuple__22, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 287, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_XGOTREF(generic);
  __Pyx_DECREF_SET(generic, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "View.MemoryView":288
 * 
 * cdef generic = Enum("<strided and direct or indirect>")
 * cdef strided = Enum("<strided and direct>") # default             # <<<<<<<<<<<<<<
 * cdef indirect = Enum("<strided and indirect>")
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_MemviewEnum_type), __pyx_tuple__23, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 288, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_XGOTREF(strided);
  __Pyx_DECREF_SET(strided, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "View.MemoryView":289
 * cdef generic = Enum("<strided and direct or indirect>")
 * cdef strided = Enum("<strided and direct>") # default
 * cdef indirect = Enum("<strided and indirect>")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_MemviewEnum_type), __pyx_tuple__24, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 289, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_XGOTREF(indirect);
  __Pyx_DECREF_SET(indirect, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "View.MemoryView":292
 * 
 * 
 * cdef contiguous = Enum("<contiguous and direct>")             # <<<<<<<<<<<<<<
 * cdef indirect_contiguous = Enum("<contiguous and indirect>")
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_MemviewEnum_type), __pyx_tuple__25, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 292, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_XGOTREF(contiguous);
  __Pyx_DECREF_SET(contiguous, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "View.MemoryView":293
 * 
 * cdef contiguous = Enum("<contiguous and direct>")
 * cdef indirect_contiguous = Enum("<contiguous and indirect>")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_MemviewEnum_type), __pyx_tuple__26, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 293, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_XGOTREF(indirect_contiguous);
  __Pyx_DECREF_SET(indirect_contiguous, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "View.MemoryView":317
 * 
 * DEF THREAD_LOCKS_PREALLOCATED = 8
 * cdef int __pyx_memoryview_thread_locks_used = 0             # <<<<<<<<<<<<<<
 * cdef PyThread_type_lock[THREAD_LOCKS_PREALLOCATED] __pyx_memoryview_thread_locks = [
 *     PyThread_allocate_lock(),
 */
  __pyx_memoryview_thread_locks_used = 0;

  /* "View.MemoryView":318
 * DEF THREAD_LOCKS_PREALLOCATED = 8
 * cdef int __pyx_memoryview_thread_locks_used = 0
 * cdef PyThread_type_lock[THREAD_LOCKS_PREALLOCATED] __pyx_memoryview_thread_locks = [             # <<<<<<<<<<<<<<
 *     PyThread_allocate_lock(),
 *     PyThread_allocate_lock(),
 */
  __pyx_t_6[0] = PyThread_allocate_lock();
  __pyx_t_6[1] = PyThread_allocate_lock();
  __pyx_t_6[2] = PyThread_allocate_lock();
  __pyx_t_6[3] = PyThread_allocate_lock();
  __pyx_t_6[4] = PyThread_allocate_lock();
  __pyx_t_6[5] = PyThread_allocate_lock();
  __pyx_t_6[6] = PyThread_allocate_lock();
  __pyx_t_6[7] = PyThread_allocate_lock();
  memcpy(&(__pyx_memoryview_thread_locks[0]), __pyx_t_6, sizeof(__pyx_memoryview_thread_locks[0]) * (8));

  /* "View.MemoryView":551
 *         info.obj = self
 * 
 *     __pyx_getbuffer = capsule(<void *> &__pyx_memoryview_getbuffer, "getbuffer(obj, view, flags)")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __pyx_capsule_create(((void *)(&__pyx_memoryview_getbuffer)), ((char *)"getbuffer(obj, view, flags)")); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 551, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem((PyObject *)__pyx_memoryview_type->tp_dict, __pyx_n_s_pyx_getbuffer, __pyx_t_1) < 0) __PYX_ERR(2, 551, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_memoryview_type);

  /* "View.MemoryView":997
 *         return self.from_object
 * 
 *     __pyx_getbuffer = capsule(<void *> &__pyx_memoryview_getbuffer, "getbuffer(obj, view, flags)")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __pyx_capsule_create(((void *)(&__pyx_memoryview_getbuffer)), ((char *)"getbuffer(obj, view, flags)")); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 997, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem((PyObject *)__pyx_memoryviewslice_type->tp_dict, __pyx_n_s_pyx_getbuffer, __pyx_t_1) < 0) __PYX_ERR(2, 997, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_memoryviewslice_type);

  /* "(tree fragment)":1
 * def __pyx_unpickle_Enum(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_15View_dot_MemoryView_1__pyx_unpickle_Enum, NULL, __pyx_n_s_View_MemoryView); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pyx_unpickle_Enum, __pyx_t_1) < 0) __PYX_ERR(2, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":11
 *         __pyx_unpickle_Enum__set_state(<Enum> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_Enum__set_state(Enum __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.name = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
 */

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init fmsne_implem", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    Py_CLEAR(__pyx_m);
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init fmsne_implem");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  return (__pyx_m != NULL) ? 0 : -1;
  #elif PY_MAJOR_VERSION >= 3
  return __pyx_m;
  #else
  return;
  #endif
}

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule(modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, "RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* PyObjectGetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#endif

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* RaiseArgTupleInvalid */
static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* RaiseDoubleKeywords */
static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (__Pyx_PyUnicode_GET_LENGTH(**name) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (__Pyx_PyUnicode_GET_LENGTH(**argname) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

/* MemviewSliceInit */
static int
__Pyx_init_memviewslice(struct __pyx_memoryview_obj *memview,
                        int ndim,
                        __Pyx_memviewslice *memviewslice,
                        int memview_is_new_reference)
{
    __Pyx_RefNannyDeclarations
    int i, retval=-1;
    Py_buffer *buf = &memview->view;
    __Pyx_RefNannySetupContext("init_memviewslice", 0);
    if (unlikely(memviewslice->memview || memviewslice->data)) {
        PyErr_SetString(PyExc_ValueError,
            "memviewslice is already initialized!");
        goto fail;
    }
    if (buf->strides) {
        for (i = 0; i < ndim; i++) {
            memviewslice->strides[i] = buf->strides[i];
        }
    } else {
        Py_ssize_t stride = buf->itemsize;
        for (i = ndim - 1; i >= 0; i--) {
            memviewslice->strides[i] = stride;
            stride *= buf->shape[i];
        }
    }
    for (i = 0; i < ndim; i++) {
        memviewslice->shape[i]   = buf->shape[i];
        if (buf->suboffsets) {
            memviewslice->suboffsets[i] = buf->suboffsets[i];
        } else {
            memviewslice->suboffsets[i] = -1;
        }
    }
    memviewslice->memview = memview;
    memviewslice->data = (char *)buf->buf;
    if (__pyx_add_acquisition_count(memview) == 0 && !memview_is_new_reference) {
        Py_INCREF(memview);
    }
    retval = 0;
    goto no_fail;
fail:
    memviewslice->memview = 0;
    memviewslice->data = 0;
    retval = -1;
no_fail:
    __Pyx_RefNannyFinishContext();
    return retval;
}
#ifndef Py_NO_RETURN
#define Py_NO_RETURN
#endif
static void __pyx_fatalerror(const char *fmt, ...) Py_NO_RETURN {
    va_list vargs;
    char msg[200];
#if PY_VERSION_HEX >= 0x030A0000 || defined(HAVE_STDARG_PROTOTYPES)
    va_start(vargs, fmt);
#else
    va_start(vargs);
#endif
    vsnprintf(msg, 200, fmt, vargs);
    va_end(vargs);
    Py_FatalError(msg);
}
static CYTHON_INLINE int
__pyx_add_acquisition_count_locked(__pyx_atomic_int *acquisition_count,
                                   PyThread_type_lock lock)
{
    int result;
    PyThread_acquire_lock(lock, 1);
    result = (*acquisition_count)++;
    PyThread_release_lock(lock);
    return result;
}
static CYTHON_INLINE int
__pyx_sub_acquisition_count_locked(__pyx_atomic_int *acquisition_count,
                                   PyThread_type_lock lock)
{
    int result;
    PyThread_acquire_lock(lock, 1);
    result = (*acquisition_count)--;
    PyThread_release_lock(lock);
    return result;
}
static CYTHON_INLINE void
__Pyx_INC_MEMVIEW(__Pyx_memviewslice *memslice, int have_gil, int lineno)
{
    int first_time;
    struct __pyx_memoryview_obj *memview = memslice->memview;
    if (unlikely(!memview || (PyObject *) memview == Py_None))
        return;
    if (unlikely(__pyx_get_slice_count(memview) < 0))
        __pyx_fatalerror("Acquisition count is %d (line %d)",
                         __pyx_get_slice_count(memview), lineno);
    first_time = __pyx_add_acquisition_count(memview) == 0;
    if (unlikely(first_time)) {
        if (have_gil) {
            Py_INCREF((PyObject *) memview);
        } else {
            PyGILState_STATE _gilstate = PyGILState_Ensure();
            Py_INCREF((PyObject *) memview);
            PyGILState_Release(_gilstate);
        }
    }
}
static CYTHON_INLINE void __Pyx_XDEC_MEMVIEW(__Pyx_memviewslice *memslice,
                                             int have_gil, int lineno) {
    int last_time;
    struct __pyx_memoryview_obj *memview = memslice->memview;
    if (unlikely(!memview || (PyObject *) memview == Py_None)) {
        memslice->memview = NULL;
        return;
    }
    if (unlikely(__pyx_get_slice_count(memview) <= 0))
        __pyx_fatalerror("Acquisition count is %d (line %d)",
                         __pyx_get_slice_count(memview), lineno);
    last_time = __pyx_sub_acquisition_count(memview) == 1;
    memslice->data = NULL;
    if (unlikely(last_time)) {
        if (have_gil) {
            Py_CLEAR(memslice->memview);
        } else {
            PyGILState_STATE _gilstate = PyGILState_Ensure();
            Py_CLEAR(memslice->memview);
            PyGILState_Release(_gilstate);
        }
    } else {
        memslice->memview = NULL;
    }
}

/* GetTopmostException */
#if CYTHON_USE_EXC_INFO_STACK
static _PyErr_StackItem *
__Pyx_PyErr_GetTopmostException(PyThreadState *tstate)
{
    _PyErr_StackItem *exc_info = tstate->exc_info;
    while ((exc_info->exc_type == NULL || exc_info->exc_type == Py_None) &&
           exc_info->previous_item != NULL)
    {
        exc_info = exc_info->previous_item;
    }
    return exc_info;
}
#endif

/* SaveResetException */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = __Pyx_PyErr_GetTopmostException(tstate);
    *type = exc_info->exc_type;
    *value = exc_info->exc_value;
    *tb = exc_info->exc_traceback;
    #else
    *type = tstate->exc_type;
    *value = tstate->exc_value;
    *tb = tstate->exc_traceback;
    #endif
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
}
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = tstate->exc_info;
    tmp_type = exc_info->exc_type;
    tmp_value = exc_info->exc_value;
    tmp_tb = exc_info->exc_traceback;
    exc_info->exc_type = type;
    exc_info->exc_value = value;
    exc_info->exc_traceback = tb;
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = type;
    tstate->exc_value = value;
    tstate->exc_traceback = tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
#endif

/* PyErrExceptionMatches */
#if CYTHON_FAST_THREAD_STATE
static int __Pyx_PyErr_ExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        if (__Pyx_PyErr_GivenExceptionMatches(exc_type, PyTuple_GET_ITEM(tuple, i))) return 1;
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err) {
    PyObject *exc_type = tstate->curexc_type;
    if (exc_type == err) return 1;
    if (unlikely(!exc_type)) return 0;
    if (unlikely(PyTuple_Check(err)))
        return __Pyx_PyErr_ExceptionMatchesTuple(exc_type, err);
    return __Pyx_PyErr_GivenExceptionMatches(exc_type, err);
}
#endif

/* GetException */
#if CYTHON_FAST_THREAD_STATE
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb)
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb)
#endif
{
    PyObject *local_type, *local_value, *local_tb;
#if CYTHON_FAST_THREAD_STATE
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    local_type = tstate->curexc_type;
    local_value = tstate->curexc_value;
    local_tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#else
    PyErr_Fetch(&local_type, &local_value, &local_tb);
#endif
    PyErr_NormalizeException(&local_type, &local_value, &local_tb);
#if CYTHON_FAST_THREAD_STATE
    if (unlikely(tstate->curexc_type))
#else
    if (unlikely(PyErr_Occurred()))
#endif
        goto bad;
    #if PY_MAJOR_VERSION >= 3
    if (local_tb) {
        if (unlikely(PyException_SetTraceback(local_value, local_tb) < 0))
            goto bad;
    }
    #endif
    Py_XINCREF(local_tb);
    Py_XINCREF(local_type);
    Py_XINCREF(local_value);
    *type = local_type;
    *value = local_value;
    *tb = local_tb;
#if CYTHON_FAST_THREAD_STATE
    #if CYTHON_USE_EXC_INFO_STACK
    {
        _PyErr_StackItem *exc_info = tstate->exc_info;
        tmp_type = exc_info->exc_type;
        tmp_value = exc_info->exc_value;
        tmp_tb = exc_info->exc_traceback;
        exc_info->exc_type = local_type;
        exc_info->exc_value = local_value;
        exc_info->exc_traceback = local_tb;
    }
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = local_type;
    tstate->exc_value = local_value;
    tstate->exc_traceback = local_tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_SetExcInfo(local_type, local_value, local_tb);
#endif
    return 0;
bad:
    *type = 0;
    *value = 0;
    *tb = 0;
    Py_XDECREF(local_type);
    Py_XDECREF(local_value);
    Py_XDECREF(local_tb);
    return -1;
}

/* PyObjectCall */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = Py_TYPE(func)->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyErrFetchRestore */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}
#endif

/* RaiseException */
#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    __Pyx_PyThreadState_declare
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_PyThreadState_assign
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
    if (cause) {
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
#if CYTHON_COMPILING_IN_PYPY
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#else
        PyThreadState *tstate = __Pyx_PyThreadState_Current;
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

/* ArgTypeTest */
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact)
{
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    else if (exact) {
        #if PY_MAJOR_VERSION == 2
        if ((type == &PyBaseString_Type) && likely(__Pyx_PyBaseString_CheckExact(obj))) return 1;
        #endif
    }
    else {
        if (likely(__Pyx_TypeCheck(obj, type))) return 1;
    }
    PyErr_Format(PyExc_TypeError,
        "Argument '%.200s' has incorrect type (expected %.200s, got %.200s)",
        name, type->tp_name, Py_TYPE(obj)->tp_name);
    return 0;
}

/* PyCFunctionFastCall */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject * __Pyx_PyCFunction_FastCall(PyObject *func_obj, PyObject **args, Py_ssize_t nargs) {
    PyCFunctionObject *func = (PyCFunctionObject*)func_obj;
    PyCFunction meth = PyCFunction_GET_FUNCTION(func);
    PyObject *self = PyCFunction_GET_SELF(func);
    int flags = PyCFunction_GET_FLAGS(func);
    assert(PyCFunction_Check(func));
    assert(METH_FASTCALL == (flags & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)));
    assert(nargs >= 0);
    assert(nargs == 0 || args != NULL);
    /* _PyCFunction_FastCallDict() must not be called with an exception set,
       because it may clear it (directly or indirectly) and so the
       caller loses its exception */
    assert(!PyErr_Occurred());
    if ((PY_VERSION_HEX < 0x030700A0) || unlikely(flags & METH_KEYWORDS)) {
        return (*((__Pyx_PyCFunctionFastWithKeywords)(void*)meth)) (self, args, nargs, NULL);
    } else {
        return (*((__Pyx_PyCFunctionFast)(void*)meth)) (self, args, nargs);
    }
}
#endif

/* PyFunctionFastCall */
#if CYTHON_FAST_PYCALL
static PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject **args, Py_ssize_t na,
                                               PyObject *globals) {
    PyFrameObject *f;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject **fastlocals;
    Py_ssize_t i;
    PyObject *result;
    assert(globals != NULL);
    /* XXX Perhaps we should create a specialized
       PyFrame_New() that doesn't take locals, but does
       take builtins without sanity checking them.
       */
    assert(tstate != NULL);
    f = PyFrame_New(tstate, co, globals, NULL);
    if (f == NULL) {
        return NULL;
    }
    fastlocals = __Pyx_PyFrame_GetLocalsplus(f);
    for (i = 0; i < na; i++) {
        Py_INCREF(*args);
        fastlocals[i] = *args++;
    }
    result = PyEval_EvalFrameEx(f,0);
    ++tstate->recursion_depth;
    Py_DECREF(f);
    --tstate->recursion_depth;
    return result;
}
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs) {
    PyCodeObject *co = (PyCodeObject *)PyFunction_GET_CODE(func);
    PyObject *globals = PyFunction_GET_GLOBALS(func);
    PyObject *argdefs = PyFunction_GET_DEFAULTS(func);
    PyObject *closure;
#if PY_MAJOR_VERSION >= 3
    PyObject *kwdefs;
#endif
    PyObject *kwtuple, **k;
    PyObject **d;
    Py_ssize_t nd;
    Py_ssize_t nk;
    PyObject *result;
    assert(kwargs == NULL || PyDict_Check(kwargs));
    nk = kwargs ? PyDict_Size(kwargs) : 0;
    if (Py_EnterRecursiveCall((char*)" while calling a Python object")) {
        return NULL;
    }
    if (
#if PY_MAJOR_VERSION >= 3
            co->co_kwonlyargcount == 0 &&
#endif
            likely(kwargs == NULL || nk == 0) &&
            co->co_flags == (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)) {
        if (argdefs == NULL && co->co_argcount == nargs) {
            result = __Pyx_PyFunction_FastCallNoKw(co, args, nargs, globals);
            goto done;
        }
        else if (nargs == 0 && argdefs != NULL
                 && co->co_argcount == Py_SIZE(argdefs)) {
            /* function called with no arguments, but all parameters have
               a default value: use default values as arguments .*/
            args = &PyTuple_GET_ITEM(argdefs, 0);
            result =__Pyx_PyFunction_FastCallNoKw(co, args, Py_SIZE(argdefs), globals);
            goto done;
        }
    }
    if (kwargs != NULL) {
        Py_ssize_t pos, i;
        kwtuple = PyTuple_New(2 * nk);
        if (kwtuple == NULL) {
            result = NULL;
            goto done;
        }
        k = &PyTuple_GET_ITEM(kwtuple, 0);
        pos = i = 0;
        while (PyDict_Next(kwargs, &pos, &k[i], &k[i+1])) {
            Py_INCREF(k[i]);
            Py_INCREF(k[i+1]);
            i += 2;
        }
        nk = i / 2;
    }
    else {
        kwtuple = NULL;
        k = NULL;
    }
    closure = PyFunction_GET_CLOSURE(func);
#if PY_MAJOR_VERSION >= 3
    kwdefs = PyFunction_GET_KW_DEFAULTS(func);
#endif
    if (argdefs != NULL) {
        d = &PyTuple_GET_ITEM(argdefs, 0);
        nd = Py_SIZE(argdefs);
    }
    else {
        d = NULL;
        nd = 0;
    }
#if PY_MAJOR_VERSION >= 3
    result = PyEval_EvalCodeEx((PyObject*)co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, kwdefs, closure);
#else
    result = PyEval_EvalCodeEx(co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, closure);
#endif
    Py_XDECREF(kwtuple);
done:
    Py_LeaveRecursiveCall();
    return result;
}
#endif
#endif

/* PyObjectCall2Args */
static CYTHON_UNUSED PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2) {
    PyObject *args, *result = NULL;
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(function)) {
        PyObject *args[2] = {arg1, arg2};
        return __Pyx_PyFunction_FastCall(function, args, 2);
    }
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(function)) {
        PyObject *args[2] = {arg1, arg2};
        return __Pyx_PyCFunction_FastCall(function, args, 2);
    }
    #endif
    args = PyTuple_New(2);
    if (unlikely(!args)) goto done;
    Py_INCREF(arg1);
    PyTuple_SET_ITEM(args, 0, arg1);
    Py_INCREF(arg2);
    PyTuple_SET_ITEM(args, 1, arg2);
    Py_INCREF(function);
    result = __Pyx_PyObject_Call(function, args, NULL);
    Py_DECREF(args);
    Py_DECREF(function);
done:
    return result;
}

/* PyObjectCallMethO */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallOneArg */
#if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_New(1);
    if (unlikely(!args)) return NULL;
    Py_INCREF(arg);
    PyTuple_SET_ITEM(args, 0, arg);
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, &arg, 1);
    }
#endif
    if (likely(PyCFunction_Check(func))) {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
            return __Pyx_PyObject_CallMethO(func, arg);
#if CYTHON_FAST_PYCCALL
        } else if (__Pyx_PyFastCFunction_Check(func)) {
            return __Pyx_PyCFunction_FastCall(func, &arg, 1);
#endif
        }
    }
    return __Pyx__PyObject_CallOneArg(func, arg);
}
#else
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_Pack(1, arg);
    if (unlikely(!args)) return NULL;
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
#endif

/* BytesEquals */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY
    return PyObject_RichCompareBool(s1, s2, equals);
#else
    if (s1 == s2) {
        return (equals == Py_EQ);
    } else if (PyBytes_CheckExact(s1) & PyBytes_CheckExact(s2)) {
        const char *ps1, *ps2;
        Py_ssize_t length = PyBytes_GET_SIZE(s1);
        if (length != PyBytes_GET_SIZE(s2))
            return (equals == Py_NE);
        ps1 = PyBytes_AS_STRING(s1);
        ps2 = PyBytes_AS_STRING(s2);
        if (ps1[0] != ps2[0]) {
            return (equals == Py_NE);
        } else if (length == 1) {
            return (equals == Py_EQ);
        } else {
            int result;
#if CYTHON_USE_UNICODE_INTERNALS && (PY_VERSION_HEX < 0x030B0000)
            Py_hash_t hash1, hash2;
            hash1 = ((PyBytesObject*)s1)->ob_shash;
            hash2 = ((PyBytesObject*)s2)->ob_shash;
            if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {
                return (equals == Py_NE);
            }
#endif
            result = memcmp(ps1, ps2, (size_t)length);
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & PyBytes_CheckExact(s2)) {
        return (equals == Py_NE);
    } else if ((s2 == Py_None) & PyBytes_CheckExact(s1)) {
        return (equals == Py_NE);
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
#endif
}

/* UnicodeEquals */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY
    return PyObject_RichCompareBool(s1, s2, equals);
#else
#if PY_MAJOR_VERSION < 3
    PyObject* owned_ref = NULL;
#endif
    int s1_is_unicode, s2_is_unicode;
    if (s1 == s2) {
        goto return_eq;
    }
    s1_is_unicode = PyUnicode_CheckExact(s1);
    s2_is_unicode = PyUnicode_CheckExact(s2);
#if PY_MAJOR_VERSION < 3
    if ((s1_is_unicode & (!s2_is_unicode)) && PyString_CheckExact(s2)) {
        owned_ref = PyUnicode_FromObject(s2);
        if (unlikely(!owned_ref))
            return -1;
        s2 = owned_ref;
        s2_is_unicode = 1;
    } else if ((s2_is_unicode & (!s1_is_unicode)) && PyString_CheckExact(s1)) {
        owned_ref = PyUnicode_FromObject(s1);
        if (unlikely(!owned_ref))
            return -1;
        s1 = owned_ref;
        s1_is_unicode = 1;
    } else if (((!s2_is_unicode) & (!s1_is_unicode))) {
        return __Pyx_PyBytes_Equals(s1, s2, equals);
    }
#endif
    if (s1_is_unicode & s2_is_unicode) {
        Py_ssize_t length;
        int kind;
        void *data1, *data2;
        if (unlikely(__Pyx_PyUnicode_READY(s1) < 0) || unlikely(__Pyx_PyUnicode_READY(s2) < 0))
            return -1;
        length = __Pyx_PyUnicode_GET_LENGTH(s1);
        if (length != __Pyx_PyUnicode_GET_LENGTH(s2)) {
            goto return_ne;
        }
#if CYTHON_USE_UNICODE_INTERNALS
        {
            Py_hash_t hash1, hash2;
        #if CYTHON_PEP393_ENABLED
            hash1 = ((PyASCIIObject*)s1)->hash;
            hash2 = ((PyASCIIObject*)s2)->hash;
        #else
            hash1 = ((PyUnicodeObject*)s1)->hash;
            hash2 = ((PyUnicodeObject*)s2)->hash;
        #endif
            if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {
                goto return_ne;
            }
        }
#endif
        kind = __Pyx_PyUnicode_KIND(s1);
        if (kind != __Pyx_PyUnicode_KIND(s2)) {
            goto return_ne;
        }
        data1 = __Pyx_PyUnicode_DATA(s1);
        data2 = __Pyx_PyUnicode_DATA(s2);
        if (__Pyx_PyUnicode_READ(kind, data1, 0) != __Pyx_PyUnicode_READ(kind, data2, 0)) {
            goto return_ne;
        } else if (length == 1) {
            goto return_eq;
        } else {
            int result = memcmp(data1, data2, (size_t)(length * kind));
            #if PY_MAJOR_VERSION < 3
            Py_XDECREF(owned_ref);
            #endif
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & s2_is_unicode) {
        goto return_ne;
    } else if ((s2 == Py_None) & s1_is_unicode) {
        goto return_ne;
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        #if PY_MAJOR_VERSION < 3
        Py_XDECREF(owned_ref);
        #endif
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
return_eq:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_EQ);
return_ne:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_NE);
#endif
}

/* GetAttr */
static CYTHON_INLINE PyObject *__Pyx_GetAttr(PyObject *o, PyObject *n) {
#if CYTHON_USE_TYPE_SLOTS
#if PY_MAJOR_VERSION >= 3
    if (likely(PyUnicode_Check(n)))
#else
    if (likely(PyString_Check(n)))
#endif
        return __Pyx_PyObject_GetAttrStr(o, n);
#endif
    return PyObject_GetAttr(o, n);
}

/* GetItemInt */
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (!j) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyList_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyList_GET_SIZE(o)))) {
        PyObject *r = PyList_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyTuple_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyTuple_GET_SIZE(o)))) {
        PyObject *r = PyTuple_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i, int is_list,
                                                     CYTHON_NCP_UNUSED int wraparound,
                                                     CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if ((!boundscheck) || (likely(__Pyx_is_valid_index(n, PyList_GET_SIZE(o))))) {
            PyObject *r = PyList_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    }
    else if (PyTuple_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
        if ((!boundscheck) || likely(__Pyx_is_valid_index(n, PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return NULL;
                    PyErr_Clear();
                }
            }
            return m->sq_item(o, i);
        }
    }
#else
    if (is_list || PySequence_Check(o)) {
        return PySequence_GetItem(o, i);
    }
#endif
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

/* ObjectGetItem */
#if CYTHON_USE_TYPE_SLOTS
static PyObject *__Pyx_PyObject_GetIndex(PyObject *obj, PyObject* index) {
    PyObject *runerr = NULL;
    Py_ssize_t key_value;
    PySequenceMethods *m = Py_TYPE(obj)->tp_as_sequence;
    if (unlikely(!(m && m->sq_item))) {
        PyErr_Format(PyExc_TypeError, "'%.200s' object is not subscriptable", Py_TYPE(obj)->tp_name);
        return NULL;
    }
    key_value = __Pyx_PyIndex_AsSsize_t(index);
    if (likely(key_value != -1 || !(runerr = PyErr_Occurred()))) {
        return __Pyx_GetItemInt_Fast(obj, key_value, 0, 1, 1);
    }
    if (PyErr_GivenExceptionMatches(runerr, PyExc_OverflowError)) {
        PyErr_Clear();
        PyErr_Format(PyExc_IndexError, "cannot fit '%.200s' into an index-sized integer", Py_TYPE(index)->tp_name);
    }
    return NULL;
}
static PyObject *__Pyx_PyObject_GetItem(PyObject *obj, PyObject* key) {
    PyMappingMethods *m = Py_TYPE(obj)->tp_as_mapping;
    if (likely(m && m->mp_subscript)) {
        return m->mp_subscript(obj, key);
    }
    return __Pyx_PyObject_GetIndex(obj, key);
}
#endif

/* decode_c_string */
static CYTHON_INLINE PyObject* __Pyx_decode_c_string(
         const char* cstring, Py_ssize_t start, Py_ssize_t stop,
         const char* encoding, const char* errors,
         PyObject* (*decode_func)(const char *s, Py_ssize_t size, const char *errors)) {
    Py_ssize_t length;
    if (unlikely((start < 0) | (stop < 0))) {
        size_t slen = strlen(cstring);
        if (unlikely(slen > (size_t) PY_SSIZE_T_MAX)) {
            PyErr_SetString(PyExc_OverflowError,
                            "c-string too long to convert to Python");
            return NULL;
        }
        length = (Py_ssize_t) slen;
        if (start < 0) {
            start += length;
            if (start < 0)
                start = 0;
        }
        if (stop < 0)
            stop += length;
    }
    if (unlikely(stop <= start))
        return __Pyx_NewRef(__pyx_empty_unicode);
    length = stop - start;
    cstring += start;
    if (decode_func) {
        return decode_func(cstring, length, errors);
    } else {
        return PyUnicode_Decode(cstring, length, encoding, errors);
    }
}

/* GetAttr3 */
static PyObject *__Pyx_GetAttr3Default(PyObject *d) {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    if (unlikely(!__Pyx_PyErr_ExceptionMatches(PyExc_AttributeError)))
        return NULL;
    __Pyx_PyErr_Clear();
    Py_INCREF(d);
    return d;
}
static CYTHON_INLINE PyObject *__Pyx_GetAttr3(PyObject *o, PyObject *n, PyObject *d) {
    PyObject *r = __Pyx_GetAttr(o, n);
    return (likely(r)) ? r : __Pyx_GetAttr3Default(d);
}

/* PyDictVersioning */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    return likely(dict) ? __PYX_GET_DICT_VERSION(dict) : 0;
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj) {
    PyObject **dictptr = NULL;
    Py_ssize_t offset = Py_TYPE(obj)->tp_dictoffset;
    if (offset) {
#if CYTHON_COMPILING_IN_CPYTHON
        dictptr = (likely(offset > 0)) ? (PyObject **) ((char *)obj + offset) : _PyObject_GetDictPtr(obj);
#else
        dictptr = _PyObject_GetDictPtr(obj);
#endif
    }
    return (dictptr && *dictptr) ? __PYX_GET_DICT_VERSION(*dictptr) : 0;
}
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    if (unlikely(!dict) || unlikely(tp_dict_version != __PYX_GET_DICT_VERSION(dict)))
        return 0;
    return obj_dict_version == __Pyx_get_object_dict_version(obj);
}
#endif

/* GetModuleGlobalName */
#if CYTHON_USE_DICT_VERSIONS
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value)
#else
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name)
#endif
{
    PyObject *result;
#if !CYTHON_AVOID_BORROWED_REFS
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1
    result = _PyDict_GetItem_KnownHash(__pyx_d, name, ((PyASCIIObject *) name)->hash);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    } else if (unlikely(PyErr_Occurred())) {
        return NULL;
    }
#else
    result = PyDict_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
#endif
#else
    result = PyObject_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
    PyErr_Clear();
#endif
    return __Pyx_GetBuiltinName(name);
}

/* RaiseTooManyValuesToUnpack */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
    PyErr_Format(PyExc_ValueError,
                 "too many values to unpack (expected %" CYTHON_FORMAT_SSIZE_T "d)", expected);
}

/* RaiseNeedMoreValuesToUnpack */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
    PyErr_Format(PyExc_ValueError,
                 "need more than %" CYTHON_FORMAT_SSIZE_T "d value%.1s to unpack",
                 index, (index == 1) ? "" : "s");
}

/* RaiseNoneIterError */
static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
}

/* ExtTypeTest */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type) {
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (likely(__Pyx_TypeCheck(obj, type)))
        return 1;
    PyErr_Format(PyExc_TypeError, "Cannot convert %.200s to %.200s",
                 Py_TYPE(obj)->tp_name, type->tp_name);
    return 0;
}

/* SwapException */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSwap(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = tstate->exc_info;
    tmp_type = exc_info->exc_type;
    tmp_value = exc_info->exc_value;
    tmp_tb = exc_info->exc_traceback;
    exc_info->exc_type = *type;
    exc_info->exc_value = *value;
    exc_info->exc_traceback = *tb;
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = *type;
    tstate->exc_value = *value;
    tstate->exc_traceback = *tb;
    #endif
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}
#else
static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyErr_GetExcInfo(&tmp_type, &tmp_value, &tmp_tb);
    PyErr_SetExcInfo(*type, *value, *tb);
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}
#endif

/* Import */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (!py_import)
        goto bad;
    #endif
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if ((1) && (strchr(__Pyx_MODULE_NAME, '.'))) {
                module = PyImport_ImportModuleLevelObject(
                    name, global_dict, empty_dict, list, 1);
                if (!module) {
                    if (!PyErr_ExceptionMatches(PyExc_ImportError))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_MAJOR_VERSION < 3
            PyObject *py_level = PyInt_FromLong(level);
            if (!py_level)
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, global_dict, empty_dict, list, py_level, (PyObject *)NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, global_dict, empty_dict, list, level);
            #endif
        }
    }
bad:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_import);
    #endif
    Py_XDECREF(empty_list);
    Py_XDECREF(empty_dict);
    return module;
}

/* FastTypeChecks */
#if CYTHON_COMPILING_IN_CPYTHON
static int __Pyx_InBases(PyTypeObject *a, PyTypeObject *b) {
    while (a) {
        a = a->tp_base;
        if (a == b)
            return 1;
    }
    return b == &PyBaseObject_Type;
}
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (a == b) return 1;
    mro = a->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            if (PyTuple_GET_ITEM(mro, i) == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(a, b);
}
#if PY_MAJOR_VERSION == 2
static int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject* exc_type2) {
    PyObject *exception, *value, *tb;
    int res;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&exception, &value, &tb);
    res = exc_type1 ? PyObject_IsSubclass(err, exc_type1) : 0;
    if (unlikely(res == -1)) {
        PyErr_WriteUnraisable(err);
        res = 0;
    }
    if (!res) {
        res = PyObject_IsSubclass(err, exc_type2);
        if (unlikely(res == -1)) {
            PyErr_WriteUnraisable(err);
            res = 0;
        }
    }
    __Pyx_ErrRestore(exception, value, tb);
    return res;
}
#else
static CYTHON_INLINE int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject *exc_type2) {
    int res = exc_type1 ? __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type1) : 0;
    if (!res) {
        res = __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type2);
    }
    return res;
}
#endif
static int __Pyx_PyErr_GivenExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    assert(PyExceptionClass_Check(exc_type));
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        PyObject *t = PyTuple_GET_ITEM(tuple, i);
        #if PY_MAJOR_VERSION < 3
        if (likely(exc_type == t)) return 1;
        #endif
        if (likely(PyExceptionClass_Check(t))) {
            if (__Pyx_inner_PyErr_GivenExceptionMatches2(exc_type, NULL, t)) return 1;
        } else {
        }
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject* exc_type) {
    if (likely(err == exc_type)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        if (likely(PyExceptionClass_Check(exc_type))) {
            return __Pyx_inner_PyErr_GivenExceptionMatches2(err, NULL, exc_type);
        } else if (likely(PyTuple_Check(exc_type))) {
            return __Pyx_PyErr_GivenExceptionMatchesTuple(err, exc_type);
        } else {
        }
    }
    return PyErr_GivenExceptionMatches(err, exc_type);
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *exc_type1, PyObject *exc_type2) {
    assert(PyExceptionClass_Check(exc_type1));
    assert(PyExceptionClass_Check(exc_type2));
    if (likely(err == exc_type1 || err == exc_type2)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, exc_type1, exc_type2);
    }
    return (PyErr_GivenExceptionMatches(err, exc_type1) || PyErr_GivenExceptionMatches(err, exc_type2));
}
#endif

/* PyIntBinop */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_AddObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, int inplace, int zerodivision_check) {
    (void)inplace;
    (void)zerodivision_check;
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long x;
        long a = PyInt_AS_LONG(op1);
            x = (long)((unsigned long)a + b);
            if (likely((x^a) >= 0 || (x^b) >= 0))
                return PyInt_FromLong(x);
            return PyLong_Type.tp_as_number->nb_add(op1, op2);
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        const long b = intval;
        long a, x;
#ifdef HAVE_LONG_LONG
        const PY_LONG_LONG llb = intval;
        PY_LONG_LONG lla, llx;
#endif
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op1);
        if (likely(__Pyx_sst_abs(size) <= 1)) {
            a = likely(size) ? digits[0] : 0;
            if (size == -1) a = -a;
        } else {
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                default: return PyLong_Type.tp_as_number->nb_add(op1, op2);
            }
        }
                x = a + b;
            return PyLong_FromLong(x);
#ifdef HAVE_LONG_LONG
        long_long:
                llx = lla + llb;
            return PyLong_FromLongLong(llx);
#endif
        
        
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
        double a = PyFloat_AS_DOUBLE(op1);
            double result;
            PyFPE_START_PROTECT("add", return NULL)
            result = ((double)a) + (double)b;
            PyFPE_END_PROTECT(result)
            return PyFloat_FromDouble(result);
    }
    return (inplace ? PyNumber_InPlaceAdd : PyNumber_Add)(op1, op2);
}
#endif

/* None */
static CYTHON_INLINE void __Pyx_RaiseUnboundLocalError(const char *varname) {
    PyErr_Format(PyExc_UnboundLocalError, "local variable '%s' referenced before assignment", varname);
}

/* ImportFrom */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name) {
    PyObject* value = __Pyx_PyObject_GetAttrStr(module, name);
    if (unlikely(!value) && PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Format(PyExc_ImportError,
        #if PY_MAJOR_VERSION < 3
            "cannot import name %.230s", PyString_AS_STRING(name));
        #else
            "cannot import name %S", name);
        #endif
    }
    return value;
}

/* HasAttr */
static CYTHON_INLINE int __Pyx_HasAttr(PyObject *o, PyObject *n) {
    PyObject *r;
    if (unlikely(!__Pyx_PyBaseString_Check(n))) {
        PyErr_SetString(PyExc_TypeError,
                        "hasattr(): attribute name must be string");
        return -1;
    }
    r = __Pyx_GetAttr(o, n);
    if (unlikely(!r)) {
        PyErr_Clear();
        return 0;
    } else {
        Py_DECREF(r);
        return 1;
    }
}

/* PyObject_GenericGetAttrNoDict */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject *__Pyx_RaiseGenericGetAttributeError(PyTypeObject *tp, PyObject *attr_name) {
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'%.50s' object has no attribute '%U'",
                 tp->tp_name, attr_name);
#else
                 "'%.50s' object has no attribute '%.400s'",
                 tp->tp_name, PyString_AS_STRING(attr_name));
#endif
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name) {
    PyObject *descr;
    PyTypeObject *tp = Py_TYPE(obj);
    if (unlikely(!PyString_Check(attr_name))) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    assert(!tp->tp_dictoffset);
    descr = _PyType_Lookup(tp, attr_name);
    if (unlikely(!descr)) {
        return __Pyx_RaiseGenericGetAttributeError(tp, attr_name);
    }
    Py_INCREF(descr);
    #if PY_MAJOR_VERSION < 3
    if (likely(PyType_HasFeature(Py_TYPE(descr), Py_TPFLAGS_HAVE_CLASS)))
    #endif
    {
        descrgetfunc f = Py_TYPE(descr)->tp_descr_get;
        if (unlikely(f)) {
            PyObject *res = f(descr, obj, (PyObject *)tp);
            Py_DECREF(descr);
            return res;
        }
    }
    return descr;
}
#endif

/* PyObject_GenericGetAttr */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name) {
    if (unlikely(Py_TYPE(obj)->tp_dictoffset)) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    return __Pyx_PyObject_GenericGetAttrNoDict(obj, attr_name);
}
#endif

/* SetVTable */
static int __Pyx_SetVtable(PyObject *dict, void *vtable) {
#if PY_VERSION_HEX >= 0x02070000
    PyObject *ob = PyCapsule_New(vtable, 0, 0);
#else
    PyObject *ob = PyCObject_FromVoidPtr(vtable, 0);
#endif
    if (!ob)
        goto bad;
    if (PyDict_SetItem(dict, __pyx_n_s_pyx_vtable, ob) < 0)
        goto bad;
    Py_DECREF(ob);
    return 0;
bad:
    Py_XDECREF(ob);
    return -1;
}

/* PyObjectGetAttrStrNoError */
static void __Pyx_PyObject_GetAttrStr_ClearAttributeError(void) {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    if (likely(__Pyx_PyErr_ExceptionMatches(PyExc_AttributeError)))
        __Pyx_PyErr_Clear();
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name) {
    PyObject *result;
#if CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_TYPE_SLOTS && PY_VERSION_HEX >= 0x030700B1
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro == PyObject_GenericGetAttr)) {
        return _PyObject_GenericGetAttrWithDict(obj, attr_name, NULL, 1);
    }
#endif
    result = __Pyx_PyObject_GetAttrStr(obj, attr_name);
    if (unlikely(!result)) {
        __Pyx_PyObject_GetAttrStr_ClearAttributeError();
    }
    return result;
}

/* SetupReduce */
static int __Pyx_setup_reduce_is_named(PyObject* meth, PyObject* name) {
  int ret;
  PyObject *name_attr;
  name_attr = __Pyx_PyObject_GetAttrStr(meth, __pyx_n_s_name_2);
  if (likely(name_attr)) {
      ret = PyObject_RichCompareBool(name_attr, name, Py_EQ);
  } else {
      ret = -1;
  }
  if (unlikely(ret < 0)) {
      PyErr_Clear();
      ret = 0;
  }
  Py_XDECREF(name_attr);
  return ret;
}
static int __Pyx_setup_reduce(PyObject* type_obj) {
    int ret = 0;
    PyObject *object_reduce = NULL;
    PyObject *object_getstate = NULL;
    PyObject *object_reduce_ex = NULL;
    PyObject *reduce = NULL;
    PyObject *reduce_ex = NULL;
    PyObject *reduce_cython = NULL;
    PyObject *setstate = NULL;
    PyObject *setstate_cython = NULL;
    PyObject *getstate = NULL;
#if CYTHON_USE_PYTYPE_LOOKUP
    getstate = _PyType_Lookup((PyTypeObject*)type_obj, __pyx_n_s_getstate);
#else
    getstate = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_getstate);
    if (!getstate && PyErr_Occurred()) {
        goto __PYX_BAD;
    }
#endif
    if (getstate) {
#if CYTHON_USE_PYTYPE_LOOKUP
        object_getstate = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_getstate);
#else
        object_getstate = __Pyx_PyObject_GetAttrStrNoError((PyObject*)&PyBaseObject_Type, __pyx_n_s_getstate);
        if (!object_getstate && PyErr_Occurred()) {
            goto __PYX_BAD;
        }
#endif
        if (object_getstate != getstate) {
            goto __PYX_GOOD;
        }
    }
#if CYTHON_USE_PYTYPE_LOOKUP
    object_reduce_ex = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto __PYX_BAD;
#else
    object_reduce_ex = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto __PYX_BAD;
#endif
    reduce_ex = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce_ex); if (unlikely(!reduce_ex)) goto __PYX_BAD;
    if (reduce_ex == object_reduce_ex) {
#if CYTHON_USE_PYTYPE_LOOKUP
        object_reduce = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto __PYX_BAD;
#else
        object_reduce = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto __PYX_BAD;
#endif
        reduce = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce); if (unlikely(!reduce)) goto __PYX_BAD;
        if (reduce == object_reduce || __Pyx_setup_reduce_is_named(reduce, __pyx_n_s_reduce_cython)) {
            reduce_cython = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_reduce_cython);
            if (likely(reduce_cython)) {
                ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce, reduce_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
            } else if (reduce == object_reduce || PyErr_Occurred()) {
                goto __PYX_BAD;
            }
            setstate = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_setstate);
            if (!setstate) PyErr_Clear();
            if (!setstate || __Pyx_setup_reduce_is_named(setstate, __pyx_n_s_setstate_cython)) {
                setstate_cython = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_setstate_cython);
                if (likely(setstate_cython)) {
                    ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate, setstate_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                    ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                } else if (!setstate || PyErr_Occurred()) {
                    goto __PYX_BAD;
                }
            }
            PyType_Modified((PyTypeObject*)type_obj);
        }
    }
    goto __PYX_GOOD;
__PYX_BAD:
    if (!PyErr_Occurred())
        PyErr_Format(PyExc_RuntimeError, "Unable to initialize pickling for %s", ((PyTypeObject*)type_obj)->tp_name);
    ret = -1;
__PYX_GOOD:
#if !CYTHON_USE_PYTYPE_LOOKUP
    Py_XDECREF(object_reduce);
    Py_XDECREF(object_reduce_ex);
    Py_XDECREF(object_getstate);
    Py_XDECREF(getstate);
#endif
    Py_XDECREF(reduce);
    Py_XDECREF(reduce_ex);
    Py_XDECREF(reduce_cython);
    Py_XDECREF(setstate);
    Py_XDECREF(setstate_cython);
    return ret;
}

/* TypeImport */
#ifndef __PYX_HAVE_RT_ImportType
#define __PYX_HAVE_RT_ImportType
static PyTypeObject *__Pyx_ImportType(PyObject *module, const char *module_name, const char *class_name,
    size_t size, enum __Pyx_ImportType_CheckSize check_size)
{
    PyObject *result = 0;
    char warning[200];
    Py_ssize_t basicsize;
#ifdef Py_LIMITED_API
    PyObject *py_basicsize;
#endif
    result = PyObject_GetAttrString(module, class_name);
    if (!result)
        goto bad;
    if (!PyType_Check(result)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s.%.200s is not a type object",
            module_name, class_name);
        goto bad;
    }
#ifndef Py_LIMITED_API
    basicsize = ((PyTypeObject *)result)->tp_basicsize;
#else
    py_basicsize = PyObject_GetAttrString(result, "__basicsize__");
    if (!py_basicsize)
        goto bad;
    basicsize = PyLong_AsSsize_t(py_basicsize);
    Py_DECREF(py_basicsize);
    py_basicsize = 0;
    if (basicsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
#endif
    if ((size_t)basicsize < size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        goto bad;
    }
    if (check_size == __Pyx_ImportType_CheckSize_Error && (size_t)basicsize != size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        goto bad;
    }
    else if (check_size == __Pyx_ImportType_CheckSize_Warn && (size_t)basicsize > size) {
        PyOS_snprintf(warning, sizeof(warning),
            "%s.%s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        if (PyErr_WarnEx(NULL, warning, 0) < 0) goto bad;
    }
    return (PyTypeObject *)result;
bad:
    Py_XDECREF(result);
    return NULL;
}
#endif

/* CLineInTraceback */
#ifndef CYTHON_CLINE_IN_TRACEBACK
static int __Pyx_CLineForTraceback(CYTHON_UNUSED PyThreadState *tstate, int c_line) {
    PyObject *use_cline;
    PyObject *ptype, *pvalue, *ptraceback;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject **cython_runtime_dict;
#endif
    if (unlikely(!__pyx_cython_runtime)) {
        return c_line;
    }
    __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
#if CYTHON_COMPILING_IN_CPYTHON
    cython_runtime_dict = _PyObject_GetDictPtr(__pyx_cython_runtime);
    if (likely(cython_runtime_dict)) {
        __PYX_PY_DICT_LOOKUP_IF_MODIFIED(
            use_cline, *cython_runtime_dict,
            __Pyx_PyDict_GetItemStr(*cython_runtime_dict, __pyx_n_s_cline_in_traceback))
    } else
#endif
    {
      PyObject *use_cline_obj = __Pyx_PyObject_GetAttrStr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback);
      if (use_cline_obj) {
        use_cline = PyObject_Not(use_cline_obj) ? Py_False : Py_True;
        Py_DECREF(use_cline_obj);
      } else {
        PyErr_Clear();
        use_cline = NULL;
      }
    }
    if (!use_cline) {
        c_line = 0;
        (void) PyObject_SetAttr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback, Py_False);
    }
    else if (use_cline == Py_False || (use_cline != Py_True && PyObject_Not(use_cline) != 0)) {
        c_line = 0;
    }
    __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
    return c_line;
}
#endif

/* CodeObjectCache */
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, ((size_t)new_max) * sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

/* AddTraceback */
#include "compile.h"
#include "frameobject.h"
#include "traceback.h"
#if PY_VERSION_HEX >= 0x030b00a6
  #ifndef Py_BUILD_CORE
    #define Py_BUILD_CORE 1
  #endif
  #include "internal/pycore_frame.h"
#endif
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = NULL;
    PyObject *py_funcname = NULL;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_srcfile = NULL;
    py_srcfile = PyString_FromString(filename);
    if (!py_srcfile) goto bad;
    #endif
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        if (!py_funcname) goto bad;
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        if (!py_funcname) goto bad;
        funcname = PyUnicode_AsUTF8(py_funcname);
        if (!funcname) goto bad;
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        if (!py_funcname) goto bad;
        #endif
    }
    #if PY_MAJOR_VERSION < 3
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    #else
    py_code = PyCode_NewEmpty(filename, funcname, py_line);
    #endif
    Py_XDECREF(py_funcname);  // XDECREF since it's only set on Py3 if cline
    return py_code;
bad:
    Py_XDECREF(py_funcname);
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_srcfile);
    #endif
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject *ptype, *pvalue, *ptraceback;
    if (c_line) {
        c_line = __Pyx_CLineForTraceback(tstate, c_line);
    }
    py_code = __pyx_find_code_object(c_line ? -c_line : py_line);
    if (!py_code) {
        __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) {
            /* If the code object creation fails, then we should clear the
               fetched exception references and propagate the new exception */
            Py_XDECREF(ptype);
            Py_XDECREF(pvalue);
            Py_XDECREF(ptraceback);
            goto bad;
        }
        __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
        __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        tstate,            /*PyThreadState *tstate,*/
        py_code,           /*PyCodeObject *code,*/
        __pyx_d,    /*PyObject *globals,*/
        0                  /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

#if PY_MAJOR_VERSION < 3
static int __Pyx_GetBuffer(PyObject *obj, Py_buffer *view, int flags) {
    if (PyObject_CheckBuffer(obj)) return PyObject_GetBuffer(obj, view, flags);
        if (__Pyx_TypeCheck(obj, __pyx_array_type)) return __pyx_array_getbuffer(obj, view, flags);
        if (__Pyx_TypeCheck(obj, __pyx_memoryview_type)) return __pyx_memoryview_getbuffer(obj, view, flags);
    PyErr_Format(PyExc_TypeError, "'%.200s' does not have the buffer interface", Py_TYPE(obj)->tp_name);
    return -1;
}
static void __Pyx_ReleaseBuffer(Py_buffer *view) {
    PyObject *obj = view->obj;
    if (!obj) return;
    if (PyObject_CheckBuffer(obj)) {
        PyBuffer_Release(view);
        return;
    }
    if ((0)) {}
    view->obj = NULL;
    Py_DECREF(obj);
}
#endif


/* MemviewSliceIsContig */
static int
__pyx_memviewslice_is_contig(const __Pyx_memviewslice mvs, char order, int ndim)
{
    int i, index, step, start;
    Py_ssize_t itemsize = mvs.memview->view.itemsize;
    if (order == 'F') {
        step = 1;
        start = 0;
    } else {
        step = -1;
        start = ndim - 1;
    }
    for (i = 0; i < ndim; i++) {
        index = start + step * i;
        if (mvs.suboffsets[index] >= 0 || mvs.strides[index] != itemsize)
            return 0;
        itemsize *= mvs.shape[index];
    }
    return 1;
}

/* OverlappingSlices */
static void
__pyx_get_array_memory_extents(__Pyx_memviewslice *slice,
                               void **out_start, void **out_end,
                               int ndim, size_t itemsize)
{
    char *start, *end;
    int i;
    start = end = slice->data;
    for (i = 0; i < ndim; i++) {
        Py_ssize_t stride = slice->strides[i];
        Py_ssize_t extent = slice->shape[i];
        if (extent == 0) {
            *out_start = *out_end = start;
            return;
        } else {
            if (stride > 0)
                end += stride * (extent - 1);
            else
                start += stride * (extent - 1);
        }
    }
    *out_start = start;
    *out_end = end + itemsize;
}
static int
__pyx_slices_overlap(__Pyx_memviewslice *slice1,
                     __Pyx_memviewslice *slice2,
                     int ndim, size_t itemsize)
{
    void *start1, *end1, *start2, *end2;
    __pyx_get_array_memory_extents(slice1, &start1, &end1, ndim, itemsize);
    __pyx_get_array_memory_extents(slice2, &start2, &end2, ndim, itemsize);
    return (start1 < end2) && (start2 < end1);
}

/* Capsule */
static CYTHON_INLINE PyObject *
__pyx_capsule_create(void *p, CYTHON_UNUSED const char *sig)
{
    PyObject *cobj;
#if PY_VERSION_HEX >= 0x02070000
    cobj = PyCapsule_New(p, sig, NULL);
#else
    cobj = PyCObject_FromVoidPtr(p, NULL);
#endif
    return cobj;
}

/* IsLittleEndian */
static CYTHON_INLINE int __Pyx_Is_Little_Endian(void)
{
  union {
    uint32_t u32;
    uint8_t u8[4];
  } S;
  S.u32 = 0x01020304;
  return S.u8[0] == 4;
}

/* BufferFormatCheck */
static void __Pyx_BufFmt_Init(__Pyx_BufFmt_Context* ctx,
                              __Pyx_BufFmt_StackElem* stack,
                              __Pyx_TypeInfo* type) {
  stack[0].field = &ctx->root;
  stack[0].parent_offset = 0;
  ctx->root.type = type;
  ctx->root.name = "buffer dtype";
  ctx->root.offset = 0;
  ctx->head = stack;
  ctx->head->field = &ctx->root;
  ctx->fmt_offset = 0;
  ctx->head->parent_offset = 0;
  ctx->new_packmode = '@';
  ctx->enc_packmode = '@';
  ctx->new_count = 1;
  ctx->enc_count = 0;
  ctx->enc_type = 0;
  ctx->is_complex = 0;
  ctx->is_valid_array = 0;
  ctx->struct_alignment = 0;
  while (type->typegroup == 'S') {
    ++ctx->head;
    ctx->head->field = type->fields;
    ctx->head->parent_offset = 0;
    type = type->fields->type;
  }
}
static int __Pyx_BufFmt_ParseNumber(const char** ts) {
    int count;
    const char* t = *ts;
    if (*t < '0' || *t > '9') {
      return -1;
    } else {
        count = *t++ - '0';
        while (*t >= '0' && *t <= '9') {
            count *= 10;
            count += *t++ - '0';
        }
    }
    *ts = t;
    return count;
}
static int __Pyx_BufFmt_ExpectNumber(const char **ts) {
    int number = __Pyx_BufFmt_ParseNumber(ts);
    if (number == -1)
        PyErr_Format(PyExc_ValueError,\
                     "Does not understand character buffer dtype format string ('%c')", **ts);
    return number;
}
static void __Pyx_BufFmt_RaiseUnexpectedChar(char ch) {
  PyErr_Format(PyExc_ValueError,
               "Unexpected format string character: '%c'", ch);
}
static const char* __Pyx_BufFmt_DescribeTypeChar(char ch, int is_complex) {
  switch (ch) {
    case '?': return "'bool'";
    case 'c': return "'char'";
    case 'b': return "'signed char'";
    case 'B': return "'unsigned char'";
    case 'h': return "'short'";
    case 'H': return "'unsigned short'";
    case 'i': return "'int'";
    case 'I': return "'unsigned int'";
    case 'l': return "'long'";
    case 'L': return "'unsigned long'";
    case 'q': return "'long long'";
    case 'Q': return "'unsigned long long'";
    case 'f': return (is_complex ? "'complex float'" : "'float'");
    case 'd': return (is_complex ? "'complex double'" : "'double'");
    case 'g': return (is_complex ? "'complex long double'" : "'long double'");
    case 'T': return "a struct";
    case 'O': return "Python object";
    case 'P': return "a pointer";
    case 's': case 'p': return "a string";
    case 0: return "end";
    default: return "unparseable format string";
  }
}
static size_t __Pyx_BufFmt_TypeCharToStandardSize(char ch, int is_complex) {
  switch (ch) {
    case '?': case 'c': case 'b': case 'B': case 's': case 'p': return 1;
    case 'h': case 'H': return 2;
    case 'i': case 'I': case 'l': case 'L': return 4;
    case 'q': case 'Q': return 8;
    case 'f': return (is_complex ? 8 : 4);
    case 'd': return (is_complex ? 16 : 8);
    case 'g': {
      PyErr_SetString(PyExc_ValueError, "Python does not define a standard format string size for long double ('g')..");
      return 0;
    }
    case 'O': case 'P': return sizeof(void*);
    default:
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
}
static size_t __Pyx_BufFmt_TypeCharToNativeSize(char ch, int is_complex) {
  switch (ch) {
    case '?': case 'c': case 'b': case 'B': case 's': case 'p': return 1;
    case 'h': case 'H': return sizeof(short);
    case 'i': case 'I': return sizeof(int);
    case 'l': case 'L': return sizeof(long);
    #ifdef HAVE_LONG_LONG
    case 'q': case 'Q': return sizeof(PY_LONG_LONG);
    #endif
    case 'f': return sizeof(float) * (is_complex ? 2 : 1);
    case 'd': return sizeof(double) * (is_complex ? 2 : 1);
    case 'g': return sizeof(long double) * (is_complex ? 2 : 1);
    case 'O': case 'P': return sizeof(void*);
    default: {
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
  }
}
typedef struct { char c; short x; } __Pyx_st_short;
typedef struct { char c; int x; } __Pyx_st_int;
typedef struct { char c; long x; } __Pyx_st_long;
typedef struct { char c; float x; } __Pyx_st_float;
typedef struct { char c; double x; } __Pyx_st_double;
typedef struct { char c; long double x; } __Pyx_st_longdouble;
typedef struct { char c; void *x; } __Pyx_st_void_p;
#ifdef HAVE_LONG_LONG
typedef struct { char c; PY_LONG_LONG x; } __Pyx_st_longlong;
#endif
static size_t __Pyx_BufFmt_TypeCharToAlignment(char ch, CYTHON_UNUSED int is_complex) {
  switch (ch) {
    case '?': case 'c': case 'b': case 'B': case 's': case 'p': return 1;
    case 'h': case 'H': return sizeof(__Pyx_st_short) - sizeof(short);
    case 'i': case 'I': return sizeof(__Pyx_st_int) - sizeof(int);
    case 'l': case 'L': return sizeof(__Pyx_st_long) - sizeof(long);
#ifdef HAVE_LONG_LONG
    case 'q': case 'Q': return sizeof(__Pyx_st_longlong) - sizeof(PY_LONG_LONG);
#endif
    case 'f': return sizeof(__Pyx_st_float) - sizeof(float);
    case 'd': return sizeof(__Pyx_st_double) - sizeof(double);
    case 'g': return sizeof(__Pyx_st_longdouble) - sizeof(long double);
    case 'P': case 'O': return sizeof(__Pyx_st_void_p) - sizeof(void*);
    default:
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
}
/* These are for computing the padding at the end of the struct to align
   on the first member of the struct. This will probably the same as above,
   but we don't have any guarantees.
 */
typedef struct { short x; char c; } __Pyx_pad_short;
typedef struct { int x; char c; } __Pyx_pad_int;
typedef struct { long x; char c; } __Pyx_pad_long;
typedef struct { float x; char c; } __Pyx_pad_float;
typedef struct { double x; char c; } __Pyx_pad_double;
typedef struct { long double x; char c; } __Pyx_pad_longdouble;
typedef struct { void *x; char c; } __Pyx_pad_void_p;
#ifdef HAVE_LONG_LONG
typedef struct { PY_LONG_LONG x; char c; } __Pyx_pad_longlong;
#endif
static size_t __Pyx_BufFmt_TypeCharToPadding(char ch, CYTHON_UNUSED int is_complex) {
  switch (ch) {
    case '?': case 'c': case 'b': case 'B': case 's': case 'p': return 1;
    case 'h': case 'H': return sizeof(__Pyx_pad_short) - sizeof(short);
    case 'i': case 'I': return sizeof(__Pyx_pad_int) - sizeof(int);
    case 'l': case 'L': return sizeof(__Pyx_pad_long) - sizeof(long);
#ifdef HAVE_LONG_LONG
    case 'q': case 'Q': return sizeof(__Pyx_pad_longlong) - sizeof(PY_LONG_LONG);
#endif
    case 'f': return sizeof(__Pyx_pad_float) - sizeof(float);
    case 'd': return sizeof(__Pyx_pad_double) - sizeof(double);
    case 'g': return sizeof(__Pyx_pad_longdouble) - sizeof(long double);
    case 'P': case 'O': return sizeof(__Pyx_pad_void_p) - sizeof(void*);
    default:
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
}
static char __Pyx_BufFmt_TypeCharToGroup(char ch, int is_complex) {
  switch (ch) {
    case 'c':
        return 'H';
    case 'b': case 'h': case 'i':
    case 'l': case 'q': case 's': case 'p':
        return 'I';
    case '?': case 'B': case 'H': case 'I': case 'L': case 'Q':
        return 'U';
    case 'f': case 'd': case 'g':
        return (is_complex ? 'C' : 'R');
    case 'O':
        return 'O';
    case 'P':
        return 'P';
    default: {
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
  }
}
static void __Pyx_BufFmt_RaiseExpected(__Pyx_BufFmt_Context* ctx) {
  if (ctx->head == NULL || ctx->head->field == &ctx->root) {
    const char* expected;
    const char* quote;
    if (ctx->head == NULL) {
      expected = "end";
      quote = "";
    } else {
      expected = ctx->head->field->type->name;
      quote = "'";
    }
    PyErr_Format(PyExc_ValueError,
                 "Buffer dtype mismatch, expected %s%s%s but got %s",
                 quote, expected, quote,
                 __Pyx_BufFmt_DescribeTypeChar(ctx->enc_type, ctx->is_complex));
  } else {
    __Pyx_StructField* field = ctx->head->field;
    __Pyx_StructField* parent = (ctx->head - 1)->field;
    PyErr_Format(PyExc_ValueError,
                 "Buffer dtype mismatch, expected '%s' but got %s in '%s.%s'",
                 field->type->name, __Pyx_BufFmt_DescribeTypeChar(ctx->enc_type, ctx->is_complex),
                 parent->type->name, field->name);
  }
}
static int __Pyx_BufFmt_ProcessTypeChunk(__Pyx_BufFmt_Context* ctx) {
  char group;
  size_t size, offset, arraysize = 1;
  if (ctx->enc_type == 0) return 0;
  if (ctx->head->field->type->arraysize[0]) {
    int i, ndim = 0;
    if (ctx->enc_type == 's' || ctx->enc_type == 'p') {
        ctx->is_valid_array = ctx->head->field->type->ndim == 1;
        ndim = 1;
        if (ctx->enc_count != ctx->head->field->type->arraysize[0]) {
            PyErr_Format(PyExc_ValueError,
                         "Expected a dimension of size %zu, got %zu",
                         ctx->head->field->type->arraysize[0], ctx->enc_count);
            return -1;
        }
    }
    if (!ctx->is_valid_array) {
      PyErr_Format(PyExc_ValueError, "Expected %d dimensions, got %d",
                   ctx->head->field->type->ndim, ndim);
      return -1;
    }
    for (i = 0; i < ctx->head->field->type->ndim; i++) {
      arraysize *= ctx->head->field->type->arraysize[i];
    }
    ctx->is_valid_array = 0;
    ctx->enc_count = 1;
  }
  group = __Pyx_BufFmt_TypeCharToGroup(ctx->enc_type, ctx->is_complex);
  do {
    __Pyx_StructField* field = ctx->head->field;
    __Pyx_TypeInfo* type = field->type;
    if (ctx->enc_packmode == '@' || ctx->enc_packmode == '^') {
      size = __Pyx_BufFmt_TypeCharToNativeSize(ctx->enc_type, ctx->is_complex);
    } else {
      size = __Pyx_BufFmt_TypeCharToStandardSize(ctx->enc_type, ctx->is_complex);
    }
    if (ctx->enc_packmode == '@') {
      size_t align_at = __Pyx_BufFmt_TypeCharToAlignment(ctx->enc_type, ctx->is_complex);
      size_t align_mod_offset;
      if (align_at == 0) return -1;
      align_mod_offset = ctx->fmt_offset % align_at;
      if (align_mod_offset > 0) ctx->fmt_offset += align_at - align_mod_offset;
      if (ctx->struct_alignment == 0)
          ctx->struct_alignment = __Pyx_BufFmt_TypeCharToPadding(ctx->enc_type,
                                                                 ctx->is_complex);
    }
    if (type->size != size || type->typegroup != group) {
      if (type->typegroup == 'C' && type->fields != NULL) {
        size_t parent_offset = ctx->head->parent_offset + field->offset;
        ++ctx->head;
        ctx->head->field = type->fields;
        ctx->head->parent_offset = parent_offset;
        continue;
      }
      if ((type->typegroup == 'H' || group == 'H') && type->size == size) {
      } else {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return -1;
      }
    }
    offset = ctx->head->parent_offset + field->offset;
    if (ctx->fmt_offset != offset) {
      PyErr_Format(PyExc_ValueError,
                   "Buffer dtype mismatch; next field is at offset %" CYTHON_FORMAT_SSIZE_T "d but %" CYTHON_FORMAT_SSIZE_T "d expected",
                   (Py_ssize_t)ctx->fmt_offset, (Py_ssize_t)offset);
      return -1;
    }
    ctx->fmt_offset += size;
    if (arraysize)
      ctx->fmt_offset += (arraysize - 1) * size;
    --ctx->enc_count;
    while (1) {
      if (field == &ctx->root) {
        ctx->head = NULL;
        if (ctx->enc_count != 0) {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return -1;
        }
        break;
      }
      ctx->head->field = ++field;
      if (field->type == NULL) {
        --ctx->head;
        field = ctx->head->field;
        continue;
      } else if (field->type->typegroup == 'S') {
        size_t parent_offset = ctx->head->parent_offset + field->offset;
        if (field->type->fields->type == NULL) continue;
        field = field->type->fields;
        ++ctx->head;
        ctx->head->field = field;
        ctx->head->parent_offset = parent_offset;
        break;
      } else {
        break;
      }
    }
  } while (ctx->enc_count);
  ctx->enc_type = 0;
  ctx->is_complex = 0;
  return 0;
}
static PyObject *
__pyx_buffmt_parse_array(__Pyx_BufFmt_Context* ctx, const char** tsp)
{
    const char *ts = *tsp;
    int i = 0, number, ndim;
    ++ts;
    if (ctx->new_count != 1) {
        PyErr_SetString(PyExc_ValueError,
                        "Cannot handle repeated arrays in format string");
        return NULL;
    }
    if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
    ndim = ctx->head->field->type->ndim;
    while (*ts && *ts != ')') {
        switch (*ts) {
            case ' ': case '\f': case '\r': case '\n': case '\t': case '\v':  continue;
            default:  break;
        }
        number = __Pyx_BufFmt_ExpectNumber(&ts);
        if (number == -1) return NULL;
        if (i < ndim && (size_t) number != ctx->head->field->type->arraysize[i])
            return PyErr_Format(PyExc_ValueError,
                        "Expected a dimension of size %zu, got %d",
                        ctx->head->field->type->arraysize[i], number);
        if (*ts != ',' && *ts != ')')
            return PyErr_Format(PyExc_ValueError,
                                "Expected a comma in format string, got '%c'", *ts);
        if (*ts == ',') ts++;
        i++;
    }
    if (i != ndim)
        return PyErr_Format(PyExc_ValueError, "Expected %d dimension(s), got %d",
                            ctx->head->field->type->ndim, i);
    if (!*ts) {
        PyErr_SetString(PyExc_ValueError,
                        "Unexpected end of format string, expected ')'");
        return NULL;
    }
    ctx->is_valid_array = 1;
    ctx->new_count = 1;
    *tsp = ++ts;
    return Py_None;
}
static const char* __Pyx_BufFmt_CheckString(__Pyx_BufFmt_Context* ctx, const char* ts) {
  int got_Z = 0;
  while (1) {
    switch(*ts) {
      case 0:
        if (ctx->enc_type != 0 && ctx->head == NULL) {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return NULL;
        }
        if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
        if (ctx->head != NULL) {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return NULL;
        }
        return ts;
      case ' ':
      case '\r':
      case '\n':
        ++ts;
        break;
      case '<':
        if (!__Pyx_Is_Little_Endian()) {
          PyErr_SetString(PyExc_ValueError, "Little-endian buffer not supported on big-endian compiler");
          return NULL;
        }
        ctx->new_packmode = '=';
        ++ts;
        break;
      case '>':
      case '!':
        if (__Pyx_Is_Little_Endian()) {
          PyErr_SetString(PyExc_ValueError, "Big-endian buffer not supported on little-endian compiler");
          return NULL;
        }
        ctx->new_packmode = '=';
        ++ts;
        break;
      case '=':
      case '@':
      case '^':
        ctx->new_packmode = *ts++;
        break;
      case 'T':
        {
          const char* ts_after_sub;
          size_t i, struct_count = ctx->new_count;
          size_t struct_alignment = ctx->struct_alignment;
          ctx->new_count = 1;
          ++ts;
          if (*ts != '{') {
            PyErr_SetString(PyExc_ValueError, "Buffer acquisition: Expected '{' after 'T'");
            return NULL;
          }
          if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
          ctx->enc_type = 0;
          ctx->enc_count = 0;
          ctx->struct_alignment = 0;
          ++ts;
          ts_after_sub = ts;
          for (i = 0; i != struct_count; ++i) {
            ts_after_sub = __Pyx_BufFmt_CheckString(ctx, ts);
            if (!ts_after_sub) return NULL;
          }
          ts = ts_after_sub;
          if (struct_alignment) ctx->struct_alignment = struct_alignment;
        }
        break;
      case '}':
        {
          size_t alignment = ctx->struct_alignment;
          ++ts;
          if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
          ctx->enc_type = 0;
          if (alignment && ctx->fmt_offset % alignment) {
            ctx->fmt_offset += alignment - (ctx->fmt_offset % alignment);
          }
        }
        return ts;
      case 'x':
        if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
        ctx->fmt_offset += ctx->new_count;
        ctx->new_count = 1;
        ctx->enc_count = 0;
        ctx->enc_type = 0;
        ctx->enc_packmode = ctx->new_packmode;
        ++ts;
        break;
      case 'Z':
        got_Z = 1;
        ++ts;
        if (*ts != 'f' && *ts != 'd' && *ts != 'g') {
          __Pyx_BufFmt_RaiseUnexpectedChar('Z');
          return NULL;
        }
        CYTHON_FALLTHROUGH;
      case '?': case 'c': case 'b': case 'B': case 'h': case 'H': case 'i': case 'I':
      case 'l': case 'L': case 'q': case 'Q':
      case 'f': case 'd': case 'g':
      case 'O': case 'p':
        if ((ctx->enc_type == *ts) && (got_Z == ctx->is_complex) &&
            (ctx->enc_packmode == ctx->new_packmode) && (!ctx->is_valid_array)) {
          ctx->enc_count += ctx->new_count;
          ctx->new_count = 1;
          got_Z = 0;
          ++ts;
          break;
        }
        CYTHON_FALLTHROUGH;
      case 's':
        if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
        ctx->enc_count = ctx->new_count;
        ctx->enc_packmode = ctx->new_packmode;
        ctx->enc_type = *ts;
        ctx->is_complex = got_Z;
        ++ts;
        ctx->new_count = 1;
        got_Z = 0;
        break;
      case ':':
        ++ts;
        while(*ts != ':') ++ts;
        ++ts;
        break;
      case '(':
        if (!__pyx_buffmt_parse_array(ctx, &ts)) return NULL;
        break;
      default:
        {
          int number = __Pyx_BufFmt_ExpectNumber(&ts);
          if (number == -1) return NULL;
          ctx->new_count = (size_t)number;
        }
    }
  }
}

/* TypeInfoCompare */
  static int
__pyx_typeinfo_cmp(__Pyx_TypeInfo *a, __Pyx_TypeInfo *b)
{
    int i;
    if (!a || !b)
        return 0;
    if (a == b)
        return 1;
    if (a->size != b->size || a->typegroup != b->typegroup ||
            a->is_unsigned != b->is_unsigned || a->ndim != b->ndim) {
        if (a->typegroup == 'H' || b->typegroup == 'H') {
            return a->size == b->size;
        } else {
            return 0;
        }
    }
    if (a->ndim) {
        for (i = 0; i < a->ndim; i++)
            if (a->arraysize[i] != b->arraysize[i])
                return 0;
    }
    if (a->typegroup == 'S') {
        if (a->flags != b->flags)
            return 0;
        if (a->fields || b->fields) {
            if (!(a->fields && b->fields))
                return 0;
            for (i = 0; a->fields[i].type && b->fields[i].type; i++) {
                __Pyx_StructField *field_a = a->fields + i;
                __Pyx_StructField *field_b = b->fields + i;
                if (field_a->offset != field_b->offset ||
                    !__pyx_typeinfo_cmp(field_a->type, field_b->type))
                    return 0;
            }
            return !a->fields[i].type && !b->fields[i].type;
        }
    }
    return 1;
}

/* MemviewSliceValidateAndInit */
  static int
__pyx_check_strides(Py_buffer *buf, int dim, int ndim, int spec)
{
    if (buf->shape[dim] <= 1)
        return 1;
    if (buf->strides) {
        if (spec & __Pyx_MEMVIEW_CONTIG) {
            if (spec & (__Pyx_MEMVIEW_PTR|__Pyx_MEMVIEW_FULL)) {
                if (unlikely(buf->strides[dim] != sizeof(void *))) {
                    PyErr_Format(PyExc_ValueError,
                                 "Buffer is not indirectly contiguous "
                                 "in dimension %d.", dim);
                    goto fail;
                }
            } else if (unlikely(buf->strides[dim] != buf->itemsize)) {
                PyErr_SetString(PyExc_ValueError,
                                "Buffer and memoryview are not contiguous "
                                "in the same dimension.");
                goto fail;
            }
        }
        if (spec & __Pyx_MEMVIEW_FOLLOW) {
            Py_ssize_t stride = buf->strides[dim];
            if (stride < 0)
                stride = -stride;
            if (unlikely(stride < buf->itemsize)) {
                PyErr_SetString(PyExc_ValueError,
                                "Buffer and memoryview are not contiguous "
                                "in the same dimension.");
                goto fail;
            }
        }
    } else {
        if (unlikely(spec & __Pyx_MEMVIEW_CONTIG && dim != ndim - 1)) {
            PyErr_Format(PyExc_ValueError,
                         "C-contiguous buffer is not contiguous in "
                         "dimension %d", dim);
            goto fail;
        } else if (unlikely(spec & (__Pyx_MEMVIEW_PTR))) {
            PyErr_Format(PyExc_ValueError,
                         "C-contiguous buffer is not indirect in "
                         "dimension %d", dim);
            goto fail;
        } else if (unlikely(buf->suboffsets)) {
            PyErr_SetString(PyExc_ValueError,
                            "Buffer exposes suboffsets but no strides");
            goto fail;
        }
    }
    return 1;
fail:
    return 0;
}
static int
__pyx_check_suboffsets(Py_buffer *buf, int dim, CYTHON_UNUSED int ndim, int spec)
{
    if (spec & __Pyx_MEMVIEW_DIRECT) {
        if (unlikely(buf->suboffsets && buf->suboffsets[dim] >= 0)) {
            PyErr_Format(PyExc_ValueError,
                         "Buffer not compatible with direct access "
                         "in dimension %d.", dim);
            goto fail;
        }
    }
    if (spec & __Pyx_MEMVIEW_PTR) {
        if (unlikely(!buf->suboffsets || (buf->suboffsets[dim] < 0))) {
            PyErr_Format(PyExc_ValueError,
                         "Buffer is not indirectly accessible "
                         "in dimension %d.", dim);
            goto fail;
        }
    }
    return 1;
fail:
    return 0;
}
static int
__pyx_verify_contig(Py_buffer *buf, int ndim, int c_or_f_flag)
{
    int i;
    if (c_or_f_flag & __Pyx_IS_F_CONTIG) {
        Py_ssize_t stride = 1;
        for (i = 0; i < ndim; i++) {
            if (unlikely(stride * buf->itemsize != buf->strides[i]  &&  buf->shape[i] > 1)) {
                PyErr_SetString(PyExc_ValueError,
                    "Buffer not fortran contiguous.");
                goto fail;
            }
            stride = stride * buf->shape[i];
        }
    } else if (c_or_f_flag & __Pyx_IS_C_CONTIG) {
        Py_ssize_t stride = 1;
        for (i = ndim - 1; i >- 1; i--) {
            if (unlikely(stride * buf->itemsize != buf->strides[i]  &&  buf->shape[i] > 1)) {
                PyErr_SetString(PyExc_ValueError,
                    "Buffer not C contiguous.");
                goto fail;
            }
            stride = stride * buf->shape[i];
        }
    }
    return 1;
fail:
    return 0;
}
static int __Pyx_ValidateAndInit_memviewslice(
                int *axes_specs,
                int c_or_f_flag,
                int buf_flags,
                int ndim,
                __Pyx_TypeInfo *dtype,
                __Pyx_BufFmt_StackElem stack[],
                __Pyx_memviewslice *memviewslice,
                PyObject *original_obj)
{
    struct __pyx_memoryview_obj *memview, *new_memview;
    __Pyx_RefNannyDeclarations
    Py_buffer *buf;
    int i, spec = 0, retval = -1;
    __Pyx_BufFmt_Context ctx;
    int from_memoryview = __pyx_memoryview_check(original_obj);
    __Pyx_RefNannySetupContext("ValidateAndInit_memviewslice", 0);
    if (from_memoryview && __pyx_typeinfo_cmp(dtype, ((struct __pyx_memoryview_obj *)
                                                            original_obj)->typeinfo)) {
        memview = (struct __pyx_memoryview_obj *) original_obj;
        new_memview = NULL;
    } else {
        memview = (struct __pyx_memoryview_obj *) __pyx_memoryview_new(
                                            original_obj, buf_flags, 0, dtype);
        new_memview = memview;
        if (unlikely(!memview))
            goto fail;
    }
    buf = &memview->view;
    if (unlikely(buf->ndim != ndim)) {
        PyErr_Format(PyExc_ValueError,
                "Buffer has wrong number of dimensions (expected %d, got %d)",
                ndim, buf->ndim);
        goto fail;
    }
    if (new_memview) {
        __Pyx_BufFmt_Init(&ctx, stack, dtype);
        if (unlikely(!__Pyx_BufFmt_CheckString(&ctx, buf->format))) goto fail;
    }
    if (unlikely((unsigned) buf->itemsize != dtype->size)) {
        PyErr_Format(PyExc_ValueError,
                     "Item size of buffer (%" CYTHON_FORMAT_SSIZE_T "u byte%s) "
                     "does not match size of '%s' (%" CYTHON_FORMAT_SSIZE_T "u byte%s)",
                     buf->itemsize,
                     (buf->itemsize > 1) ? "s" : "",
                     dtype->name,
                     dtype->size,
                     (dtype->size > 1) ? "s" : "");
        goto fail;
    }
    if (buf->len > 0) {
        for (i = 0; i < ndim; i++) {
            spec = axes_specs[i];
            if (unlikely(!__pyx_check_strides(buf, i, ndim, spec)))
                goto fail;
            if (unlikely(!__pyx_check_suboffsets(buf, i, ndim, spec)))
                goto fail;
        }
        if (unlikely(buf->strides && !__pyx_verify_contig(buf, ndim, c_or_f_flag)))
            goto fail;
    }
    if (unlikely(__Pyx_init_memviewslice(memview, ndim, memviewslice,
                                         new_memview != NULL) == -1)) {
        goto fail;
    }
    retval = 0;
    goto no_fail;
fail:
    Py_XDECREF(new_memview);
    retval = -1;
no_fail:
    __Pyx_RefNannyFinishContext();
    return retval;
}

/* ObjectToMemviewSlice */
  static CYTHON_INLINE __Pyx_memviewslice __Pyx_PyObject_to_MemoryviewSlice_dc_double(PyObject *obj, int writable_flag) {
    __Pyx_memviewslice result = { 0, 0, { 0 }, { 0 }, { 0 } };
    __Pyx_BufFmt_StackElem stack[1];
    int axes_specs[] = { (__Pyx_MEMVIEW_DIRECT | __Pyx_MEMVIEW_CONTIG) };
    int retcode;
    if (obj == Py_None) {
        result.memview = (struct __pyx_memoryview_obj *) Py_None;
        return result;
    }
    retcode = __Pyx_ValidateAndInit_memviewslice(axes_specs, __Pyx_IS_C_CONTIG,
                                                 (PyBUF_C_CONTIGUOUS | PyBUF_FORMAT) | writable_flag, 1,
                                                 &__Pyx_TypeInfo_double, stack,
                                                 &result, obj);
    if (unlikely(retcode == -1))
        goto __pyx_fail;
    return result;
__pyx_fail:
    result.memview = NULL;
    result.data = NULL;
    return result;
}

/* CIntFromPyVerify */
  #define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* Declarations */
  #if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      return ::std::complex< float >(x, y);
    }
  #else
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      return x + y*(__pyx_t_float_complex)_Complex_I;
    }
  #endif
#else
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      __pyx_t_float_complex z;
      z.real = x;
      z.imag = y;
      return z;
    }
#endif

/* Arithmetic */
  #if CYTHON_CCOMPLEX
#else
    static CYTHON_INLINE int __Pyx_c_eq_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
       return (a.real == b.real) && (a.imag == b.imag);
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_sum_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real + b.real;
        z.imag = a.imag + b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_diff_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real - b.real;
        z.imag = a.imag - b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_prod_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real * b.real - a.imag * b.imag;
        z.imag = a.real * b.imag + a.imag * b.real;
        return z;
    }
    #if 1
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quot_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        if (b.imag == 0) {
            return __pyx_t_float_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else if (fabsf(b.real) >= fabsf(b.imag)) {
            if (b.real == 0 && b.imag == 0) {
                return __pyx_t_float_complex_from_parts(a.real / b.real, a.imag / b.imag);
            } else {
                float r = b.imag / b.real;
                float s = (float)(1.0) / (b.real + b.imag * r);
                return __pyx_t_float_complex_from_parts(
                    (a.real + a.imag * r) * s, (a.imag - a.real * r) * s);
            }
        } else {
            float r = b.real / b.imag;
            float s = (float)(1.0) / (b.imag + b.real * r);
            return __pyx_t_float_complex_from_parts(
                (a.real * r + a.imag) * s, (a.imag * r - a.real) * s);
        }
    }
    #else
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quot_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        if (b.imag == 0) {
            return __pyx_t_float_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else {
            float denom = b.real * b.real + b.imag * b.imag;
            return __pyx_t_float_complex_from_parts(
                (a.real * b.real + a.imag * b.imag) / denom,
                (a.imag * b.real - a.real * b.imag) / denom);
        }
    }
    #endif
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_neg_float(__pyx_t_float_complex a) {
        __pyx_t_float_complex z;
        z.real = -a.real;
        z.imag = -a.imag;
        return z;
    }
    static CYTHON_INLINE int __Pyx_c_is_zero_float(__pyx_t_float_complex a) {
       return (a.real == 0) && (a.imag == 0);
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_conj_float(__pyx_t_float_complex a) {
        __pyx_t_float_complex z;
        z.real =  a.real;
        z.imag = -a.imag;
        return z;
    }
    #if 1
        static CYTHON_INLINE float __Pyx_c_abs_float(__pyx_t_float_complex z) {
          #if !defined(HAVE_HYPOT) || defined(_MSC_VER)
            return sqrtf(z.real*z.real + z.imag*z.imag);
          #else
            return hypotf(z.real, z.imag);
          #endif
        }
        static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_pow_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
            __pyx_t_float_complex z;
            float r, lnr, theta, z_r, z_theta;
            if (b.imag == 0 && b.real == (int)b.real) {
                if (b.real < 0) {
                    float denom = a.real * a.real + a.imag * a.imag;
                    a.real = a.real / denom;
                    a.imag = -a.imag / denom;
                    b.real = -b.real;
                }
                switch ((int)b.real) {
                    case 0:
                        z.real = 1;
                        z.imag = 0;
                        return z;
                    case 1:
                        return a;
                    case 2:
                        return __Pyx_c_prod_float(a, a);
                    case 3:
                        z = __Pyx_c_prod_float(a, a);
                        return __Pyx_c_prod_float(z, a);
                    case 4:
                        z = __Pyx_c_prod_float(a, a);
                        return __Pyx_c_prod_float(z, z);
                }
            }
            if (a.imag == 0) {
                if (a.real == 0) {
                    return a;
                } else if ((b.imag == 0) && (a.real >= 0)) {
                    z.real = powf(a.real, b.real);
                    z.imag = 0;
                    return z;
                } else if (a.real > 0) {
                    r = a.real;
                    theta = 0;
                } else {
                    r = -a.real;
                    theta = atan2f(0.0, -1.0);
                }
            } else {
                r = __Pyx_c_abs_float(a);
                theta = atan2f(a.imag, a.real);
            }
            lnr = logf(r);
            z_r = expf(lnr * b.real - theta * b.imag);
            z_theta = theta * b.real + lnr * b.imag;
            z.real = z_r * cosf(z_theta);
            z.imag = z_r * sinf(z_theta);
            return z;
        }
    #endif
#endif

/* Declarations */
  #if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      return ::std::complex< double >(x, y);
    }
  #else
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      return x + y*(__pyx_t_double_complex)_Complex_I;
    }
  #endif
#else
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      __pyx_t_double_complex z;
      z.real = x;
      z.imag = y;
      return z;
    }
#endif

/* Arithmetic */
  #if CYTHON_CCOMPLEX
#else
    static CYTHON_INLINE int __Pyx_c_eq_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
       return (a.real == b.real) && (a.imag == b.imag);
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_sum_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real + b.real;
        z.imag = a.imag + b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_diff_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real - b.real;
        z.imag = a.imag - b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_prod_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real * b.real - a.imag * b.imag;
        z.imag = a.real * b.imag + a.imag * b.real;
        return z;
    }
    #if 1
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        if (b.imag == 0) {
            return __pyx_t_double_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else if (fabs(b.real) >= fabs(b.imag)) {
            if (b.real == 0 && b.imag == 0) {
                return __pyx_t_double_complex_from_parts(a.real / b.real, a.imag / b.imag);
            } else {
                double r = b.imag / b.real;
                double s = (double)(1.0) / (b.real + b.imag * r);
                return __pyx_t_double_complex_from_parts(
                    (a.real + a.imag * r) * s, (a.imag - a.real * r) * s);
            }
        } else {
            double r = b.real / b.imag;
            double s = (double)(1.0) / (b.imag + b.real * r);
            return __pyx_t_double_complex_from_parts(
                (a.real * r + a.imag) * s, (a.imag * r - a.real) * s);
        }
    }
    #else
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        if (b.imag == 0) {
            return __pyx_t_double_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else {
            double denom = b.real * b.real + b.imag * b.imag;
            return __pyx_t_double_complex_from_parts(
                (a.real * b.real + a.imag * b.imag) / denom,
                (a.imag * b.real - a.real * b.imag) / denom);
        }
    }
    #endif
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_neg_double(__pyx_t_double_complex a) {
        __pyx_t_double_complex z;
        z.real = -a.real;
        z.imag = -a.imag;
        return z;
    }
    static CYTHON_INLINE int __Pyx_c_is_zero_double(__pyx_t_double_complex a) {
       return (a.real == 0) && (a.imag == 0);
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_conj_double(__pyx_t_double_complex a) {
        __pyx_t_double_complex z;
        z.real =  a.real;
        z.imag = -a.imag;
        return z;
    }
    #if 1
        static CYTHON_INLINE double __Pyx_c_abs_double(__pyx_t_double_complex z) {
          #if !defined(HAVE_HYPOT) || defined(_MSC_VER)
            return sqrt(z.real*z.real + z.imag*z.imag);
          #else
            return hypot(z.real, z.imag);
          #endif
        }
        static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_pow_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
            __pyx_t_double_complex z;
            double r, lnr, theta, z_r, z_theta;
            if (b.imag == 0 && b.real == (int)b.real) {
                if (b.real < 0) {
                    double denom = a.real * a.real + a.imag * a.imag;
                    a.real = a.real / denom;
                    a.imag = -a.imag / denom;
                    b.real = -b.real;
                }
                switch ((int)b.real) {
                    case 0:
                        z.real = 1;
                        z.imag = 0;
                        return z;
                    case 1:
                        return a;
                    case 2:
                        return __Pyx_c_prod_double(a, a);
                    case 3:
                        z = __Pyx_c_prod_double(a, a);
                        return __Pyx_c_prod_double(z, a);
                    case 4:
                        z = __Pyx_c_prod_double(a, a);
                        return __Pyx_c_prod_double(z, z);
                }
            }
            if (a.imag == 0) {
                if (a.real == 0) {
                    return a;
                } else if ((b.imag == 0) && (a.real >= 0)) {
                    z.real = pow(a.real, b.real);
                    z.imag = 0;
                    return z;
                } else if (a.real > 0) {
                    r = a.real;
                    theta = 0;
                } else {
                    r = -a.real;
                    theta = atan2(0.0, -1.0);
                }
            } else {
                r = __Pyx_c_abs_double(a);
                theta = atan2(a.imag, a.real);
            }
            lnr = log(r);
            z_r = exp(lnr * b.real - theta * b.imag);
            z_theta = theta * b.real + lnr * b.imag;
            z.real = z_r * cos(z_theta);
            z.imag = z_r * sin(z_theta);
            return z;
        }
    #endif
#endif

/* MemviewSliceCopyTemplate */
  static __Pyx_memviewslice
__pyx_memoryview_copy_new_contig(const __Pyx_memviewslice *from_mvs,
                                 const char *mode, int ndim,
                                 size_t sizeof_dtype, int contig_flag,
                                 int dtype_is_object)
{
    __Pyx_RefNannyDeclarations
    int i;
    __Pyx_memviewslice new_mvs = { 0, 0, { 0 }, { 0 }, { 0 } };
    struct __pyx_memoryview_obj *from_memview = from_mvs->memview;
    Py_buffer *buf = &from_memview->view;
    PyObject *shape_tuple = NULL;
    PyObject *temp_int = NULL;
    struct __pyx_array_obj *array_obj = NULL;
    struct __pyx_memoryview_obj *memview_obj = NULL;
    __Pyx_RefNannySetupContext("__pyx_memoryview_copy_new_contig", 0);
    for (i = 0; i < ndim; i++) {
        if (unlikely(from_mvs->suboffsets[i] >= 0)) {
            PyErr_Format(PyExc_ValueError, "Cannot copy memoryview slice with "
                                           "indirect dimensions (axis %d)", i);
            goto fail;
        }
    }
    shape_tuple = PyTuple_New(ndim);
    if (unlikely(!shape_tuple)) {
        goto fail;
    }
    __Pyx_GOTREF(shape_tuple);
    for(i = 0; i < ndim; i++) {
        temp_int = PyInt_FromSsize_t(from_mvs->shape[i]);
        if(unlikely(!temp_int)) {
            goto fail;
        } else {
            PyTuple_SET_ITEM(shape_tuple, i, temp_int);
            temp_int = NULL;
        }
    }
    array_obj = __pyx_array_new(shape_tuple, sizeof_dtype, buf->format, (char *) mode, NULL);
    if (unlikely(!array_obj)) {
        goto fail;
    }
    __Pyx_GOTREF(array_obj);
    memview_obj = (struct __pyx_memoryview_obj *) __pyx_memoryview_new(
                                    (PyObject *) array_obj, contig_flag,
                                    dtype_is_object,
                                    from_mvs->memview->typeinfo);
    if (unlikely(!memview_obj))
        goto fail;
    if (unlikely(__Pyx_init_memviewslice(memview_obj, ndim, &new_mvs, 1) < 0))
        goto fail;
    if (unlikely(__pyx_memoryview_copy_contents(*from_mvs, new_mvs, ndim, ndim,
                                                dtype_is_object) < 0))
        goto fail;
    goto no_fail;
fail:
    __Pyx_XDECREF(new_mvs.memview);
    new_mvs.memview = NULL;
    new_mvs.data = NULL;
no_fail:
    __Pyx_XDECREF(shape_tuple);
    __Pyx_XDECREF(temp_int);
    __Pyx_XDECREF(array_obj);
    __Pyx_RefNannyFinishContext();
    return new_mvs;
}

/* CIntFromPy */
  static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int neg_one = (int) -1, const_zero = (int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* CIntToPy */
  static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int neg_one = (int) -1, const_zero = (int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
  static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
  static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* CIntFromPy */
  static CYTHON_INLINE char __Pyx_PyInt_As_char(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const char neg_one = (char) -1, const_zero = (char) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(char) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(char, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (char) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (char) 0;
                case  1: __PYX_VERIFY_RETURN_INT(char, digit, digits[0])
                case 2:
                    if (8 * sizeof(char) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) >= 2 * PyLong_SHIFT) {
                            return (char) (((((char)digits[1]) << PyLong_SHIFT) | (char)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(char) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) >= 3 * PyLong_SHIFT) {
                            return (char) (((((((char)digits[2]) << PyLong_SHIFT) | (char)digits[1]) << PyLong_SHIFT) | (char)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(char) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) >= 4 * PyLong_SHIFT) {
                            return (char) (((((((((char)digits[3]) << PyLong_SHIFT) | (char)digits[2]) << PyLong_SHIFT) | (char)digits[1]) << PyLong_SHIFT) | (char)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (char) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(char) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(char, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(char) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(char, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (char) 0;
                case -1: __PYX_VERIFY_RETURN_INT(char, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(char,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(char) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) - 1 > 2 * PyLong_SHIFT) {
                            return (char) (((char)-1)*(((((char)digits[1]) << PyLong_SHIFT) | (char)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(char) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) - 1 > 2 * PyLong_SHIFT) {
                            return (char) ((((((char)digits[1]) << PyLong_SHIFT) | (char)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(char) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) - 1 > 3 * PyLong_SHIFT) {
                            return (char) (((char)-1)*(((((((char)digits[2]) << PyLong_SHIFT) | (char)digits[1]) << PyLong_SHIFT) | (char)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(char) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) - 1 > 3 * PyLong_SHIFT) {
                            return (char) ((((((((char)digits[2]) << PyLong_SHIFT) | (char)digits[1]) << PyLong_SHIFT) | (char)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(char) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) - 1 > 4 * PyLong_SHIFT) {
                            return (char) (((char)-1)*(((((((((char)digits[3]) << PyLong_SHIFT) | (char)digits[2]) << PyLong_SHIFT) | (char)digits[1]) << PyLong_SHIFT) | (char)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(char) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) - 1 > 4 * PyLong_SHIFT) {
                            return (char) ((((((((((char)digits[3]) << PyLong_SHIFT) | (char)digits[2]) << PyLong_SHIFT) | (char)digits[1]) << PyLong_SHIFT) | (char)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(char) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(char, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(char) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(char, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            char val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (char) -1;
        }
    } else {
        char val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (char) -1;
        val = __Pyx_PyInt_As_char(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to char");
    return (char) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to char");
    return (char) -1;
}

/* CheckBinaryVersion */
  static int __Pyx_check_binary_version(void) {
    char ctversion[5];
    int same=1, i, found_dot;
    const char* rt_from_call = Py_GetVersion();
    PyOS_snprintf(ctversion, 5, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    found_dot = 0;
    for (i = 0; i < 4; i++) {
        if (!ctversion[i]) {
            same = (rt_from_call[i] < '0' || rt_from_call[i] > '9');
            break;
        }
        if (rt_from_call[i] != ctversion[i]) {
            same = 0;
            break;
        }
    }
    if (!same) {
        char rtversion[5] = {'\0'};
        char message[200];
        for (i=0; i<4; ++i) {
            if (rt_from_call[i] == '.') {
                if (found_dot) break;
                found_dot = 1;
            } else if (rt_from_call[i] < '0' || rt_from_call[i] > '9') {
                break;
            }
            rtversion[i] = rt_from_call[i];
        }
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

/* InitStrings */
  static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        if (PyObject_Hash(*t->p) == -1)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#if !CYTHON_PEP393_ENABLED
static const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    char* defenc_c;
    PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
    if (!defenc) return NULL;
    defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    {
        char* end = defenc_c + PyBytes_GET_SIZE(defenc);
        char* c;
        for (c = defenc_c; c < end; c++) {
            if ((unsigned char) (*c) >= 128) {
                PyUnicode_AsASCIIString(o);
                return NULL;
            }
        }
    }
#endif
    *length = PyBytes_GET_SIZE(defenc);
    return defenc_c;
}
#else
static CYTHON_INLINE const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    if (unlikely(__Pyx_PyUnicode_READY(o) == -1)) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    if (likely(PyUnicode_IS_ASCII(o))) {
        *length = PyUnicode_GET_LENGTH(o);
        return PyUnicode_AsUTF8(o);
    } else {
        PyUnicode_AsASCIIString(o);
        return NULL;
    }
#else
    return PyUnicode_AsUTF8AndSize(o, length);
#endif
}
#endif
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
        return __Pyx_PyUnicode_AsStringAndSize(o, length);
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject* x) {
    int retval;
    if (unlikely(!x)) return -1;
    retval = __Pyx_PyObject_IsTrue(x);
    Py_DECREF(x);
    return retval;
}
static PyObject* __Pyx_PyNumber_IntOrLongWrongResultType(PyObject* result, const char* type_name) {
#if PY_MAJOR_VERSION >= 3
    if (PyLong_Check(result)) {
        if (PyErr_WarnFormat(PyExc_DeprecationWarning, 1,
                "__int__ returned non-int (type %.200s).  "
                "The ability to return an instance of a strict subclass of int "
                "is deprecated, and may be removed in a future version of Python.",
                Py_TYPE(result)->tp_name)) {
            Py_DECREF(result);
            return NULL;
        }
        return result;
    }
#endif
    PyErr_Format(PyExc_TypeError,
                 "__%.4s__ returned non-%.4s (type %.200s)",
                 type_name, type_name, Py_TYPE(result)->tp_name);
    Py_DECREF(result);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_Check(x) || PyLong_Check(x)))
#else
  if (likely(PyLong_Check(x)))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = m->nb_int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = m->nb_long(x);
  }
  #else
  if (likely(m && m->nb_int)) {
    name = "int";
    res = m->nb_int(x);
  }
  #endif
#else
  if (!PyBytes_CheckExact(x) && !PyUnicode_CheckExact(x)) {
    res = PyNumber_Int(x);
  }
#endif
  if (likely(res)) {
#if PY_MAJOR_VERSION < 3
    if (unlikely(!PyInt_Check(res) && !PyLong_Check(res))) {
#else
    if (unlikely(!PyLong_CheckExact(res))) {
#endif
        return __Pyx_PyNumber_IntOrLongWrongResultType(res, name);
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(b);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE Py_hash_t __Pyx_PyIndex_AsHash_t(PyObject* o) {
  if (sizeof(Py_hash_t) == sizeof(Py_ssize_t)) {
    return (Py_hash_t) __Pyx_PyIndex_AsSsize_t(o);
#if PY_MAJOR_VERSION < 3
  } else if (likely(PyInt_CheckExact(o))) {
    return PyInt_AS_LONG(o);
#endif
  } else {
    Py_ssize_t ival;
    PyObject *x;
    x = PyNumber_Index(o);
    if (!x) return -1;
    ival = PyInt_AsLong(x);
    Py_DECREF(x);
    return ival;
  }
}
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b) {
  return b ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False);
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
